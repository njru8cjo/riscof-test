
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhracc.h instruction of the RISC-V RV64PZicsr extension for the pmhracc.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhracc.h)

RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs2 == rd != rs1, rs1==x9, rs2==x15, rd==x15, rs1_h0_val == -32768, rs1_h2_val == -33, rs2_h0_val == 16384, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -65, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -65, rs1_h3_val == rs2_h3_val, rs2_h1_val == 1, rs2_h2_val == -32768
// opcode: pmhracc.h ; op1:x9; op2:x15; dest:x15; op1val:0xffbfffdf00058000;  op2val:0xffbf800000014000
TEST_RR_OP(pmhracc.h, x15, x9, x15, 0x0000000000000000, 0xffbfffdf00058000, 0xffbf800000014000, x12, 0*XLEN/8, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x18, rs1_h0_val == -1, rs2_h0_val == 8192, rs1_h1_val == -2049, rs2_h2_val == 4096, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 16384, rs2_h1_val == -257, rs1_h2_val == 128, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val
// opcode: pmhracc.h ; op1:x10; op2:x10; dest:x18; op1val:0xfff60080f7ffffff;  op2val:0x40001000feff2000
TEST_RR_OP(pmhracc.h, x18, x10, x10, 0x0000000000000000, 0xfff60080f7ffffff, 0x40001000feff2000, x12, 1*XLEN/8, x14)

inst_2:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_h0_val == 0, rs1_h3_val == -9, rs2_h2_val == 64, rs2_h3_val == 16, rs2_h0_val == -17, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -1, rs1_h1_val == 128, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -2049
// opcode: pmhracc.h ; op1:x23; op2:x23; dest:x23; op1val:0xfff7ffff00800000;  op2val:0x100040f7ffffef
TEST_RR_OP(pmhracc.h, x23, x23, x23, 0x0000000000000000, 0xfff7ffff00800000, 0x100040f7ffffef, x12, 2*XLEN/8, x14)

inst_3:
// rs1 == rd != rs2, rs1==x2, rs2==x8, rd==x2, rs1_h0_val == 1, rs1_h3_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1024, rs2_h2_val == -5, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 2048, rs2_h3_val == -1025
// opcode: pmhracc.h ; op1:x2; op2:x8; dest:x2; op1val:0xfffd080000070001;  op2val:0xfbfffffb04003fff
TEST_RR_OP(pmhracc.h, x2, x2, x8, 0x0000000000000000, 0xfffd080000070001, 0xfbfffffb04003fff, x12, 3*XLEN/8, x14)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x28, rd==x21, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 128, rs2_h1_val == -3, rs2_h0_val == -1025, rs1_h2_val == rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == -5
// opcode: pmhracc.h ; op1:x6; op2:x28; dest:x21; op1val:0x060080fffb7fff;  op2val:0x050080fffdfbff
TEST_RR_OP(pmhracc.h, x21, x6, x28, 0x0000000000000000, 0x060080fffb7fff, 0x050080fffdfbff, x12, 4*XLEN/8, x14)

inst_5:
// rs1==x24, rs2==x26, rd==x8, rs1_h0_val == 2, rs1_h1_val == -1025, rs2_h2_val == 32, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 21845, rs2_h3_val == -4097, rs1_h3_val == 2, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 32767, rs2_h1_val == 8
// opcode: pmhracc.h ; op1:x24; op2:x26; dest:x8; op1val:0x025555fbff0002;  op2val:0xefff002000087fff
TEST_RR_OP(pmhracc.h, x8, x24, x26, 0x0000000000000000, 0x025555fbff0002, 0xefff002000087fff, x12, 5*XLEN/8, x14)

inst_6:
// rs1==x13, rs2==x16, rd==x19, rs1_h0_val == 4, rs2_h0_val == -5, rs1_h1_val == 21845, rs1_h3_val == -513, rs2_h3_val == -16385, rs1_h2_val == -17
// opcode: pmhracc.h ; op1:x13; op2:x16; dest:x19; op1val:0xfdffffef55550004;  op2val:0xbfff0007fff9fffb
TEST_RR_OP(pmhracc.h, x19, x13, x16, 0x0000000000000000, 0xfdffffef55550004, 0xbfff0007fff9fffb, x12, 6*XLEN/8, x14)

inst_7:
// rs1==x19, rs2==x7, rd==x5, rs1_h0_val == 8, rs1_h3_val == -33, rs2_h1_val == -5, rs2_h0_val == -129, rs2_h3_val == 8192, rs1_h2_val == 8, rs1_h1_val == 4096
// opcode: pmhracc.h ; op1:x19; op2:x7; dest:x5; op1val:0xffdf000810000008;  op2val:0x2000fffbfffbff7f
TEST_RR_OP(pmhracc.h, x5, x19, x7, 0x0000000000000000, 0xffdf000810000008, 0x2000fffbfffbff7f, x12, 7*XLEN/8, x14)

inst_8:
// rs1==x3, rs2==x5, rd==x29, rs1_h0_val == 16, rs1_h3_val == 4, rs2_h1_val == 0, rs2_h3_val == 4096, rs1_h2_val == -2049
// opcode: pmhracc.h ; op1:x3; op2:x5; dest:x29; op1val:0x04f7fffff60010;  op2val:0x100000050000fffa
TEST_RR_OP(pmhracc.h, x29, x3, x5, 0x0000000000000000, 0x04f7fffff60010, 0x100000050000fffa, x12, 8*XLEN/8, x14)

inst_9:
// rs1==x27, rs2==x9, rd==x28, rs1_h0_val == 32, rs2_h1_val == 128, rs1_h1_val == -8193, rs2_h3_val == 64, rs2_h0_val == 8
// opcode: pmhracc.h ; op1:x27; op2:x9; dest:x28; op1val:0xffdffffadfff0020;  op2val:0x40800000800008
TEST_RR_OP(pmhracc.h, x28, x27, x9, 0x0000000000000000, 0xffdffffadfff0020, 0x40800000800008, x12, 9*XLEN/8, x14)

inst_10:
// rs1==x22, rs2==x1, rd==x7, rs1_h0_val == 64, rs1_h2_val == -8193, rs1_h3_val == -17, rs2_h3_val == 1
// opcode: pmhracc.h ; op1:x22; op2:x1; dest:x7; op1val:0xffefdffffbff0040;  op2val:0x01fffc00052000
TEST_RR_OP(pmhracc.h, x7, x22, x1, 0x0000000000000000, 0xffefdffffbff0040, 0x01fffc00052000, x12, 10*XLEN/8, x14)

inst_11:
// rs1==x29, rs2==x20, rd==x9, rs1_h0_val == 128, rs1_h3_val == -32768, rs1_h2_val == 1, rs1_h1_val == -33, rs2_h2_val == -513
// opcode: pmhracc.h ; op1:x29; op2:x20; dest:x9; op1val:0x80000001ffdf0080;  op2val:0x3ffffdfffff8fbff
TEST_RR_OP(pmhracc.h, x9, x29, x20, 0x0000000000000000, 0x80000001ffdf0080, 0x3ffffdfffff8fbff, x12, 11*XLEN/8, x14)

inst_12:
// rs1==x16, rs2==x19, rd==x11, rs1_h0_val == 256, rs2_h3_val == 4, rs1_h2_val == -4097, rs1_h1_val == 2048, rs1_h3_val == 512, rs2_h2_val == 21845
// opcode: pmhracc.h ; op1:x16; op2:x19; dest:x11; op1val:0x200efff08000100;  op2val:0x0455550003fff8
TEST_RR_OP(pmhracc.h, x11, x16, x19, 0x0000000000000000, 0x200efff08000100, 0x0455550003fff8, x12, 12*XLEN/8, x14)

inst_13:
// rs1==x21, rs2==x29, rd==x6, rs1_h0_val == 512, rs1_h1_val == -9, rs2_h0_val == -21846, rs2_h1_val == 16384, rs2_h2_val == -21846
// opcode: pmhracc.h ; op1:x21; op2:x29; dest:x6; op1val:0xc000fff8fff70200;  op2val:0x4000aaaa4000aaaa
TEST_RR_OP(pmhracc.h, x6, x21, x29, 0x0000000000000000, 0xc000fff8fff70200, 0x4000aaaa4000aaaa, x12, 13*XLEN/8, x14)

inst_14:
// rs1==x17, rs2==x4, rd==x25, rs1_h0_val == 1024, rs1_h3_val == -5, rs1_h2_val == 0, rs2_h0_val == -2049, rs2_h1_val == -16385, rs2_h3_val == 21845
// opcode: pmhracc.h ; op1:x17; op2:x4; dest:x25; op1val:0xfffb0000fff60400;  op2val:0x55553fffbffff7ff
TEST_RR_OP(pmhracc.h, x25, x17, x4, 0x0000000000000000, 0xfffb0000fff60400, 0x55553fffbffff7ff, x12, 14*XLEN/8, x14)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_15:
// rs1==x5, rs2==x14, rd==x10, rs1_h0_val == 2048, rs1_h2_val == -32768, rs2_h0_val == -4097, rs2_h1_val == 32767, rs1_h1_val == 1
// opcode: pmhracc.h ; op1:x5; op2:x14; dest:x10; op1val:0x09800000010800;  op2val:0xfff900407fffefff
TEST_RR_OP(pmhracc.h, x10, x5, x14, 0x0000000000000000, 0x09800000010800, 0xfff900407fffefff, x8, 0*XLEN/8, x9)

inst_16:
// rs1==x1, rs2==x18, rd==x16, rs1_h0_val == 4096, rs1_h1_val == -4097, rs2_h1_val == 2048, rs1_h2_val == 32, rs2_h3_val == -9, rs2_h0_val == 2048
// opcode: pmhracc.h ; op1:x1; op2:x18; dest:x16; op1val:0x2000020efff1000;  op2val:0xfff7fffc08000800
TEST_RR_OP(pmhracc.h, x16, x1, x18, 0x0000000000000000, 0x2000020efff1000, 0xfff7fffc08000800, x8, 1*XLEN/8, x9)

inst_17:
// rs1==x12, rs2==x30, rd==x31, rs1_h0_val == 8192, rs1_h2_val == -2, rs2_h0_val == -2, rs2_h1_val == 64, rs2_h3_val == 128
// opcode: pmhracc.h ; op1:x12; op2:x30; dest:x31; op1val:0xfff9fffe00072000;  op2val:0x8055550040fffe
TEST_RR_OP(pmhracc.h, x31, x12, x30, 0x0000000000000000, 0xfff9fffe00072000, 0x8055550040fffe, x8, 2*XLEN/8, x9)

inst_18:
// rs1==x26, rs2==x11, rd==x12, rs1_h0_val == 16384, rs2_h0_val == -3, rs1_h3_val == 64, rs2_h2_val == -2049
// opcode: pmhracc.h ; op1:x26; op2:x11; dest:x12; op1val:0x40080010004000;  op2val:0xfffaf7ff0008fffd
TEST_RR_OP(pmhracc.h, x12, x26, x11, 0x0000000000000000, 0x40080010004000, 0xfffaf7ff0008fffd, x8, 3*XLEN/8, x9)

inst_19:
// rs1==x4, rs2==x12, rd==x3, rs1_h0_val == -2, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 2048, rs2_h3_val == -129, rs1_h1_val == -2, rs1_h3_val == 1024
// opcode: pmhracc.h ; op1:x4; op2:x12; dest:x3; op1val:0x4000000fffefffe;  op2val:0xff7f08000800fff8
TEST_RR_OP(pmhracc.h, x3, x4, x12, 0x0000000000000000, 0x4000000fffefffe, 0xff7f08000800fff8, x8, 4*XLEN/8, x9)

inst_20:
// rs1==x7, rs2==x6, rd==x30, rs1_h0_val == -3, rs1_h2_val == -16385, rs1_h1_val == 4, rs2_h2_val == -16385
// opcode: pmhracc.h ; op1:x7; op2:x6; dest:x30; op1val:0xfffdbfff0004fffd;  op2val:0xfbffbffffff6aaaa
TEST_RR_OP(pmhracc.h, x30, x7, x6, 0x0000000000000000, 0xfffdbfff0004fffd, 0xfbffbffffff6aaaa, x8, 5*XLEN/8, x9)

inst_21:
// rs1==x15, rs2==x22, rd==x17, rs1_h0_val == -5, rs1_h3_val == -129, rs2_h2_val == 16384, rs2_h0_val == -257, rs1_h2_val == 64, rs2_h1_val == -4097
// opcode: pmhracc.h ; op1:x15; op2:x22; dest:x17; op1val:0xff7f00400006fffb;  op2val:0x034000effffeff
TEST_RR_OP(pmhracc.h, x17, x15, x22, 0x0000000000000000, 0xff7f00400006fffb, 0x034000effffeff, x8, 6*XLEN/8, x9)

inst_22:
// rs1==x28, rs2==x13, rd==x20, rs1_h0_val == -9, rs2_h2_val == 1024
// opcode: pmhracc.h ; op1:x28; op2:x13; dest:x20; op1val:0xfffa00400800fff7;  op2val:0xfff904007ffffff6
TEST_RR_OP(pmhracc.h, x20, x28, x13, 0x0000000000000000, 0xfffa00400800fff7, 0xfff904007ffffff6, x8, 7*XLEN/8, x9)

inst_23:
// rs1==x14, rs2==x25, rd==x13, rs1_h0_val == -17, rs2_h3_val == 32767, rs2_h2_val == 4
// opcode: pmhracc.h ; op1:x14; op2:x25; dest:x13; op1val:0x06fff9fffbffef;  op2val:0x7fff0004c0000800
TEST_RR_OP(pmhracc.h, x13, x14, x25, 0x0000000000000000, 0x06fff9fffbffef, 0x7fff0004c0000800, x8, 8*XLEN/8, x9)

inst_24:
// rs1==x11, rs2==x31, rd==x27, rs1_h0_val == -33, rs2_h1_val == 256, rs1_h3_val == -1025, rs2_h0_val == -1, rs2_h3_val == -257
// opcode: pmhracc.h ; op1:x11; op2:x31; dest:x27; op1val:0xfbffdffffff7ffdf;  op2val:0xfeff00090100ffff
TEST_RR_OP(pmhracc.h, x27, x11, x31, 0x0000000000000000, 0xfbffdffffff7ffdf, 0xfeff00090100ffff, x8, 9*XLEN/8, x9)

inst_25:
// rs1==x18, rs2==x24, rd==x22, rs1_h0_val == -65, rs1_h1_val == -21846, rs2_h3_val == 1024, rs2_h1_val == -17, rs1_h3_val == 2048, rs2_h2_val == 32767
// opcode: pmhracc.h ; op1:x18; op2:x24; dest:x22; op1val:0x800ffdfaaaaffbf;  op2val:0x4007fffffefff7f
TEST_RR_OP(pmhracc.h, x22, x18, x24, 0x0000000000000000, 0x800ffdfaaaaffbf, 0x4007fffffefff7f, x8, 10*XLEN/8, x9)

inst_26:
// rs1==x0, rs2==x2, rd==x26, rs1_h0_val == -129, rs1_h2_val == -513, rs2_h1_val == -2, rs2_h3_val == 256, rs1_h3_val == 32767, rs2_h0_val == 128
// opcode: pmhracc.h ; op1:x0; op2:x2; dest:x26; op1val:0x7ffffdff0006ff7f;  op2val:0x1008000fffe0080
TEST_RR_OP(pmhracc.h, x26, x0, x2, 0x0000000000000000, 0x7ffffdff0006ff7f, 0x1008000fffe0080, x8, 11*XLEN/8, x9)

inst_27:
// rs1==x25, rs2==x0, rd==x14, rs1_h0_val == -257, rs1_h3_val == -8193, rs2_h1_val == -129, rs1_h1_val == 64
// opcode: pmhracc.h ; op1:x25; op2:x0; dest:x14; op1val:0xdfff00050040feff;  op2val:0xffbffff6ff7fc000
TEST_RR_OP(pmhracc.h, x14, x25, x0, 0x0000000000000000, 0xdfff00050040feff, 0xffbffff6ff7fc000, x8, 12*XLEN/8, x2)

inst_28:
// rs1==x30, rs2==x17, rd==x4, rs1_h0_val == -513, rs1_h2_val == -129, rs2_h1_val == 8192, rs2_h2_val == -33, rs2_h0_val == 2, rs1_h1_val == -65
// opcode: pmhracc.h ; op1:x30; op2:x17; dest:x4; op1val:0x02ff7fffbffdff;  op2val:0xc000ffdf20000002
TEST_RR_OP(pmhracc.h, x4, x30, x17, 0x0000000000000000, 0x02ff7fffbffdff, 0xc000ffdf20000002, x8, 13*XLEN/8, x2)

inst_29:
// rs1==x20, rs2==x21, rd==x1, rs1_h0_val == -1025, rs2_h0_val == -65, rs1_h3_val == 4096
// opcode: pmhracc.h ; op1:x20; op2:x21; dest:x1; op1val:0x1000fffa5555fbff;  op2val:0xffbffffc0100ffbf
TEST_RR_OP(pmhracc.h, x1, x20, x21, 0x0000000000000000, 0x1000fffa5555fbff, 0xffbffffc0100ffbf, x8, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x8, rs2==x3, rd==x0, rs1_h0_val == -2049, rs1_h1_val == 32767, rs2_h1_val == 4096, rs1_h3_val == 16
// opcode: pmhracc.h ; op1:x8; op2:x3; dest:x0; op1val:0x10bfff7ffff7ff;  op2val:0x2000080010000002
TEST_RR_OP(pmhracc.h, x0, x8, x3, 0x0000000000000000, 0x10bfff7ffff7ff, 0x2000080010000002, x1, 0*XLEN/8, x2)

inst_31:
// rs1==x31, rs2==x27, rd==x24, rs1_h0_val == -4097, rs2_h3_val == 2048, rs2_h1_val == 16, rs1_h3_val == 1
// opcode: pmhracc.h ; op1:x31; op2:x27; dest:x24; op1val:0x01ffdffff6efff;  op2val:0x80000800010fffa
TEST_RR_OP(pmhracc.h, x24, x31, x27, 0x0000000000000000, 0x01ffdffff6efff, 0x80000800010fffa, x1, 1*XLEN/8, x2)

inst_32:
// rs2_h3_val == 2, rs1_h1_val == -17, rs2_h2_val == -4097
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff9ffeff7ff;  op2val:0x02efff0003ffbf
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffbfff9ffeff7ff, 0x02efff0003ffbf, x1, 2*XLEN/8, x2)

inst_33:
// rs2_h3_val == 8, rs1_h3_val == -2049, rs2_h1_val == -1, rs2_h2_val == 8
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff0003feff;  op2val:0x080008ffff0800
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xf7ffffff0003feff, 0x080008ffff0800, x1, 3*XLEN/8, x2)

inst_34:
// rs2_h3_val == 32, rs2_h2_val == 512, rs1_h2_val == 2
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x0500020005feff;  op2val:0x2002007fff0006
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x0500020005feff, 0x2002007fff0006, x1, 4*XLEN/8, x2)

inst_35:
// rs2_h3_val == 512, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffef7fff0080;  op2val:0x2000007f7ff0003
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x06ffef7fff0080, 0x2000007f7ff0003, x1, 5*XLEN/8, x2)

inst_36:
// rs2_h3_val == -2, rs1_h2_val == 16, rs1_h1_val == -129, rs2_h0_val == 4096
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000010ff7fefff;  op2val:0xfffe0004feff1000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x4000010ff7fefff, 0xfffe0004feff1000, x1, 6*XLEN/8, x2)

inst_37:
// rs2_h3_val == -3, rs2_h1_val == -9, rs2_h2_val == 1, rs1_h0_val == rs2_h0_val
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffefdffffffb;  op2val:0xfffd0001fff7fffb
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x8000ffefdffffffb, 0xfffd0001fff7fffb, x1, 7*XLEN/8, x2)

inst_38:
// rs2_h3_val == -5, rs2_h2_val == -9
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffef0040;  op2val:0xfffbfff70001feff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x010000ffef0040, 0xfffbfff70001feff, x1, 8*XLEN/8, x2)

inst_39:
// rs2_h3_val == -17, rs2_h2_val == -2, rs1_h1_val == 16384, rs1_h3_val == -2
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00034000efff;  op2val:0xffeffffeff7ffff8
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffe00034000efff, 0xffeffffeff7ffff8, x1, 9*XLEN/8, x2)

inst_40:
// rs2_h3_val == -33, rs1_h1_val == 32, rs2_h0_val == 1024
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef000200200007;  op2val:0xffdff7ffffff0400
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffef000200200007, 0xffdff7ffffff0400, x1, 10*XLEN/8, x2)

inst_41:
// rs2_h3_val == -513, rs2_h0_val == 16, rs1_h3_val == -21846
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00060080fdff;  op2val:0xfdffefff00060010
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xaaaa00060080fdff, 0xfdffefff00060010, x1, 11*XLEN/8, x2)

inst_42:
// rs2_h3_val == -2049, rs2_h0_val == -9, rs1_h3_val == 0
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x008000fff6fffc;  op2val:0xf7ff3ffffffdfff7
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x008000fff6fffc, 0xf7ff3ffffffdfff7, x1, 12*XLEN/8, x2)

inst_43:
// rs2_h3_val == -8193, rs1_h1_val == -3, rs2_h2_val == -8193, rs2_h0_val == -513
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x800c000fffd0007;  op2val:0xdfffdffffffcfdff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x800c000fffd0007, 0xdfffdffffffcfdff, x1, 13*XLEN/8, x2)

inst_44:
// rs2_h3_val == -21846, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffcc000fff9;  op2val:0xaaaafdfffffafff9
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xc000fffcc000fff9, 0xaaaafdfffffafff9, x1, 14*XLEN/8, x2)

inst_45:
// rs1_h0_val == -8193, rs2_h0_val == -32768
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7ff7fffdfff;  op2val:0x04bfffefff8000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffeff7ff7fffdfff, 0x04bfffefff8000, x1, 15*XLEN/8, x2)

inst_46:
// rs1_h0_val == -16385, rs2_h2_val == 16, rs2_h0_val == 512
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00020003bfff;  op2val:0xc0000010c0000200
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffbf00020003bfff, 0xc0000010c0000200, x1, 16*XLEN/8, x2)

inst_47:
// rs1_h0_val == 21845, rs2_h2_val == 2, rs1_h1_val == -16385
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0001bfff5555;  op2val:0x8000002ffefff7f
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffe0001bfff5555, 0x8000002ffefff7f, x1, 17*XLEN/8, x2)

inst_48:
// rs1_h0_val == -21846, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x06fff9fffeaaaa;  op2val:0xfffb00077fff3fff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x06fff9fffeaaaa, 0xfffb00077fff3fff, x1, 18*XLEN/8, x2)

inst_49:
// rs1_h1_val == -32768, rs2_h2_val == -17
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdff8000fff9;  op2val:0xfffaffeffff78000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffbffdff8000fff9, 0xfffaffeffff78000, x1, 19*XLEN/8, x2)

inst_50:
// rs1_h1_val == -1, rs1_h3_val == -257
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0040fffffffc;  op2val:0xf7ff3fff0100fff9
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfeff0040fffffffc, 0xf7ff3fff0100fff9, x1, 20*XLEN/8, x2)

inst_51:
// rs1_h1_val == 0, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf00000009;  op2val:0xffef004000057fff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xf7ffffdf00000009, 0xffef004000057fff, x1, 21*XLEN/8, x2)

inst_52:
// rs1_h1_val == 2, rs1_h3_val == 21845
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555fdff00020008;  op2val:0xdfff0005fffffffb
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x5555fdff00020008, 0xdfff0005fffffffb, x1, 22*XLEN/8, x2)

inst_53:
// rs1_h1_val == rs2_h1_val, rs1_h1_val == 16
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe001000107fff;  op2val:0xf7ffffef0010fff6
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffe001000107fff, 0xf7ffffef0010fff6, x1, 23*XLEN/8, x2)

inst_54:
// rs1_h1_val == 8, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfc0000008bfff;  op2val:0xfffafffefffcfffb
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffdfc0000008bfff, 0xfffafffefffcfffb, x1, 24*XLEN/8, x2)

inst_55:
// rs1_h1_val == 256, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000000801000010;  op2val:0x0100044000fff6
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x1000000801000010, 0x0100044000fff6, x1, 25*XLEN/8, x2)

inst_56:
// rs1_h3_val == -4097, rs2_h2_val == -257
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0008fffd0080;  op2val:0x1000feff00400080
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xefff0008fffd0080, 0x1000feff00400080, x1, 26*XLEN/8, x2)

inst_57:
// rs1_h3_val == -16385, rs2_h1_val == 21845
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff008000400100;  op2val:0x2000f7ff5555fffb
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xbfff008000400100, 0x2000f7ff5555fffb, x1, 27*XLEN/8, x2)

inst_58:
// rs2_h0_val == 0, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffff10000200;  op2val:0xdffffffabfff0000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xaaaaffff10000200, 0xdffffffabfff0000, x1, 28*XLEN/8, x2)

inst_59:
// rs2_h0_val == 1, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020aaaa0009;  op2val:0xfffafffc20000001
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xefff0020aaaa0009, 0xfffafffc20000001, x1, 29*XLEN/8, x2)

inst_60:
// rs2_h0_val == 4, rs1_h2_val == 8192
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x2002000fffe0007;  op2val:0x103ffffffa0004
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x2002000fffe0007, 0x103ffffffa0004, x1, 30*XLEN/8, x2)

inst_61:
// rs2_h0_val == 32, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffcfff80009;  op2val:0x02002055550020
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffeffffcfff80009, 0x02002055550020, x1, 31*XLEN/8, x2)

inst_62:
// rs2_h0_val == 64, rs2_h2_val == -129, rs1_h2_val == 1024
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc040008000200;  op2val:0x02ff7f00800040
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffc040008000200, 0x02ff7f00800040, x1, 32*XLEN/8, x2)

inst_63:
// rs2_h0_val == 256, rs2_h3_val == 0
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f001055550000;  op2val:0x000040ff7f0100
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xff7f001055550000, 0x000040ff7f0100, x1, 33*XLEN/8, x2)

inst_64:
// rs2_h0_val == -33, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00080100f7ff;  op2val:0x095555fffcffdf
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfdff00080100f7ff, 0x095555fffcffdf, x1, 34*XLEN/8, x2)

inst_65:
// rs2_h0_val == -8193, rs1_h2_val == 32767
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff00028000;  op2val:0xfff800100010dfff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfff77fff00028000, 0xfff800100010dfff, x1, 35*XLEN/8, x2)

inst_66:
// rs1_h1_val == 512, rs2_h3_val == -32768
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00070200aaaa;  op2val:0x800010004000ffff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x7fff00070200aaaa, 0x800010004000ffff, x1, 36*XLEN/8, x2)

inst_67:
// rs2_h0_val == -16385, rs1_h2_val == -21846, rs2_h1_val == -65
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffaaaadfff0006;  op2val:0xfff9ffdfffbfbfff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x3fffaaaadfff0006, 0xfff9ffdfffbfbfff, x1, 37*XLEN/8, x2)

inst_68:
// rs1_h1_val == 1024, rs2_h1_val == 4
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x200080004000040;  op2val:0x3fff000100040004
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x200080004000040, 0x3fff000100040004, x1, 38*XLEN/8, x2)

inst_69:
// rs2_h0_val == 21845, rs1_h3_val == 8192
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff6fffbefff;  op2val:0x8000efff55555555
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x2000fff6fffbefff, 0x8000efff55555555, x1, 39*XLEN/8, x2)

inst_70:
// rs2_h1_val == -32768, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x077fff00030007;  op2val:0x08f7ff80000005
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x077fff00030007, 0x08f7ff80000005, x1, 40*XLEN/8, x2)

inst_71:
// rs1_h1_val == 8192, rs2_h2_val == -1
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x800000012000fff7;  op2val:0xfff8fffffffe0006
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x800000012000fff7, 0xfff8fffffffe0006, x1, 41*XLEN/8, x2)

inst_72:
// rs2_h1_val == 2, rs1_h3_val == 128, rs1_h1_val == -257
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x80fffafefffdff;  op2val:0xfffefffb0002aaaa
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x80fffafefffdff, 0xfffefffb0002aaaa, x1, 42*XLEN/8, x2)

inst_73:
// rs2_h1_val == 32, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7fff3fff0004;  op2val:0x10efff0020fffd
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffd7fff3fff0004, 0x10efff0020fffd, x1, 43*XLEN/8, x2)

inst_74:
// rs1_h1_val == -513, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbffffdff0008;  op2val:0x09fffe0400fff6
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x7fffbffffdff0008, 0x09fffe0400fff6, x1, 44*XLEN/8, x2)

inst_75:
// rs2_h1_val == 512, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x200fff608000003;  op2val:0x04f7ff0200fff7
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x200fff608000003, 0x04f7ff0200fff7, x1, 45*XLEN/8, x2)

inst_76:
// rs2_h1_val == -33, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf04000007ffef;  op2val:0x073fffffdfffff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffdf04000007ffef, 0x073fffffdfffff, x1, 46*XLEN/8, x2)

inst_77:
// rs1_h2_val == 4, rs2_h1_val == -8193
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00040010efff;  op2val:0xff7f0008dfff0009
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfeff00040010efff, 0xff7f0008dfff0009, x1, 47*XLEN/8, x2)

inst_78:
// rs2_h1_val == -513, rs2_h2_val == -65
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x070007fff81000;  op2val:0xbfffffbffdff0004
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x070007fff81000, 0xbfffffbffdff0004, x1, 48*XLEN/8, x2)

inst_79:
// rs2_h1_val == -1025, rs1_h2_val == -3
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffdf7fffffb;  op2val:0xfff8c000fbff3fff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffbfffdf7fffffb, 0xfff8c000fbff3fff, x1, 49*XLEN/8, x2)

inst_80:
// rs1_h2_val == 256, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff90100bfff3fff;  op2val:0x10fff7fff7c000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfff90100bfff3fff, 0x10fff7fff7c000, x1, 50*XLEN/8, x2)

inst_81:
// rs1_h2_val == 512, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x090200ff7f0002;  op2val:0xfffcc0000010aaaa
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x090200ff7f0002, 0xfffcc0000010aaaa, x1, 51*XLEN/8, x2)

inst_82:
// rs2_h1_val == -21846, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x05020000100400;  op2val:0x08bfffaaaa5555
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x05020000100400, 0x08bfffaaaa5555, x1, 52*XLEN/8, x2)

inst_83:
// rs1_h2_val == 4096, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff10005555ffef;  op2val:0xffeffffeff7f0001
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xdfff10005555ffef, 0xffeffffeff7f0001, x1, 53*XLEN/8, x2)

inst_84:
// rs1_h2_val == 16384, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x800040004000bfff;  op2val:0x01c0000040fdff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x800040004000bfff, 0x01c0000040fdff, x1, 54*XLEN/8, x2)

inst_85:
// rs2_h2_val == 0, rs1_h3_val == 256
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000020aaaa0009;  op2val:0x8000000fffeffef
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x1000020aaaa0009, 0x8000000fffeffef, x1, 55*XLEN/8, x2)

inst_86:
// rs1_h2_val == -65, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbfff7f0400;  op2val:0x02fffc8000ffff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x01ffbfff7f0400, 0x02fffc8000ffff, x1, 56*XLEN/8, x2)

inst_87:
// rs1_h2_val == -257, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfefffffbffff;  op2val:0x55550009ff7f0001
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffcfefffffbffff, 0x55550009ff7f0001, x1, 57*XLEN/8, x2)

inst_88:
// rs2_h2_val == 256, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000800003fffa;  op2val:0x4000100fffafff6
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x10000800003fffa, 0x4000100fffafff6, x1, 58*XLEN/8, x2)

inst_89:
// rs1_h2_val == -1025, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffbff0010fdff;  op2val:0xf7ffffbf3ffffdff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfdfffbff0010fdff, 0xf7ffffbf3ffffdff, x1, 59*XLEN/8, x2)

inst_90:
// rs2_h2_val == 8192, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf002000400007;  op2val:0xffbf2000fffafffe
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffdf002000400007, 0xffbf2000fffafffe, x1, 60*XLEN/8, x2)

inst_91:
// rs2_h2_val == -3, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x09100000400008;  op2val:0x03fffdffef0000
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x09100000400008, 0x03fffdffef0000, x1, 61*XLEN/8, x2)

inst_92:
// rs1_h3_val == -1, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff01000003fffa;  op2val:0x043fff00000200
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xffff01000003fffa, 0x043fff00000200, x1, 62*XLEN/8, x2)

inst_93:
// rs1_h3_val == 8, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x080008f7ff0800;  op2val:0xfffefffe00057fff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x080008f7ff0800, 0xfffefffe00057fff, x1, 63*XLEN/8, x2)

inst_94:
// rs1_h3_val == 32, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000060008c000;  op2val:0x071000fff75555
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x2000060008c000, 0x071000fff75555, x1, 64*XLEN/8, x2)

inst_95:
// rs1_h2_val == -5, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffbffdffffb;  op2val:0x8000400ffbfff7f
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfff7fffbffdffffb, 0x8000400ffbfff7f, x1, 65*XLEN/8, x2)

inst_96:
// rs2_h3_val == -1, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff6fbfffbff;  op2val:0xffff000210005555
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xfffbfff6fbfffbff, 0xffff000210005555, x1, 66*XLEN/8, x2)

inst_97:
// rs1_h2_val == -9, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff7ffdf0400;  op2val:0x0100060800ffbf
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x3ffffff7ffdf0400, 0x0100060800ffbf, x1, 67*XLEN/8, x2)

inst_98:
// rs2_h2_val == -1025, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00807ffffdff;  op2val:0xfdfffbffaaaa7fff
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0xff7f00807ffffdff, 0xfdfffbffaaaa7fff, x1, 68*XLEN/8, x2)

inst_99:
// rs1_h3_val == 16384, 
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x40004000fff88000;  op2val:0xfbfffffd00000100
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x40004000fff88000, 0xfbfffffd00000100, x1, 69*XLEN/8, x2)

inst_100:
// rs1_h0_val == -129, rs1_h2_val == -513, rs2_h1_val == -2, rs2_h3_val == 256, rs1_h3_val == 32767, rs2_h0_val == 128
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffdff0006ff7f;  op2val:0x1008000fffe0080
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x7ffffdff0006ff7f, 0x1008000fffe0080, x1, 70*XLEN/8, x2)

inst_101:
// rs1_h0_val == -2049, rs1_h1_val == 32767, rs2_h1_val == 4096, rs1_h3_val == 16
// opcode: pmhracc.h ; op1:x30; op2:x29; dest:x31; op1val:0x10bfff7ffff7ff;  op2val:0x2000080010000002
TEST_RR_OP(pmhracc.h, x31, x30, x29, 0x0000000000000000, 0x10bfff7ffff7ff, 0x2000080010000002, x1, 71*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x12_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x12_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x8_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 72*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
