
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 06:49:26 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p15.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pm4addu.h instruction of the RISC-V RV64PZicsr extension for the pm4addu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pm4addu.h)

RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == 1, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -1025, rs2_h3_val == -65, rs1_h3_val == 128, rs1_h2_val == 8192, rs1_h3_val != rs2_h3_val, rs2_h1_val == 128
// opcode: pm4addu.h ; op1:x27; op2:x27; dest:x27; op1val:0x8020003fff8000;  op2val:0xffbffbff00800001
TEST_RR_OP(pm4addu.h, x27, x27, x27, 0x0000000000000000, 0x8020003fff8000, 0xffbffbff00800001, x6, 0*XLEN/8, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x23, rd==x26, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -129, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -33, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h2_val == 64, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == -21846, rs2_h3_val == 21845
// opcode: pm4addu.h ; op1:x18; op2:x23; dest:x26; op1val:0xff7f00400100ffff;  op2val:0x55550005aaaaffdf
TEST_RR_OP(pm4addu.h, x26, x18, x23, 0x0000000000000000, 0xff7f00400100ffff, 0x55550005aaaaffdf, x6, 1*XLEN/8, x10)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x8, rd==x9, rs1_h0_val == 0, rs2_h2_val == 512, rs1_h3_val == -21846, rs1_h2_val == rs2_h2_val, rs1_h1_val == 512, rs1_h2_val == 512, rs2_h1_val == 16
// opcode: pm4addu.h ; op1:x9; op2:x8; dest:x9; op1val:0xaaaa020002000000;  op2val:0x05020000103fff
TEST_RR_OP(pm4addu.h, x9, x9, x8, 0x0000000000000000, 0xaaaa020002000000, 0x05020000103fff, x6, 2*XLEN/8, x10)

inst_3:
// rs2 == rd != rs1, rs1==x22, rs2==x2, rd==x2, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -4097, rs1_h1_val == 2, rs2_h0_val == -16385, rs2_h3_val == -5, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == 0
// opcode: pm4addu.h ; op1:x22; op2:x2; dest:x2; op1val:0xff7fefff00020001;  op2val:0xfffb00000005bfff
TEST_RR_OP(pm4addu.h, x2, x22, x2, 0x0000000000000000, 0xff7fefff00020001, 0xfffb00000005bfff, x6, 3*XLEN/8, x10)

inst_4:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x22, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -65, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == -3, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == -3, rs2_h0_val == 128
// opcode: pm4addu.h ; op1:x30; op2:x30; dest:x22; op1val:0xff7fffbffffd7fff;  op2val:0x09fffdfffc0080
TEST_RR_OP(pm4addu.h, x22, x30, x30, 0x0000000000000000, 0xff7fffbffffd7fff, 0x09fffdfffc0080, x6, 4*XLEN/8, x10)

inst_5:
// rs1==x23, rs2==x28, rd==x15, rs1_h0_val == 2, rs1_h3_val == -5, rs2_h1_val == 1024, rs1_h1_val == -1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 128, rs2_h2_val == -513, rs2_h3_val == 0
// opcode: pm4addu.h ; op1:x23; op2:x28; dest:x15; op1val:0xfffb0080ffff0002;  op2val:0x00fdff04000009
TEST_RR_OP(pm4addu.h, x15, x23, x28, 0x0000000000000000, 0xfffb0080ffff0002, 0x00fdff04000009, x6, 5*XLEN/8, x10)

inst_6:
// rs1==x19, rs2==x0, rd==x1, rs1_h0_val == 4, rs1_h2_val == -257, rs2_h3_val == 128, rs1_h1_val == -33, rs2_h2_val == -9, rs2_h0_val == -1, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 21845, rs1_h3_val == 4096
// opcode: pm4addu.h ; op1:x19; op2:x0; dest:x1; op1val:0x1000feffffdf0004;  op2val:0x80fff75555ffff
TEST_RR_OP(pm4addu.h, x1, x19, x0, 0x0000000000000000, 0x1000feffffdf0004, 0x80fff75555ffff, x6, 6*XLEN/8, x10)

inst_7:
// rs1==x4, rs2==x26, rd==x5, rs1_h0_val == 8, rs2_h1_val == 4096, rs1_h3_val == -513, rs1_h2_val == -16385, rs2_h0_val == -65, rs2_h2_val == 8192, rs2_h3_val == 8192, rs1_h2_val < 0 and rs2_h2_val > 0
// opcode: pm4addu.h ; op1:x4; op2:x26; dest:x5; op1val:0xfdffbfff00020008;  op2val:0x200020001000ffbf
TEST_RR_OP(pm4addu.h, x5, x4, x26, 0x0000000000000000, 0xfdffbfff00020008, 0x200020001000ffbf, x6, 7*XLEN/8, x10)

inst_8:
// rs1==x13, rs2==x12, rd==x20, rs1_h0_val == 16, rs2_h3_val == 32767, rs1_h1_val == 32767, rs1_h2_val == 21845, rs2_h1_val == -129, rs1_h3_val == 256
// opcode: pm4addu.h ; op1:x13; op2:x12; dest:x20; op1val:0x10055557fff0010;  op2val:0x7fff0200ff7f0001
TEST_RR_OP(pm4addu.h, x20, x13, x12, 0x0000000000000000, 0x10055557fff0010, 0x7fff0200ff7f0001, x6, 8*XLEN/8, x10)

inst_9:
// rs1==x28, rs2==x9, rd==x3, rs1_h0_val == 32, rs2_h2_val == -21846, rs2_h3_val == -16385, rs1_h3_val == -257
// opcode: pm4addu.h ; op1:x28; op2:x9; dest:x3; op1val:0xfefffffcc0000020;  op2val:0xbfffaaaafff90006
TEST_RR_OP(pm4addu.h, x3, x28, x9, 0x0000000000000000, 0xfefffffcc0000020, 0xbfffaaaafff90006, x6, 9*XLEN/8, x10)

inst_10:
// rs1==x20, rs2==x13, rd==x17, rs1_h0_val == 64, rs2_h1_val == 4, rs2_h3_val == 4, rs1_h1_val == -21846
// opcode: pm4addu.h ; op1:x20; op2:x13; dest:x17; op1val:0xfff9fffaaaaa0040;  op2val:0x04000900040003
TEST_RR_OP(pm4addu.h, x17, x20, x13, 0x0000000000000000, 0xfff9fffaaaaa0040, 0x04000900040003, x6, 10*XLEN/8, x10)

inst_11:
// rs1==x26, rs2==x4, rd==x7, rs1_h0_val == 128, rs1_h2_val == -2049, rs2_h0_val == -257, rs1_h3_val == 2, rs2_h2_val == -1, rs2_h1_val == 8
// opcode: pm4addu.h ; op1:x26; op2:x4; dest:x7; op1val:0x02f7fffff80080;  op2val:0x00ffff0008feff
TEST_RR_OP(pm4addu.h, x7, x26, x4, 0x0000000000000000, 0x02f7fffff80080, 0x00ffff0008feff, x6, 11*XLEN/8, x10)

inst_12:
// rs1==x25, rs2==x5, rd==x21, rs1_h0_val == 256, rs2_h2_val == 32, rs2_h0_val == -4097, rs2_h1_val == -2049, rs1_h2_val == 1024, rs2_h3_val == -2049
// opcode: pm4addu.h ; op1:x25; op2:x5; dest:x21; op1val:0xfffb0400fffd0100;  op2val:0xf7ff0020f7ffefff
TEST_RR_OP(pm4addu.h, x21, x25, x5, 0x0000000000000000, 0xfffb0400fffd0100, 0xf7ff0020f7ffefff, x6, 12*XLEN/8, x10)

inst_13:
// rs1==x24, rs2==x31, rd==x11, rs1_h0_val == 512, rs2_h1_val == -3, rs1_h3_val == rs2_h3_val, rs2_h2_val == -257, rs1_h3_val == 21845
// opcode: pm4addu.h ; op1:x24; op2:x31; dest:x11; op1val:0x5555fff9ffff0200;  op2val:0x5555fefffffd0003
TEST_RR_OP(pm4addu.h, x11, x24, x31, 0x0000000000000000, 0x5555fff9ffff0200, 0x5555fefffffd0003, x6, 13*XLEN/8, x10)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x11, rs2==x29, rd==x25, rs1_h0_val == 1024, rs2_h1_val == 256, rs2_h3_val == 2, rs1_h1_val == 4096
// opcode: pm4addu.h ; op1:x11; op2:x29; dest:x25; op1val:0xfeff000310000400;  op2val:0x0220000100fff9
TEST_RR_OP(pm4addu.h, x25, x11, x29, 0x0000000000000000, 0xfeff000310000400, 0x0220000100fff9, x4, 0*XLEN/8, x9)

inst_15:
// rs1==x14, rs2==x1, rd==x6, rs1_h0_val == 2048, rs1_h2_val == 4, rs2_h0_val == 512, rs1_h1_val == 0
// opcode: pm4addu.h ; op1:x14; op2:x1; dest:x6; op1val:0x1000000400000800;  op2val:0xfff60006fffd0200
TEST_RR_OP(pm4addu.h, x6, x14, x1, 0x0000000000000000, 0x1000000400000800, 0xfff60006fffd0200, x4, 1*XLEN/8, x9)

inst_16:
// rs1==x8, rs2==x16, rd==x30, rs1_h0_val == 4096, rs2_h0_val == -9, rs2_h1_val == -33, rs1_h1_val == 128, rs1_h2_val == 4096, rs2_h2_val == 21845, rs2_h3_val == -8193
// opcode: pm4addu.h ; op1:x8; op2:x16; dest:x30; op1val:0x100100000801000;  op2val:0xdfff5555ffdffff7
TEST_RR_OP(pm4addu.h, x30, x8, x16, 0x0000000000000000, 0x100100000801000, 0xdfff5555ffdffff7, x4, 2*XLEN/8, x9)

inst_17:
// rs1==x16, rs2==x7, rd==x12, rs1_h0_val == 8192, rs1_h3_val == -9, rs2_h0_val == -21846, rs2_h1_val == -65
// opcode: pm4addu.h ; op1:x16; op2:x7; dest:x12; op1val:0xfff7feffffdf2000;  op2val:0x04c000ffbfaaaa
TEST_RR_OP(pm4addu.h, x12, x16, x7, 0x0000000000000000, 0xfff7feffffdf2000, 0x04c000ffbfaaaa, x4, 3*XLEN/8, x9)

inst_18:
// rs1==x17, rs2==x24, rd==x14, rs1_h0_val == 16384, rs1_h2_val == -21846, rs2_h0_val == -2049
// opcode: pm4addu.h ; op1:x17; op2:x24; dest:x14; op1val:0x07aaaa3fff4000;  op2val:0x00fff85555f7ff
TEST_RR_OP(pm4addu.h, x14, x17, x24, 0x0000000000000000, 0x07aaaa3fff4000, 0x00fff85555f7ff, x4, 4*XLEN/8, x9)

inst_19:
// rs1==x10, rs2==x3, rd==x31, rs1_h0_val == -2, rs1_h3_val == -8193, rs2_h1_val == 2, rs1_h2_val == 32767, rs2_h2_val == -65
// opcode: pm4addu.h ; op1:x10; op2:x3; dest:x31; op1val:0xdfff7fff0000fffe;  op2val:0xbfffffbf00023fff
TEST_RR_OP(pm4addu.h, x31, x10, x3, 0x0000000000000000, 0xdfff7fff0000fffe, 0xbfffffbf00023fff, x4, 5*XLEN/8, x9)

inst_20:
// rs1==x7, rs2==x6, rd==x10, rs1_h0_val == -3, rs1_h1_val == 2048, rs1_h3_val == -65, rs2_h0_val == 1024, rs2_h1_val == -1
// opcode: pm4addu.h ; op1:x7; op2:x6; dest:x10; op1val:0xffbfc0000800fffd;  op2val:0x05fdffffff0400
TEST_RR_OP(pm4addu.h, x10, x7, x6, 0x0000000000000000, 0xffbfc0000800fffd, 0x05fdffffff0400, x4, 6*XLEN/8, x9)

inst_21:
// rs1==x29, rs2==x22, rd==x16, rs1_h0_val == -5, rs2_h2_val == 256, rs2_h3_val == 32, rs2_h1_val == 32767, rs1_h3_val == 512, rs2_h0_val == 64, rs1_h2_val == -3
// opcode: pm4addu.h ; op1:x29; op2:x22; dest:x16; op1val:0x200fffd0200fffb;  op2val:0x2001007fff0040
TEST_RR_OP(pm4addu.h, x16, x29, x22, 0x0000000000000000, 0x200fffd0200fffb, 0x2001007fff0040, x4, 7*XLEN/8, x9)

inst_22:
// rs1==x31, rs2==x14, rd==x28, rs1_h0_val == -9, rs1_h1_val == -513, rs2_h0_val == -2, rs2_h1_val == 16384, rs2_h3_val == 64
// opcode: pm4addu.h ; op1:x31; op2:x14; dest:x28; op1val:0xfff75555fdfffff7;  op2val:0x4000204000fffe
TEST_RR_OP(pm4addu.h, x28, x31, x14, 0x0000000000000000, 0xfff75555fdfffff7, 0x4000204000fffe, x4, 8*XLEN/8, x9)

inst_23:
// rs1==x5, rs2==x20, rd==x24, rs1_h0_val == -17, rs2_h0_val == 21845, rs1_h3_val == 0, rs2_h2_val == -2, rs1_h1_val == 64
// opcode: pm4addu.h ; op1:x5; op2:x20; dest:x24; op1val:0x0002000040ffef;  op2val:0x06fffe3fff5555
TEST_RR_OP(pm4addu.h, x24, x5, x20, 0x0000000000000000, 0x0002000040ffef, 0x06fffe3fff5555, x4, 9*XLEN/8, x9)

inst_24:
// rs1==x2, rs2==x18, rd==x19, rs1_h0_val == -33, rs1_h2_val == 16, rs2_h0_val == 8192, rs1_h3_val == 64
// opcode: pm4addu.h ; op1:x2; op2:x18; dest:x19; op1val:0x4000100006ffdf;  op2val:0x04002010002000
TEST_RR_OP(pm4addu.h, x19, x2, x18, 0x0000000000000000, 0x4000100006ffdf, 0x04002010002000, x4, 10*XLEN/8, x9)

inst_25:
// rs1==x3, rs2==x25, rd==x8, rs1_h0_val == -65, rs2_h1_val == 2048
// opcode: pm4addu.h ; op1:x3; op2:x25; dest:x8; op1val:0xfff900073fffffbf;  op2val:0xfff9000008005555
TEST_RR_OP(pm4addu.h, x8, x3, x25, 0x0000000000000000, 0xfff900073fffffbf, 0xfff9000008005555, x4, 11*XLEN/8, x9)

inst_26:
// rs1==x12, rs2==x15, rd==x29, rs1_h0_val == -129, rs2_h3_val == 256, rs1_h3_val == 32, rs1_h1_val == -129, rs2_h1_val == 1
// opcode: pm4addu.h ; op1:x12; op2:x15; dest:x29; op1val:0x20ffbfff7fff7f;  op2val:0x10001000001c000
TEST_RR_OP(pm4addu.h, x29, x12, x15, 0x0000000000000000, 0x20ffbfff7fff7f, 0x10001000001c000, x4, 12*XLEN/8, x9)

inst_27:
// rs1==x15, rs2==x10, rd==x13, rs1_h0_val == -257, rs1_h2_val == -1
// opcode: pm4addu.h ; op1:x15; op2:x10; dest:x13; op1val:0x09fffffff8feff;  op2val:0xfffa0006ffdffff7
TEST_RR_OP(pm4addu.h, x13, x15, x10, 0x0000000000000000, 0x09fffffff8feff, 0xfffa0006ffdffff7, x4, 13*XLEN/8, x9)

inst_28:
// rs1==x6, rs2==x11, rd==x0, rs1_h0_val == -513, rs2_h3_val == 512, rs2_h2_val == 16384, rs1_h2_val == -5, rs2_h0_val == -1025
// opcode: pm4addu.h ; op1:x6; op2:x11; dest:x0; op1val:0xaaaafffb0800fdff;  op2val:0x20040000008fbff
TEST_RR_OP(pm4addu.h, x0, x6, x11, 0x0000000000000000, 0xaaaafffb0800fdff, 0x20040000008fbff, x4, 14*XLEN/8, x3)

inst_29:
// rs1==x21, rs2==x17, rd==x23, rs1_h0_val == -1025, rs2_h3_val == 4096
// opcode: pm4addu.h ; op1:x21; op2:x17; dest:x23; op1val:0x5555effffff8fbff;  op2val:0x1000fdff5555feff
TEST_RR_OP(pm4addu.h, x23, x21, x17, 0x0000000000000000, 0x5555effffff8fbff, 0x1000fdff5555feff, x4, 15*XLEN/8, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_30:
// rs1==x0, rs2==x19, rd==x18, rs1_h0_val == -2049, rs2_h3_val == -257, rs1_h3_val == 1
// opcode: pm4addu.h ; op1:x0; op2:x19; dest:x18; op1val:0x010006fff9f7ff;  op2val:0xfeff002001000080
TEST_RR_OP(pm4addu.h, x18, x0, x19, 0x0000000000000000, 0x010006fff9f7ff, 0xfeff002001000080, x2, 0*XLEN/8, x3)

inst_31:
// rs1==x1, rs2==x21, rd==x4, rs1_h0_val == -4097, rs1_h2_val == -8193, rs2_h3_val == -1025, rs2_h1_val == -32768, rs1_h3_val == 16384
// opcode: pm4addu.h ; op1:x1; op2:x21; dest:x4; op1val:0x4000dfffaaaaefff;  op2val:0xfbfffbff8000feff
TEST_RR_OP(pm4addu.h, x4, x1, x21, 0x0000000000000000, 0x4000dfffaaaaefff, 0xfbfffbff8000feff, x2, 1*XLEN/8, x3)

inst_32:
// rs1_h0_val == -8193, rs1_h1_val == -257
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6aaaafeffdfff;  op2val:0x80fff700100009
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff6aaaafeffdfff, 0x80fff700100009, x2, 2*XLEN/8, x3)

inst_33:
// rs1_h0_val == -16385, rs1_h2_val == 1, rs2_h2_val == 1, rs2_h0_val == -8193, rs2_h3_val == -3, rs1_h1_val == -5, rs1_h3_val == 2048
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000001fffbbfff;  op2val:0xfffd00017fffdfff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x8000001fffbbfff, 0xfffd00017fffdfff, x2, 3*XLEN/8, x3)

inst_34:
// rs2_h3_val == 8, rs1_h1_val == -8193, rs2_h2_val == -2049
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x03c000dffffff6;  op2val:0x08f7ff00075555
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x03c000dffffff6, 0x08f7ff00075555, x2, 4*XLEN/8, x3)

inst_35:
// rs2_h3_val == 16, rs1_h2_val == -513, rs2_h0_val == -5
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffdfffffcfff8;  op2val:0x10fdffc000fffb
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x3ffffdfffffcfff8, 0x10fdffc000fffb, x2, 5*XLEN/8, x3)

inst_36:
// rs2_h3_val == 1024, rs2_h0_val == 32767, rs1_h3_val == -33, rs2_h1_val == -5
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0003c0000002;  op2val:0x4000009fffb7fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xffdf0003c0000002, 0x4000009fffb7fff, x2, 6*XLEN/8, x3)

inst_37:
// rs2_h3_val == 2048, rs2_h2_val == 128, rs2_h0_val == -17, rs2_h1_val == -16385, rs1_h1_val == 16384, rs1_h2_val == 16384
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20400040000006;  op2val:0x8000080bfffffef
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x20400040000006, 0x8000080bfffffef, x2, 7*XLEN/8, x3)

inst_38:
// rs2_h3_val == 16384, rs2_h0_val == 16, rs2_h2_val == -8193, rs1_h3_val == -17, rs1_h2_val == -1025
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbfffffb8000;  op2val:0x4000dfffffbf0010
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xffeffbfffffb8000, 0x4000dfffffbf0010, x2, 8*XLEN/8, x3)

inst_39:
// rs2_h3_val == -2, rs2_h2_val == -33
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffff4000fffb;  op2val:0xfffeffdf0010fffe
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffaffff4000fffb, 0xfffeffdf0010fffe, x2, 9*XLEN/8, x3)

inst_40:
// rs2_h3_val == -9, rs2_h2_val == 1024, rs2_h1_val == -2
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fdff40000009;  op2val:0xfff70400fffefbff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x00fdff40000009, 0xfff70400fffefbff, x2, 10*XLEN/8, x3)

inst_41:
// rs2_h3_val == -17, rs2_h2_val == 16, rs1_h1_val == -32768, rs1_h3_val == -16385
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7ff8000fff9;  op2val:0xffef0010fffedfff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xbffff7ff8000fff9, 0xffef0010fffedfff, x2, 11*XLEN/8, x3)

inst_42:
// rs2_h3_val == -33, rs1_h1_val == -1025, rs1_h3_val == -32768
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80007ffffbff0009;  op2val:0xffdffbfffffa7fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x80007ffffbff0009, 0xffdffbfffffa7fff, x2, 12*XLEN/8, x3)

inst_43:
// rs2_h3_val == -129, rs1_h1_val == -17
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0400ffefdfff;  op2val:0xff7fffbf00047fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffa0400ffefdfff, 0xff7fffbf00047fff, x2, 13*XLEN/8, x3)

inst_44:
// rs2_h3_val == -513, rs1_h3_val == -2
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000780000008;  op2val:0xfdfffffffffac000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffe000780000008, 0xfdfffffffffac000, x2, 14*XLEN/8, x3)

inst_45:
// rs2_h3_val == -4097, rs2_h2_val == -16385, rs1_h1_val == -2049
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40fffcf7ffffdf;  op2val:0xefffbffffffafff6
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x40fffcf7ffffdf, 0xefffbffffffafff6, x2, 15*XLEN/8, x3)

inst_46:
// rs2_h3_val == -21846, rs2_h2_val == 32767, rs1_h3_val == 8192, rs1_h2_val == -9
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff7fff9bfff;  op2val:0xaaaa7fffffff0006
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x2000fff7fff9bfff, 0xaaaa7fffffff0006, x2, 16*XLEN/8, x3)

inst_47:
// rs1_h0_val == 21845, rs2_h2_val == -32768, rs1_h1_val == rs2_h1_val
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feffff7f5555;  op2val:0xfbff8000ff7ffffc
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff7feffff7f5555, 0xfbff8000ff7ffffc, x2, 17*XLEN/8, x3)

inst_48:
// rs1_h0_val == -21846, rs2_h1_val == -9, rs1_h3_val == 8
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x080200fdffaaaa;  op2val:0x40000010fff7fff6
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x080200fdffaaaa, 0x40000010fff7fff6, x2, 18*XLEN/8, x3)

inst_49:
// rs1_h0_val == rs2_h0_val, rs1_h1_val == 4, rs2_h2_val == 2
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06efff0004feff;  op2val:0x0900025555feff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x06efff0004feff, 0x0900025555feff, x2, 19*XLEN/8, x3)

inst_50:
// rs1_h1_val == 1, rs1_h2_val == 0
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000000010002;  op2val:0xc000555500050006
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff8000000010002, 0xc000555500050006, x2, 20*XLEN/8, x3)

inst_51:
// rs1_h1_val == 8, rs2_h0_val == 256
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff600010008f7ff;  op2val:0xaaaaffff00030100
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff600010008f7ff, 0xaaaaffff00030100, x2, 21*XLEN/8, x3)

inst_52:
// rs1_h1_val == 16, rs1_h2_val == 2
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000000200100800;  op2val:0xfffa0200fffb0100
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x1000000200100800, 0xfffa0200fffb0100, x2, 22*XLEN/8, x3)

inst_53:
// rs1_h3_val == -3, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd200000070010;  op2val:0xff7faaaafff97fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffd200000070010, 0xff7faaaafff97fff, x2, 23*XLEN/8, x3)

inst_54:
// rs1_h3_val == -1025, rs2_h0_val == 16384
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003fbff0040;  op2val:0x3ffffbffffdf4000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0003fbff0040, 0x3ffffbffffdf4000, x2, 24*XLEN/8, x3)

inst_55:
// rs1_h3_val == -2049, rs1_h1_val == 1024, rs2_h1_val == 32
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff804004000;  op2val:0xffbf800000200080
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xf7fffff804004000, 0xffbf800000200080, x2, 25*XLEN/8, x3)

inst_56:
// rs1_h3_val == -4097, rs1_h2_val == -32768
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff800000000003;  op2val:0x7fff00060002fbff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xefff800000000003, 0x7fff00060002fbff, x2, 26*XLEN/8, x3)

inst_57:
// rs2_h0_val == -32768, rs1_h2_val == 256
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09010000080010;  op2val:0x08fffefffd8000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x09010000080010, 0x08fffefffd8000, x2, 27*XLEN/8, x3)

inst_58:
// rs2_h0_val == 0, rs2_h2_val == 4
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff0008fff9;  op2val:0xfdff000400060000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xc000f7ff0008fff9, 0xfdff000400060000, x2, 28*XLEN/8, x3)

inst_59:
// rs2_h0_val == 2, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7400008000004;  op2val:0xf7ff040000080002
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff7400008000004, 0xf7ff040000080002, x2, 29*XLEN/8, x3)

inst_60:
// rs2_h0_val == 4, rs1_h2_val == -2
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fffeffdf0003;  op2val:0x09ffdffffa0004
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x08fffeffdf0003, 0x09ffdffffa0004, x2, 30*XLEN/8, x3)

inst_61:
// rs2_h0_val == 8, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff2000fbff0200;  op2val:0xfdff0080fffa0008
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xbfff2000fbff0200, 0xfdff0080fffa0008, x2, 31*XLEN/8, x3)

inst_62:
// rs2_h0_val == 32, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x010007aaaa0005;  op2val:0xfffa0200f7ff0020
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x010007aaaa0005, 0xfffa0200f7ff0020, x2, 32*XLEN/8, x3)

inst_63:
// rs2_h0_val == 2048, rs2_h1_val == -17, rs1_h1_val == -16385
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff88000bfff0009;  op2val:0x10ffbfffef0800
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff88000bfff0009, 0x10ffbfffef0800, x2, 33*XLEN/8, x3)

inst_64:
// rs2_h0_val == 4096, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffaaaaa0007;  op2val:0x200fffdfff81000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfefffffaaaaa0007, 0x200fffdfff81000, x2, 34*XLEN/8, x3)

inst_65:
// rs2_h0_val == -3, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x01fffa00030800;  op2val:0xfdfffffa0400fffd
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x01fffa00030800, 0xfdfffffa0400fffd, x2, 35*XLEN/8, x3)

inst_66:
// rs2_h0_val == -129, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff80000040;  op2val:0x200004000010ff7f
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xdffffbff80000040, 0x200004000010ff7f, x2, 36*XLEN/8, x3)

inst_67:
// rs2_h0_val == -513, rs2_h2_val == -5, rs1_h2_val == -17
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef00020800;  op2val:0xfefffffbc000fdff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfbffffef00020800, 0xfefffffbc000fdff, x2, 37*XLEN/8, x3)

inst_68:
// rs1_h1_val == 32, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff100000200008;  op2val:0xfffec0003fffbfff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x3fff100000200008, 0xfffec0003fffbfff, x2, 38*XLEN/8, x3)

inst_69:
// rs1_h1_val == 8192, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff600802000ff7f;  op2val:0xfefffff701000006
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff600802000ff7f, 0xfefffff701000006, x2, 39*XLEN/8, x3)

inst_70:
// rs2_h1_val == 0, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa08002000;  op2val:0x40feff00000002
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x08aaaa08002000, 0x40feff00000002, x2, 40*XLEN/8, x3)

inst_71:
// rs1_h1_val == -2, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0080fffefff9;  op2val:0xdfff000480003fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x3fff0080fffefff9, 0xdfff000480003fff, x2, 41*XLEN/8, x3)

inst_72:
// rs1_h1_val == -9, rs2_h2_val == -4097
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fefffff7fbff;  op2val:0x09efffffbf0200
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x09fefffff7fbff, 0x09efffffbf0200, x2, 42*XLEN/8, x3)

inst_73:
// rs2_h1_val == 512, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0006bfffffff;  op2val:0x04fbff0200ffff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffc0006bfffffff, 0x04fbff0200ffff, x2, 43*XLEN/8, x3)

inst_74:
// rs1_h1_val == -4097, rs1_h2_val == -129
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80ff7fefff0005;  op2val:0xfff7feff01000001
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x80ff7fefff0005, 0xfff7feff01000001, x2, 44*XLEN/8, x3)

inst_75:
// rs2_h1_val == 8192, rs1_h2_val == 32
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffeffffb;  op2val:0xffef55552000f7ff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x000020ffeffffb, 0xffef55552000f7ff, x2, 45*XLEN/8, x3)

inst_76:
// rs1_h1_val == 21845, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000800055550007;  op2val:0xfff9ffdf00097fff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x8000800055550007, 0xfff9ffdf00097fff, x2, 46*XLEN/8, x3)

inst_77:
// rs1_h2_val == 8, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06000800094000;  op2val:0xfffb000280000200
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x06000800094000, 0xfffb000280000200, x2, 47*XLEN/8, x3)

inst_78:
// rs2_h1_val == -257, rs2_h2_val == -129
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0006fdfffffc;  op2val:0x3fffff7ffeff0000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffd0006fdfffffc, 0x3fffff7ffeff0000, x2, 48*XLEN/8, x3)

inst_79:
// rs2_h1_val == -513, rs1_h1_val == -65, rs2_h2_val == 2048
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffbfffbffffa;  op2val:0x10000800fdff0010
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xff7fffbfffbffffa, 0x10000800fdff0010, x2, 49*XLEN/8, x3)

inst_80:
// rs2_h1_val == -1025, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff87fff0400;  op2val:0x03effffbffffff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfdfffff87fff0400, 0x03effffbffffff, x2, 50*XLEN/8, x3)

inst_81:
// rs2_h1_val == -4097, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0009fff80008;  op2val:0x800100efffff7f
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffb0009fff80008, 0x800100efffff7f, x2, 51*XLEN/8, x3)

inst_82:
// rs2_h1_val == -8193, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7ffffeffbfff;  op2val:0x000200dfff4000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x3fff7ffffeffbfff, 0x000200dfff4000, x2, 52*XLEN/8, x3)

inst_83:
// rs1_h2_val == -33, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x05ffdfc0004000;  op2val:0x080004ffef5555
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x05ffdfc0004000, 0x080004ffef5555, x2, 53*XLEN/8, x3)

inst_84:
// rs2_h2_val == 64, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0200022000ffdf;  op2val:0xc0000040fffefffe
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x0200022000ffdf, 0xc0000040fffefffe, x2, 54*XLEN/8, x3)

inst_85:
// rs2_h3_val == 1, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400003fbff0002;  op2val:0x01f7ff0010bfff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x400003fbff0002, 0x01f7ff0010bfff, x2, 55*XLEN/8, x3)

inst_86:
// rs2_h2_val == 4096, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x090010fffc3fff;  op2val:0x20100000100008
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x090010fffc3fff, 0x20100000100008, x2, 56*XLEN/8, x3)

inst_87:
// rs1_h3_val == -1, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00070001;  op2val:0x100006fbfffffd
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfffffeff00070001, 0x100006fbfffffd, x2, 57*XLEN/8, x3)

inst_88:
// rs2_h2_val == -17, rs1_h3_val == 4
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x04fff6feff0003;  op2val:0xfffcffef00102000
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x04fff6feff0003, 0xfffcffef00102000, x2, 58*XLEN/8, x3)

inst_89:
// rs1_h3_val == 32767, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffdfeffff7f;  op2val:0x04dfff3fff0001
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x7ffffffdfeffff7f, 0x04dfff3fff0001, x2, 59*XLEN/8, x3)

inst_90:
// rs1_h3_val == 16, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100400fbff0004;  op2val:0x034000fffb0005
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x100400fbff0004, 0x034000fffb0005, x2, 60*XLEN/8, x3)

inst_91:
// rs1_h2_val == 2048, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800ffffbfff;  op2val:0xf7ffc0000010dfff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xfff80800ffffbfff, 0xf7ffc0000010dfff, x2, 61*XLEN/8, x3)

inst_92:
// rs1_h3_val == 1024, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40004000400feff;  op2val:0xfff9ffef0004fdff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x40004000400feff, 0xfff9ffef0004fdff, x2, 62*XLEN/8, x3)

inst_93:
// rs2_h3_val == -32768, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000004020003fff;  op2val:0x80000100fffa0800
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x1000004020003fff, 0x80000100fffa0800, x2, 63*XLEN/8, x3)

inst_94:
// rs2_h3_val == -1, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff00007fffffdf;  op2val:0xffff0005ffbfefff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xffff00007fffffdf, 0xffff0005ffbfefff, x2, 64*XLEN/8, x3)

inst_95:
// rs2_h1_val == 64, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x204000fff70100;  op2val:0x09fffa00400004
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x204000fff70100, 0x09fffa00400004, x2, 65*XLEN/8, x3)

inst_96:
// rs2_h2_val == 8, 
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20200000080002;  op2val:0xffff0008fffdfff7
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x20200000080002, 0xffff0008fffdfff7, x2, 66*XLEN/8, x3)

inst_97:
// rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == 1, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -1025, rs2_h3_val == -65, rs1_h3_val == 128, rs1_h2_val == 8192, rs1_h3_val != rs2_h3_val, rs2_h1_val == 128
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8020003fff8000;  op2val:0xffbffbff00800001
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0x8020003fff8000, 0xffbffbff00800001, x2, 67*XLEN/8, x3)

inst_98:
// rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -65, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == -3, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == -3, rs2_h0_val == 128
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffbffffd7fff;  op2val:0x09fffdfffc0080
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xff7fffbffffd7fff, 0x09fffdfffc0080, x2, 68*XLEN/8, x3)

inst_99:
// rs1_h0_val == -513, rs2_h3_val == 512, rs2_h2_val == 16384, rs1_h2_val == -5, rs2_h0_val == -1025
// opcode: pm4addu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb0800fdff;  op2val:0x20040000008fbff
TEST_RR_OP(pm4addu.h, x31, x30, x29, 0x0000000000000000, 0xaaaafffb0800fdff, 0x20040000008fbff, x2, 69*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x6_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x6_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 70*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
