
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 06:11:38 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulu.w01 instruction of the RISC-V RV64PZicsr extension for the mulu.w01 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",mulu.w01)

RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x19, rd==x31, rs1_w0_val == -2147483648, rs1_w1_val == -2049, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 1024, rs1_w1_val != rs2_w1_val
// opcode: mulu.w01 ; op1:x21; op2:x19; dest:x31; op1val:0xfffff7ff80000000;  op2val:0x00040000000003
TEST_RR_OP(mulu.w01, x31, x21, x19, 0x0000000000000000, 0xfffff7ff80000000, 0x00040000000003, x9, 0*XLEN/8, x10)

inst_1:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -9, rs1_w1_val == -4097, rs2_w0_val == 2048
// opcode: mulu.w01 ; op1:x27; op2:x27; dest:x27; op1val:0xffffefffffffffff;  op2val:0xfffffff700000800
TEST_RR_OP(mulu.w01, x27, x27, x27, 0x0000000000000000, 0xffffefffffffffff, 0xfffffff700000800, x9, 1*XLEN/8, x10)

inst_2:
// rs1 == rd != rs2, rs1==x11, rs2==x7, rd==x11, rs1_w0_val == 0, rs2_w0_val == -1, rs1_w1_val == -2147483648, rs2_w1_val == -4194305
// opcode: mulu.w01 ; op1:x11; op2:x7; dest:x11; op1val:0x8000000000000000;  op2val:0xffbfffffffffffff
TEST_RR_OP(mulu.w01, x11, x11, x7, 0x0000000000000000, 0x8000000000000000, 0xffbfffffffffffff, x9, 2*XLEN/8, x10)

inst_3:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x12, rs1_w0_val == 1, rs1_w1_val == 33554432, rs2_w1_val == 4194304, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -257, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: mulu.w01 ; op1:x17; op2:x17; dest:x12; op1val:0x200000000000001;  op2val:0x400000fffffeff
TEST_RR_OP(mulu.w01, x12, x17, x17, 0x0000000000000000, 0x200000000000001, 0x400000fffffeff, x9, 3*XLEN/8, x10)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x30, rd==x30, rs1_w0_val == 2147483647, rs2_w1_val == 2147483647, rs2_w0_val == -16385, rs1_w1_val == -16385
// opcode: mulu.w01 ; op1:x22; op2:x30; dest:x30; op1val:0xffffbfff7fffffff;  op2val:0x7fffffffffffbfff
TEST_RR_OP(mulu.w01, x30, x22, x30, 0x0000000000000000, 0xffffbfff7fffffff, 0x7fffffffffffbfff, x9, 4*XLEN/8, x10)

inst_5:
// rs1==x7, rs2==x1, rd==x8, rs1_w0_val == 2, rs1_w1_val == 512, rs2_w1_val == 16
// opcode: mulu.w01 ; op1:x7; op2:x1; dest:x8; op1val:0x00020000000002;  op2val:0x000010fffffffc
TEST_RR_OP(mulu.w01, x8, x7, x1, 0x0000000000000000, 0x00020000000002, 0x000010fffffffc, x9, 5*XLEN/8, x10)

inst_6:
// rs1==x20, rs2==x22, rd==x16, rs1_w0_val == 4, rs1_w1_val == 1, rs2_w0_val == 2147483647, rs2_w1_val == 1, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == rs2_w1_val
// opcode: mulu.w01 ; op1:x20; op2:x22; dest:x16; op1val:0x00000100000004;  op2val:0x0000017fffffff
TEST_RR_OP(mulu.w01, x16, x20, x22, 0x0000000000000000, 0x00000100000004, 0x0000017fffffff, x9, 6*XLEN/8, x10)

inst_7:
// rs1==x28, rs2==x5, rd==x17, rs1_w0_val == 8, rs1_w1_val == -67108865, rs2_w1_val == -5
// opcode: mulu.w01 ; op1:x28; op2:x5; dest:x17; op1val:0xfbffffff00000008;  op2val:0xfffffffb00000007
TEST_RR_OP(mulu.w01, x17, x28, x5, 0x0000000000000000, 0xfbffffff00000008, 0xfffffffb00000007, x9, 7*XLEN/8, x10)

inst_8:
// rs1==x5, rs2==x2, rd==x4, rs1_w0_val == 16, rs1_w1_val == -1073741825, rs2_w0_val == 524288
// opcode: mulu.w01 ; op1:x5; op2:x2; dest:x4; op1val:0xbfffffff00000010;  op2val:0xfffffffb00080000
TEST_RR_OP(mulu.w01, x4, x5, x2, 0x0000000000000000, 0xbfffffff00000010, 0xfffffffb00080000, x9, 8*XLEN/8, x10)

inst_9:
// rs1==x16, rs2==x12, rd==x18, rs1_w0_val == 32, rs2_w0_val == -129, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 64, rs2_w1_val == -129
// opcode: mulu.w01 ; op1:x16; op2:x12; dest:x18; op1val:0x00004000000020;  op2val:0xffffff7fffffff7f
TEST_RR_OP(mulu.w01, x18, x16, x12, 0x0000000000000000, 0x00004000000020, 0xffffff7fffffff7f, x9, 9*XLEN/8, x10)

inst_10:
// rs1==x30, rs2==x20, rd==x7, rs1_w0_val == 64, rs2_w0_val == 2097152
// opcode: mulu.w01 ; op1:x30; op2:x20; dest:x7; op1val:0x00000500000040;  op2val:0xc000000000200000
TEST_RR_OP(mulu.w01, x7, x30, x20, 0x0000000000000000, 0x00000500000040, 0xc000000000200000, x9, 10*XLEN/8, x10)

inst_11:
// rs1==x12, rs2==x26, rd==x6, rs1_w0_val == 128, rs2_w0_val == -1073741825, rs2_w1_val == -2049, rs1_w1_val == -1
// opcode: mulu.w01 ; op1:x12; op2:x26; dest:x6; op1val:0xffffffff00000080;  op2val:0xfffff7ffbfffffff
TEST_RR_OP(mulu.w01, x6, x12, x26, 0x0000000000000000, 0xffffffff00000080, 0xfffff7ffbfffffff, x9, 11*XLEN/8, x10)

inst_12:
// rs1==x31, rs2==x4, rd==x2, rs1_w0_val == 256, rs1_w1_val == 2048, rs2_w0_val == 8388608, rs2_w1_val == 2048
// opcode: mulu.w01 ; op1:x31; op2:x4; dest:x2; op1val:0x00080000000100;  op2val:0x00080000800000
TEST_RR_OP(mulu.w01, x2, x31, x4, 0x0000000000000000, 0x00080000000100, 0x00080000800000, x9, 12*XLEN/8, x10)

inst_13:
// rs1==x1, rs2==x29, rd==x20, rs1_w0_val == 512, rs2_w1_val == 1048576, rs2_w0_val == 2, rs1_w1_val == -16777217
// opcode: mulu.w01 ; op1:x1; op2:x29; dest:x20; op1val:0xfeffffff00000200;  op2val:0x10000000000002
TEST_RR_OP(mulu.w01, x20, x1, x29, 0x0000000000000000, 0xfeffffff00000200, 0x10000000000002, x9, 13*XLEN/8, x10)

inst_14:
// rs1==x15, rs2==x6, rd==x28, rs1_w0_val == 1024, rs1_w1_val == 4194304, rs2_w1_val == -16777217
// opcode: mulu.w01 ; op1:x15; op2:x6; dest:x28; op1val:0x40000000000400;  op2val:0xfefffffffffffffa
TEST_RR_OP(mulu.w01, x28, x15, x6, 0x0000000000000000, 0x40000000000400, 0xfefffffffffffffa, x9, 14*XLEN/8, x10)

inst_15:
// rs1==x8, rs2==x14, rd==x3, rs1_w0_val == 2048, rs1_w1_val == -3, rs2_w1_val == -2
// opcode: mulu.w01 ; op1:x8; op2:x14; dest:x3; op1val:0xfffffffd00000800;  op2val:0xfffffffeffffff7f
TEST_RR_OP(mulu.w01, x3, x8, x14, 0x0000000000000000, 0xfffffffd00000800, 0xfffffffeffffff7f, x9, 15*XLEN/8, x10)

inst_16:
// rs1==x3, rs2==x15, rd==x24, rs1_w0_val == 4096, rs2_w1_val == -8388609, rs2_w0_val == -134217729, rs1_w1_val == 128
// opcode: mulu.w01 ; op1:x3; op2:x15; dest:x24; op1val:0x00008000001000;  op2val:0xff7ffffff7ffffff
TEST_RR_OP(mulu.w01, x24, x3, x15, 0x0000000000000000, 0x00008000001000, 0xff7ffffff7ffffff, x9, 16*XLEN/8, x12)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x13, rs2==x31, rd==x21, rs1_w0_val == 8192, rs2_w0_val == -2147483648, rs1_w1_val == -134217729, rs2_w1_val == -257
// opcode: mulu.w01 ; op1:x13; op2:x31; dest:x21; op1val:0xf7ffffff00002000;  op2val:0xfffffeff80000000
TEST_RR_OP(mulu.w01, x21, x13, x31, 0x0000000000000000, 0xf7ffffff00002000, 0xfffffeff80000000, x7, 0*XLEN/8, x12)

inst_18:
// rs1==x18, rs2==x21, rd==x9, rs1_w0_val == 16384, rs2_w1_val == -1025, rs1_w1_val == -4194305, rs2_w0_val == -17
// opcode: mulu.w01 ; op1:x18; op2:x21; dest:x9; op1val:0xffbfffff00004000;  op2val:0xfffffbffffffffef
TEST_RR_OP(mulu.w01, x9, x18, x21, 0x0000000000000000, 0xffbfffff00004000, 0xfffffbffffffffef, x7, 1*XLEN/8, x12)

inst_19:
// rs1==x26, rs2==x11, rd==x22, rs1_w0_val == 32768, rs2_w1_val == 268435456
// opcode: mulu.w01 ; op1:x26; op2:x11; dest:x22; op1val:0xfbffffff00008000;  op2val:0x10000000fffffeff
TEST_RR_OP(mulu.w01, x22, x26, x11, 0x0000000000000000, 0xfbffffff00008000, 0x10000000fffffeff, x7, 2*XLEN/8, x12)

inst_20:
// rs1==x6, rs2==x13, rd==x25, rs1_w0_val == 65536, rs2_w1_val == -134217729, rs2_w0_val == -1048577
// opcode: mulu.w01 ; op1:x6; op2:x13; dest:x25; op1val:0x00008000010000;  op2val:0xf7ffffffffefffff
TEST_RR_OP(mulu.w01, x25, x6, x13, 0x0000000000000000, 0x00008000010000, 0xf7ffffffffefffff, x7, 3*XLEN/8, x12)

inst_21:
// rs1==x2, rs2==x28, rd==x0, rs1_w0_val == 131072, rs2_w1_val == 8388608, rs2_w0_val == -262145, rs1_w1_val == -1431655766
// opcode: mulu.w01 ; op1:x2; op2:x28; dest:x0; op1val:0xaaaaaaaa00020000;  op2val:0x800000fffbffff
TEST_RR_OP(mulu.w01, x0, x2, x28, 0x0000000000000000, 0xaaaaaaaa00020000, 0x800000fffbffff, x7, 4*XLEN/8, x12)

inst_22:
// rs1==x23, rs2==x0, rd==x13, rs1_w0_val == 262144, rs2_w0_val == 1073741824, rs2_w1_val == -268435457
// opcode: mulu.w01 ; op1:x23; op2:x0; dest:x13; op1val:0xf7ffffff00040000;  op2val:0xefffffff40000000
TEST_RR_OP(mulu.w01, x13, x23, x0, 0x0000000000000000, 0xf7ffffff00040000, 0xefffffff40000000, x7, 5*XLEN/8, x12)

inst_23:
// rs1==x4, rs2==x9, rd==x10, rs1_w0_val == 524288, rs1_w1_val == 67108864, rs2_w1_val == -17
// opcode: mulu.w01 ; op1:x4; op2:x9; dest:x10; op1val:0x400000000080000;  op2val:0xffffffefc0000000
TEST_RR_OP(mulu.w01, x10, x4, x9, 0x0000000000000000, 0x400000000080000, 0xffffffefc0000000, x7, 6*XLEN/8, x12)

inst_24:
// rs1==x10, rs2==x25, rd==x5, rs1_w0_val == 1048576, rs1_w1_val == 262144
// opcode: mulu.w01 ; op1:x10; op2:x25; dest:x5; op1val:0x04000000100000;  op2val:0xfffffff700000006
TEST_RR_OP(mulu.w01, x5, x10, x25, 0x0000000000000000, 0x04000000100000, 0xfffffff700000006, x7, 7*XLEN/8, x12)

inst_25:
// rs1==x14, rs2==x16, rd==x15, rs1_w0_val == 2097152, rs1_w1_val == -268435457
// opcode: mulu.w01 ; op1:x14; op2:x16; dest:x15; op1val:0xefffffff00200000;  op2val:0x000400c0000000
TEST_RR_OP(mulu.w01, x15, x14, x16, 0x0000000000000000, 0xefffffff00200000, 0x000400c0000000, x7, 8*XLEN/8, x12)

inst_26:
// rs1==x25, rs2==x10, rd==x19, rs1_w0_val == 4194304, rs2_w1_val == -4097, rs2_w0_val == -67108865, rs1_w1_val == -2
// opcode: mulu.w01 ; op1:x25; op2:x10; dest:x19; op1val:0xfffffffe00400000;  op2val:0xffffeffffbffffff
TEST_RR_OP(mulu.w01, x19, x25, x10, 0x0000000000000000, 0xfffffffe00400000, 0xffffeffffbffffff, x7, 9*XLEN/8, x12)

inst_27:
// rs1==x29, rs2==x3, rd==x23, rs1_w0_val == 8388608, rs2_w1_val == 4, rs2_w0_val == -1431655766, rs1_w1_val == 1048576
// opcode: mulu.w01 ; op1:x29; op2:x3; dest:x23; op1val:0x10000000800000;  op2val:0x000004aaaaaaaa
TEST_RR_OP(mulu.w01, x23, x29, x3, 0x0000000000000000, 0x10000000800000, 0x000004aaaaaaaa, x7, 10*XLEN/8, x12)

inst_28:
// rs1==x0, rs2==x18, rd==x29, rs1_w0_val == 16777216, rs1_w1_val == -1048577, rs2_w1_val == 8
// opcode: mulu.w01 ; op1:x0; op2:x18; dest:x29; op1val:0xffefffff01000000;  op2val:0x000008fffffeff
TEST_RR_OP(mulu.w01, x29, x0, x18, 0x0000000000000000, 0xffefffff01000000, 0x000008fffffeff, x7, 11*XLEN/8, x12)

inst_29:
// rs1==x24, rs2==x8, rd==x1, rs1_w0_val == 33554432, rs1_w1_val == -17, rs2_w0_val == -16777217
// opcode: mulu.w01 ; op1:x24; op2:x8; dest:x1; op1val:0xffffffef02000000;  op2val:0x000400feffffff
TEST_RR_OP(mulu.w01, x1, x24, x8, 0x0000000000000000, 0xffffffef02000000, 0x000400feffffff, x7, 12*XLEN/8, x12)

inst_30:
// rs1==x19, rs2==x23, rd==x14, rs1_w0_val == 67108864, rs2_w0_val == -3
// opcode: mulu.w01 ; op1:x19; op2:x23; dest:x14; op1val:0xfffffff604000000;  op2val:0x000009fffffffd
TEST_RR_OP(mulu.w01, x14, x19, x23, 0x0000000000000000, 0xfffffff604000000, 0x000009fffffffd, x7, 13*XLEN/8, x2)

inst_31:
// rs1==x9, rs2==x24, rd==x26, rs1_w0_val == 134217728, rs1_w1_val == 8388608
// opcode: mulu.w01 ; op1:x9; op2:x24; dest:x26; op1val:0x80000008000000;  op2val:0xfffffffcbfffffff
TEST_RR_OP(mulu.w01, x26, x9, x24, 0x0000000000000000, 0x80000008000000, 0xfffffffcbfffffff, x7, 14*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, rs2_w1_val == 32
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff10000000;  op2val:0x000020fffffff8
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7ff10000000, 0x000020fffffff8, x7, 15*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_w0_val == 536870912, rs2_w1_val == 16384, rs1_w1_val == 0
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000020000000;  op2val:0x004000c0000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x00000020000000, 0x004000c0000000, x1, 0*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs2_w0_val == -131073, rs1_w1_val == 1073741824
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000040000000;  op2val:0x000004fffdffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x4000000040000000, 0x000004fffdffff, x1, 1*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == 16384
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffe;  op2val:0xfffffff7c0000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x004000fffffffe, 0xfffffff7c0000000, x1, 2*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w0_val == 67108864
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffd;  op2val:0xfffffeff04000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffd, 0xfffffeff04000000, x1, 3*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == -33554433, rs2_w1_val == -1
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffb;  op2val:0xfffffffffffffff6
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffb, 0xfffffffffffffff6, x1, 4*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs1_w1_val == 16777216, rs2_w1_val == 128
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff7;  op2val:0x0000803fffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff7, 0x0000803fffffff, x1, 5*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs1_w1_val == 1024, rs2_w1_val == 67108864
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffef;  op2val:0x400000000000007
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000400ffffffef, 0x400000000000007, x1, 6*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs1_w1_val == 16, rs2_w0_val == -1025
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffffdf;  op2val:0x800000fffffbff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000010ffffffdf, 0x800000fffffbff, x1, 7*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs2_w1_val == 0
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffffbf;  op2val:0x00000000080000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffffbf, 0x00000000080000, x1, 8*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs1_w1_val == -536870913, rs2_w1_val == -2097153
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffff7f;  op2val:0xffdffffffffffffa
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffff7f, 0xffdffffffffffffa, x1, 9*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffeff;  op2val:0xfffffff8feffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0xfffffff8feffffff, x1, 10*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs2_w1_val == 1431655765
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffdff;  op2val:0x55555555fffffffa
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffdff, 0x55555555fffffffa, x1, 11*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs2_w0_val == 1, rs1_w1_val == -8388609
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffbff;  op2val:0x00000300000001
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffbff, 0x00000300000001, x1, 12*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs2_w0_val == 65536
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffff7ff;  op2val:0x00080000010000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000000fffff7ff, 0x00080000010000, x1, 13*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffefff;  op2val:0x800000c0000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x400000ffffefff, 0x800000c0000000, x1, 14*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs2_w0_val == -4194305
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffdfff;  op2val:0xffffffffffbfffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffdfff, 0xffffffffffbfffff, x1, 15*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffbfff;  op2val:0xfffffff600010000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffbfff, 0xfffffff600010000, x1, 16*XLEN/8, x2)

inst_50:
// rs2_w1_val == -131073, rs1_w1_val == 32
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x0000203fffffff;  op2val:0xfffdffffaaaaaaaa
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x0000203fffffff, 0xfffdffffaaaaaaaa, x1, 17*XLEN/8, x2)

inst_51:
// rs2_w1_val == -262145, rs1_w0_val == -4194305, rs2_w0_val == 4
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffbfffff;  op2val:0xfffbffff00000004
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xdfffffffffbfffff, 0xfffbffff00000004, x1, 18*XLEN/8, x2)

inst_52:
// rs2_w1_val == -524289, rs2_w0_val == -2097153
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00040000;  op2val:0xfff7ffffffdfffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffefff00040000, 0xfff7ffffffdfffff, x1, 19*XLEN/8, x2)

inst_53:
// rs2_w1_val == -1048577, rs1_w1_val == 4, rs2_w0_val == 1024
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x0000043fffffff;  op2val:0xffefffff00000400
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x0000043fffffff, 0xffefffff00000400, x1, 20*XLEN/8, x2)

inst_54:
// rs2_w1_val == -33554433, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffe;  op2val:0xfdffffff3fffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffe, 0xfdffffff3fffffff, x1, 21*XLEN/8, x2)

inst_55:
// rs2_w1_val == -67108865, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffdf;  op2val:0xfbffffffc0000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000004ffffffdf, 0xfbffffffc0000000, x1, 22*XLEN/8, x2)

inst_56:
// rs2_w1_val == -536870913, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000005;  op2val:0xdfffffff00000001
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x00040000000005, 0xdfffffff00000001, x1, 23*XLEN/8, x2)

inst_57:
// rs2_w1_val == -1073741825, rs2_w0_val == -2, rs1_w1_val == 536870912
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffb;  op2val:0xbffffffffffffffe
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x20000000fffffffb, 0xbffffffffffffffe, x1, 24*XLEN/8, x2)

inst_58:
// rs2_w1_val == -1431655766, rs1_w0_val == -1431655766
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffaaaaaaaa;  op2val:0xaaaaaaaafffffff9
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfeffffffaaaaaaaa, 0xaaaaaaaafffffff9, x1, 25*XLEN/8, x2)

inst_59:
// rs1_w0_val == rs2_w0_val, rs1_w1_val == 4096
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x001000aaaaaaaa;  op2val:0xfff7ffffaaaaaaaa
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x001000aaaaaaaa, 0xfff7ffffaaaaaaaa, x1, 26*XLEN/8, x2)

inst_60:
// rs1_w0_val == -32769, rs2_w1_val == 4096
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffff7fff;  op2val:0x001000fbffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000040ffff7fff, 0x001000fbffffff, x1, 27*XLEN/8, x2)

inst_61:
// rs1_w0_val == -65537, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffeffff;  op2val:0x55555555fffffffc
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffefffeffff, 0x55555555fffffffc, x1, 28*XLEN/8, x2)

inst_62:
// rs1_w0_val == -131073, rs2_w1_val == 256, rs2_w0_val == 32768
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffdffff;  op2val:0x00010000008000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xbffffffffffdffff, 0x00010000008000, x1, 29*XLEN/8, x2)

inst_63:
// rs1_w0_val == -262145, rs2_w1_val == 16777216, rs2_w0_val == -65537, rs1_w1_val == -8193
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffbffff;  op2val:0x1000000fffeffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffdffffffbffff, 0x1000000fffeffff, x1, 30*XLEN/8, x2)

inst_64:
// rs1_w0_val == -524289, rs2_w1_val == 536870912
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fff7ffff;  op2val:0x2000000000000006
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x100000fff7ffff, 0x2000000000000006, x1, 31*XLEN/8, x2)

inst_65:
// rs1_w0_val == -1048577, rs2_w0_val == 262144
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffefffff;  op2val:0xfffbffff00040000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0xfffbffff00040000, x1, 32*XLEN/8, x2)

inst_66:
// rs1_w0_val == -2097153, rs1_w1_val == 2147483647
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffdfffff;  op2val:0x00100000000800
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x7fffffffffdfffff, 0x00100000000800, x1, 33*XLEN/8, x2)

inst_67:
// rs1_w0_val == -8388609, rs2_w1_val == -2147483648
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffff7fffff;  op2val:0x80000000fffffff6
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xf7ffffffff7fffff, 0x80000000fffffff6, x1, 34*XLEN/8, x2)

inst_68:
// rs1_w0_val == -16777217, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000feffffff;  op2val:0xffffff7fffffff7f
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x40000000feffffff, 0xffffff7fffffff7f, x1, 35*XLEN/8, x2)

inst_69:
// rs1_w0_val == -33554433, rs2_w1_val == 65536
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fdffffff;  op2val:0x010000fffffffd
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000003fdffffff, 0x010000fffffffd, x1, 36*XLEN/8, x2)

inst_70:
// rs1_w0_val == -67108865, rs2_w1_val == -3, rs1_w1_val == -9
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fbffffff;  op2val:0xfffffffdffffff7f
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff7fbffffff, 0xfffffffdffffff7f, x1, 37*XLEN/8, x2)

inst_71:
// rs1_w0_val == -134217729, rs2_w0_val == 268435456
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffff7ffffff;  op2val:0xffefffff10000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x3ffffffff7ffffff, 0xffefffff10000000, x1, 38*XLEN/8, x2)

inst_72:
// rs1_w0_val == -268435457, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffefffffff;  op2val:0x001000ffffff7f
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x3fffffffefffffff, 0x001000ffffff7f, x1, 39*XLEN/8, x2)

inst_73:
// rs1_w0_val == -536870913, rs2_w0_val == -4097, rs1_w1_val == -65537
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffdfffffff;  op2val:0xf7ffffffffffefff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffeffffdfffffff, 0xf7ffffffffffefff, x1, 40*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1073741825, rs2_w0_val == 4096
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000080bfffffff;  op2val:0xfffff7ff00001000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000080bfffffff, 0xfffff7ff00001000, x1, 41*XLEN/8, x2)

inst_75:
// rs1_w0_val == 1431655765, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00080055555555;  op2val:0xfdffffff00000400
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x00080055555555, 0xfdffffff00000400, x1, 42*XLEN/8, x2)

inst_76:
// rs1_w1_val == 2, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffbf;  op2val:0xfffffffeffffffef
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000002ffffffbf, 0xfffffffeffffffef, x1, 43*XLEN/8, x2)

inst_77:
// rs1_w1_val == 8, rs2_w1_val == 2, rs2_w0_val == 1431655765
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000008aaaaaaaa;  op2val:0x00000255555555
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000008aaaaaaaa, 0x00000255555555, x1, 44*XLEN/8, x2)

inst_78:
// rs1_w1_val == 256, rs2_w0_val == -9
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000002;  op2val:0x400000fffffff7
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x00010000000002, 0x400000fffffff7, x1, 45*XLEN/8, x2)

inst_79:
// rs1_w1_val == 8192, rs2_w0_val == 32
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffa;  op2val:0x10000000000020
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x002000fffffffa, 0x10000000000020, x1, 46*XLEN/8, x2)

inst_80:
// rs1_w1_val == 32768, rs2_w1_val == -513
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffbffff;  op2val:0xfffffdff00000009
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x008000fffbffff, 0xfffffdff00000009, x1, 47*XLEN/8, x2)

inst_81:
// rs1_w1_val == 65536, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000004000;  op2val:0xfffffff8fffffffe
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x01000000004000, 0xfffffff8fffffffe, x1, 48*XLEN/8, x2)

inst_82:
// rs1_w1_val == 1431655765, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000040;  op2val:0xffbfffff00000005
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x5555555500000040, 0xffbfffff00000005, x1, 49*XLEN/8, x2)

inst_83:
// rs2_w0_val == 0, rs2_w1_val == -16385
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffd;  op2val:0xffffbfff00000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffd, 0xffffbfff00000000, x1, 50*XLEN/8, x2)

inst_84:
// rs2_w0_val == 8, rs1_w1_val == -65
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00100000;  op2val:0x00000100000008
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffbf00100000, 0x00000100000008, x1, 51*XLEN/8, x2)

inst_85:
// rs2_w0_val == 16, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffff7ff;  op2val:0xfffffff600000010
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffbffffffff7ff, 0xfffffff600000010, x1, 52*XLEN/8, x2)

inst_86:
// rs2_w0_val == 64, rs1_w1_val == 131072
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000004;  op2val:0x7fffffff00000040
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x02000000000004, 0x7fffffff00000040, x1, 53*XLEN/8, x2)

inst_87:
// rs2_w0_val == 128, rs1_w1_val == -262145, rs2_w1_val == -33
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000002;  op2val:0xffffffdf00000080
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000002, 0xffffffdf00000080, x1, 54*XLEN/8, x2)

inst_88:
// rs2_w0_val == 256, rs1_w1_val == -33, rs2_w1_val == 2097152
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf3fffffff;  op2val:0x20000000000100
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdf3fffffff, 0x20000000000100, x1, 55*XLEN/8, x2)

inst_89:
// rs2_w0_val == 512, rs1_w1_val == 2097152
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffff7;  op2val:0x00080000000200
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x200000fffffff7, 0x00080000000200, x1, 56*XLEN/8, x2)

inst_90:
// rs2_w0_val == 8192, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ff7fffff;  op2val:0xfffffffd00002000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000006ff7fffff, 0xfffffffd00002000, x1, 57*XLEN/8, x2)

inst_91:
// rs2_w0_val == 16384, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffbf;  op2val:0xffffefff00004000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000400ffffffbf, 0xffffefff00004000, x1, 58*XLEN/8, x2)

inst_92:
// rs2_w0_val == 131072, rs2_w1_val == 262144
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd80000000;  op2val:0x04000000020000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffd80000000, 0x04000000020000, x1, 59*XLEN/8, x2)

inst_93:
// rs2_w0_val == 1048576, rs2_w1_val == 131072
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ff7fffff;  op2val:0x02000000100000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000009ff7fffff, 0x02000000100000, x1, 60*XLEN/8, x2)

inst_94:
// rs2_w0_val == 4194304, rs2_w1_val == 64
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffffa;  op2val:0x00004000400000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x100000fffffffa, 0x00004000400000, x1, 61*XLEN/8, x2)

inst_95:
// rs2_w0_val == 16777216, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffbfffff;  op2val:0xfffbffff01000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffbfffff, 0xfffbffff01000000, x1, 62*XLEN/8, x2)

inst_96:
// rs2_w0_val == 33554432, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfbffffff;  op2val:0xfffffffa02000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffcfbffffff, 0xfffffffa02000000, x1, 63*XLEN/8, x2)

inst_97:
// rs2_w0_val == 134217728, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000400;  op2val:0xfffffff708000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000400, 0xfffffff708000000, x1, 64*XLEN/8, x2)

inst_98:
// rs2_w0_val == 536870912, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffaaaaaaaa;  op2val:0xfffbffff20000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffbffffaaaaaaaa, 0xfffbffff20000000, x1, 65*XLEN/8, x2)

inst_99:
// rs2_w0_val == -5, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffeffffff;  op2val:0x000002fffffffb
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0x000002fffffffb, x1, 66*XLEN/8, x2)

inst_100:
// rs2_w0_val == -33, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffffef;  op2val:0x200000ffffffdf
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x400000ffffffef, 0x200000ffffffdf, x1, 67*XLEN/8, x2)

inst_101:
// rs2_w0_val == -65, rs1_w1_val == 134217728
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000aaaaaaaa;  op2val:0x3fffffffffffffbf
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x8000000aaaaaaaa, 0x3fffffffffffffbf, x1, 68*XLEN/8, x2)

inst_102:
// rs2_w0_val == -513, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000002000;  op2val:0xffeffffffffffdff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xc000000000002000, 0xffeffffffffffdff, x1, 69*XLEN/8, x2)

inst_103:
// rs2_w0_val == -8388609, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff63fffffff;  op2val:0xfffffffaff7fffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff63fffffff, 0xfffffffaff7fffff, x1, 70*XLEN/8, x2)

inst_104:
// rs2_w0_val == -33554433, rs1_w1_val == -1025
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff10000000;  op2val:0xaaaaaaaafdffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffbff10000000, 0xaaaaaaaafdffffff, x1, 71*XLEN/8, x2)

inst_105:
// rs2_w0_val == -268435457, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000800;  op2val:0x040000efffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x40000000000800, 0x040000efffffff, x1, 72*XLEN/8, x2)

inst_106:
// rs2_w0_val == -536870913, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffe;  op2val:0xdfffffffdfffffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffe, 0xdfffffffdfffffff, x1, 73*XLEN/8, x2)

inst_107:
// rs2_w1_val == -32769, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffe;  op2val:0xffff7fff00000200
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x002000fffffffe, 0xffff7fff00000200, x1, 74*XLEN/8, x2)

inst_108:
// rs2_w1_val == 512, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffbffffff;  op2val:0x000200fffffffa
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffbffffffbffffff, 0x000200fffffffa, x1, 75*XLEN/8, x2)

inst_109:
// rs1_w1_val == 524288, rs2_w1_val == -65
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffff9;  op2val:0xffffffbf80000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x080000fffffff9, 0xffffffbf80000000, x1, 76*XLEN/8, x2)

inst_110:
// rs2_w1_val == 8192, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fff7ffff;  op2val:0x00200000000020
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x100000fff7ffff, 0x00200000000020, x1, 77*XLEN/8, x2)

inst_111:
// rs1_w1_val == -131073, rs2_w1_val == 33554432
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00400000;  op2val:0x200000010000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffdffff00400000, 0x200000010000000, x1, 78*XLEN/8, x2)

inst_112:
// rs2_w1_val == 32768, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffff7ffff;  op2val:0x00800000800000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfbfffffffff7ffff, 0x00800000800000, x1, 79*XLEN/8, x2)

inst_113:
// rs2_w1_val == 524288, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffff7f;  op2val:0x080000c0000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x000004ffffff7f, 0x080000c0000000, x1, 80*XLEN/8, x2)

inst_114:
// rs1_w1_val == 268435456, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000010000000;  op2val:0x000100ffbfffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x1000000010000000, 0x000100ffbfffff, x1, 81*XLEN/8, x2)

inst_115:
// rs1_w1_val == -524289, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00400000;  op2val:0x00000500000100
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00400000, 0x00000500000100, x1, 82*XLEN/8, x2)

inst_116:
// rs1_w1_val == -5, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbf7ffffff;  op2val:0xfffffff700000003
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffbf7ffffff, 0xfffffff700000003, x1, 83*XLEN/8, x2)

inst_117:
// rs2_w1_val == 134217728, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf3fffffff;  op2val:0x800000055555555
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffbf3fffffff, 0x800000055555555, x1, 84*XLEN/8, x2)

inst_118:
// rs1_w1_val == -129, rs2_w1_val == -65537
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f04000000;  op2val:0xfffeffff00200000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffff7f04000000, 0xfffeffff00200000, x1, 85*XLEN/8, x2)

inst_119:
// rs2_w1_val == 1073741824, rs1_w1_val == -513
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000010;  op2val:0x40000000fffffff9
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000010, 0x40000000fffffff9, x1, 86*XLEN/8, x2)

inst_120:
// rs1_w1_val == -257, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffdffffff;  op2val:0xfffffffd00000010
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffefffdffffff, 0xfffffffd00000010, x1, 87*XLEN/8, x2)

inst_121:
// rs1_w1_val == -2097153, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0x00000600040000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0x00000600040000, x1, 88*XLEN/8, x2)

inst_122:
// rs2_w0_val == -2049, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000800;  op2val:0x000000fffff7ff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffefff00000800, 0x000000fffff7ff, x1, 89*XLEN/8, x2)

inst_123:
// rs1_w1_val == -32769, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0xfffffffa00020000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffff7fff00200000, 0xfffffffa00020000, x1, 90*XLEN/8, x2)

inst_124:
// rs2_w0_val == -8193, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffd;  op2val:0xff7fffffffffdfff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffd, 0xff7fffffffffdfff, x1, 91*XLEN/8, x2)

inst_125:
// rs2_w0_val == -32769, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffa;  op2val:0xfffffffaffff7fff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffa, 0xfffffffaffff7fff, x1, 92*XLEN/8, x2)

inst_126:
// rs2_w1_val == -8193, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffb;  op2val:0xffffdfff10000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffb, 0xffffdfff10000000, x1, 93*XLEN/8, x2)

inst_127:
// rs2_w0_val == -524289, 
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00100000;  op2val:0xaaaaaaaafff7ffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffeff00100000, 0xaaaaaaaafff7ffff, x1, 94*XLEN/8, x2)

inst_128:
// rs1_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -9, rs1_w1_val == -4097, rs2_w0_val == 2048
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0xfffffff700000800
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0xfffffff700000800, x1, 95*XLEN/8, x2)

inst_129:
// rs1_w0_val == 1, rs1_w1_val == 33554432, rs2_w1_val == 4194304, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -257, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000001;  op2val:0x400000fffffeff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0x200000000000001, 0x400000fffffeff, x1, 96*XLEN/8, x2)

inst_130:
// rs1_w0_val == 131072, rs2_w1_val == 8388608, rs2_w0_val == -262145, rs1_w1_val == -1431655766
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00020000;  op2val:0x800000fffbffff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00020000, 0x800000fffbffff, x1, 97*XLEN/8, x2)

inst_131:
// rs1_w0_val == 262144, rs2_w0_val == 1073741824, rs2_w1_val == -268435457
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00040000;  op2val:0xefffffff40000000
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00040000, 0xefffffff40000000, x1, 98*XLEN/8, x2)

inst_132:
// rs1_w0_val == 16777216, rs1_w1_val == -1048577, rs2_w1_val == 8
// opcode: mulu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff01000000;  op2val:0x000008fffffeff
TEST_RR_OP(mulu.w01, x31, x30, x29, 0x0000000000000000, 0xffefffff01000000, 0x000008fffffeff, x1, 99*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x9_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x9_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 100*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
