
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:47:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p8.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sha instruction of the RISC-V RV64PZicsr extension for the sha covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sha)

RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs2 == rd != rs1, rs1==x3, rs2==x8, rd==x8, rs1_w0_val == -2147483648, rs2_w0_val == -4194305, rs1_w1_val == -1025, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -17, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val != rs2_w1_val
// opcode: sha ; op1:x3; op2:x8; dest:x8; op1val:0xfffffbff80000000;  op2val:0xffffffefffbfffff
TEST_RR_OP(sha, x8, x3, x8, 0x0000000000000000, 0xfffffbff80000000, 0xffffffefffbfffff, x6, 0*XLEN/8, x14)

inst_1:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_w0_val == -1, rs2_w0_val == 536870912, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -2
// opcode: sha ; op1:x20; op2:x20; dest:x20; op1val:0xfffffffeffffffff;  op2val:0xfffffffc20000000
TEST_RR_OP(sha, x20, x20, x20, 0x0000000000000000, 0xfffffffeffffffff, 0xfffffffc20000000, x6, 1*XLEN/8, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x17, rs1_w0_val == 0, rs1_w1_val == 131072, rs2_w1_val == -65, rs2_w0_val == 1024, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: sha ; op1:x30; op2:x30; dest:x17; op1val:0x02000000000000;  op2val:0xffffffbf00000400
TEST_RR_OP(sha, x17, x30, x30, 0x0000000000000000, 0x02000000000000, 0xffffffbf00000400, x6, 2*XLEN/8, x14)

inst_3:
// rs1 == rd != rs2, rs1==x27, rs2==x24, rd==x27, rs1_w0_val == 1, rs2_w1_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -536870913, rs1_w1_val < 0 and rs2_w1_val > 0
// opcode: sha ; op1:x27; op2:x24; dest:x27; op1val:0xdfffffff00000001;  op2val:0x7fffffff00000009
TEST_RR_OP(sha, x27, x27, x24, 0x0000000000000000, 0xdfffffff00000001, 0x7fffffff00000009, x6, 3*XLEN/8, x14)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x15, rd==x12, rs1_w0_val == 2147483647, rs2_w1_val == 268435456, rs1_w1_val == 16384, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: sha ; op1:x7; op2:x15; dest:x12; op1val:0x0040007fffffff;  op2val:0x1000000000000005
TEST_RR_OP(sha, x12, x7, x15, 0x0000000000000000, 0x0040007fffffff, 0x1000000000000005, x6, 4*XLEN/8, x14)

inst_5:
// rs1==x13, rs2==x0, rd==x23, rs1_w0_val == 2, rs2_w0_val == 128, rs1_w1_val == 16, rs2_w1_val == 64
// opcode: sha ; op1:x13; op2:x0; dest:x23; op1val:0x00001000000002;  op2val:0x00004000000080
TEST_RR_OP(sha, x23, x13, x0, 0x0000000000000000, 0x00001000000002, 0x00004000000080, x6, 5*XLEN/8, x14)

inst_6:
// rs1==x26, rs2==x3, rd==x2, rs1_w0_val == 4, rs2_w0_val == 1048576, rs2_w1_val == -524289, rs1_w1_val == -8388609
// opcode: sha ; op1:x26; op2:x3; dest:x2; op1val:0xff7fffff00000004;  op2val:0xfff7ffff00100000
TEST_RR_OP(sha, x2, x26, x3, 0x0000000000000000, 0xff7fffff00000004, 0xfff7ffff00100000, x6, 6*XLEN/8, x14)

inst_7:
// rs1==x24, rs2==x1, rd==x4, rs1_w0_val == 8, rs2_w0_val == 0, rs2_w1_val == 67108864, rs1_w1_val == -257
// opcode: sha ; op1:x24; op2:x1; dest:x4; op1val:0xfffffeff00000008;  op2val:0x400000000000000
TEST_RR_OP(sha, x4, x24, x1, 0x0000000000000000, 0xfffffeff00000008, 0x400000000000000, x6, 7*XLEN/8, x14)

inst_8:
// rs1==x16, rs2==x2, rd==x11, rs1_w0_val == 16, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -131073, rs1_w1_val == 8192
// opcode: sha ; op1:x16; op2:x2; dest:x11; op1val:0x00200000000010;  op2val:0xfffffff8fffdffff
TEST_RR_OP(sha, x11, x16, x2, 0x0000000000000000, 0x00200000000010, 0xfffffff8fffdffff, x6, 8*XLEN/8, x14)

inst_9:
// rs1==x15, rs2==x9, rd==x26, rs1_w0_val == 32, rs1_w1_val == 65536, rs2_w0_val == 1, rs2_w1_val == 2048
// opcode: sha ; op1:x15; op2:x9; dest:x26; op1val:0x01000000000020;  op2val:0x00080000000001
TEST_RR_OP(sha, x26, x15, x9, 0x0000000000000000, 0x01000000000020, 0x00080000000001, x6, 9*XLEN/8, x14)

inst_10:
// rs1==x10, rs2==x4, rd==x21, rs1_w0_val == 64, rs1_w1_val == 33554432, rs2_w1_val == -1073741825, rs2_w0_val == -5
// opcode: sha ; op1:x10; op2:x4; dest:x21; op1val:0x200000000000040;  op2val:0xbffffffffffffffb
TEST_RR_OP(sha, x21, x10, x4, 0x0000000000000000, 0x200000000000040, 0xbffffffffffffffb, x6, 10*XLEN/8, x14)

inst_11:
// rs1==x19, rs2==x26, rd==x5, rs1_w0_val == 128, rs2_w0_val == -2097153, rs1_w1_val == -33, rs2_w1_val == -2
// opcode: sha ; op1:x19; op2:x26; dest:x5; op1val:0xffffffdf00000080;  op2val:0xfffffffeffdfffff
TEST_RR_OP(sha, x5, x19, x26, 0x0000000000000000, 0xffffffdf00000080, 0xfffffffeffdfffff, x6, 11*XLEN/8, x14)

inst_12:
// rs1==x1, rs2==x5, rd==x29, rs1_w0_val == 256, rs2_w1_val == 1073741824
// opcode: sha ; op1:x1; op2:x5; dest:x29; op1val:0x00000900000100;  op2val:0x4000000000000003
TEST_RR_OP(sha, x29, x1, x5, 0x0000000000000000, 0x00000900000100, 0x4000000000000003, x6, 12*XLEN/8, x14)

inst_13:
// rs1==x22, rs2==x31, rd==x19, rs1_w0_val == 512, rs1_w1_val == -524289, rs2_w1_val == -268435457, rs2_w0_val == -1048577
// opcode: sha ; op1:x22; op2:x31; dest:x19; op1val:0xfff7ffff00000200;  op2val:0xefffffffffefffff
TEST_RR_OP(sha, x19, x22, x31, 0x0000000000000000, 0xfff7ffff00000200, 0xefffffffffefffff, x6, 13*XLEN/8, x14)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_14:
// rs1==x25, rs2==x22, rd==x18, rs1_w0_val == 1024, rs1_w1_val == 2, rs2_w0_val == 4194304, rs2_w1_val == 1048576
// opcode: sha ; op1:x25; op2:x22; dest:x18; op1val:0x00000200000400;  op2val:0x10000000400000
TEST_RR_OP(sha, x18, x25, x22, 0x0000000000000000, 0x00000200000400, 0x10000000400000, x15, 0*XLEN/8, x1)

inst_15:
// rs1==x0, rs2==x25, rd==x28, rs1_w0_val == 2048, rs2_w1_val == 16, rs1_w1_val == -1
// opcode: sha ; op1:x0; op2:x25; dest:x28; op1val:0xffffffff00000800;  op2val:0x00001000000005
TEST_RR_OP(sha, x28, x0, x25, 0x0000000000000000, 0xffffffff00000800, 0x00001000000005, x15, 1*XLEN/8, x1)

inst_16:
// rs1==x2, rs2==x23, rd==x31, rs1_w0_val == 4096, rs2_w0_val == 32, rs1_w1_val == -1073741825, rs2_w1_val == -32769
// opcode: sha ; op1:x2; op2:x23; dest:x31; op1val:0xbfffffff00001000;  op2val:0xffff7fff00000020
TEST_RR_OP(sha, x31, x2, x23, 0x0000000000000000, 0xbfffffff00001000, 0xffff7fff00000020, x15, 2*XLEN/8, x1)

inst_17:
// rs1==x28, rs2==x27, rd==x14, rs1_w0_val == 8192, rs1_w1_val == -131073, rs2_w1_val == 262144
// opcode: sha ; op1:x28; op2:x27; dest:x14; op1val:0xfffdffff00002000;  op2val:0x040000fffffffb
TEST_RR_OP(sha, x14, x28, x27, 0x0000000000000000, 0xfffdffff00002000, 0x040000fffffffb, x15, 3*XLEN/8, x1)

inst_18:
// rs1==x31, rs2==x19, rd==x16, rs1_w0_val == 16384, rs2_w0_val == -1073741825, rs1_w1_val == -2147483648
// opcode: sha ; op1:x31; op2:x19; dest:x16; op1val:0x8000000000004000;  op2val:0xffff7fffbfffffff
TEST_RR_OP(sha, x16, x31, x19, 0x0000000000000000, 0x8000000000004000, 0xffff7fffbfffffff, x15, 4*XLEN/8, x1)

inst_19:
// rs1==x5, rs2==x7, rd==x3, rs1_w0_val == 32768, rs2_w0_val == 33554432, rs1_w1_val == -32769
// opcode: sha ; op1:x5; op2:x7; dest:x3; op1val:0xffff7fff00008000;  op2val:0x4000000002000000
TEST_RR_OP(sha, x3, x5, x7, 0x0000000000000000, 0xffff7fff00008000, 0x4000000002000000, x15, 5*XLEN/8, x1)

inst_20:
// rs1==x12, rs2==x18, rd==x9, rs1_w0_val == 65536, rs1_w0_val == rs2_w0_val, rs2_w1_val == -4097, rs2_w0_val == 65536, rs1_w1_val == -16385
// opcode: sha ; op1:x12; op2:x18; dest:x9; op1val:0xffffbfff00010000;  op2val:0xffffefff00010000
TEST_RR_OP(sha, x9, x12, x18, 0x0000000000000000, 0xffffbfff00010000, 0xffffefff00010000, x15, 6*XLEN/8, x1)

inst_21:
// rs1==x18, rs2==x11, rd==x0, rs1_w0_val == 131072, rs2_w0_val == 16, rs1_w1_val == -2097153, rs2_w1_val == -65537
// opcode: sha ; op1:x18; op2:x11; dest:x0; op1val:0xffdfffff00020000;  op2val:0xfffeffff00000010
TEST_RR_OP(sha, x0, x18, x11, 0x0000000000000000, 0xffdfffff00020000, 0xfffeffff00000010, x15, 7*XLEN/8, x1)

inst_22:
// rs1==x23, rs2==x14, rd==x30, rs1_w0_val == 262144, rs2_w1_val == 4096, rs1_w1_val == -65, rs2_w0_val == -4097
// opcode: sha ; op1:x23; op2:x14; dest:x30; op1val:0xffffffbf00040000;  op2val:0x001000ffffefff
TEST_RR_OP(sha, x30, x23, x14, 0x0000000000000000, 0xffffffbf00040000, 0x001000ffffefff, x15, 8*XLEN/8, x1)

inst_23:
// rs1==x17, rs2==x13, rd==x22, rs1_w0_val == 524288, rs1_w1_val == 2147483647, rs2_w0_val == 2048
// opcode: sha ; op1:x17; op2:x13; dest:x22; op1val:0x7fffffff00080000;  op2val:0x400000000000800
TEST_RR_OP(sha, x22, x17, x13, 0x0000000000000000, 0x7fffffff00080000, 0x400000000000800, x15, 9*XLEN/8, x1)

inst_24:
// rs1==x11, rs2==x6, rd==x25, rs1_w0_val == 1048576, rs1_w1_val == 4, rs2_w1_val == 1431655765
// opcode: sha ; op1:x11; op2:x6; dest:x25; op1val:0x00000400100000;  op2val:0x5555555500000005
TEST_RR_OP(sha, x25, x11, x6, 0x0000000000000000, 0x00000400100000, 0x5555555500000005, x15, 10*XLEN/8, x1)

inst_25:
// rs1==x4, rs2==x12, rd==x7, rs1_w0_val == 2097152, rs2_w1_val == -131073, rs2_w0_val == -257
// opcode: sha ; op1:x4; op2:x12; dest:x7; op1val:0xffdfffff00200000;  op2val:0xfffdfffffffffeff
TEST_RR_OP(sha, x7, x4, x12, 0x0000000000000000, 0xffdfffff00200000, 0xfffdfffffffffeff, x15, 11*XLEN/8, x1)

inst_26:
// rs1==x8, rs2==x21, rd==x6, rs1_w0_val == 4194304, rs2_w1_val == -33554433, rs2_w0_val == -1, rs1_w1_val == -4194305
// opcode: sha ; op1:x8; op2:x21; dest:x6; op1val:0xffbfffff00400000;  op2val:0xfdffffffffffffff
TEST_RR_OP(sha, x6, x8, x21, 0x0000000000000000, 0xffbfffff00400000, 0xfdffffffffffffff, x15, 12*XLEN/8, x1)

inst_27:
// rs1==x21, rs2==x10, rd==x13, rs1_w0_val == 8388608, rs2_w0_val == 8192, rs2_w1_val == 32
// opcode: sha ; op1:x21; op2:x10; dest:x13; op1val:0x00000200800000;  op2val:0x00002000002000
TEST_RR_OP(sha, x13, x21, x10, 0x0000000000000000, 0x00000200800000, 0x00002000002000, x15, 13*XLEN/8, x1)

inst_28:
// rs1==x14, rs2==x17, rd==x1, rs1_w0_val == 16777216, rs1_w1_val == 1024
// opcode: sha ; op1:x14; op2:x17; dest:x1; op1val:0x00040001000000;  op2val:0xffffeffffffffffa
TEST_RR_OP(sha, x1, x14, x17, 0x0000000000000000, 0x00040001000000, 0xffffeffffffffffa, x15, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x6, rs2==x16, rd==x10, rs1_w0_val == 33554432, rs2_w1_val == 128, rs2_w0_val == 524288
// opcode: sha ; op1:x6; op2:x16; dest:x10; op1val:0xdfffffff02000000;  op2val:0x00008000080000
TEST_RR_OP(sha, x10, x6, x16, 0x0000000000000000, 0xdfffffff02000000, 0x00008000080000, x1, 0*XLEN/8, x2)

inst_30:
// rs1==x29, rs2==x28, rd==x24, rs1_w0_val == 67108864, rs1_w1_val == 67108864, rs2_w0_val == 8388608, rs2_w1_val == -8193
// opcode: sha ; op1:x29; op2:x28; dest:x24; op1val:0x400000004000000;  op2val:0xffffdfff00800000
TEST_RR_OP(sha, x24, x29, x28, 0x0000000000000000, 0x400000004000000, 0xffffdfff00800000, x1, 1*XLEN/8, x2)

inst_31:
// rs1==x9, rs2==x29, rd==x15, rs1_w0_val == 134217728, rs2_w0_val == 32768
// opcode: sha ; op1:x9; op2:x29; dest:x15; op1val:0x02000008000000;  op2val:0x5555555500008000
TEST_RR_OP(sha, x15, x9, x29, 0x0000000000000000, 0x02000008000000, 0x5555555500008000, x1, 2*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, rs2_w1_val == 524288, rs2_w0_val == -513
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xc000000010000000;  op2val:0x080000fffffdff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xc000000010000000, 0x080000fffffdff, x1, 3*XLEN/8, x2)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff20000000;  op2val:0x00000700400000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xff7fffff20000000, 0x00000700400000, x1, 4*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs1_w1_val == 536870912, rs2_w1_val == 0, rs2_w0_val == 8
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x2000000040000000;  op2val:0x00000000000008
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x2000000040000000, 0x00000000000008, x1, 5*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w1_val == -3, rs2_w0_val == -8193
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffe;  op2val:0xefffffffffffdfff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffe, 0xefffffffffffdfff, x1, 6*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == 2, rs1_w1_val == -134217729, rs2_w0_val == -9
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffd;  op2val:0x000002fffffff7
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffd, 0x000002fffffff7, x1, 7*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs2_w1_val == -129
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffffb;  op2val:0xffffff7f00000007
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000010fffffffb, 0xffffff7f00000007, x1, 8*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs1_w1_val == 1073741824
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff7;  op2val:0x001000fffffffc
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff7, 0x001000fffffffc, x1, 9*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs2_w0_val == -129, rs2_w1_val == 134217728
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffef;  op2val:0x8000000ffffff7f
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffef, 0x8000000ffffff7f, x1, 10*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs2_w1_val == 33554432, rs1_w1_val == 524288, rs2_w0_val == -268435457
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffdf;  op2val:0x2000000efffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x080000ffffffdf, 0x2000000efffffff, x1, 11*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs1_w1_val == 2048, rs2_w1_val == -2147483648
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffbf;  op2val:0x8000000000000008
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000800ffffffbf, 0x8000000000000008, x1, 12*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffff7f;  op2val:0x000005ffffefff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000003ffffff7f, 0x000005ffffefff, x1, 13*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs2_w1_val == -16777217, rs1_w1_val == 8388608
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffeff;  op2val:0xfeffffff00400000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x800000fffffeff, 0xfeffffff00400000, x1, 14*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffdff;  op2val:0x00008000000001
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffdff, 0x00008000000001, x1, 15*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs1_w1_val == 134217728, rs2_w0_val == 131072
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffbff;  op2val:0x5555555500020000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x8000000fffffbff, 0x5555555500020000, x1, 16*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs1_w1_val == -65537
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffff7ff;  op2val:0x100000fffffff8
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffefffffffff7ff, 0x100000fffffff8, x1, 17*XLEN/8, x2)

inst_47:
// rs2_w1_val == -262145, rs1_w0_val == -8193, rs1_w1_val == 64
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffdfff;  op2val:0xfffbffff00000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000040ffffdfff, 0xfffbffff00000000, x1, 18*XLEN/8, x2)

inst_48:
// rs2_w1_val == -1048577, rs2_w0_val == 67108864, rs1_w1_val == 1431655765
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000006;  op2val:0xffefffff04000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x5555555500000006, 0xffefffff04000000, x1, 19*XLEN/8, x2)

inst_49:
// rs2_w1_val == -2097153, rs1_w1_val == -513, rs1_w0_val == -1431655766, rs2_w0_val == -134217729
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffaaaaaaaa;  op2val:0xffdffffff7ffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffdffaaaaaaaa, 0xffdffffff7ffffff, x1, 20*XLEN/8, x2)

inst_50:
// rs2_w1_val == -4194305, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000002;  op2val:0xffbfffff3fffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00000400000002, 0xffbfffff3fffffff, x1, 21*XLEN/8, x2)

inst_51:
// rs2_w1_val == -8388609, rs2_w0_val == 512
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffdff;  op2val:0xff7fffff00000200
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x080000fffffdff, 0xff7fffff00000200, x1, 22*XLEN/8, x2)

inst_52:
// rs2_w1_val == -67108865, rs2_w0_val == -16385
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000001;  op2val:0xfbffffffffffbfff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000001, 0xfbffffffffffbfff, x1, 23*XLEN/8, x2)

inst_53:
// rs2_w1_val == -134217729, rs2_w0_val == -33
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffc;  op2val:0xf7ffffffffffffdf
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffffc, 0xf7ffffffffffffdf, x1, 24*XLEN/8, x2)

inst_54:
// rs2_w1_val == -536870913, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000100;  op2val:0xdfffffff00000009
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000100, 0xdfffffff00000009, x1, 25*XLEN/8, x2)

inst_55:
// rs2_w1_val == -1431655766, rs2_w0_val == -2147483648
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000002;  op2val:0xaaaaaaaa80000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0xaaaaaaaa80000000, x1, 26*XLEN/8, x2)

inst_56:
// rs1_w1_val == rs2_w1_val, rs2_w1_val == 8192
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000010;  op2val:0x00200000000007
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00200000000010, 0x00200000000007, x1, 27*XLEN/8, x2)

inst_57:
// rs1_w0_val == -4097, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffefff;  op2val:0xffffdfff00000001
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000003ffffefff, 0xffffdfff00000001, x1, 28*XLEN/8, x2)

inst_58:
// rs1_w0_val == -16385, rs2_w0_val == 1431655765, rs1_w1_val == 4096
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffbfff;  op2val:0x00001055555555
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x001000ffffbfff, 0x00001055555555, x1, 29*XLEN/8, x2)

inst_59:
// rs1_w0_val == -32769, rs1_w1_val == -8193
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffff7fff;  op2val:0xffdfffffffffdfff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffdfffffff7fff, 0xffdfffffffffdfff, x1, 30*XLEN/8, x2)

inst_60:
// rs1_w0_val == -65537, rs1_w1_val == 1048576
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffeffff;  op2val:0x040000ffffefff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x100000fffeffff, 0x040000ffffefff, x1, 31*XLEN/8, x2)

inst_61:
// rs1_w0_val == -131073, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffdffff;  op2val:0xfdffffff00000005
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffdffff, 0xfdffffff00000005, x1, 32*XLEN/8, x2)

inst_62:
// rs1_w0_val == -262145, rs2_w1_val == 256, rs2_w0_val == -17
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffbffff;  op2val:0x000100ffffffef
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffefffbffff, 0x000100ffffffef, x1, 33*XLEN/8, x2)

inst_63:
// rs1_w0_val == -524289, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfff7ffff;  op2val:0xffefffff00000006
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffdfff7ffff, 0xffefffff00000006, x1, 34*XLEN/8, x2)

inst_64:
// rs1_w0_val == -1048577, rs2_w1_val == -5
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffefffff;  op2val:0xfffffffb00000080
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x7fffffffffefffff, 0xfffffffb00000080, x1, 35*XLEN/8, x2)

inst_65:
// rs1_w0_val == -2097153, rs2_w0_val == 1073741824, rs2_w1_val == -9
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffdfffff;  op2val:0xfffffff740000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffffbfffdfffff, 0xfffffff740000000, x1, 36*XLEN/8, x2)

inst_66:
// rs1_w0_val == -4194305, rs2_w1_val == 8
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffbfffff;  op2val:0x000008ffbfffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000006ffbfffff, 0x000008ffbfffff, x1, 37*XLEN/8, x2)

inst_67:
// rs1_w0_val == -8388609, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffff7fffff;  op2val:0x00000700000080
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x3fffffffff7fffff, 0x00000700000080, x1, 38*XLEN/8, x2)

inst_68:
// rs1_w0_val == -16777217, rs2_w1_val == -33, rs2_w0_val == -1025
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x80000000feffffff;  op2val:0xffffffdffffffbff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x80000000feffffff, 0xffffffdffffffbff, x1, 39*XLEN/8, x2)

inst_69:
// rs1_w0_val == -33554433, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000010fdffffff;  op2val:0xffffffefffefffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000010fdffffff, 0xffffffefffefffff, x1, 40*XLEN/8, x2)

inst_70:
// rs1_w0_val == -67108865, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffbffffff;  op2val:0xffffffdfffffff7f
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffbffffbffffff, 0xffffffdfffffff7f, x1, 41*XLEN/8, x2)

inst_71:
// rs1_w0_val == -134217729, rs2_w1_val == 1
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x20000000f7ffffff;  op2val:0x00000140000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x20000000f7ffffff, 0x00000140000000, x1, 42*XLEN/8, x2)

inst_72:
// rs1_w0_val == -268435457, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x800000efffffff;  op2val:0xffffdffffffffffa
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x800000efffffff, 0xffffdffffffffffa, x1, 43*XLEN/8, x2)

inst_73:
// rs1_w0_val == -536870913, rs2_w1_val == 2097152, rs2_w0_val == -2049
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x004000dfffffff;  op2val:0x200000fffff7ff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x004000dfffffff, 0x200000fffff7ff, x1, 44*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1073741825, rs2_w1_val == -16385
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x001000bfffffff;  op2val:0xffffbfff00080000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x001000bfffffff, 0xffffbfff00080000, x1, 45*XLEN/8, x2)

inst_75:
// rs1_w0_val == 1431655765, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x2000000055555555;  op2val:0x00080000000007
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x2000000055555555, 0x00080000000007, x1, 46*XLEN/8, x2)

inst_76:
// rs1_w1_val == 0, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000000aaaaaaaa;  op2val:0xfffffff6ffbfffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000000aaaaaaaa, 0xfffffff6ffbfffff, x1, 47*XLEN/8, x2)

inst_77:
// rs1_w1_val == 1, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00000100200000;  op2val:0xfffffffc00000400
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00000100200000, 0xfffffffc00000400, x1, 48*XLEN/8, x2)

inst_78:
// rs1_w1_val == 8, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffff8;  op2val:0xffffefff00100000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000008fffffff8, 0xffffefff00100000, x1, 49*XLEN/8, x2)

inst_79:
// rs1_w1_val == 32, rs2_w1_val == -1
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffffbf;  op2val:0xffffffffc0000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000020ffffffbf, 0xffffffffc0000000, x1, 50*XLEN/8, x2)

inst_80:
// rs1_w1_val == 128, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000080;  op2val:0xffffefff00800000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00008000000080, 0xffffefff00800000, x1, 51*XLEN/8, x2)

inst_81:
// rs1_w1_val == -33554433, rs2_w1_val == 32768
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffff7f;  op2val:0x008000fffffff9
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffff7f, 0x008000fffffff9, x1, 52*XLEN/8, x2)

inst_82:
// rs1_w1_val == -67108865, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffbfffffff;  op2val:0x00000000000005
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfbffffffbfffffff, 0x00000000000005, x1, 53*XLEN/8, x2)

inst_83:
// rs1_w1_val == -268435457, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00001000;  op2val:0xdfffffffffffffef
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xefffffff00001000, 0xdfffffffffffffef, x1, 54*XLEN/8, x2)

inst_84:
// rs1_w1_val == -1431655766, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaabfffffff;  op2val:0x000040fffffffb
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaabfffffff, 0x000040fffffffb, x1, 55*XLEN/8, x2)

inst_85:
// rs2_w0_val == 2147483647, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffbffff;  op2val:0xfffffffc7fffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffbffff, 0xfffffffc7fffffff, x1, 56*XLEN/8, x2)

inst_86:
// rs2_w0_val == 2, rs2_w1_val == -3, rs1_w1_val == 512
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffff7fff;  op2val:0xfffffffd00000002
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000200ffff7fff, 0xfffffffd00000002, x1, 57*XLEN/8, x2)

inst_87:
// rs2_w0_val == 4, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffdffff;  op2val:0xffffffbf00000004
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000002fffdffff, 0xffffffbf00000004, x1, 58*XLEN/8, x2)

inst_88:
// rs2_w0_val == 64, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000008;  op2val:0x00000300000040
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000008, 0x00000300000040, x1, 59*XLEN/8, x2)

inst_89:
// rs2_w0_val == 256, rs2_w1_val == 16777216, rs1_w1_val == -9
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700040000;  op2val:0x100000000000100
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffff700040000, 0x100000000000100, x1, 60*XLEN/8, x2)

inst_90:
// rs2_w0_val == 4096, rs1_w1_val == -129
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffdfff;  op2val:0x00000900001000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffdfff, 0x00000900001000, x1, 61*XLEN/8, x2)

inst_91:
// rs2_w0_val == 16384, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffff7fff;  op2val:0x00000000004000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000800ffff7fff, 0x00000000004000, x1, 62*XLEN/8, x2)

inst_92:
// rs2_w0_val == 262144, rs1_w1_val == 32768
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000003;  op2val:0xffffbfff00040000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00800000000003, 0xffffbfff00040000, x1, 63*XLEN/8, x2)

inst_93:
// rs2_w0_val == 2097152, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000000;  op2val:0xfffffff800200000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000000, 0xfffffff800200000, x1, 64*XLEN/8, x2)

inst_94:
// rs2_w0_val == 16777216, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00040004000000;  op2val:0x00000101000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00040004000000, 0x00000101000000, x1, 65*XLEN/8, x2)

inst_95:
// rs2_w0_val == 134217728, rs1_w1_val == -2049
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffdfff;  op2val:0x00001008000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffdfff, 0x00001008000000, x1, 66*XLEN/8, x2)

inst_96:
// rs2_w0_val == 268435456, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000004;  op2val:0xfffffffd10000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00000800000004, 0xfffffffd10000000, x1, 67*XLEN/8, x2)

inst_97:
// rs2_w0_val == -2, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffff9;  op2val:0x008000fffffffe
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffff9, 0x008000fffffffe, x1, 68*XLEN/8, x2)

inst_98:
// rs2_w0_val == -3, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000002;  op2val:0x000006fffffffd
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000002, 0x000006fffffffd, x1, 69*XLEN/8, x2)

inst_99:
// rs2_w0_val == -65, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffbff;  op2val:0xffffff7fffffffbf
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x020000fffffbff, 0xffffff7fffffffbf, x1, 70*XLEN/8, x2)

inst_100:
// rs2_w0_val == -32769, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00400000;  op2val:0x3fffffffffff7fff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffc00400000, 0x3fffffffffff7fff, x1, 71*XLEN/8, x2)

inst_101:
// rs2_w0_val == -65537, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000008;  op2val:0xfffffffdfffeffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000008, 0xfffffffdfffeffff, x1, 72*XLEN/8, x2)

inst_102:
// rs2_w0_val == -262145, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x002000bfffffff;  op2val:0xfffffff9fffbffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x002000bfffffff, 0xfffffff9fffbffff, x1, 73*XLEN/8, x2)

inst_103:
// rs2_w0_val == -524289, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff9;  op2val:0xbffffffffff7ffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff9, 0xbffffffffff7ffff, x1, 74*XLEN/8, x2)

inst_104:
// rs2_w0_val == -8388609, rs2_w1_val == 536870912
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0x20000000ff7fffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0x20000000ff7fffff, x1, 75*XLEN/8, x2)

inst_105:
// rs2_w0_val == -16777217, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffff;  op2val:0x55555555feffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000006ffffffff, 0x55555555feffffff, x1, 76*XLEN/8, x2)

inst_106:
// rs2_w0_val == -33554433, rs2_w1_val == 512
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffff7fff;  op2val:0x000200fdffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xbfffffffffff7fff, 0x000200fdffffff, x1, 77*XLEN/8, x2)

inst_107:
// rs2_w0_val == -67108865, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000009;  op2val:0x000040fbffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x400000000000009, 0x000040fbffffff, x1, 78*XLEN/8, x2)

inst_108:
// rs2_w0_val == -536870913, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x02000080000000;  op2val:0x000003dfffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x02000080000000, 0x000003dfffffff, x1, 79*XLEN/8, x2)

inst_109:
// rs2_w0_val == -1431655766, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00800000400000;  op2val:0x000001aaaaaaaa
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00800000400000, 0x000001aaaaaaaa, x1, 80*XLEN/8, x2)

inst_110:
// rs1_w1_val == 256, rs2_w1_val == 4
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000006;  op2val:0x000004ffffffef
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00010000000006, 0x000004ffffffef, x1, 81*XLEN/8, x2)

inst_111:
// rs1_w1_val == 262144, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x0400007fffffff;  op2val:0x00000800800000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x0400007fffffff, 0x00000800800000, x1, 82*XLEN/8, x2)

inst_112:
// rs2_w1_val == 1024, rs1_w1_val == 16777216
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffff7ff;  op2val:0x000400ffbfffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x1000000fffff7ff, 0x000400ffbfffff, x1, 83*XLEN/8, x2)

inst_113:
// rs1_w1_val == 2097152, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffc;  op2val:0x7ffffffffffeffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x200000fffffffc, 0x7ffffffffffeffff, x1, 84*XLEN/8, x2)

inst_114:
// rs1_w1_val == 4194304, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x40000000010000;  op2val:0x400000000000002
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x40000000010000, 0x400000000000002, x1, 85*XLEN/8, x2)

inst_115:
// rs2_w1_val == 16384, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x040000dfffffff;  op2val:0x00400000000003
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x040000dfffffff, 0x00400000000003, x1, 86*XLEN/8, x2)

inst_116:
// rs2_w1_val == 65536, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffefffff;  op2val:0x01000000000400
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x001000ffefffff, 0x01000000000400, x1, 87*XLEN/8, x2)

inst_117:
// rs2_w1_val == 131072, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0x02000000000200
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffffdf00020000, 0x02000000000200, x1, 88*XLEN/8, x2)

inst_118:
// rs1_w1_val == -262145, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffff7ff;  op2val:0xfdffffff00040000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffff7ff, 0xfdffffff00040000, x1, 89*XLEN/8, x2)

inst_119:
// rs1_w1_val == 268435456, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x1000000001000000;  op2val:0xffffdfff00100000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x1000000001000000, 0xffffdfff00100000, x1, 90*XLEN/8, x2)

inst_120:
// rs2_w1_val == 4194304, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffc;  op2val:0x40000000000001
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x000008fffffffc, 0x40000000000001, x1, 91*XLEN/8, x2)

inst_121:
// rs2_w1_val == 8388608, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000000;  op2val:0x800000fffffbff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00000500000000, 0x800000fffffbff, x1, 92*XLEN/8, x2)

inst_122:
// rs1_w1_val == -5, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb3fffffff;  op2val:0x00200004000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffb3fffffff, 0x00200004000000, x1, 93*XLEN/8, x2)

inst_123:
// rs1_w1_val == -17, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffff8;  op2val:0x400000fffffdff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffff8, 0x400000fffffdff, x1, 94*XLEN/8, x2)

inst_124:
// rs1_w1_val == -4097, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00100000;  op2val:0x80000000100000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffefff00100000, 0x80000000100000, x1, 95*XLEN/8, x2)

inst_125:
// rs2_w1_val == -257, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffff7;  op2val:0xfffffeffefffffff
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x100000fffffff7, 0xfffffeffefffffff, x1, 96*XLEN/8, x2)

inst_126:
// rs2_w1_val == -513, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000001;  op2val:0xfffffdff00040000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00020000000001, 0xfffffdff00040000, x1, 97*XLEN/8, x2)

inst_127:
// rs2_w1_val == -1025, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0x00000600004000;  op2val:0xfffffbff00400000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0x00000600004000, 0xfffffbff00400000, x1, 98*XLEN/8, x2)

inst_128:
// rs2_w1_val == -2049, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff7fffffff;  op2val:0xfffff7ff01000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffdff7fffffff, 0xfffff7ff01000000, x1, 99*XLEN/8, x2)

inst_129:
// rs1_w1_val == -1048577, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffaaaaaaaa;  op2val:0xffefffff00000004
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffefffffaaaaaaaa, 0xffefffff00000004, x1, 100*XLEN/8, x2)

inst_130:
// rs1_w1_val == -16777217, 
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffbff;  op2val:0xffffdfff00008000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffbff, 0xffffdfff00008000, x1, 101*XLEN/8, x2)

inst_131:
// rs1_w0_val == -1, rs2_w0_val == 536870912, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -2
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0xfffffffc20000000
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0xfffffffc20000000, x1, 102*XLEN/8, x2)

inst_132:
// rs1_w0_val == 2048, rs2_w1_val == 16, rs1_w1_val == -1
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000800;  op2val:0x00001000000005
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffffffff00000800, 0x00001000000005, x1, 103*XLEN/8, x2)

inst_133:
// rs1_w0_val == 131072, rs2_w0_val == 16, rs1_w1_val == -2097153, rs2_w1_val == -65537
// opcode: sha ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00020000;  op2val:0xfffeffff00000010
TEST_RR_OP(sha, x31, x30, x29, 0x0000000000000000, 0xffdfffff00020000, 0xfffeffff00000010, x1, 104*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x6_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x6_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x15_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 105*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
