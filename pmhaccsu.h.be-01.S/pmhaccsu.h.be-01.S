
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhaccsu.h.be instruction of the RISC-V RV64PZicsr extension for the pmhaccsu.h.be covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhaccsu.h.be)

RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs2 == rd != rs1, rs1==x6, rs2==x28, rd==x28, rs1_h0_val == -32768, rs2_h1_val == 256, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h2_val == -16385, rs2_h3_val == 1024, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h3_val == 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -8193, rs1_h2_val == rs2_h2_val, rs1_h3_val != rs2_h3_val, rs2_h2_val == -16385, rs1_h1_val == -65
// opcode: pmhaccsu.h.be ; op1:x6; op2:x28; dest:x28; op1val:0x00bfffffbf8000;  op2val:0x400bfff0100dfff
TEST_RR_OP(pmhaccsu.h.be, x28, x6, x28, 0x0000000000000000, 0x00bfffffbf8000, 0x400bfff0100dfff, x9, 0*XLEN/8, x21)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x19, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -16385, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 4096, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -4097, rs1_h3_val == 128, rs2_h0_val == 16, rs2_h2_val == 4
// opcode: pmhaccsu.h.be ; op1:x13; op2:x13; dest:x19; op1val:0x80fffabfffffff;  op2val:0x10000004efff0010
TEST_RR_OP(pmhaccsu.h.be, x19, x13, x13, 0x0000000000000000, 0x80fffabfffffff, 0x10000004efff0010, x9, 1*XLEN/8, x21)

inst_2:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h0_val == 0, rs1_h2_val == -2049, rs1_h3_val == 4, rs2_h2_val == -257, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -257, rs2_h0_val == 32
// opcode: pmhaccsu.h.be ; op1:x22; op2:x22; dest:x22; op1val:0x04f7ffbfff0000;  op2val:0xfefffefffffa0020
TEST_RR_OP(pmhaccsu.h.be, x22, x22, x22, 0x0000000000000000, 0x04f7ffbfff0000, 0xfefffefffffa0020, x9, 2*XLEN/8, x21)

inst_3:
// rs1 == rd != rs2, rs1==x26, rs2==x29, rd==x26, rs1_h0_val == 1, rs1_h2_val == -65, rs2_h1_val == 1024, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -2049, rs2_h0_val == -32768, rs2_h3_val == -3, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -1
// opcode: pmhaccsu.h.be ; op1:x26; op2:x29; dest:x26; op1val:0xf7ffffbffff80001;  op2val:0xfffdffff04008000
TEST_RR_OP(pmhaccsu.h.be, x26, x26, x29, 0x0000000000000000, 0xf7ffffbffff80001, 0xfffdffff04008000, x9, 3*XLEN/8, x21)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x24, rd==x5, rs1_h0_val == 32767, rs2_h3_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -1, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 32, rs2_h0_val == 512, rs1_h1_val == -129
// opcode: pmhaccsu.h.be ; op1:x1; op2:x24; dest:x5; op1val:0xfffcffffff7f7fff;  op2val:0x7ffffff900200200
TEST_RR_OP(pmhaccsu.h.be, x5, x1, x24, 0x0000000000000000, 0xfffcffffff7f7fff, 0x7ffffff900200200, x9, 4*XLEN/8, x21)

inst_5:
// rs1==x12, rs2==x31, rd==x18, rs1_h0_val == 2, rs2_h1_val == 4096, rs2_h2_val == 512, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 32767, rs1_h2_val == 32, rs1_h1_val == -3
// opcode: pmhaccsu.h.be ; op1:x12; op2:x31; dest:x18; op1val:0x7fff0020fffd0002;  op2val:0x400020010000006
TEST_RR_OP(pmhaccsu.h.be, x18, x12, x31, 0x0000000000000000, 0x7fff0020fffd0002, 0x400020010000006, x9, 5*XLEN/8, x21)

inst_6:
// rs1==x14, rs2==x6, rd==x16, rs1_h0_val == 4, rs2_h3_val == 2, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == 21845, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == 1024, rs2_h2_val == -513, rs1_h3_val == 2048
// opcode: pmhaccsu.h.be ; op1:x14; op2:x6; dest:x16; op1val:0x800555504000004;  op2val:0x02fdffefffdfff
TEST_RR_OP(pmhaccsu.h.be, x16, x14, x6, 0x0000000000000000, 0x800555504000004, 0x02fdffefffdfff, x9, 6*XLEN/8, x21)

inst_7:
// rs1==x15, rs2==x16, rd==x11, rs1_h0_val == 8, rs1_h3_val == -5, rs2_h3_val == 16, rs2_h1_val == -5, rs2_h0_val == 32767, rs1_h1_val == 16384, rs1_h2_val == -17
// opcode: pmhaccsu.h.be ; op1:x15; op2:x16; dest:x11; op1val:0xfffbffef40000008;  op2val:0x10fff8fffb7fff
TEST_RR_OP(pmhaccsu.h.be, x11, x15, x16, 0x0000000000000000, 0xfffbffef40000008, 0x10fff8fffb7fff, x9, 7*XLEN/8, x21)

inst_8:
// rs1==x24, rs2==x5, rd==x20, rs1_h0_val == 16, rs1_h1_val == 21845, rs2_h2_val == 4096, rs2_h0_val == -65, rs2_h3_val == -5, rs2_h1_val == -21846
// opcode: pmhaccsu.h.be ; op1:x24; op2:x5; dest:x20; op1val:0x07002055550010;  op2val:0xfffb1000aaaaffbf
TEST_RR_OP(pmhaccsu.h.be, x20, x24, x5, 0x0000000000000000, 0x07002055550010, 0xfffb1000aaaaffbf, x9, 8*XLEN/8, x21)

inst_9:
// rs1==x3, rs2==x18, rd==x4, rs1_h0_val == 32, rs2_h3_val == 8, rs1_h2_val == 32767, rs1_h3_val == 21845, rs2_h1_val == -2049, rs2_h0_val == 64, rs1_h1_val == -17, rs2_h2_val == 32767
// opcode: pmhaccsu.h.be ; op1:x3; op2:x18; dest:x4; op1val:0x55557fffffef0020;  op2val:0x087ffff7ff0040
TEST_RR_OP(pmhaccsu.h.be, x4, x3, x18, 0x0000000000000000, 0x55557fffffef0020, 0x087ffff7ff0040, x9, 9*XLEN/8, x21)

inst_10:
// rs1==x4, rs2==x20, rd==x30, rs1_h0_val == 64, rs2_h0_val == -129, rs2_h3_val == -65, rs1_h2_val == 8
// opcode: pmhaccsu.h.be ; op1:x4; op2:x20; dest:x30; op1val:0x03000800060040;  op2val:0xffbf0200fffaff7f
TEST_RR_OP(pmhaccsu.h.be, x30, x4, x20, 0x0000000000000000, 0x03000800060040, 0xffbf0200fffaff7f, x9, 10*XLEN/8, x21)

inst_11:
// rs1==x5, rs2==x10, rd==x12, rs1_h0_val == 128, rs2_h1_val == -3, rs1_h3_val == 512, rs2_h0_val == -21846, rs2_h2_val == 16
// opcode: pmhaccsu.h.be ; op1:x5; op2:x10; dest:x12; op1val:0x2000009fff60080;  op2val:0xfeff0010fffdaaaa
TEST_RR_OP(pmhaccsu.h.be, x12, x5, x10, 0x0000000000000000, 0x2000009fff60080, 0xfeff0010fffdaaaa, x9, 11*XLEN/8, x21)

inst_12:
// rs1==x7, rs2==x0, rd==x8, rs1_h0_val == 256, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: pmhaccsu.h.be ; op1:x7; op2:x0; dest:x8; op1val:0x00000700050100;  op2val:0x05feff00050009
TEST_RR_OP(pmhaccsu.h.be, x8, x7, x0, 0x0000000000000000, 0x00000700050100, 0x05feff00050009, x9, 12*XLEN/8, x21)

inst_13:
// rs1==x2, rs2==x17, rd==x23, rs1_h0_val == 512, rs1_h2_val == 1, rs2_h3_val == 128, rs1_h0_val == rs2_h0_val, rs2_h1_val == -2
// opcode: pmhaccsu.h.be ; op1:x2; op2:x17; dest:x23; op1val:0xfffc0001fffc0200;  op2val:0x800003fffe0200
TEST_RR_OP(pmhaccsu.h.be, x23, x2, x17, 0x0000000000000000, 0xfffc0001fffc0200, 0x800003fffe0200, x9, 13*XLEN/8, x21)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_14:
// rs1==x11, rs2==x8, rd==x3, rs1_h0_val == 1024, rs2_h0_val == 16384, rs2_h1_val == -65, rs2_h2_val == -1025, rs1_h2_val == 4096, rs2_h3_val == -16385
// opcode: pmhaccsu.h.be ; op1:x11; op2:x8; dest:x3; op1val:0x03100000060400;  op2val:0xbffffbffffbf4000
TEST_RR_OP(pmhaccsu.h.be, x3, x11, x8, 0x0000000000000000, 0x03100000060400, 0xbffffbffffbf4000, x5, 0*XLEN/8, x13)

inst_15:
// rs1==x23, rs2==x15, rd==x31, rs1_h0_val == 2048, rs1_h1_val == 2048, rs1_h3_val == 16, rs2_h2_val == 2048
// opcode: pmhaccsu.h.be ; op1:x23; op2:x15; dest:x31; op1val:0x10ffbf08000800;  op2val:0xfff808000005fffc
TEST_RR_OP(pmhaccsu.h.be, x31, x23, x15, 0x0000000000000000, 0x10ffbf08000800, 0xfff808000005fffc, x5, 1*XLEN/8, x13)

inst_16:
// rs1==x8, rs2==x4, rd==x29, rs1_h0_val == 4096, rs2_h2_val == 32, rs1_h1_val == 16, rs2_h3_val == 512, rs2_h0_val == 8
// opcode: pmhaccsu.h.be ; op1:x8; op2:x4; dest:x29; op1val:0xfff8100000101000;  op2val:0x2000020fff90008
TEST_RR_OP(pmhaccsu.h.be, x29, x8, x4, 0x0000000000000000, 0xfff8100000101000, 0x2000020fff90008, x5, 2*XLEN/8, x13)

inst_17:
// rs1==x19, rs2==x7, rd==x27, rs1_h0_val == 8192, rs1_h3_val == -17, rs2_h0_val == 1, rs1_h2_val == 256, rs1_h1_val == -2, rs2_h3_val == -2049
// opcode: pmhaccsu.h.be ; op1:x19; op2:x7; dest:x27; op1val:0xffef0100fffe2000;  op2val:0xf7fffff900030001
TEST_RR_OP(pmhaccsu.h.be, x27, x19, x7, 0x0000000000000000, 0xffef0100fffe2000, 0xf7fffff900030001, x5, 3*XLEN/8, x13)

inst_18:
// rs1==x29, rs2==x14, rd==x9, rs1_h0_val == 16384, rs2_h0_val == 2048, rs2_h3_val == -32768, rs1_h2_val == 2048
// opcode: pmhaccsu.h.be ; op1:x29; op2:x14; dest:x9; op1val:0xffef080000064000;  op2val:0x800008003fff0800
TEST_RR_OP(pmhaccsu.h.be, x9, x29, x14, 0x0000000000000000, 0xffef080000064000, 0x800008003fff0800, x5, 4*XLEN/8, x13)

inst_19:
// rs1==x25, rs2==x1, rd==x15, rs1_h0_val == -2, rs2_h2_val == 128, rs2_h3_val == -129
// opcode: pmhaccsu.h.be ; op1:x25; op2:x1; dest:x15; op1val:0x0600050006fffe;  op2val:0xff7f0080fffa0008
TEST_RR_OP(pmhaccsu.h.be, x15, x25, x1, 0x0000000000000000, 0x0600050006fffe, 0xff7f0080fffa0008, x5, 5*XLEN/8, x13)

inst_20:
// rs1==x0, rs2==x12, rd==x6, rs1_h0_val == -3, rs1_h3_val == 2, rs1_h1_val == -4097, rs2_h1_val == 512, rs2_h2_val == 8
// opcode: pmhaccsu.h.be ; op1:x0; op2:x12; dest:x6; op1val:0x021000effffffd;  op2val:0xffbf000802000009
TEST_RR_OP(pmhaccsu.h.be, x6, x0, x12, 0x0000000000000000, 0x021000effffffd, 0xffbf000802000009, x5, 6*XLEN/8, x13)

inst_21:
// rs1==x20, rs2==x21, rd==x17, rs1_h0_val == -5, rs1_h2_val == -257, rs1_h1_val == -1, rs2_h1_val == 16384, rs1_h3_val == -8193, rs2_h3_val == -17
// opcode: pmhaccsu.h.be ; op1:x20; op2:x21; dest:x17; op1val:0xdffffefffffffffb;  op2val:0xffef3fff40000007
TEST_RR_OP(pmhaccsu.h.be, x17, x20, x21, 0x0000000000000000, 0xdffffefffffffffb, 0xffef3fff40000007, x5, 7*XLEN/8, x13)

inst_22:
// rs1==x21, rs2==x19, rd==x24, rs1_h0_val == -9, rs1_h2_val == 1024, rs1_h3_val == 1
// opcode: pmhaccsu.h.be ; op1:x21; op2:x19; dest:x24; op1val:0x010400ffbffff7;  op2val:0x0900200007fff9
TEST_RR_OP(pmhaccsu.h.be, x24, x21, x19, 0x0000000000000000, 0x010400ffbffff7, 0x0900200007fff9, x5, 8*XLEN/8, x13)

inst_23:
// rs1==x30, rs2==x11, rd==x2, rs1_h0_val == -17, rs1_h3_val == -9, rs2_h1_val == -33, rs2_h3_val == 1
// opcode: pmhaccsu.h.be ; op1:x30; op2:x11; dest:x2; op1val:0xfff7c0000800ffef;  op2val:0x010008ffdfff7f
TEST_RR_OP(pmhaccsu.h.be, x2, x30, x11, 0x0000000000000000, 0xfff7c0000800ffef, 0x010008ffdfff7f, x5, 9*XLEN/8, x13)

inst_24:
// rs1==x18, rs2==x30, rd==x10, rs1_h0_val == -33, rs1_h2_val == -21846, rs2_h2_val == -3, rs1_h3_val == 64
// opcode: pmhaccsu.h.be ; op1:x18; op2:x30; dest:x10; op1val:0x40aaaaefffffdf;  op2val:0xfffafffdfff90008
TEST_RR_OP(pmhaccsu.h.be, x10, x18, x30, 0x0000000000000000, 0x40aaaaefffffdf, 0xfffafffdfff90008, x5, 10*XLEN/8, x13)

inst_25:
// rs1==x31, rs2==x27, rd==x14, rs1_h0_val == -65, rs2_h0_val == -513, rs1_h2_val == -513
// opcode: pmhaccsu.h.be ; op1:x31; op2:x27; dest:x14; op1val:0x200fdff5555ffbf;  op2val:0x0500204000fdff
TEST_RR_OP(pmhaccsu.h.be, x14, x31, x27, 0x0000000000000000, 0x200fdff5555ffbf, 0x0500204000fdff, x5, 11*XLEN/8, x6)

inst_26:
// rs1==x9, rs2==x25, rd==x21, rs1_h0_val == -129, rs1_h1_val == 32767, rs1_h2_val == -3, rs2_h1_val == 16, rs2_h2_val == 1, rs2_h0_val == 256
// opcode: pmhaccsu.h.be ; op1:x9; op2:x25; dest:x21; op1val:0x09fffd7fffff7f;  op2val:0x10000100100100
TEST_RR_OP(pmhaccsu.h.be, x21, x9, x25, 0x0000000000000000, 0x09fffd7fffff7f, 0x10000100100100, x5, 12*XLEN/8, x6)

inst_27:
// rs1==x17, rs2==x26, rd==x7, rs1_h0_val == -257, rs2_h0_val == 21845
// opcode: pmhaccsu.h.be ; op1:x17; op2:x26; dest:x7; op1val:0x060003fffafeff;  op2val:0xc000bfff00205555
TEST_RR_OP(pmhaccsu.h.be, x7, x17, x26, 0x0000000000000000, 0x060003fffafeff, 0xc000bfff00205555, x5, 13*XLEN/8, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_28:
// rs1==x16, rs2==x23, rd==x1, rs1_h0_val == -513, rs1_h1_val == 4, rs1_h2_val == 64, rs2_h2_val == -9, rs2_h0_val == -5
// opcode: pmhaccsu.h.be ; op1:x16; op2:x23; dest:x1; op1val:0x0000400004fdff;  op2val:0xff7ffff7effffffb
TEST_RR_OP(pmhaccsu.h.be, x1, x16, x23, 0x0000000000000000, 0x0000400004fdff, 0xff7ffff7effffffb, x4, 0*XLEN/8, x6)

inst_29:
// rs1==x27, rs2==x9, rd==x25, rs1_h0_val == -1025, rs2_h0_val == 0, rs2_h1_val == -16385, rs1_h3_val == 16384, rs1_h1_val == 1
// opcode: pmhaccsu.h.be ; op1:x27; op2:x9; dest:x25; op1val:0x400000050001fbff;  op2val:0x400c000bfff0000
TEST_RR_OP(pmhaccsu.h.be, x25, x27, x9, 0x0000000000000000, 0x400000050001fbff, 0x400c000bfff0000, x4, 1*XLEN/8, x6)

inst_30:
// rs1==x10, rs2==x3, rd==x13, rs1_h0_val == -2049, rs1_h2_val == -33, rs2_h0_val == 8192, rs2_h3_val == 2048, rs2_h1_val == -129, rs1_h1_val == -33
// opcode: pmhaccsu.h.be ; op1:x10; op2:x3; dest:x13; op1val:0x03ffdfffdff7ff;  op2val:0x8000006ff7f2000
TEST_RR_OP(pmhaccsu.h.be, x13, x10, x3, 0x0000000000000000, 0x03ffdfffdff7ff, 0x8000006ff7f2000, x4, 2*XLEN/8, x6)

inst_31:
// rs1==x28, rs2==x2, rd==x0, rs1_h0_val == -4097, rs1_h2_val == 4
// opcode: pmhaccsu.h.be ; op1:x28; op2:x2; dest:x0; op1val:0xfff900047fffefff;  op2val:0xfffa02000003fffb
TEST_RR_OP(pmhaccsu.h.be, x0, x28, x2, 0x0000000000000000, 0xfff900047fffefff, 0xfffa02000003fffb, x4, 3*XLEN/8, x6)

inst_32:
// rs1_h0_val == -8193, rs1_h3_val == 8192
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff9ffbfdfff;  op2val:0x400fff8ffbf7fff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x2000fff9ffbfdfff, 0x400fff8ffbf7fff, x4, 4*XLEN/8, x6)

inst_33:
// rs1_h0_val == -16385, rs2_h1_val == 4, rs2_h0_val == 4
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff70008ffffbfff;  op2val:0x1000000900040004
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff70008ffffbfff, 0x1000000900040004, x4, 5*XLEN/8, x6)

inst_34:
// rs2_h3_val == 4, rs2_h1_val == -32768, rs2_h0_val == -4097
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0900083fff8000;  op2val:0x0400098000efff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0900083fff8000, 0x0400098000efff, x4, 6*XLEN/8, x6)

inst_35:
// rs2_h3_val == 32, rs2_h0_val == -2, rs1_h2_val == -1025, rs2_h2_val == -2049, rs2_h1_val == 1
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbfffff90005;  op2val:0x20f7ff0001fffe
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffbfbfffff90005, 0x20f7ff0001fffe, x4, 7*XLEN/8, x6)

inst_36:
// rs2_h3_val == 64, rs1_h3_val == -129, rs2_h1_val == -257
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffcffbf0040;  op2val:0x403ffffeff2000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xff7ffffcffbf0040, 0x403ffffeff2000, x4, 8*XLEN/8, x6)

inst_37:
// rs2_h3_val == 256, rs2_h2_val == 8192, rs1_h0_val == -21846
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0910000007aaaa;  op2val:0x1002000fffafffe
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0910000007aaaa, 0x1002000fffafffe, x4, 9*XLEN/8, x6)

inst_38:
// rs2_h3_val == 8192, rs2_h2_val == -32768, rs1_h3_val == 4096, rs2_h0_val == 1024
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffafff6fffa;  op2val:0x200080003fff0400
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x1000fffafff6fffa, 0x200080003fff0400, x4, 10*XLEN/8, x6)

inst_39:
// rs2_h3_val == 16384, rs2_h2_val == 64
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x00ffbfffdf3fff;  op2val:0x4000004080000010
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x00ffbfffdf3fff, 0x4000004080000010, x4, 11*XLEN/8, x6)

inst_40:
// rs2_h3_val == -2, rs2_h0_val == 4096, rs1_h2_val == 8192, rs1_h1_val == -9
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff2000fff7fff9;  op2val:0xfffef7ff00051000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff2000fff7fff9, 0xfffef7ff00051000, x4, 12*XLEN/8, x6)

inst_41:
// rs2_h3_val == -9, rs1_h1_val == 512, rs2_h1_val == 2
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff800030200fff6;  op2val:0xfff7fffd0002fff9
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff800030200fff6, 0xfff7fffd0002fff9, x4, 13*XLEN/8, x6)

inst_42:
// rs2_h3_val == -33, rs1_h1_val == -5, rs1_h3_val == -1025, rs2_h0_val == -1025, rs2_h2_val == 0
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003fffb0400;  op2val:0xffdf0000f7fffbff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfbff0003fffb0400, 0xffdf0000f7fffbff, x4, 14*XLEN/8, x6)

inst_43:
// rs2_h3_val == -513, rs2_h1_val == -8193
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05ffdfeffff7ff;  op2val:0xfdff0040dfff0800
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x05ffdfeffff7ff, 0xfdff0040dfff0800, x4, 15*XLEN/8, x6)

inst_44:
// rs2_h3_val == -1025, rs1_h3_val == -4097, rs1_h1_val == 32
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefff000700200009;  op2val:0xfbff000004000009
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xefff000700200009, 0xfbff000004000009, x4, 16*XLEN/8, x6)

inst_45:
// rs2_h3_val == -4097, rs1_h1_val == 8192
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0620002000aaaa;  op2val:0xeffffbff00030008
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0620002000aaaa, 0xeffffbff00030008, x4, 17*XLEN/8, x6)

inst_46:
// rs2_h3_val == -8193, rs2_h2_val == -8193, rs2_h0_val == -16385, rs1_h3_val == -21846
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa2000fff60004;  op2val:0xdfffdfff0005bfff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xaaaa2000fff60004, 0xdfffdfff0005bfff, x4, 18*XLEN/8, x6)

inst_47:
// rs2_h3_val == 21845, rs1_h3_val == 256, rs1_h2_val == -2
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100fffefff8dfff;  op2val:0x5555fbffffdffff9
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x100fffefff8dfff, 0x5555fbffffdffff9, x4, 19*XLEN/8, x6)

inst_48:
// rs2_h3_val == -21846, rs2_h2_val == -65, rs2_h1_val == 0, rs1_h2_val == -5, rs1_h1_val == 64
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200fffb00402000;  op2val:0xaaaaffbf00000100
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x200fffb00402000, 0xaaaaffbf00000100, x4, 20*XLEN/8, x6)

inst_49:
// rs1_h0_val == 21845, rs1_h2_val == 0, rs2_h0_val == -257, rs2_h1_val == 8
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0000efff5555;  op2val:0x40ffff0008feff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffb0000efff5555, 0x40ffff0008feff, x4, 21*XLEN/8, x6)

inst_50:
// rs1_h1_val == -32768, rs2_h0_val == -33, rs2_h1_val == 8192, rs1_h3_val == rs2_h3_val
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0300008000aaaa;  op2val:0x0300002000ffdf
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0300008000aaaa, 0x0300002000ffdf, x4, 22*XLEN/8, x6)

inst_51:
// rs1_h1_val == 0, rs1_h3_val == -513
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf0000ffbf;  op2val:0x1000800000010006
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfdffffdf0000ffbf, 0x1000800000010006, x4, 23*XLEN/8, x6)

inst_52:
// rs1_h1_val == 2, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000700022000;  op2val:0x07fff7efff0400
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa000700022000, 0x07fff7efff0400, x4, 24*XLEN/8, x6)

inst_53:
// rs1_h3_val == -3, rs1_h2_val == 128
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffd008055550040;  op2val:0xfff90010fffc0800
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffd008055550040, 0xfff90010fffc0800, x4, 25*XLEN/8, x6)

inst_54:
// rs1_h3_val == -33, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffdf20000040c000;  op2val:0x10004000090009
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffdf20000040c000, 0x10004000090009, x4, 26*XLEN/8, x6)

inst_55:
// rs1_h3_val == -65, rs1_h1_val == 256, rs1_h2_val == -4097
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefff01000200;  op2val:0xfbfffbff20000007
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffbfefff01000200, 0xfbfffbff20000007, x4, 27*XLEN/8, x6)

inst_56:
// rs1_h3_val == -257, rs1_h2_val == -9
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7c0007fff;  op2val:0xaaaa00010005ff7f
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfefffff7c0007fff, 0xaaaa00010005ff7f, x4, 28*XLEN/8, x6)

inst_57:
// rs1_h3_val == -16385, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000700050200;  op2val:0x04c000fff80010
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xbfff000700050200, 0x04c000fff80010, x4, 29*XLEN/8, x6)

inst_58:
// rs2_h0_val == -1, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00050020fff9;  op2val:0xffef80000010ffff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa00050020fff9, 0xffef80000010ffff, x4, 30*XLEN/8, x6)

inst_59:
// rs2_h0_val == 2, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05ffbf00401000;  op2val:0xff7f000300050002
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x05ffbf00401000, 0xff7f000300050002, x4, 31*XLEN/8, x6)

inst_60:
// rs2_h0_val == 128, rs1_h1_val == -2049, rs2_h2_val == -4097
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdfff7ff0200;  op2val:0xefffefff00000080
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffbffdfff7ff0200, 0xefffefff00000080, x4, 32*XLEN/8, x6)

inst_61:
// rs2_h0_val == -3, rs2_h1_val == 2048
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fbfffffc2000;  op2val:0xfff93fff0800fffd
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff8fbfffffc2000, 0xfff93fff0800fffd, x4, 33*XLEN/8, x6)

inst_62:
// rs2_h0_val == -9, rs1_h1_val == -513, rs2_h1_val == -1
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020fdff7fff;  op2val:0xbfff0001fffffff7
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xf7ff0020fdff7fff, 0xbfff0001fffffff7, x4, 34*XLEN/8, x6)

inst_63:
// rs2_h0_val == -17, rs1_h1_val == -1025
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffdfbffff7f;  op2val:0x01fffaff7fffef
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x4000fffdfbffff7f, 0x01fffaff7fffef, x4, 35*XLEN/8, x6)

inst_64:
// rs1_h1_val == 8, rs1_h3_val == -1, rs2_h2_val == 1024
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00080040;  op2val:0x555504000007dfff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffffffa00080040, 0x555504000007dfff, x4, 36*XLEN/8, x6)

inst_65:
// rs2_h0_val == -2049, rs2_h2_val == 256
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffdeffffbff4000;  op2val:0x050100ffdff7ff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffdeffffbff4000, 0x050100ffdff7ff, x4, 37*XLEN/8, x6)

inst_66:
// rs1_h1_val == 128, rs2_h1_val == 64
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff800800400;  op2val:0xfff600200040ffdf
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xbffffff800800400, 0xfff600200040ffdf, x4, 38*XLEN/8, x6)

inst_67:
// rs1_h1_val == 4096, rs2_h2_val == -17
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80fffb1000fff6;  op2val:0x01ffef0003aaaa
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x80fffb1000fff6, 0x01ffef0003aaaa, x4, 39*XLEN/8, x6)

inst_68:
// rs2_h1_val == 32767, rs2_h2_val == 21845
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff600060001efff;  op2val:0x0255557fffc000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff600060001efff, 0x0255557fffc000, x4, 40*XLEN/8, x6)

inst_69:
// rs2_h1_val == 128, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x020003fbff0020;  op2val:0x10000000080fffa
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x020003fbff0020, 0x10000000080fffa, x4, 41*XLEN/8, x6)

inst_70:
// rs1_h1_val == -8193, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000007dfff1000;  op2val:0xfbfffffa0800dfff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x10000007dfff1000, 0xfbfffffa0800dfff, x4, 42*XLEN/8, x6)

inst_71:
// rs1_h1_val == -21846, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x07ffefaaaaffbf;  op2val:0x3fff0009fff67fff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x07ffefaaaaffbf, 0x3fff0009fff67fff, x4, 43*XLEN/8, x6)

inst_72:
// rs1_h2_val == -32768, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff7800000040007;  op2val:0x047fff00070001
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff7800000040007, 0x047fff00070001, x4, 44*XLEN/8, x6)

inst_73:
// rs2_h1_val == -9, rs1_h3_val == 8
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0808000008fffa;  op2val:0x010000fff71000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0808000008fffa, 0x010000fff71000, x4, 45*XLEN/8, x6)

inst_74:
// rs2_h1_val == -17, rs2_h2_val == 16384, rs1_h1_val == -257
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x03fffdfeff0100;  op2val:0xfff64000ffef0001
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x03fffdfeff0100, 0xfff64000ffef0001, x4, 46*XLEN/8, x6)

inst_75:
// rs1_h2_val == 2, rs1_h3_val == 32
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x2000020800fffb;  op2val:0xfffa2000fffc0007
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x2000020800fffb, 0xfffa2000fffc0007, x4, 47*XLEN/8, x6)

inst_76:
// rs1_h2_val == 16, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0000108000fdff;  op2val:0xfff8c000fffd0010
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0000108000fdff, 0xfff8c000fffd0010, x4, 48*XLEN/8, x6)

inst_77:
// rs2_h1_val == -513, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff6fbff0007;  op2val:0xdffffefffdffefff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffcfff6fbff0007, 0xdffffefffdffefff, x4, 49*XLEN/8, x6)

inst_78:
// rs2_h1_val == -1025, rs1_h3_val == -2
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffe80000080dfff;  op2val:0xfbff0040fbff0040
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffe80000080dfff, 0xfbff0040fbff0040, x4, 50*XLEN/8, x6)

inst_79:
// rs1_h2_val == 512, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff702000005aaaa;  op2val:0xfff80000fffc0003
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff702000005aaaa, 0xfff80000fffc0003, x4, 51*XLEN/8, x6)

inst_80:
// rs1_h2_val == -129, rs1_h3_val == -32768
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x8000ff7f00800040;  op2val:0xfffeffefff7ffeff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x8000ff7f00800040, 0xfffeffefff7ffeff, x4, 52*XLEN/8, x6)

inst_81:
// rs1_h2_val == 16384, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa400000400001;  op2val:0xdfff555500037fff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa400000400001, 0xdfff555500037fff, x4, 53*XLEN/8, x6)

inst_82:
// rs1_h2_val == -8193, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff10000400;  op2val:0x0700090800c000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x01dfff10000400, 0x0700090800c000, x4, 54*XLEN/8, x6)

inst_83:
// rs2_h2_val == -2, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef0800ffff;  op2val:0xfbfffffe0400f7ff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffefffef0800ffff, 0xfbfffffe0400f7ff, x4, 55*XLEN/8, x6)

inst_84:
// rs2_h2_val == -5, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x057fff00000040;  op2val:0xfdfffffb00203fff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x057fff00000040, 0xfdfffffb00203fff, x4, 56*XLEN/8, x6)

inst_85:
// rs2_h2_val == -33, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffd8000ffef0004;  op2val:0x7fffffdfffff4000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffd8000ffef0004, 0x7fffffdfffff4000, x4, 57*XLEN/8, x6)

inst_86:
// rs2_h2_val == -129, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0540000010c000;  op2val:0x200ff7fffff0006
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0540000010c000, 0x200ff7fffff0006, x4, 58*XLEN/8, x6)

inst_87:
// rs2_h1_val == 21845, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x020010bfff0005;  op2val:0xffdf040055550006
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x020010bfff0005, 0xffdf040055550006, x4, 59*XLEN/8, x6)

inst_88:
// rs2_h3_val == -1, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0005ffbf0002;  op2val:0xfffffffafeffc000
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xaaaa0005ffbf0002, 0xfffffffafeffc000, x4, 60*XLEN/8, x6)

inst_89:
// rs1_h3_val == 1024, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400080000404000;  op2val:0x060009bffffff7
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x400080000404000, 0x060009bffffff7, x4, 61*XLEN/8, x6)

inst_90:
// rs2_h2_val == -21846, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefff0003fff67fff;  op2val:0xfbffaaaa00200007
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0xefff0003fff67fff, 0xfbffaaaa00200007, x4, 62*XLEN/8, x6)

inst_91:
// rs2_h2_val == 2, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0004dfff0400;  op2val:0x100002f7ffffbf
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x3fff0004dfff0400, 0x100002f7ffffbf, x4, 63*XLEN/8, x6)

inst_92:
// rs2_h3_val == 0, 
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x800002fffd0100;  op2val:0x00fefffffadfff
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x800002fffd0100, 0x00fefffffadfff, x4, 64*XLEN/8, x6)

inst_93:
// rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -16385, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 4096, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -4097, rs1_h3_val == 128, rs2_h0_val == 16, rs2_h2_val == 4
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80fffabfffffff;  op2val:0x10000004efff0010
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x80fffabfffffff, 0x10000004efff0010, x4, 65*XLEN/8, x6)

inst_94:
// rs1_h0_val == 0, rs1_h2_val == -2049, rs1_h3_val == 4, rs2_h2_val == -257, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -257, rs2_h0_val == 32
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x04f7ffbfff0000;  op2val:0xfefffefffffa0020
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x04f7ffbfff0000, 0xfefffefffffa0020, x4, 66*XLEN/8, x6)

inst_95:
// rs1_h0_val == -3, rs1_h3_val == 2, rs1_h1_val == -4097, rs2_h1_val == 512, rs2_h2_val == 8
// opcode: pmhaccsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x021000effffffd;  op2val:0xffbf000802000009
TEST_RR_OP(pmhaccsu.h.be, x31, x30, x29, 0x0000000000000000, 0x021000effffffd, 0xffbf000802000009, x4, 67*XLEN/8, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x9_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x9_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 68*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
