
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Dec  4 06:11:48 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/cgf_files/p8.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psshar.h.h0 instruction of the RISC-V RV32PZicsr extension for the psshar.h.h0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psshar.h.h0)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x9, rd==x2, rs1_h0_val == -32768, rs2_h1_val == -16385, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 8192, rs1_h1_val != rs2_h1_val, rs1_h1_val == -65
// opcode: psshar.h.h0 ; op1:x11; op2:x9; dest:x2; op1val:0xffbf8000;  op2val:0xbfff2000
TEST_RR_OP(psshar.h.h0, x2, x11, x9, 0x00000000, 0xffbf8000, 0xbfff2000, x5, 0*XLEN/8, x7)

inst_1:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h0_val == -1, rs2_h1_val == -3, rs1_h1_val == 32767, rs2_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: psshar.h.h0 ; op1:x4; op2:x4; dest:x4; op1val:0x7fffffff;  op2val:0xfffd8000
TEST_RR_OP(psshar.h.h0, x4, x4, x4, 0x00000000, 0x7fffffff, 0xfffd8000, x5, 1*XLEN/8, x7)

inst_2:
// rs2 == rd != rs1, rs1==x16, rs2==x14, rd==x14, rs1_h0_val == 0, rs1_h1_val == 256, rs2_h0_val == -65
// opcode: psshar.h.h0 ; op1:x16; op2:x14; dest:x14; op1val:0x1000000;  op2val:0xfff9ffbf
TEST_RR_OP(psshar.h.h0, x14, x16, x14, 0x00000000, 0x1000000, 0xfff9ffbf, x5, 2*XLEN/8, x7)

inst_3:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x11, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -5, rs1_h1_val == -1, rs2_h0_val == 2048
// opcode: psshar.h.h0 ; op1:x28; op2:x28; dest:x11; op1val:0xffff0001;  op2val:0xfffb0800
TEST_RR_OP(psshar.h.h0, x11, x28, x28, 0x00000000, 0xffff0001, 0xfffb0800, x5, 3*XLEN/8, x7)

inst_4:
// rs1 == rd != rs2, rs1==x8, rs2==x27, rd==x8, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -513
// opcode: psshar.h.h0 ; op1:x8; op2:x27; dest:x8; op1val:0xc0007fff;  op2val:0x06fdff
TEST_RR_OP(psshar.h.h0, x8, x8, x27, 0x00000000, 0xc0007fff, 0x06fdff, x5, 4*XLEN/8, x7)

inst_5:
// rs1==x9, rs2==x2, rd==x19, rs1_h0_val == 2, rs2_h1_val == -1025, rs2_h0_val == -257, rs1_h1_val == -32768
// opcode: psshar.h.h0 ; op1:x9; op2:x2; dest:x19; op1val:0x80000002;  op2val:0xfbfffeff
TEST_RR_OP(psshar.h.h0, x19, x9, x2, 0x00000000, 0x80000002, 0xfbfffeff, x5, 5*XLEN/8, x7)

inst_6:
// rs1==x15, rs2==x26, rd==x0, rs1_h0_val == 4, rs2_h1_val == 0, rs1_h1_val == -129
// opcode: psshar.h.h0 ; op1:x15; op2:x26; dest:x0; op1val:0xff7f0004;  op2val:0x00c000
TEST_RR_OP(psshar.h.h0, x0, x15, x26, 0x00000000, 0xff7f0004, 0x00c000, x5, 6*XLEN/8, x7)

inst_7:
// rs1==x20, rs2==x24, rd==x13, rs1_h0_val == 8, rs2_h0_val == 16, rs1_h1_val == -17, rs2_h1_val == 256
// opcode: psshar.h.h0 ; op1:x20; op2:x24; dest:x13; op1val:0xffef0008;  op2val:0x1000010
TEST_RR_OP(psshar.h.h0, x13, x20, x24, 0x00000000, 0xffef0008, 0x1000010, x5, 7*XLEN/8, x7)

inst_8:
// rs1==x14, rs2==x16, rd==x1, rs1_h0_val == 16, rs2_h0_val == 128
// opcode: psshar.h.h0 ; op1:x14; op2:x16; dest:x1; op1val:0xfffc0010;  op2val:0x050080
TEST_RR_OP(psshar.h.h0, x1, x14, x16, 0x00000000, 0xfffc0010, 0x050080, x5, 8*XLEN/8, x7)

inst_9:
// rs1==x6, rs2==x30, rd==x24, rs1_h0_val == 32, rs1_h1_val == 8192
// opcode: psshar.h.h0 ; op1:x6; op2:x30; dest:x24; op1val:0x20000020;  op2val:0xfffd0080
TEST_RR_OP(psshar.h.h0, x24, x6, x30, 0x00000000, 0x20000020, 0xfffd0080, x5, 9*XLEN/8, x7)

inst_10:
// rs1==x2, rs2==x22, rd==x29, rs1_h0_val == 64, rs2_h1_val == -8193, rs1_h1_val == 1
// opcode: psshar.h.h0 ; op1:x2; op2:x22; dest:x29; op1val:0x010040;  op2val:0xdffffff6
TEST_RR_OP(psshar.h.h0, x29, x2, x22, 0x00000000, 0x010040, 0xdffffff6, x5, 10*XLEN/8, x7)

inst_11:
// rs1==x19, rs2==x3, rd==x18, rs1_h0_val == 128, rs2_h1_val == 4, rs1_h1_val == 0, rs2_h0_val == -17
// opcode: psshar.h.h0 ; op1:x19; op2:x3; dest:x18; op1val:0x000080;  op2val:0x04ffef
TEST_RR_OP(psshar.h.h0, x18, x19, x3, 0x00000000, 0x000080, 0x04ffef, x5, 11*XLEN/8, x7)

inst_12:
// rs1==x24, rs2==x29, rd==x31, rs1_h0_val == 256, rs2_h0_val == -2, rs1_h1_val == -33, rs2_h1_val == 128
// opcode: psshar.h.h0 ; op1:x24; op2:x29; dest:x31; op1val:0xffdf0100;  op2val:0x80fffe
TEST_RR_OP(psshar.h.h0, x31, x24, x29, 0x00000000, 0xffdf0100, 0x80fffe, x5, 12*XLEN/8, x7)

inst_13:
// rs1==x26, rs2==x10, rd==x21, rs1_h0_val == 512, rs1_h1_val == -4097, rs2_h0_val == 32767
// opcode: psshar.h.h0 ; op1:x26; op2:x10; dest:x21; op1val:0xefff0200;  op2val:0x3fff7fff
TEST_RR_OP(psshar.h.h0, x21, x26, x10, 0x00000000, 0xefff0200, 0x3fff7fff, x5, 13*XLEN/8, x7)

inst_14:
// rs1==x29, rs2==x20, rd==x17, rs1_h0_val == 1024, 
// opcode: psshar.h.h0 ; op1:x29; op2:x20; dest:x17; op1val:0xffef0400;  op2val:0xfff67fff
TEST_RR_OP(psshar.h.h0, x17, x29, x20, 0x00000000, 0xffef0400, 0xfff67fff, x5, 14*XLEN/8, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x27, rs2==x31, rd==x9, rs1_h0_val == 2048, rs2_h1_val == -21846
// opcode: psshar.h.h0 ; op1:x27; op2:x31; dest:x9; op1val:0xfff90800;  op2val:0xaaaafffe
TEST_RR_OP(psshar.h.h0, x9, x27, x31, 0x00000000, 0xfff90800, 0xaaaafffe, x2, 0*XLEN/8, x3)

inst_16:
// rs1==x21, rs2==x18, rd==x12, rs1_h0_val == 4096, rs2_h0_val == 16384
// opcode: psshar.h.h0 ; op1:x21; op2:x18; dest:x12; op1val:0x20001000;  op2val:0xbfff4000
TEST_RR_OP(psshar.h.h0, x12, x21, x18, 0x00000000, 0x20001000, 0xbfff4000, x2, 1*XLEN/8, x3)

inst_17:
// rs1==x10, rs2==x13, rd==x23, rs1_h0_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 8, rs1_h1_val == 32, rs2_h0_val == 1024
// opcode: psshar.h.h0 ; op1:x10; op2:x13; dest:x23; op1val:0x202000;  op2val:0x080400
TEST_RR_OP(psshar.h.h0, x23, x10, x13, 0x00000000, 0x202000, 0x080400, x2, 2*XLEN/8, x3)

inst_18:
// rs1==x12, rs2==x15, rd==x25, rs1_h0_val == 16384, 
// opcode: psshar.h.h0 ; op1:x12; op2:x15; dest:x25; op1val:0xefff4000;  op2val:0x033fff
TEST_RR_OP(psshar.h.h0, x25, x12, x15, 0x00000000, 0xefff4000, 0x033fff, x2, 3*XLEN/8, x3)

inst_19:
// rs1==x25, rs2==x12, rd==x15, rs1_h0_val == -2, rs1_h1_val == 2, rs2_h1_val == -4097
// opcode: psshar.h.h0 ; op1:x25; op2:x12; dest:x15; op1val:0x02fffe;  op2val:0xefff0007
TEST_RR_OP(psshar.h.h0, x15, x25, x12, 0x00000000, 0x02fffe, 0xefff0007, x2, 4*XLEN/8, x3)

inst_20:
// rs1==x7, rs2==x6, rd==x27, rs1_h0_val == -3, rs2_h0_val == 21845, rs2_h1_val == -2049
// opcode: psshar.h.h0 ; op1:x7; op2:x6; dest:x27; op1val:0x2000fffd;  op2val:0xf7ff5555
TEST_RR_OP(psshar.h.h0, x27, x7, x6, 0x00000000, 0x2000fffd, 0xf7ff5555, x2, 5*XLEN/8, x3)

inst_21:
// rs1==x22, rs2==x1, rd==x16, rs1_h0_val == -5, rs2_h1_val == -33, rs2_h0_val == -3
// opcode: psshar.h.h0 ; op1:x22; op2:x1; dest:x16; op1val:0xfffffffb;  op2val:0xffdffffd
TEST_RR_OP(psshar.h.h0, x16, x22, x1, 0x00000000, 0xfffffffb, 0xffdffffd, x2, 6*XLEN/8, x3)

inst_22:
// rs1==x17, rs2==x19, rd==x26, rs1_h0_val == -9, rs2_h1_val == -32768
// opcode: psshar.h.h0 ; op1:x17; op2:x19; dest:x26; op1val:0x05fff7;  op2val:0x80000009
TEST_RR_OP(psshar.h.h0, x26, x17, x19, 0x00000000, 0x05fff7, 0x80000009, x2, 7*XLEN/8, x3)

inst_23:
// rs1==x31, rs2==x11, rd==x7, rs1_h0_val == -17, 
// opcode: psshar.h.h0 ; op1:x31; op2:x11; dest:x7; op1val:0x05ffef;  op2val:0x078000
TEST_RR_OP(psshar.h.h0, x7, x31, x11, 0x00000000, 0x05ffef, 0x078000, x2, 8*XLEN/8, x3)

inst_24:
// rs1==x1, rs2==x7, rd==x10, rs1_h0_val == -33, rs2_h0_val == -16385, rs2_h1_val == 32
// opcode: psshar.h.h0 ; op1:x1; op2:x7; dest:x10; op1val:0x3fffffdf;  op2val:0x20bfff
TEST_RR_OP(psshar.h.h0, x10, x1, x7, 0x00000000, 0x3fffffdf, 0x20bfff, x2, 9*XLEN/8, x3)

inst_25:
// rs1==x5, rs2==x8, rd==x30, rs1_h0_val == -65, rs2_h0_val == -129, rs1_h1_val == -21846
// opcode: psshar.h.h0 ; op1:x5; op2:x8; dest:x30; op1val:0xaaaaffbf;  op2val:0x09ff7f
TEST_RR_OP(psshar.h.h0, x30, x5, x8, 0x00000000, 0xaaaaffbf, 0x09ff7f, x2, 10*XLEN/8, x3)

inst_26:
// rs1==x23, rs2==x17, rd==x3, rs1_h0_val == -129, rs2_h1_val == -257
// opcode: psshar.h.h0 ; op1:x23; op2:x17; dest:x3; op1val:0xefffff7f;  op2val:0xfefffff9
TEST_RR_OP(psshar.h.h0, x3, x23, x17, 0x00000000, 0xefffff7f, 0xfefffff9, x2, 11*XLEN/8, x4)

inst_27:
// rs1==x3, rs2==x5, rd==x20, rs1_h0_val == -257, rs2_h0_val == 2, rs1_h1_val == 21845
// opcode: psshar.h.h0 ; op1:x3; op2:x5; dest:x20; op1val:0x5555feff;  op2val:0x000002
TEST_RR_OP(psshar.h.h0, x20, x3, x5, 0x00000000, 0x5555feff, 0x000002, x2, 12*XLEN/8, x4)

inst_28:
// rs1==x13, rs2==x25, rd==x6, rs1_h0_val == -513, rs2_h0_val == -5
// opcode: psshar.h.h0 ; op1:x13; op2:x25; dest:x6; op1val:0x8000fdff;  op2val:0xfff6fffb
TEST_RR_OP(psshar.h.h0, x6, x13, x25, 0x00000000, 0x8000fdff, 0xfff6fffb, x2, 13*XLEN/8, x4)

inst_29:
// rs1==x18, rs2==x23, rd==x28, rs1_h0_val == -1025, 
// opcode: psshar.h.h0 ; op1:x18; op2:x23; dest:x28; op1val:0x8000fbff;  op2val:0xfff6feff
TEST_RR_OP(psshar.h.h0, x28, x18, x23, 0x00000000, 0x8000fbff, 0xfff6feff, x2, 14*XLEN/8, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x0, rs2==x21, rd==x5, rs1_h0_val == -2049, rs2_h1_val == -513, rs2_h0_val == -1
// opcode: psshar.h.h0 ; op1:x0; op2:x21; dest:x5; op1val:0xc000f7ff;  op2val:0xfdffffff
TEST_RR_OP(psshar.h.h0, x5, x0, x21, 0x00000000, 0xc000f7ff, 0xfdffffff, x1, 0*XLEN/8, x4)

inst_31:
// rs1==x30, rs2==x0, rd==x22, rs2_h1_val == -9, rs1_h1_val == 8
// opcode: psshar.h.h0 ; op1:x30; op2:x0; dest:x22; op1val:0x080003;  op2val:0xfff7fdff
TEST_RR_OP(psshar.h.h0, x22, x30, x0, 0x00000000, 0x080003, 0xfff7fdff, x1, 1*XLEN/8, x4)

inst_32:
// rs2_h1_val == -17, rs1_h1_val == 1024
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4000008;  op2val:0xffeffeff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x4000008, 0xffeffeff, x1, 2*XLEN/8, x4)

inst_33:
// rs2_h1_val == -65, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffa;  op2val:0xffbf0080
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xff7ffffa, 0xffbf0080, x1, 3*XLEN/8, x4)

inst_34:
// rs2_h1_val == -129, rs1_h1_val == -16385
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0800;  op2val:0xff7ffffc
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xbfff0800, 0xff7ffffc, x1, 4*XLEN/8, x4)

inst_35:
// rs2_h1_val == 21845, rs1_h1_val == -2
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffd;  op2val:0x55550007
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfffefffd, 0x55550007, x1, 5*XLEN/8, x4)

inst_36:
// rs1_h0_val == rs2_h0_val, rs2_h0_val == 256, rs1_h1_val == 128
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x800100;  op2val:0x090100
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x800100, 0x090100, x1, 6*XLEN/8, x4)

inst_37:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == 4
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80006;  op2val:0xfff80004
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfff80006, 0xfff80004, x1, 7*XLEN/8, x4)

inst_38:
// rs1_h0_val == -4097, rs2_h1_val == 512, rs1_h1_val == -257
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffefff;  op2val:0x2000010
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfeffefff, 0x2000010, x1, 8*XLEN/8, x4)

inst_39:
// rs1_h0_val == -8193, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x05dfff;  op2val:0xf7ff0005
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x05dfff, 0xf7ff0005, x1, 9*XLEN/8, x4)

inst_40:
// rs1_h0_val == -16385, rs2_h0_val == 8
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff;  op2val:0x050008
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfffebfff, 0x050008, x1, 10*XLEN/8, x4)

inst_41:
// rs1_h0_val == 21845, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf5555;  op2val:0xffbf0005
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xffdf5555, 0xffbf0005, x1, 11*XLEN/8, x4)

inst_42:
// rs1_h0_val == -21846, rs2_h1_val == 2048, rs2_h0_val == -9
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa;  op2val:0x800fff7
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfeffaaaa, 0x800fff7, x1, 12*XLEN/8, x4)

inst_43:
// rs1_h1_val == 4, rs2_h1_val == 1024
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x048000;  op2val:0x400bfff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x048000, 0x400bfff, x1, 13*XLEN/8, x4)

inst_44:
// rs1_h1_val == 16, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x105555;  op2val:0x05fff8
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x105555, 0x05fff8, x1, 14*XLEN/8, x4)

inst_45:
// rs1_h1_val == 64, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x40feff;  op2val:0x800ff7f
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x40feff, 0x800ff7f, x1, 15*XLEN/8, x4)

inst_46:
// rs1_h1_val == 512, rs2_h1_val == 8192
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x2000400;  op2val:0x2000fffa
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x2000400, 0x2000fffa, x1, 16*XLEN/8, x4)

inst_47:
// rs1_h1_val == 2048, rs2_h1_val == -1
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001;  op2val:0xffffff7f
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x8000001, 0xffffff7f, x1, 17*XLEN/8, x4)

inst_48:
// rs1_h1_val == -513, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf;  op2val:0x03fffe
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfdffffdf, 0x03fffe, x1, 18*XLEN/8, x4)

inst_49:
// rs1_h1_val == -1025, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff;  op2val:0x55553fff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfbfff7ff, 0x55553fff, x1, 19*XLEN/8, x4)

inst_50:
// rs1_h1_val == -2049, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbf;  op2val:0xfefffff9
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xf7ffffbf, 0xfefffff9, x1, 20*XLEN/8, x4)

inst_51:
// rs1_h1_val == -8193, rs2_h0_val == -1025, rs2_h1_val == 1
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000;  op2val:0x01fbff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xdfff2000, 0x01fbff, x1, 21*XLEN/8, x4)

inst_52:
// rs2_h0_val == 0, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf;  op2val:0x80000000
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xf7ffffdf, 0x80000000, x1, 22*XLEN/8, x4)

inst_53:
// rs2_h0_val == 1, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0009;  op2val:0xffdf0001
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xffff0009, 0xffdf0001, x1, 23*XLEN/8, x4)

inst_54:
// rs2_h0_val == 32, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7fff;  op2val:0x090020
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x3fff7fff, 0x090020, x1, 24*XLEN/8, x4)

inst_55:
// rs2_h0_val == 64, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60003;  op2val:0xfeff0040
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfff60003, 0xfeff0040, x1, 25*XLEN/8, x4)

inst_56:
// rs2_h0_val == 512, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4001000;  op2val:0x060200
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x4001000, 0x060200, x1, 26*XLEN/8, x4)

inst_57:
// rs2_h0_val == 4096, rs2_h1_val == 16384, rs1_h1_val == 16384
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffbf;  op2val:0x40001000
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x4000ffbf, 0x40001000, x1, 27*XLEN/8, x4)

inst_58:
// rs2_h0_val == -33, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbff;  op2val:0xdfffffdf
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfbfffbff, 0xdfffffdf, x1, 28*XLEN/8, x4)

inst_59:
// rs2_h0_val == -2049, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaa;  op2val:0x80f7ff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x40aaaa, 0x80f7ff, x1, 29*XLEN/8, x4)

inst_60:
// rs2_h0_val == -4097, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x2000009;  op2val:0x100efff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x2000009, 0x100efff, x1, 30*XLEN/8, x4)

inst_61:
// rs2_h0_val == -8193, rs1_h1_val == -3
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0008;  op2val:0xffdfdfff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfffd0008, 0xffdfdfff, x1, 31*XLEN/8, x4)

inst_62:
// rs2_h0_val == -21846, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60001;  op2val:0x3fffaaaa
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfff60001, 0x3fffaaaa, x1, 32*XLEN/8, x4)

inst_63:
// rs2_h1_val == 32767, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80100;  op2val:0x7fff0001
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfff80100, 0x7fff0001, x1, 33*XLEN/8, x4)

inst_64:
// rs2_h1_val == 2, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x010004;  op2val:0x020002
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x010004, 0x020002, x1, 34*XLEN/8, x4)

inst_65:
// rs1_h1_val == 4096, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x10000008;  op2val:0x8000fff9
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x10000008, 0x8000fff9, x1, 35*XLEN/8, x4)

inst_66:
// rs2_h1_val == 16, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa;  op2val:0x10ffff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfeffaaaa, 0x10ffff, x1, 36*XLEN/8, x4)

inst_67:
// rs2_h1_val == 64, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff3fff;  op2val:0x404000
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xf7ff3fff, 0x404000, x1, 37*XLEN/8, x4)

inst_68:
// rs1_h1_val == -5, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010;  op2val:0xffdffff7
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfffb0010, 0xffdffff7, x1, 38*XLEN/8, x4)

inst_69:
// rs1_h1_val == -9, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70009;  op2val:0xfff80008
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfff70009, 0xfff80008, x1, 39*XLEN/8, x4)

inst_70:
// rs2_h1_val == 4096, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff1000;  op2val:0x1000fffe
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfeff1000, 0x1000fffe, x1, 40*XLEN/8, x4)

inst_71:
// rs2_h1_val == -2, 
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffdf;  op2val:0xfffefffc
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xfbffffdf, 0xfffefffc, x1, 41*XLEN/8, x4)

inst_72:
// rs1_h0_val == -1, rs2_h1_val == -3, rs1_h1_val == 32767, rs2_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xfffd8000
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x7fffffff, 0xfffd8000, x1, 42*XLEN/8, x4)

inst_73:
// rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -5, rs1_h1_val == -1, rs2_h0_val == 2048
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0001;  op2val:0xfffb0800
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xffff0001, 0xfffb0800, x1, 43*XLEN/8, x4)

inst_74:
// rs1_h0_val == -2049, rs2_h1_val == -513, rs2_h0_val == -1
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff;  op2val:0xfdffffff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0xc000f7ff, 0xfdffffff, x1, 44*XLEN/8, x4)

inst_75:
// rs2_h1_val == -9, rs1_h1_val == 8
// opcode: psshar.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x080003;  op2val:0xfff7fdff
TEST_RR_OP(psshar.h.h0, x31, x30, x29, 0x00000000, 0x080003, 0xfff7fdff, x1, 45*XLEN/8, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 46*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
