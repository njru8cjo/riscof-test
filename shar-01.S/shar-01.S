
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:47:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p8.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the shar instruction of the RISC-V RV64PZicsr extension for the shar covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",shar)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x18, rs2==x22, rd==x22, rs1_w0_val == -2147483648, rs1_w1_val == -9, rs2_w0_val == 64, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val != rs2_w1_val
// opcode: shar ; op1:x18; op2:x22; dest:x22; op1val:0xfffffff780000000;  op2val:0xfffffff600000040
TEST_RR_OP(shar, x22, x18, x22, 0x0000000000000000, 0xfffffff780000000, 0xfffffff600000040, x4, 0*XLEN/8, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_w0_val == -1, rs2_w1_val == -131073, rs2_w0_val == -1073741825, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -1073741825
// opcode: shar ; op1:x12; op2:x12; dest:x12; op1val:0xbfffffffffffffff;  op2val:0xfffdffffbfffffff
TEST_RR_OP(shar, x12, x12, x12, 0x0000000000000000, 0xbfffffffffffffff, 0xfffdffffbfffffff, x4, 1*XLEN/8, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x16, rs1_w0_val == 0, rs2_w0_val == -4194305, rs2_w1_val == 131072, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 1
// opcode: shar ; op1:x20; op2:x20; dest:x16; op1val:0x00000100000000;  op2val:0x020000ffbfffff
TEST_RR_OP(shar, x16, x20, x20, 0x0000000000000000, 0x00000100000000, 0x020000ffbfffff, x4, 2*XLEN/8, x2)

inst_3:
// rs1 == rd != rs2, rs1==x31, rs2==x29, rd==x31, rs1_w0_val == 1, rs1_w1_val == 2, rs2_w1_val == 1048576, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: shar ; op1:x31; op2:x29; dest:x31; op1val:0x00000200000001;  op2val:0x100000c0000000
TEST_RR_OP(shar, x31, x31, x29, 0x0000000000000000, 0x00000200000001, 0x100000c0000000, x4, 3*XLEN/8, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x6, rd==x26, rs1_w0_val == 2147483647, rs2_w1_val == 67108864
// opcode: shar ; op1:x11; op2:x6; dest:x26; op1val:0x0000017fffffff;  op2val:0x4000000fffffff9
TEST_RR_OP(shar, x26, x11, x6, 0x0000000000000000, 0x0000017fffffff, 0x4000000fffffff9, x4, 4*XLEN/8, x2)

inst_5:
// rs1==x24, rs2==x11, rd==x15, rs1_w0_val == 2, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -536870913, rs2_w1_val == 64
// opcode: shar ; op1:x24; op2:x11; dest:x15; op1val:0xdfffffff00000002;  op2val:0x00004000000003
TEST_RR_OP(shar, x15, x24, x11, 0x0000000000000000, 0xdfffffff00000002, 0x00004000000003, x4, 5*XLEN/8, x2)

inst_6:
// rs1==x16, rs2==x14, rd==x19, rs1_w0_val == 4, rs1_w1_val == -5, rs2_w0_val == 4194304, rs2_w1_val == 8192
// opcode: shar ; op1:x16; op2:x14; dest:x19; op1val:0xfffffffb00000004;  op2val:0x00200000400000
TEST_RR_OP(shar, x19, x16, x14, 0x0000000000000000, 0xfffffffb00000004, 0x00200000400000, x4, 6*XLEN/8, x2)

inst_7:
// rs1==x5, rs2==x1, rd==x9, rs1_w0_val == 8, rs2_w1_val == 16384, rs2_w0_val == -134217729
// opcode: shar ; op1:x5; op2:x1; dest:x9; op1val:0x00000300000008;  op2val:0x004000f7ffffff
TEST_RR_OP(shar, x9, x5, x1, 0x0000000000000000, 0x00000300000008, 0x004000f7ffffff, x4, 7*XLEN/8, x2)

inst_8:
// rs1==x10, rs2==x15, rd==x25, rs1_w0_val == 16, rs2_w1_val == -536870913, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 1431655765, rs2_w0_val == 2048
// opcode: shar ; op1:x10; op2:x15; dest:x25; op1val:0x5555555500000010;  op2val:0xdfffffff00000800
TEST_RR_OP(shar, x25, x10, x15, 0x0000000000000000, 0x5555555500000010, 0xdfffffff00000800, x4, 8*XLEN/8, x2)

inst_9:
// rs1==x6, rs2==x31, rd==x21, rs1_w0_val == 32, rs2_w1_val == 134217728, rs2_w0_val == 262144, rs1_w1_val == 128
// opcode: shar ; op1:x6; op2:x31; dest:x21; op1val:0x00008000000020;  op2val:0x800000000040000
TEST_RR_OP(shar, x21, x6, x31, 0x0000000000000000, 0x00008000000020, 0x800000000040000, x4, 9*XLEN/8, x2)

inst_10:
// rs1==x26, rs2==x23, rd==x11, rs1_w0_val == 64, rs2_w0_val == 536870912, rs2_w1_val == -1048577, rs1_w1_val == -65
// opcode: shar ; op1:x26; op2:x23; dest:x11; op1val:0xffffffbf00000040;  op2val:0xffefffff20000000
TEST_RR_OP(shar, x11, x26, x23, 0x0000000000000000, 0xffffffbf00000040, 0xffefffff20000000, x4, 10*XLEN/8, x2)

inst_11:
// rs1==x19, rs2==x5, rd==x28, rs1_w0_val == 128, rs1_w1_val == 256, rs2_w1_val == -262145, rs2_w0_val == -8388609
// opcode: shar ; op1:x19; op2:x5; dest:x28; op1val:0x00010000000080;  op2val:0xfffbffffff7fffff
TEST_RR_OP(shar, x28, x19, x5, 0x0000000000000000, 0x00010000000080, 0xfffbffffff7fffff, x4, 11*XLEN/8, x2)

inst_12:
// rs1==x17, rs2==x3, rd==x20, rs1_w0_val == 256, rs1_w1_val == 33554432, rs2_w0_val == -1
// opcode: shar ; op1:x17; op2:x3; dest:x20; op1val:0x200000000000100;  op2val:0x000007ffffffff
TEST_RR_OP(shar, x20, x17, x3, 0x0000000000000000, 0x200000000000100, 0x000007ffffffff, x4, 12*XLEN/8, x2)

inst_13:
// rs1==x22, rs2==x28, rd==x0, rs1_w0_val == 512, rs2_w0_val == -5, rs2_w1_val == -32769
// opcode: shar ; op1:x22; op2:x28; dest:x0; op1val:0x00000300000200;  op2val:0xffff7ffffffffffb
TEST_RR_OP(shar, x0, x22, x28, 0x0000000000000000, 0x00000300000200, 0xffff7ffffffffffb, x4, 13*XLEN/8, x2)

inst_14:
// rs1==x28, rs2==x26, rd==x18, rs1_w0_val == 1024, rs2_w0_val == 4096, rs2_w1_val == 4
// opcode: shar ; op1:x28; op2:x26; dest:x18; op1val:0x00000900000400;  op2val:0x00000400001000
TEST_RR_OP(shar, x18, x28, x26, 0x0000000000000000, 0x00000900000400, 0x00000400001000, x4, 14*XLEN/8, x2)

inst_15:
// rs1==x14, rs2==x8, rd==x23, rs1_w0_val == 2048, rs2_w0_val == -33, rs2_w1_val == -524289
// opcode: shar ; op1:x14; op2:x8; dest:x23; op1val:0xfffffffa00000800;  op2val:0xfff7ffffffffffdf
TEST_RR_OP(shar, x23, x14, x8, 0x0000000000000000, 0xfffffffa00000800, 0xfff7ffffffffffdf, x4, 15*XLEN/8, x2)

inst_16:
// rs1==x2, rs2==x30, rd==x13, rs1_w0_val == 4096, rs2_w1_val == -33554433, rs2_w0_val == -2, rs1_w1_val == -16385
// opcode: shar ; op1:x2; op2:x30; dest:x13; op1val:0xffffbfff00001000;  op2val:0xfdfffffffffffffe
TEST_RR_OP(shar, x13, x2, x30, 0x0000000000000000, 0xffffbfff00001000, 0xfdfffffffffffffe, x4, 16*XLEN/8, x12)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_17:
// rs1==x4, rs2==x27, rd==x8, rs1_w0_val == 8192, rs2_w0_val == -65, rs2_w1_val == 524288
// opcode: shar ; op1:x4; op2:x27; dest:x8; op1val:0x00000700002000;  op2val:0x080000ffffffbf
TEST_RR_OP(shar, x8, x4, x27, 0x0000000000000000, 0x00000700002000, 0x080000ffffffbf, x11, 0*XLEN/8, x12)

inst_18:
// rs1==x7, rs2==x17, rd==x1, rs1_w0_val == 16384, rs2_w1_val == 256, rs1_w1_val == 131072
// opcode: shar ; op1:x7; op2:x17; dest:x1; op1val:0x02000000004000;  op2val:0x00010000000040
TEST_RR_OP(shar, x1, x7, x17, 0x0000000000000000, 0x02000000004000, 0x00010000000040, x11, 1*XLEN/8, x12)

inst_19:
// rs1==x9, rs2==x4, rd==x14, rs1_w0_val == 32768, rs2_w1_val == -134217729, rs2_w0_val == -65537, rs1_w1_val == 0
// opcode: shar ; op1:x9; op2:x4; dest:x14; op1val:0x00000000008000;  op2val:0xf7fffffffffeffff
TEST_RR_OP(shar, x14, x9, x4, 0x0000000000000000, 0x00000000008000, 0xf7fffffffffeffff, x11, 2*XLEN/8, x12)

inst_20:
// rs1==x13, rs2==x24, rd==x10, rs1_w0_val == 65536, rs1_w1_val == 16777216, rs2_w1_val == 32, rs2_w0_val == -1048577
// opcode: shar ; op1:x13; op2:x24; dest:x10; op1val:0x100000000010000;  op2val:0x000020ffefffff
TEST_RR_OP(shar, x10, x13, x24, 0x0000000000000000, 0x100000000010000, 0x000020ffefffff, x11, 3*XLEN/8, x12)

inst_21:
// rs1==x1, rs2==x10, rd==x3, rs1_w0_val == 131072, 
// opcode: shar ; op1:x1; op2:x10; dest:x3; op1val:0xffffbfff00020000;  op2val:0xfffbffffffffffff
TEST_RR_OP(shar, x3, x1, x10, 0x0000000000000000, 0xffffbfff00020000, 0xfffbffffffffffff, x11, 4*XLEN/8, x12)

inst_22:
// rs1==x15, rs2==x21, rd==x29, rs1_w0_val == 262144, rs2_w0_val == -3
// opcode: shar ; op1:x15; op2:x21; dest:x29; op1val:0xfffffff600040000;  op2val:0x002000fffffffd
TEST_RR_OP(shar, x29, x15, x21, 0x0000000000000000, 0xfffffff600040000, 0x002000fffffffd, x11, 5*XLEN/8, x12)

inst_23:
// rs1==x8, rs2==x18, rd==x2, rs1_w0_val == 524288, rs1_w1_val == -8193, rs2_w0_val == -1025, rs2_w1_val == 32768
// opcode: shar ; op1:x8; op2:x18; dest:x2; op1val:0xffffdfff00080000;  op2val:0x008000fffffbff
TEST_RR_OP(shar, x2, x8, x18, 0x0000000000000000, 0xffffdfff00080000, 0x008000fffffbff, x11, 6*XLEN/8, x12)

inst_24:
// rs1==x23, rs2==x13, rd==x17, rs1_w0_val == 1048576, rs2_w1_val == 16777216
// opcode: shar ; op1:x23; op2:x13; dest:x17; op1val:0xfffffff900100000;  op2val:0x1000000fffffffa
TEST_RR_OP(shar, x17, x23, x13, 0x0000000000000000, 0xfffffff900100000, 0x1000000fffffffa, x11, 7*XLEN/8, x12)

inst_25:
// rs1==x27, rs2==x2, rd==x6, rs1_w0_val == 2097152, rs2_w1_val == -513, rs1_w1_val == -16777217
// opcode: shar ; op1:x27; op2:x2; dest:x6; op1val:0xfeffffff00200000;  op2val:0xfffffdfffffffffe
TEST_RR_OP(shar, x6, x27, x2, 0x0000000000000000, 0xfeffffff00200000, 0xfffffdfffffffffe, x11, 8*XLEN/8, x12)

inst_26:
// rs1==x29, rs2==x7, rd==x30, rs1_w0_val == 4194304, rs2_w1_val == 2097152, rs1_w1_val == rs2_w1_val, rs1_w1_val == 2097152
// opcode: shar ; op1:x29; op2:x7; dest:x30; op1val:0x20000000400000;  op2val:0x200000fffeffff
TEST_RR_OP(shar, x30, x29, x7, 0x0000000000000000, 0x20000000400000, 0x200000fffeffff, x11, 9*XLEN/8, x12)

inst_27:
// rs1==x25, rs2==x19, rd==x4, rs1_w0_val == 8388608, rs2_w0_val == 2
// opcode: shar ; op1:x25; op2:x19; dest:x4; op1val:0x5555555500800000;  op2val:0x10000000000002
TEST_RR_OP(shar, x4, x25, x19, 0x0000000000000000, 0x5555555500800000, 0x10000000000002, x11, 10*XLEN/8, x12)

inst_28:
// rs1==x0, rs2==x16, rd==x5, rs1_w0_val == 16777216, rs2_w0_val == -67108865
// opcode: shar ; op1:x0; op2:x16; dest:x5; op1val:0xfeffffff01000000;  op2val:0x004000fbffffff
TEST_RR_OP(shar, x5, x0, x16, 0x0000000000000000, 0xfeffffff01000000, 0x004000fbffffff, x11, 11*XLEN/8, x12)

inst_29:
// rs1==x21, rs2==x9, rd==x27, rs1_w0_val == 33554432, rs2_w0_val == -262145
// opcode: shar ; op1:x21; op2:x9; dest:x27; op1val:0x00000002000000;  op2val:0x200000fffbffff
TEST_RR_OP(shar, x27, x21, x9, 0x0000000000000000, 0x00000002000000, 0x200000fffbffff, x11, 12*XLEN/8, x12)

inst_30:
// rs1==x3, rs2==x25, rd==x24, rs1_w0_val == 67108864, rs1_w1_val == -1048577, rs2_w0_val == -33554433
// opcode: shar ; op1:x3; op2:x25; dest:x24; op1val:0xffefffff04000000;  op2val:0x000020fdffffff
TEST_RR_OP(shar, x24, x3, x25, 0x0000000000000000, 0xffefffff04000000, 0x000020fdffffff, x11, 13*XLEN/8, x12)

inst_31:
// rs1==x30, rs2==x0, rd==x7, rs1_w0_val == 134217728, rs2_w0_val == -2097153, rs1_w1_val == 4194304, rs2_w1_val == -8388609
// opcode: shar ; op1:x30; op2:x0; dest:x7; op1val:0x40000008000000;  op2val:0xff7fffffffdfffff
TEST_RR_OP(shar, x7, x30, x0, 0x0000000000000000, 0x40000008000000, 0xff7fffffffdfffff, x11, 14*XLEN/8, x12)

inst_32:
// rs1_w0_val == 268435456, rs2_w0_val == -129, rs1_w1_val == -4194305
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff10000000;  op2val:0xfffdffffffffff7f
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffbfffff10000000, 0xfffdffffffffff7f, x11, 15*XLEN/8, x12)

inst_33:
// rs1_w0_val == 536870912, rs2_w0_val == 2097152, rs1_w1_val == 4096
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00100020000000;  op2val:0x00002000200000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00100020000000, 0x00002000200000, x11, 16*XLEN/8, x1)

inst_34:
// rs1_w0_val == 1073741824, rs2_w0_val == -16385, rs1_w1_val == -1
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff40000000;  op2val:0x000040ffffbfff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffffff40000000, 0x000040ffffbfff, x11, 17*XLEN/8, x1)

inst_35:
// rs1_w0_val == -2, rs2_w1_val == -65537, rs1_w1_val == 2048, rs2_w0_val == 134217728
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffe;  op2val:0xfffeffff08000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000800fffffffe, 0xfffeffff08000000, x11, 18*XLEN/8, x1)

inst_36:
// rs1_w0_val == -3, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffd;  op2val:0xfffffffc00000006
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffd, 0xfffffffc00000006, x11, 19*XLEN/8, x1)

inst_37:
// rs1_w0_val == -5, rs2_w1_val == 512, rs1_w1_val == -524289
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffffb;  op2val:0x000200ffdfffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffb, 0x000200ffdfffff, x11, 20*XLEN/8, x1)

inst_38:
// rs1_w0_val == -9, rs2_w0_val == 512, rs1_w1_val == 64
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffff7;  op2val:0x00400000000200
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000040fffffff7, 0x00400000000200, x11, 21*XLEN/8, x1)

inst_39:
// rs1_w0_val == -17, rs2_w0_val == -2147483648, rs1_w1_val == 262144, rs2_w1_val == -2049
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffffef;  op2val:0xfffff7ff80000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x040000ffffffef, 0xfffff7ff80000000, x11, 22*XLEN/8, x1)

inst_40:
// rs1_w0_val == -33, rs2_w1_val == -1025, rs1_w0_val == rs2_w0_val, rs1_w1_val == -32769
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffdf;  op2val:0xfffffbffffffffdf
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffdf, 0xfffffbffffffffdf, x11, 23*XLEN/8, x1)

inst_41:
// rs1_w0_val == -65, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffbf;  op2val:0xfffffffcfffffffb
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffbf, 0xfffffffcfffffffb, x11, 24*XLEN/8, x1)

inst_42:
// rs1_w0_val == -129, rs2_w0_val == 128
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffff7f;  op2val:0x00020000000080
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffff7f, 0x00020000000080, x11, 25*XLEN/8, x1)

inst_43:
// rs1_w0_val == -257, rs2_w1_val == -16385, rs2_w0_val == -2049
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffeff;  op2val:0xffffbffffffff7ff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000005fffffeff, 0xffffbffffffff7ff, x11, 26*XLEN/8, x1)

inst_44:
// rs1_w0_val == -513, rs1_w1_val == 524288, rs2_w1_val == -1
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffdff;  op2val:0xffffffffffdfffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x080000fffffdff, 0xffffffffffdfffff, x11, 27*XLEN/8, x1)

inst_45:
// rs1_w0_val == -1025, rs2_w1_val == -3
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffbff;  op2val:0xfffffffdffffffdf
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x200000fffffbff, 0xfffffffdffffffdf, x11, 28*XLEN/8, x1)

inst_46:
// rs1_w0_val == -2049, rs1_w1_val == 67108864, rs2_w1_val == 0
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffff7ff;  op2val:0x000000ffffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x4000000fffff7ff, 0x000000ffffffff, x11, 29*XLEN/8, x1)

inst_47:
// rs1_w0_val == -4097, rs1_w1_val == -1025
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffefff;  op2val:0xfdffffff00000002
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffefff, 0xfdffffff00000002, x11, 30*XLEN/8, x1)

inst_48:
// rs1_w0_val == -8193, rs2_w1_val == 2, rs2_w0_val == -268435457
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffdfff;  op2val:0x000002efffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000003ffffdfff, 0x000002efffffff, x11, 31*XLEN/8, x1)

inst_49:
// rs1_w0_val == -16385, rs2_w1_val == -5, rs2_w0_val == 1024, rs1_w1_val == -65537
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffbfff;  op2val:0xfffffffb00000400
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffbfff, 0xfffffffb00000400, x11, 32*XLEN/8, x1)

inst_50:
// rs2_w1_val == -2097153, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000007;  op2val:0xffdfffff00040000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00008000000007, 0xffdfffff00040000, x11, 33*XLEN/8, x1)

inst_51:
// rs2_w1_val == -4194305, rs2_w0_val == 0
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00008000;  op2val:0xffbfffff00000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffb00008000, 0xffbfffff00000000, x11, 34*XLEN/8, x1)

inst_52:
// rs2_w1_val == -16777217, rs2_w0_val == -32769
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00100000008000;  op2val:0xfeffffffffff7fff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00100000008000, 0xfeffffffffff7fff, x11, 35*XLEN/8, x1)

inst_53:
// rs2_w1_val == -67108865, rs2_w0_val == 16, rs1_w1_val == 1024
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffb;  op2val:0xfbffffff00000010
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000400fffffffb, 0xfbffffff00000010, x11, 36*XLEN/8, x1)

inst_54:
// rs2_w1_val == -268435457, rs1_w0_val == -2097153
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffdfffff;  op2val:0xeffffffffffeffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000000ffdfffff, 0xeffffffffffeffff, x11, 37*XLEN/8, x1)

inst_55:
// rs2_w1_val == -1073741825, rs1_w0_val == -4194305, rs1_w1_val == 16, rs2_w0_val == -9
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffbfffff;  op2val:0xbffffffffffffff7
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000010ffbfffff, 0xbffffffffffffff7, x11, 38*XLEN/8, x1)

inst_56:
// rs2_w1_val == 1431655765, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000010;  op2val:0x55555555fffffffe
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000010, 0x55555555fffffffe, x11, 39*XLEN/8, x1)

inst_57:
// rs2_w1_val == -1431655766, rs1_w0_val == -536870913, rs1_w1_val == -17
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefdfffffff;  op2val:0xaaaaaaaaefffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffffefdfffffff, 0xaaaaaaaaefffffff, x11, 40*XLEN/8, x1)

inst_58:
// rs1_w0_val == -32769, rs1_w1_val == 134217728
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffff7fff;  op2val:0xfeffffff00000003
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x8000000ffff7fff, 0xfeffffff00000003, x11, 41*XLEN/8, x1)

inst_59:
// rs1_w0_val == -65537, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffeffff;  op2val:0x3ffffffffffffff7
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xdffffffffffeffff, 0x3ffffffffffffff7, x11, 42*XLEN/8, x1)

inst_60:
// rs1_w0_val == -131073, rs1_w1_val == -33554433, rs2_w1_val == -65
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffdffff;  op2val:0xffffffbffbffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffdffff, 0xffffffbffbffffff, x11, 43*XLEN/8, x1)

inst_61:
// rs1_w0_val == -262145, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffbffff;  op2val:0x00000900000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x080000fffbffff, 0x00000900000000, x11, 44*XLEN/8, x1)

inst_62:
// rs1_w0_val == -524289, rs2_w0_val == 32, rs2_w1_val == 1024
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffff7ffff;  op2val:0x00040000000020
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffffbffff7ffff, 0x00040000000020, x11, 45*XLEN/8, x1)

inst_63:
// rs1_w0_val == -1048577, rs2_w0_val == -513
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffefffff;  op2val:0x000100fffffdff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffbffefffff, 0x000100fffffdff, x11, 46*XLEN/8, x1)

inst_64:
// rs1_w0_val == -8388609, rs2_w0_val == -17
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000002ff7fffff;  op2val:0xffbfffffffffffef
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000002ff7fffff, 0xffbfffffffffffef, x11, 47*XLEN/8, x1)

inst_65:
// rs1_w0_val == -16777217, rs2_w0_val == -131073
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000080feffffff;  op2val:0xffffffbffffdffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0xffffffbffffdffff, x11, 48*XLEN/8, x1)

inst_66:
// rs1_w0_val == -33554433, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000000fdffffff;  op2val:0xffeffffffffffff9
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000000fdffffff, 0xffeffffffffffff9, x11, 49*XLEN/8, x1)

inst_67:
// rs1_w0_val == -67108865, rs1_w1_val == 8, rs2_w0_val == -4097
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000008fbffffff;  op2val:0xfffffbffffffefff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000008fbffffff, 0xfffffbffffffefff, x11, 50*XLEN/8, x1)

inst_68:
// rs1_w0_val == -134217729, rs2_w1_val == 1
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbf7ffffff;  op2val:0x000001fdffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffbf7ffffff, 0x000001fdffffff, x11, 51*XLEN/8, x1)

inst_69:
// rs1_w0_val == -268435457, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffefffffff;  op2val:0xfffdffff3fffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffbfffffefffffff, 0xfffdffff3fffffff, x11, 52*XLEN/8, x1)

inst_70:
// rs1_w0_val == -1073741825, rs2_w1_val == 268435456
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000008bfffffff;  op2val:0x10000000ffffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000008bfffffff, 0x10000000ffffffff, x11, 53*XLEN/8, x1)

inst_71:
// rs1_w0_val == 1431655765, rs2_w0_val == 131072
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555500020000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555500020000, x11, 54*XLEN/8, x1)

inst_72:
// rs1_w0_val == -1431655766, rs2_w1_val == 65536, rs1_w1_val == -2049
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffaaaaaaaa;  op2val:0x010000fffffff7
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffff7ffaaaaaaaa, 0x010000fffffff7, x11, 55*XLEN/8, x1)

inst_73:
// rs1_w1_val == -2147483648, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffbffff;  op2val:0x010000ffffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x80000000fffbffff, 0x010000ffffffff, x11, 56*XLEN/8, x1)

inst_74:
// rs1_w1_val == 2147483647, rs2_w0_val == 65536
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00001000;  op2val:0xff7fffff00010000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x7fffffff00001000, 0xff7fffff00010000, x11, 57*XLEN/8, x1)

inst_75:
// rs1_w1_val == 4, rs2_w0_val == 268435456, rs2_w1_val == 4096
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffff6;  op2val:0x00100010000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000004fffffff6, 0x00100010000000, x11, 58*XLEN/8, x1)

inst_76:
// rs1_w1_val == 32, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffdffff;  op2val:0xaaaaaaaa00001000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000020fffdffff, 0xaaaaaaaa00001000, x11, 59*XLEN/8, x1)

inst_77:
// rs1_w1_val == 512, rs2_w1_val == -8193, rs2_w0_val == 524288
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffbfff;  op2val:0xffffdfff00080000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000200ffffbfff, 0xffffdfff00080000, x11, 60*XLEN/8, x1)

inst_78:
// rs1_w1_val == 8192, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00200040000000;  op2val:0x100000fffffdff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00200040000000, 0x100000fffffdff, x11, 61*XLEN/8, x1)

inst_79:
// rs1_w1_val == -67108865, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0x000004ffffffef
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, 0x000004ffffffef, x11, 62*XLEN/8, x1)

inst_80:
// rs1_w1_val == -134217729, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffb;  op2val:0x000100ffffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffb, 0x000100ffffffff, x11, 63*XLEN/8, x1)

inst_81:
// rs1_w1_val == -268435457, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00200000;  op2val:0x00800000000010
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xefffffff00200000, 0x00800000000010, x11, 64*XLEN/8, x1)

inst_82:
// rs1_w1_val == -1431655766, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000006;  op2val:0x020000ffefffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000006, 0x020000ffefffff, x11, 65*XLEN/8, x1)

inst_83:
// rs2_w0_val == 1, rs1_w1_val == -8388609
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffbffff;  op2val:0xaaaaaaaa00000001
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffbffff, 0xaaaaaaaa00000001, x11, 66*XLEN/8, x1)

inst_84:
// rs2_w0_val == 2147483647, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffefffff;  op2val:0xfbffffff7fffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffefffff, 0xfbffffff7fffffff, x11, 67*XLEN/8, x1)

inst_85:
// rs2_w0_val == 4, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff55555555;  op2val:0x00004000000004
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffdfff55555555, 0x00004000000004, x11, 68*XLEN/8, x1)

inst_86:
// rs2_w0_val == 8, rs1_w1_val == -129
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00001000;  op2val:0x400000000000008
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffff7f00001000, 0x400000000000008, x11, 69*XLEN/8, x1)

inst_87:
// rs2_w0_val == 256, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00000701000000;  op2val:0xffffffff00000100
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00000701000000, 0xffffffff00000100, x11, 70*XLEN/8, x1)

inst_88:
// rs2_w0_val == 8192, rs2_w1_val == 33554432
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x0000093fffffff;  op2val:0x200000000002000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x0000093fffffff, 0x200000000002000, x11, 71*XLEN/8, x1)

inst_89:
// rs2_w0_val == 16384, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffd;  op2val:0xffffbfff00004000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffd, 0xffffbfff00004000, x11, 72*XLEN/8, x1)

inst_90:
// rs2_w0_val == 32768, rs2_w1_val == 8388608
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x200000aaaaaaaa;  op2val:0x80000000008000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x200000aaaaaaaa, 0x80000000008000, x11, 73*XLEN/8, x1)

inst_91:
// rs2_w0_val == 1048576, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000005bfffffff;  op2val:0x100000000100000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000005bfffffff, 0x100000000100000, x11, 74*XLEN/8, x1)

inst_92:
// rs2_w0_val == 8388608, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffdff;  op2val:0xfffffdff00800000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000002fffffdff, 0xfffffdff00800000, x11, 75*XLEN/8, x1)

inst_93:
// rs2_w0_val == 16777216, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x20000002000000;  op2val:0xfff7ffff01000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x20000002000000, 0xfff7ffff01000000, x11, 76*XLEN/8, x1)

inst_94:
// rs2_w0_val == 33554432, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffc;  op2val:0xfff7ffff02000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffc, 0xfff7ffff02000000, x11, 77*XLEN/8, x1)

inst_95:
// rs2_w0_val == 67108864, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffb;  op2val:0xfdffffff04000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000002fffffffb, 0xfdffffff04000000, x11, 78*XLEN/8, x1)

inst_96:
// rs2_w0_val == 1073741824, rs2_w1_val == 2147483647
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000002;  op2val:0x7fffffff40000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000002, 0x7fffffff40000000, x11, 79*XLEN/8, x1)

inst_97:
// rs2_w0_val == -257, rs1_w1_val == 32768
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffdfffff;  op2val:0x000040fffffeff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x008000ffdfffff, 0x000040fffffeff, x11, 80*XLEN/8, x1)

inst_98:
// rs2_w0_val == -8193, rs1_w1_val == -33
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffdf;  op2val:0x000006ffffdfff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffdf, 0x000006ffffdfff, x11, 81*XLEN/8, x1)

inst_99:
// rs2_w0_val == -524289, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff8;  op2val:0xaaaaaaaafff7ffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000020fffffff8, 0xaaaaaaaafff7ffff, x11, 82*XLEN/8, x1)

inst_100:
// rs2_w0_val == -16777217, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000800;  op2val:0x000002feffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00000800000800, 0x000002feffffff, x11, 83*XLEN/8, x1)

inst_101:
// rs2_w0_val == -536870913, rs2_w1_val == -2147483648
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffdf;  op2val:0x80000000dfffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x008000ffffffdf, 0x80000000dfffffff, x11, 84*XLEN/8, x1)

inst_102:
// rs2_w0_val == 1431655765, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x400000000040000;  op2val:0x00800055555555
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x400000000040000, 0x00800055555555, x11, 85*XLEN/8, x1)

inst_103:
// rs2_w0_val == -1431655766, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x80000003fffffff;  op2val:0x000001aaaaaaaa
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x80000003fffffff, 0x000001aaaaaaaa, x11, 86*XLEN/8, x1)

inst_104:
// rs2_w1_val == 8, rs1_w1_val == -2
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffffc;  op2val:0x00000800000040
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffc, 0x00000800000040, x11, 87*XLEN/8, x1)

inst_105:
// rs2_w1_val == 16, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x001000fff7ffff;  op2val:0x00001010000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x001000fff7ffff, 0x00001010000000, x11, 88*XLEN/8, x1)

inst_106:
// rs1_w1_val == 16384, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000007;  op2val:0x00020001000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00400000000007, 0x00020001000000, x11, 89*XLEN/8, x1)

inst_107:
// rs2_w1_val == 128, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000001;  op2val:0x000080ffffefff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00000300000001, 0x000080ffffefff, x11, 90*XLEN/8, x1)

inst_108:
// rs1_w1_val == 65536, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x010000c0000000;  op2val:0x001000ffffff7f
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x010000c0000000, 0x001000ffffff7f, x11, 91*XLEN/8, x1)

inst_109:
// rs2_w1_val == 2048, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000000;  op2val:0x000800fdffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xefffffff00000000, 0x000800fdffffff, x11, 92*XLEN/8, x1)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffffe;  op2val:0xffffbfffc0000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x100000fffffffe, 0xffffbfffc0000000, x11, 93*XLEN/8, x1)

inst_111:
// rs1_w1_val == 8388608, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x80000008000000;  op2val:0xbfffffffffff7fff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x80000008000000, 0xbfffffffffff7fff, x11, 94*XLEN/8, x1)

inst_112:
// rs2_w1_val == 262144, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffeffff;  op2val:0x04000000000005
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000003fffeffff, 0x04000000000005, x11, 95*XLEN/8, x1)

inst_113:
// rs1_w1_val == 268435456, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffa;  op2val:0xfffffbfffffff7ff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffa, 0xfffffbfffffff7ff, x11, 96*XLEN/8, x1)

inst_114:
// rs1_w1_val == 536870912, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x20000000dfffffff;  op2val:0x000400c0000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x20000000dfffffff, 0x000400c0000000, x11, 97*XLEN/8, x1)

inst_115:
// rs1_w1_val == 1073741824, rs2_w1_val == -4097
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffffd;  op2val:0xffffefff00400000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x40000000fffffffd, 0xffffefff00400000, x11, 98*XLEN/8, x1)

inst_116:
// rs2_w1_val == 4194304, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00400000;  op2val:0x40000000000800
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfdffffff00400000, 0x40000000000800, x11, 99*XLEN/8, x1)

inst_117:
// rs1_w1_val == -3, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000004;  op2val:0xfffffbfffffffff6
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000004, 0xfffffbfffffffff6, x11, 100*XLEN/8, x1)

inst_118:
// rs2_w1_val == 536870912, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffff7fff;  op2val:0x2000000008000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x008000ffff7fff, 0x2000000008000000, x11, 101*XLEN/8, x1)

inst_119:
// rs2_w1_val == 1073741824, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000000;  op2val:0x4000000000000010
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffff700000000, 0x4000000000000010, x11, 102*XLEN/8, x1)

inst_120:
// rs1_w1_val == -257, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff9;  op2val:0x200000000400000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff9, 0x200000000400000, x11, 103*XLEN/8, x1)

inst_121:
// rs2_w1_val == -2, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000080fff7ffff;  op2val:0xfffffffeffffff7f
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000080fff7ffff, 0xfffffffeffffff7f, x11, 104*XLEN/8, x1)

inst_122:
// rs1_w1_val == -513, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfff7ffffff;  op2val:0xf7ffffff00000100
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffffdfff7ffffff, 0xf7ffffff00000100, x11, 105*XLEN/8, x1)

inst_123:
// rs2_w1_val == -9, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffbff;  op2val:0xfffffff7ffefffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x000100fffffbff, 0xfffffff7ffefffff, x11, 106*XLEN/8, x1)

inst_124:
// rs1_w1_val == -4097, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000200;  op2val:0x00400001000000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffefff00000200, 0x00400001000000, x11, 107*XLEN/8, x1)

inst_125:
// rs2_w1_val == -17, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00010000040000;  op2val:0xffffffef00002000
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00010000040000, 0xffffffef00002000, x11, 108*XLEN/8, x1)

inst_126:
// rs2_w1_val == -33, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffefff;  op2val:0xffffffdffffffffd
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x40000000ffffefff, 0xffffffdffffffffd, x11, 109*XLEN/8, x1)

inst_127:
// rs2_w1_val == -129, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffefffff;  op2val:0xffffff7ff7ffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffffdfffffefffff, 0xffffff7ff7ffffff, x11, 110*XLEN/8, x1)

inst_128:
// rs1_w1_val == -131073, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00001000;  op2val:0xfffffffe00000008
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffdffff00001000, 0xfffffffe00000008, x11, 111*XLEN/8, x1)

inst_129:
// rs1_w1_val == -262145, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000001;  op2val:0x080000dfffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000001, 0x080000dfffffff, x11, 112*XLEN/8, x1)

inst_130:
// rs1_w1_val == -2097153, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffff6;  op2val:0xf7fffffff7ffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffff6, 0xf7fffffff7ffffff, x11, 113*XLEN/8, x1)

inst_131:
// rs2_w1_val == -257, 
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00008000001000;  op2val:0xfffffeff3fffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00008000001000, 0xfffffeff3fffffff, x11, 114*XLEN/8, x1)

inst_132:
// rs1_w0_val == -1, rs2_w1_val == -131073, rs2_w0_val == -1073741825, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -1073741825
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0xfffdffffbfffffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0xfffdffffbfffffff, x11, 115*XLEN/8, x1)

inst_133:
// rs1_w0_val == 0, rs2_w0_val == -4194305, rs2_w1_val == 131072, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 1
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000000;  op2val:0x020000ffbfffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00000100000000, 0x020000ffbfffff, x11, 116*XLEN/8, x1)

inst_134:
// rs1_w0_val == 512, rs2_w0_val == -5, rs2_w1_val == -32769
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000200;  op2val:0xffff7ffffffffffb
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x00000300000200, 0xffff7ffffffffffb, x11, 117*XLEN/8, x1)

inst_135:
// rs1_w0_val == 134217728, rs2_w0_val == -2097153, rs1_w1_val == 4194304, rs2_w1_val == -8388609
// opcode: shar ; op1:x30; op2:x29; dest:x31; op1val:0x40000008000000;  op2val:0xff7fffffffdfffff
TEST_RR_OP(shar, x31, x30, x29, 0x0000000000000000, 0x40000008000000, 0xff7fffffffdfffff, x11, 118*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x11_0:
    .fill 119*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
