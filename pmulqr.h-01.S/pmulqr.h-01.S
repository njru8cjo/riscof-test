
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Jan 15 02:51:47 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulqr.h instruction of the RISC-V RV64PZicsr extension for the pmulqr.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulqr.h)

RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -8193, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs2_h2_val == -9, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 32767, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == 21845, rs1_h3_val != rs2_h3_val, rs2_h3_val == -1, rs2_h0_val == 2048
// opcode: pmulqr.h ; op1:x5; op2:x5; dest:x5; op1val:0x7ffffff9dfff8000;  op2val:0xfffffff755550800
TEST_RR_OP(pmulqr.h, x5, x5, x5, 0x0000000000000000, 0x7ffffff9dfff8000, 0xfffffff755550800, x8, 0*XLEN/8, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x23, rs1_h0_val == -1, rs2_h3_val == 4, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -257, rs1_h3_val == -4097, rs2_h2_val == -5, rs1_h2_val == rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == -5, rs2_h1_val == 64
// opcode: pmulqr.h ; op1:x15; op2:x15; dest:x23; op1val:0xeffffffb5555ffff;  op2val:0x04fffb0040feff
TEST_RR_OP(pmulqr.h, x23, x15, x15, 0x0000000000000000, 0xeffffffb5555ffff, 0x04fffb0040feff, x8, 1*XLEN/8, x12)

inst_2:
// rs2 == rd != rs1, rs1==x28, rs2==x26, rd==x26, rs1_h0_val == 0, rs2_h3_val == 64, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 16, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -8193, rs1_h3_val == 2048, rs2_h0_val == 256
// opcode: pmulqr.h ; op1:x28; op2:x26; dest:x26; op1val:0x8000010fffc0000;  op2val:0x40dfff00090100
TEST_RR_OP(pmulqr.h, x26, x28, x26, 0x0000000000000000, 0x8000010fffc0000, 0x40dfff00090100, x8, 2*XLEN/8, x12)

inst_3:
// rs1 == rd != rs2, rs1==x27, rs2==x18, rd==x27, rs1_h0_val == 1, rs1_h3_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == -2
// opcode: pmulqr.h ; op1:x27; op2:x18; dest:x27; op1val:0xfffdfffafffe0001;  op2val:0xfff9fff900400100
TEST_RR_OP(pmulqr.h, x27, x27, x18, 0x0000000000000000, 0xfffdfffafffe0001, 0xfff9fff900400100, x8, 3*XLEN/8, x12)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x9, rd==x10, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -129, rs2_h3_val == 128, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -16385, rs2_h1_val == -21846, rs2_h2_val == 0, rs1_h1_val == -17
// opcode: pmulqr.h ; op1:x25; op2:x9; dest:x10; op1val:0xff7f0005ffef7fff;  op2val:0x800000aaaabfff
TEST_RR_OP(pmulqr.h, x10, x25, x9, 0x0000000000000000, 0xff7f0005ffef7fff, 0x800000aaaabfff, x8, 4*XLEN/8, x12)

inst_5:
// rs1==x29, rs2==x30, rd==x11, rs1_h0_val == 2, rs2_h3_val == 512, rs1_h3_val == -21846, rs1_h1_val == 1024, rs2_h0_val == 1, rs1_h2_val == 2048, rs2_h2_val == -4097
// opcode: pmulqr.h ; op1:x29; op2:x30; dest:x11; op1val:0xaaaa080004000002;  op2val:0x200efff3fff0001
TEST_RR_OP(pmulqr.h, x11, x29, x30, 0x0000000000000000, 0xaaaa080004000002, 0x200efff3fff0001, x8, 5*XLEN/8, x12)

inst_6:
// rs1==x2, rs2==x16, rd==x30, rs1_h0_val == 4, rs2_h0_val == -9, rs1_h2_val == -4097, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h2_val == 32767, rs2_h3_val == 21845
// opcode: pmulqr.h ; op1:x2; op2:x16; dest:x30; op1val:0x06efff3fff0004;  op2val:0x55557fff5555fff7
TEST_RR_OP(pmulqr.h, x30, x2, x16, 0x0000000000000000, 0x06efff3fff0004, 0x55557fff5555fff7, x8, 6*XLEN/8, x12)

inst_7:
// rs1==x31, rs2==x20, rd==x28, rs1_h0_val == 8, rs2_h3_val == 2, rs2_h2_val == 512, rs2_h0_val == -17, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == -1, rs2_h1_val == 16
// opcode: pmulqr.h ; op1:x31; op2:x20; dest:x28; op1val:0xffff3fff00090008;  op2val:0x0202000010ffef
TEST_RR_OP(pmulqr.h, x28, x31, x20, 0x0000000000000000, 0xffff3fff00090008, 0x0202000010ffef, x8, 7*XLEN/8, x12)

inst_8:
// rs1==x11, rs2==x25, rd==x0, rs1_h0_val == 16, rs2_h1_val == -65, rs1_h2_val == -1025, rs2_h0_val == 1024
// opcode: pmulqr.h ; op1:x11; op2:x25; dest:x0; op1val:0x09fbfffff90010;  op2val:0x55550007ffbf0400
TEST_RR_OP(pmulqr.h, x0, x11, x25, 0x0000000000000000, 0x09fbfffff90010, 0x55550007ffbf0400, x8, 8*XLEN/8, x12)

inst_9:
// rs1==x24, rs2==x4, rd==x2, rs1_h0_val == 32, rs2_h0_val == 4096, rs1_h2_val == 21845, rs2_h1_val == 4096, rs2_h3_val == -2
// opcode: pmulqr.h ; op1:x24; op2:x4; dest:x2; op1val:0xfff65555fffe0020;  op2val:0xfffefff610001000
TEST_RR_OP(pmulqr.h, x2, x24, x4, 0x0000000000000000, 0xfff65555fffe0020, 0xfffefff610001000, x8, 9*XLEN/8, x12)

inst_10:
// rs1==x3, rs2==x2, rd==x1, rs1_h0_val == 64, rs1_h3_val == -1025, rs1_h2_val == 2, rs2_h2_val == -33, rs2_h3_val == -9, rs1_h1_val == -5
// opcode: pmulqr.h ; op1:x3; op2:x2; dest:x1; op1val:0xfbff0002fffb0040;  op2val:0xfff7ffdf0040ffef
TEST_RR_OP(pmulqr.h, x1, x3, x2, 0x0000000000000000, 0xfbff0002fffb0040, 0xfff7ffdf0040ffef, x8, 10*XLEN/8, x12)

inst_11:
// rs1==x18, rs2==x29, rd==x9, rs1_h0_val == 128, rs1_h2_val == -33, rs1_h3_val == 8, rs1_h1_val == -65, rs2_h0_val == -4097
// opcode: pmulqr.h ; op1:x18; op2:x29; dest:x9; op1val:0x08ffdfffbf0080;  op2val:0xfff7fff61000efff
TEST_RR_OP(pmulqr.h, x9, x18, x29, 0x0000000000000000, 0x08ffdfffbf0080, 0xfff7fff61000efff, x8, 11*XLEN/8, x12)

inst_12:
// rs1==x17, rs2==x27, rd==x6, rs1_h0_val == 256, rs1_h3_val == -17, rs1_h2_val == -513, rs2_h2_val == 8192, rs2_h3_val == 2048, rs2_h0_val == 512
// opcode: pmulqr.h ; op1:x17; op2:x27; dest:x6; op1val:0xffeffdff00070100;  op2val:0x800200010000200
TEST_RR_OP(pmulqr.h, x6, x17, x27, 0x0000000000000000, 0xffeffdff00070100, 0x800200010000200, x8, 12*XLEN/8, x12)

inst_13:
// rs1==x22, rs2==x7, rd==x29, rs1_h0_val == 512, rs2_h1_val == 32767, rs1_h2_val == 32, rs2_h3_val == 256, rs2_h2_val == -32768
// opcode: pmulqr.h ; op1:x22; op2:x7; dest:x29; op1val:0xefff002000090200;  op2val:0x10080007fff1000
TEST_RR_OP(pmulqr.h, x29, x22, x7, 0x0000000000000000, 0xefff002000090200, 0x10080007fff1000, x8, 13*XLEN/8, x12)

inst_14:
// rs1==x10, rs2==x23, rd==x21, rs1_h0_val == 1024, rs2_h2_val == 2048, rs1_h2_val == 4, rs1_h1_val == 2048, rs2_h1_val == 2, rs1_h3_val == 8192
// opcode: pmulqr.h ; op1:x10; op2:x23; dest:x21; op1val:0x2000000408000400;  op2val:0x10008000002bfff
TEST_RR_OP(pmulqr.h, x21, x10, x23, 0x0000000000000000, 0x2000000408000400, 0x10008000002bfff, x8, 14*XLEN/8, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x4, rs2==x28, rd==x18, rs1_h0_val == 2048, rs1_h3_val == 512, rs2_h2_val == 2, rs2_h3_val == 0, rs1_h1_val == -257
// opcode: pmulqr.h ; op1:x4; op2:x28; dest:x18; op1val:0x2000002feff0800;  op2val:0x00000255550003
TEST_RR_OP(pmulqr.h, x18, x4, x28, 0x0000000000000000, 0x2000002feff0800, 0x00000255550003, x2, 0*XLEN/8, x5)

inst_16:
// rs1==x14, rs2==x19, rd==x7, rs1_h0_val == 4096, rs2_h1_val == 8, rs2_h2_val == -257, rs1_h2_val == -2049, rs1_h3_val == 128
// opcode: pmulqr.h ; op1:x14; op2:x19; dest:x7; op1val:0x80f7ff04001000;  op2val:0x00feff00080003
TEST_RR_OP(pmulqr.h, x7, x14, x19, 0x0000000000000000, 0x80f7ff04001000, 0x00feff00080003, x2, 1*XLEN/8, x5)

inst_17:
// rs1==x26, rs2==x12, rd==x8, rs1_h0_val == 8192, rs2_h0_val == 16384, rs1_h1_val == rs2_h1_val, rs2_h3_val == -16385, rs1_h3_val == 1
// opcode: pmulqr.h ; op1:x26; op2:x12; dest:x8; op1val:0x01ffdffff82000;  op2val:0xbfff3ffffff84000
TEST_RR_OP(pmulqr.h, x8, x26, x12, 0x0000000000000000, 0x01ffdffff82000, 0xbfff3ffffff84000, x2, 2*XLEN/8, x5)

inst_18:
// rs1==x23, rs2==x13, rd==x22, rs1_h0_val == 16384, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -33, rs2_h3_val == 16384, rs1_h2_val == 8, rs1_h3_val == 256
// opcode: pmulqr.h ; op1:x23; op2:x13; dest:x22; op1val:0x10000083fff4000;  op2val:0x4000fffbaaaaffdf
TEST_RR_OP(pmulqr.h, x22, x23, x13, 0x0000000000000000, 0x10000083fff4000, 0x4000fffbaaaaffdf, x2, 3*XLEN/8, x5)

inst_19:
// rs1==x12, rs2==x0, rd==x24, rs1_h0_val == -2, rs2_h0_val == -65, rs1_h3_val == -2049, rs2_h2_val == 128
// opcode: pmulqr.h ; op1:x12; op2:x0; dest:x24; op1val:0xf7ff0004fffcfffe;  op2val:0x800080fff8ffbf
TEST_RR_OP(pmulqr.h, x24, x12, x0, 0x0000000000000000, 0xf7ff0004fffcfffe, 0x800080fff8ffbf, x2, 4*XLEN/8, x5)

inst_20:
// rs1==x0, rs2==x22, rd==x13, rs1_h0_val == -3, rs1_h2_val == -16385, rs2_h3_val == -129, rs1_h1_val == 64, rs2_h0_val == 8
// opcode: pmulqr.h ; op1:x0; op2:x22; dest:x13; op1val:0xfffabfff0040fffd;  op2val:0xff7f7fff00080008
TEST_RR_OP(pmulqr.h, x13, x0, x22, 0x0000000000000000, 0xfffabfff0040fffd, 0xff7f7fff00080008, x2, 5*XLEN/8, x5)

inst_21:
// rs1==x30, rs2==x24, rd==x19, rs1_h0_val == -5, rs2_h0_val == 16, rs1_h3_val == rs2_h3_val
// opcode: pmulqr.h ; op1:x30; op2:x24; dest:x19; op1val:0x100fbfffffbfffb;  op2val:0x100020000070010
TEST_RR_OP(pmulqr.h, x19, x30, x24, 0x0000000000000000, 0x100fbfffffbfffb, 0x100020000070010, x2, 6*XLEN/8, x5)

inst_22:
// rs1==x7, rs2==x1, rd==x31, rs1_h0_val == -9, rs2_h3_val == 8, rs1_h2_val == -257, rs2_h1_val == -129
// opcode: pmulqr.h ; op1:x7; op2:x1; dest:x31; op1val:0xfff6feff0400fff7;  op2val:0x087fffff7fffef
TEST_RR_OP(pmulqr.h, x31, x7, x1, 0x0000000000000000, 0xfff6feff0400fff7, 0x087fffff7fffef, x2, 7*XLEN/8, x5)

inst_23:
// rs1==x1, rs2==x21, rd==x12, rs1_h0_val == -17, rs2_h3_val == 32, rs1_h2_val == 256, rs1_h3_val == -2, rs1_h1_val == -21846
// opcode: pmulqr.h ; op1:x1; op2:x21; dest:x12; op1val:0xfffe0100aaaaffef;  op2val:0x200009ff7f0005
TEST_RR_OP(pmulqr.h, x12, x1, x21, 0x0000000000000000, 0xfffe0100aaaaffef, 0x200009ff7f0005, x2, 8*XLEN/8, x5)

inst_24:
// rs1==x16, rs2==x6, rd==x3, rs1_h0_val == -33, rs2_h2_val == 64, rs2_h1_val == 0, rs2_h0_val == -2049
// opcode: pmulqr.h ; op1:x16; op2:x6; dest:x3; op1val:0x2000fffbfeffffdf;  op2val:0x4000400000f7ff
TEST_RR_OP(pmulqr.h, x3, x16, x6, 0x0000000000000000, 0x2000fffbfeffffdf, 0x4000400000f7ff, x2, 9*XLEN/8, x5)

inst_25:
// rs1==x6, rs2==x14, rd==x15, rs1_h0_val == -65, rs2_h3_val == -4097, rs1_h1_val == -4097, rs1_h3_val == -33
// opcode: pmulqr.h ; op1:x6; op2:x14; dest:x15; op1val:0xffdf0007efffffbf;  op2val:0xefffefff00070400
TEST_RR_OP(pmulqr.h, x15, x6, x14, 0x0000000000000000, 0xffdf0007efffffbf, 0xefffefff00070400, x2, 10*XLEN/8, x5)

inst_26:
// rs1==x13, rs2==x31, rd==x25, rs1_h0_val == -129, rs1_h1_val == -1025, rs2_h1_val == 512, rs2_h3_val == -65
// opcode: pmulqr.h ; op1:x13; op2:x31; dest:x25; op1val:0xfffcc000fbffff7f;  op2val:0xffbf7fff02000007
TEST_RR_OP(pmulqr.h, x25, x13, x31, 0x0000000000000000, 0xfffcc000fbffff7f, 0xffbf7fff02000007, x2, 11*XLEN/8, x5)

inst_27:
// rs1==x19, rs2==x8, rd==x20, rs1_h0_val == -257, rs2_h1_val == 4
// opcode: pmulqr.h ; op1:x19; op2:x8; dest:x20; op1val:0x8000003fff9feff;  op2val:0x09fff800040100
TEST_RR_OP(pmulqr.h, x20, x19, x8, 0x0000000000000000, 0x8000003fff9feff, 0x09fff800040100, x2, 12*XLEN/8, x5)

inst_28:
// rs1==x9, rs2==x10, rd==x16, rs1_h0_val == -513, rs2_h1_val == 256, rs2_h3_val == -3, rs2_h2_val == 256
// opcode: pmulqr.h ; op1:x9; op2:x10; dest:x16; op1val:0x033fff0006fdff;  op2val:0xfffd01000100f7ff
TEST_RR_OP(pmulqr.h, x16, x9, x10, 0x0000000000000000, 0x033fff0006fdff, 0xfffd01000100f7ff, x2, 13*XLEN/8, x5)

inst_29:
// rs1==x21, rs2==x3, rd==x4, rs1_h0_val == -1025, rs1_h3_val == -65
// opcode: pmulqr.h ; op1:x21; op2:x3; dest:x4; op1val:0xffbf0800effffbff;  op2val:0x02effffffa3fff
TEST_RR_OP(pmulqr.h, x4, x21, x3, 0x0000000000000000, 0xffbf0800effffbff, 0x02effffffa3fff, x2, 14*XLEN/8, x5)

inst_30:
// rs1==x8, rs2==x11, rd==x17, rs1_h0_val == -2049, rs1_h2_val == -129, rs1_h3_val == -8193, rs2_h3_val == -8193, rs2_h0_val == 64
// opcode: pmulqr.h ; op1:x8; op2:x11; dest:x17; op1val:0xdfffff7f0800f7ff;  op2val:0xdffffeff55550040
TEST_RR_OP(pmulqr.h, x17, x8, x11, 0x0000000000000000, 0xdfffff7f0800f7ff, 0xdffffeff55550040, x2, 15*XLEN/8, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x20, rs2==x17, rd==x14, rs1_h0_val == -4097, rs2_h2_val == -65, rs2_h3_val == -33, rs1_h3_val == 16384
// opcode: pmulqr.h ; op1:x20; op2:x17; dest:x14; op1val:0x40003ffffff9efff;  op2val:0xffdfffbf01000800
TEST_RR_OP(pmulqr.h, x14, x20, x17, 0x0000000000000000, 0x40003ffffff9efff, 0xffdfffbf01000800, x1, 0*XLEN/8, x5)

inst_32:
// rs1_h0_val == -8193, rs2_h0_val == -129, rs1_h2_val == -3, rs2_h1_val == 32, rs1_h1_val == 16384
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffd4000dfff;  op2val:0xff7ffff70020ff7f
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xf7fffffd4000dfff, 0xff7ffff70020ff7f, x1, 1*XLEN/8, x5)

inst_33:
// rs1_h0_val == -16385, rs2_h1_val == -2049
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffafffebfff;  op2val:0xffdfffdff7fffff6
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x4000fffafffebfff, 0xffdfffdff7fffff6, x1, 2*XLEN/8, x5)

inst_34:
// rs1_h0_val == 21845, rs2_h2_val == -513
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x800fffcfffb5555;  op2val:0x20fdff10000003
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x800fffcfffb5555, 0x20fdff10000003, x1, 3*XLEN/8, x5)

inst_35:
// rs2_h3_val == 32767, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff0005fffa;  op2val:0x7ffffff73ffff7ff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff9fdff0005fffa, 0x7ffffff73ffff7ff, x1, 4*XLEN/8, x5)

inst_36:
// rs2_h3_val == 16, rs1_h3_val == 1024, rs1_h2_val == -32768, rs2_h0_val == 32767, rs1_h1_val == -9, rs2_h1_val == 128
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x4008000fff7fffa;  op2val:0x10fffc00807fff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x4008000fff7fffa, 0x10fffc00807fff, x1, 5*XLEN/8, x5)

inst_37:
// rs2_h3_val == 1024, rs2_h1_val == -8193, rs1_h1_val == -1
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0009fffffffd;  op2val:0x4000009dffffff7
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffa0009fffffffd, 0x4000009dffffff7, x1, 6*XLEN/8, x5)

inst_38:
// rs2_h3_val == 4096, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x090800fff8ffbf;  op2val:0x1000ffbf00020100
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x090800fff8ffbf, 0x1000ffbf00020100, x1, 7*XLEN/8, x5)

inst_39:
// rs2_h3_val == 8192, rs2_h1_val == -513, rs1_h2_val == 64
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff00400400dfff;  op2val:0x2000fefffdffefff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xefff00400400dfff, 0x2000fefffdffefff, x1, 8*XLEN/8, x5)

inst_40:
// rs2_h3_val == -5, rs2_h0_val == 128, rs1_h3_val == -16385
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffbfff7fffb;  op2val:0xfffbfffac0000080
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xbffffffbfff7fffb, 0xfffbfffac0000080, x1, 9*XLEN/8, x5)

inst_41:
// rs2_h3_val == -17, rs1_h1_val == 512, rs2_h1_val == -9
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff0200ffdf;  op2val:0xffefc000fff7fff6
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x08fdff0200ffdf, 0xffefc000fff7fff6, x1, 10*XLEN/8, x5)

inst_42:
// rs2_h3_val == -257, rs1_h2_val == 4096, rs2_h1_val == 2048, rs2_h2_val == 1
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x40001000fbfffffa;  op2val:0xfeff00010800bfff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x40001000fbfffffa, 0xfeff00010800bfff, x1, 11*XLEN/8, x5)

inst_43:
// rs2_h3_val == -513, rs1_h2_val == -65, rs2_h2_val == -3, rs2_h1_val == -257
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbffff74000;  op2val:0xfdfffffdfeff0010
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfbffffbffff74000, 0xfdfffffdfeff0010, x1, 12*XLEN/8, x5)

inst_44:
// rs2_h3_val == -1025, rs1_h2_val == 512, rs2_h1_val == 1
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0200fff9fff6;  op2val:0xfbff80000001c000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x3fff0200fff9fff6, 0xfbff80000001c000, x1, 13*XLEN/8, x5)

inst_45:
// rs2_h3_val == -2049, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffff7ffff60000;  op2val:0xf7ff800000103fff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x3fffff7ffff60000, 0xf7ff800000103fff, x1, 14*XLEN/8, x5)

inst_46:
// rs2_h3_val == -21846, rs2_h0_val == -8193
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x073fff3fffc000;  op2val:0xaaaafff7f7ffdfff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x073fff3fffc000, 0xaaaafff7f7ffdfff, x1, 15*XLEN/8, x5)

inst_47:
// rs1_h0_val == -21846, rs2_h0_val == 0, rs2_h1_val == -33
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x0380000003aaaa;  op2val:0x10fffaffdf0000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x0380000003aaaa, 0x10fffaffdf0000, x1, 16*XLEN/8, x5)

inst_48:
// rs1_h1_val == -32768, rs1_h3_val == -513, rs2_h1_val == -17, rs2_h2_val == 4
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff10008000fff7;  op2val:0xfffd0004ffefffbf
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfdff10008000fff7, 0xfffd0004ffefffbf, x1, 17*XLEN/8, x5)

inst_49:
// rs1_h0_val == rs2_h0_val, rs2_h0_val == 32, rs1_h1_val == 128
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff3fff00800020;  op2val:0x08008000010020
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x7fff3fff00800020, 0x08008000010020, x1, 18*XLEN/8, x5)

inst_50:
// rs1_h1_val == 0, rs1_h2_val == 0, rs1_h3_val == 32
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000aaaa;  op2val:0x3fff0005fffafff9
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x2000000000aaaa, 0x3fff0005fffafff9, x1, 19*XLEN/8, x5)

inst_51:
// rs1_h1_val == 1, rs2_h2_val == -2
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6c00000010006;  op2val:0x02fffefdff0080
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff6c00000010006, 0x02fffefdff0080, x1, 20*XLEN/8, x5)

inst_52:
// rs1_h1_val == 32767, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x20001007ffffffa;  op2val:0x40000005fff6ffef
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x20001007ffffffa, 0x40000005fff6ffef, x1, 21*XLEN/8, x5)

inst_53:
// rs1_h1_val == 2, rs2_h1_val == 1024, rs2_h0_val == 4
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff08000002dfff;  op2val:0xfff8fff904000004
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x3fff08000002dfff, 0xfff8fff904000004, x1, 22*XLEN/8, x5)

inst_54:
// rs1_h1_val == 4, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffff7ff0004fdff;  op2val:0xf7fffdfffff60004
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x7ffff7ff0004fdff, 0xf7fffdfffff60004, x1, 23*XLEN/8, x5)

inst_55:
// rs1_h1_val == 8, rs2_h1_val == -1
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000400082000;  op2val:0xffffdfffffff0040
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xaaaa000400082000, 0xffffdfffffff0040, x1, 24*XLEN/8, x5)

inst_56:
// rs1_h1_val == 16, rs2_h2_val == 8
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffc0000010fffa;  op2val:0xdfff0008aaaabfff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x3fffc0000010fffa, 0xdfff0008aaaabfff, x1, 25*XLEN/8, x5)

inst_57:
// rs1_h1_val == 32, rs2_h2_val == 16
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa10000020fffb;  op2val:0xfffa00103fff0010
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffa10000020fffb, 0xfffa00103fff0010, x1, 26*XLEN/8, x5)

inst_58:
// rs1_h1_val == 256, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x06fff601000200;  op2val:0xfffb0800ffdf0007
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x06fff601000200, 0xfffb0800ffdf0007, x1, 27*XLEN/8, x5)

inst_59:
// rs1_h1_val == 4096, rs1_h3_val == -9, rs1_h2_val == 32767, rs2_h2_val == 1024
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff10002000;  op2val:0xffef040000040020
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff77fff10002000, 0xffef040000040020, x1, 28*XLEN/8, x5)

inst_60:
// rs1_h1_val == 8192, rs1_h2_val == 8192, rs2_h0_val == 21845
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9200020000100;  op2val:0x80dfff00025555
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff9200020000100, 0x80dfff00025555, x1, 29*XLEN/8, x5)

inst_61:
// rs1_h3_val == -5, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0002fff90005;  op2val:0xfffc00800003c000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffb0002fff90005, 0xfffc00800003c000, x1, 30*XLEN/8, x5)

inst_62:
// rs1_h3_val == -257, rs2_h2_val == 21845
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00060005fffd;  op2val:0x005555fdff0003
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfeff00060005fffd, 0x005555fdff0003, x1, 31*XLEN/8, x5)

inst_63:
// rs1_h3_val == 21845, rs2_h0_val == 8192, rs2_h1_val == -32768, rs2_h2_val == -17
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x555500208000fdff;  op2val:0x09ffef80002000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x555500208000fdff, 0x09ffef80002000, x1, 32*XLEN/8, x5)

inst_64:
// rs2_h0_val == -32768, rs1_h2_val == 128, rs1_h1_val == -16385
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x800080bffffff9;  op2val:0x20fff710008000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x800080bffffff9, 0x20fff710008000, x1, 33*XLEN/8, x5)

inst_65:
// rs2_h0_val == -1, rs1_h3_val == 2
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x02fffafffe0003;  op2val:0x02fffb0010ffff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x02fffafffe0003, 0x02fffb0010ffff, x1, 34*XLEN/8, x5)

inst_66:
// rs2_h0_val == 2, rs2_h1_val == 8192
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffdfeff3fff;  op2val:0xff7f000120000002
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff9fffdfeff3fff, 0xff7f000120000002, x1, 35*XLEN/8, x5)

inst_67:
// rs2_h0_val == -2, rs1_h2_val == -1, rs1_h3_val == -32768
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffffbffffff7;  op2val:0xc00000090008fffe
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x8000ffffbffffff7, 0xc00000090008fffe, x1, 36*XLEN/8, x5)

inst_68:
// rs2_h0_val == -3, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x08000000055555;  op2val:0x10fffc3ffffffd
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x08000000055555, 0x10fffc3ffffffd, x1, 37*XLEN/8, x5)

inst_69:
// rs2_h0_val == -5, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x03feff0800fffe;  op2val:0x1000fff90004fffb
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x03feff0800fffe, 0x1000fff90004fffb, x1, 38*XLEN/8, x5)

inst_70:
// rs2_h0_val == -513, rs1_h3_val == 16, rs2_h1_val == -16385
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x100040ffef5555;  op2val:0x070004bffffdff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x100040ffef5555, 0x070004bffffdff, x1, 39*XLEN/8, x5)

inst_71:
// rs2_h0_val == -1025, rs1_h1_val == -513
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff90002fdfffffc;  op2val:0x1000007fff8fbff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff90002fdfffffc, 0x1000007fff8fbff, x1, 40*XLEN/8, x5)

inst_72:
// rs2_h0_val == -21846, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000035555ff7f;  op2val:0xaaaafffb0080aaaa
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x1000035555ff7f, 0xaaaafffb0080aaaa, x1, 41*XLEN/8, x5)

inst_73:
// rs1_h1_val == -3, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffcfffdfffe;  op2val:0x4000000fffafeff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff7fffcfffdfffe, 0x4000000fffafeff, x1, 42*XLEN/8, x5)

inst_74:
// rs1_h1_val == -33, rs2_h2_val == -21846
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0800ffdff7ff;  op2val:0xffdfaaaa00040100
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffb0800ffdff7ff, 0xffdfaaaa00040100, x1, 43*XLEN/8, x5)

inst_75:
// rs1_h1_val == -2049, rs1_h3_val == 64
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x400080f7ff3fff;  op2val:0x7fff0800fffc0002
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x400080f7ff3fff, 0x7fff0800fffc0002, x1, 44*XLEN/8, x5)

inst_76:
// rs2_h1_val == 16384, rs2_h2_val == 32, rs1_h3_val == 0
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x00feff40000020;  op2val:0x0000204000ffff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x00feff40000020, 0x0000204000ffff, x1, 45*XLEN/8, x5)

inst_77:
// rs2_h1_val == -2, rs1_h2_val == -8193, rs1_h1_val == -129
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdfffff7ffffa;  op2val:0x05ffbffffefffc
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xffdfdfffff7ffffa, 0x05ffbffffefffc, x1, 46*XLEN/8, x5)

inst_78:
// rs2_h1_val == -3, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff60006ffff;  op2val:0x200ffbffffdaaaa
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfbfffff60006ffff, 0x200ffbffffdaaaa, x1, 47*XLEN/8, x5)

inst_79:
// rs2_h1_val == -5, rs2_h2_val == -2049
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x105555fff6fff9;  op2val:0xbffff7fffffbffbf
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x105555fff6fff9, 0xbffff7fffffbffbf, x1, 48*XLEN/8, x5)

inst_80:
// rs1_h2_val == 1, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00010020ffff;  op2val:0xbffffffc40007fff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xbfff00010020ffff, 0xbffffffc40007fff, x1, 49*XLEN/8, x5)

inst_81:
// rs2_h1_val == -1025, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xc00002000800fdff;  op2val:0xf7ff0800fbfffdff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xc00002000800fdff, 0xf7ff0800fbfffdff, x1, 50*XLEN/8, x5)

inst_82:
// rs2_h1_val == -4097, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff3fff0004;  op2val:0x03c000efffdfff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x200fdff3fff0004, 0x03c000efffdfff, x1, 51*XLEN/8, x5)

inst_83:
// rs1_h2_val == 1024, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x0704007ffffbff;  op2val:0xfbff000408000000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x0704007ffffbff, 0xfbff000408000000, x1, 52*XLEN/8, x5)

inst_84:
// rs2_h3_val == 1, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef04004000dfff;  op2val:0x0100058000ff7f
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xffef04004000dfff, 0x0100058000ff7f, x1, 53*XLEN/8, x5)

inst_85:
// rs2_h2_val == -1, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6bfff00014000;  op2val:0x01ffff7ffffff6
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfff6bfff00014000, 0x01ffff7ffffff6, x1, 54*XLEN/8, x5)

inst_86:
// rs2_h2_val == 4096, rs1_h2_val == -17
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffef80000005;  op2val:0x10001000fffdff7f
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xbfffffef80000005, 0x10001000fffdff7f, x1, 55*XLEN/8, x5)

inst_87:
// rs2_h2_val == 16384, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7f00800004;  op2val:0xefff400001000008
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x100ff7f00800004, 0xefff400001000008, x1, 56*XLEN/8, x5)

inst_88:
// rs1_h2_val == -21846, rs1_h3_val == 4
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x04aaaaffff0010;  op2val:0x08010000045555
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x04aaaaffff0010, 0x08010000045555, x1, 57*XLEN/8, x5)

inst_89:
// rs2_h2_val == -129, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x0700013fffdfff;  op2val:0x06ff7fffeffff9
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x0700013fffdfff, 0x06ff7fffeffff9, x1, 58*XLEN/8, x5)

inst_90:
// rs1_h3_val == 4096, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x10008000fffbff7f;  op2val:0x00c000bffffffd
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x10008000fffbff7f, 0x00c000bffffffd, x1, 59*XLEN/8, x5)

inst_91:
// rs2_h2_val == -1025, rs2_h3_val == -32768
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fffd8000c000;  op2val:0x8000fbff0007f7ff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x00fffd8000c000, 0x8000fbff0007f7ff, x1, 60*XLEN/8, x5)

inst_92:
// rs2_h2_val == -16385, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x400000034000fff6;  op2val:0xfffebffffffb0200
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x400000034000fff6, 0xfffebffffffb0200, x1, 61*XLEN/8, x5)

inst_93:
// rs1_h2_val == 16384, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x0940000002fdff;  op2val:0xfff60005f7ffdfff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x0940000002fdff, 0xfff60005f7ffdfff, x1, 62*XLEN/8, x5)

inst_94:
// rs1_h2_val == -2, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x20fffefff60002;  op2val:0xfffdffff0005ffef
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x20fffefff60002, 0xfffdffff0005ffef, x1, 63*XLEN/8, x5)

inst_95:
// rs1_h2_val == -9, 
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff70800fffe;  op2val:0x10000040ffef2000
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffffff70800fffe, 0x10000040ffef2000, x1, 64*XLEN/8, x5)

inst_96:
// rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -8193, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs2_h2_val == -9, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 32767, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == 21845, rs1_h3_val != rs2_h3_val, rs2_h3_val == -1, rs2_h0_val == 2048
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff9dfff8000;  op2val:0xfffffff755550800
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x7ffffff9dfff8000, 0xfffffff755550800, x1, 65*XLEN/8, x5)

inst_97:
// rs1_h0_val == -1, rs2_h3_val == 4, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -257, rs1_h3_val == -4097, rs2_h2_val == -5, rs1_h2_val == rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == -5, rs2_h1_val == 64
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffb5555ffff;  op2val:0x04fffb0040feff
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xeffffffb5555ffff, 0x04fffb0040feff, x1, 66*XLEN/8, x5)

inst_98:
// rs1_h0_val == 16, rs2_h1_val == -65, rs1_h2_val == -1025, rs2_h0_val == 1024
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fbfffff90010;  op2val:0x55550007ffbf0400
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0x09fbfffff90010, 0x55550007ffbf0400, x1, 67*XLEN/8, x5)

inst_99:
// rs1_h0_val == -3, rs1_h2_val == -16385, rs2_h3_val == -129, rs1_h1_val == 64, rs2_h0_val == 8
// opcode: pmulqr.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffabfff0040fffd;  op2val:0xff7f7fff00080008
TEST_RR_OP(pmulqr.h, x31, x30, x29, 0x0000000000000000, 0xfffabfff0040fffd, 0xff7f7fff00080008, x1, 68*XLEN/8, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x8_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x8_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 69*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
