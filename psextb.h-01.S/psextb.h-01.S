
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec  3 08:57:37 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/cgf_files/p6-7.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psextb.h instruction of the RISC-V RV32PZicsr extension for the psextb.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psextb.h)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x30, rd==x31, rs1_h0_val == -32768, rs1_h1_val == 32767
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fff8000;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fff8000, x1, 0*XLEN/8, x2)

inst_1:
// rs1==x31, rd==x30, rs1_h0_val == -1, 
// opcode: psextb.h ; op1:x31; dest:x30; op1val:0x7fffffff;
TEST_RD_OP( psextb.h, x30, x31, 0x00000000, 0x7fffffff, x1, 2*XLEN/8, x2)

inst_2:
// rs1==x28, rd==x29, rs1_h0_val == 0, 
// opcode: psextb.h ; op1:x28; dest:x29; op1val:0x7fff0000;
TEST_RD_OP( psextb.h, x29, x28, 0x00000000, 0x7fff0000, x1, 4*XLEN/8, x2)

inst_3:
// rs1==x29, rd==x28, rs1_h0_val == 1, 
// opcode: psextb.h ; op1:x29; dest:x28; op1val:0x7fff0001;
TEST_RD_OP( psextb.h, x28, x29, 0x00000000, 0x7fff0001, x1, 6*XLEN/8, x2)

inst_4:
// rs1==x26, rd==x27, rs1_h0_val == 32767, 
// opcode: psextb.h ; op1:x26; dest:x27; op1val:0x7fff7fff;
TEST_RD_OP( psextb.h, x27, x26, 0x00000000, 0x7fff7fff, x1, 8*XLEN/8, x2)

inst_5:
// rs1==x27, rd==x26, rs1_h0_val == 2, 
// opcode: psextb.h ; op1:x27; dest:x26; op1val:0x7fff0002;
TEST_RD_OP( psextb.h, x26, x27, 0x00000000, 0x7fff0002, x1, 10*XLEN/8, x2)

inst_6:
// rs1==x24, rd==x25, rs1_h0_val == 4, 
// opcode: psextb.h ; op1:x24; dest:x25; op1val:0x7fff0004;
TEST_RD_OP( psextb.h, x25, x24, 0x00000000, 0x7fff0004, x1, 12*XLEN/8, x2)

inst_7:
// rs1==x25, rd==x24, rs1_h0_val == 8, 
// opcode: psextb.h ; op1:x25; dest:x24; op1val:0x7fff0008;
TEST_RD_OP( psextb.h, x24, x25, 0x00000000, 0x7fff0008, x1, 14*XLEN/8, x2)

inst_8:
// rs1==x22, rd==x23, rs1_h0_val == 16, 
// opcode: psextb.h ; op1:x22; dest:x23; op1val:0x7fff0010;
TEST_RD_OP( psextb.h, x23, x22, 0x00000000, 0x7fff0010, x1, 16*XLEN/8, x2)

inst_9:
// rs1==x23, rd==x22, rs1_h0_val == 32, 
// opcode: psextb.h ; op1:x23; dest:x22; op1val:0x7fff0020;
TEST_RD_OP( psextb.h, x22, x23, 0x00000000, 0x7fff0020, x1, 18*XLEN/8, x2)

inst_10:
// rs1==x20, rd==x21, rs1_h0_val == 64, 
// opcode: psextb.h ; op1:x20; dest:x21; op1val:0x7fff0040;
TEST_RD_OP( psextb.h, x21, x20, 0x00000000, 0x7fff0040, x1, 20*XLEN/8, x2)

inst_11:
// rs1==x21, rd==x20, rs1_h0_val == 128, 
// opcode: psextb.h ; op1:x21; dest:x20; op1val:0x7fff0080;
TEST_RD_OP( psextb.h, x20, x21, 0x00000000, 0x7fff0080, x1, 22*XLEN/8, x2)

inst_12:
// rs1==x18, rd==x19, rs1_h0_val == 256, 
// opcode: psextb.h ; op1:x18; dest:x19; op1val:0x7fff0100;
TEST_RD_OP( psextb.h, x19, x18, 0x00000000, 0x7fff0100, x1, 24*XLEN/8, x2)

inst_13:
// rs1==x19, rd==x18, rs1_h0_val == 512, 
// opcode: psextb.h ; op1:x19; dest:x18; op1val:0x7fff0200;
TEST_RD_OP( psextb.h, x18, x19, 0x00000000, 0x7fff0200, x1, 26*XLEN/8, x2)

inst_14:
// rs1==x16, rd==x17, rs1_h0_val == 1024, 
// opcode: psextb.h ; op1:x16; dest:x17; op1val:0x7fff0400;
TEST_RD_OP( psextb.h, x17, x16, 0x00000000, 0x7fff0400, x1, 28*XLEN/8, x2)

inst_15:
// rs1==x17, rd==x16, rs1_h0_val == 2048, 
// opcode: psextb.h ; op1:x17; dest:x16; op1val:0x7fff0800;
TEST_RD_OP( psextb.h, x16, x17, 0x00000000, 0x7fff0800, x1, 30*XLEN/8, x2)

inst_16:
// rs1==x14, rd==x15, rs1_h0_val == 4096, 
// opcode: psextb.h ; op1:x14; dest:x15; op1val:0x7fff1000;
TEST_RD_OP( psextb.h, x15, x14, 0x00000000, 0x7fff1000, x1, 32*XLEN/8, x2)

inst_17:
// rs1==x15, rd==x14, rs1_h0_val == 8192, 
// opcode: psextb.h ; op1:x15; dest:x14; op1val:0x7fff2000;
TEST_RD_OP( psextb.h, x14, x15, 0x00000000, 0x7fff2000, x1, 34*XLEN/8, x2)

inst_18:
// rs1==x12, rd==x13, rs1_h0_val == 16384, 
// opcode: psextb.h ; op1:x12; dest:x13; op1val:0x7fff4000;
TEST_RD_OP( psextb.h, x13, x12, 0x00000000, 0x7fff4000, x1, 36*XLEN/8, x2)

inst_19:
// rs1==x13, rd==x12, rs1_h0_val == -2, 
// opcode: psextb.h ; op1:x13; dest:x12; op1val:0x7ffffffe;
TEST_RD_OP( psextb.h, x12, x13, 0x00000000, 0x7ffffffe, x1, 38*XLEN/8, x2)

inst_20:
// rs1==x10, rd==x11, rs1_h0_val == -3, 
// opcode: psextb.h ; op1:x10; dest:x11; op1val:0x7ffffffd;
TEST_RD_OP( psextb.h, x11, x10, 0x00000000, 0x7ffffffd, x1, 40*XLEN/8, x2)

inst_21:
// rs1==x11, rd==x10, rs1_h0_val == -5, 
// opcode: psextb.h ; op1:x11; dest:x10; op1val:0x7ffffffb;
TEST_RD_OP( psextb.h, x10, x11, 0x00000000, 0x7ffffffb, x1, 42*XLEN/8, x2)

inst_22:
// rs1==x8, rd==x9, rs1_h0_val == -9, 
// opcode: psextb.h ; op1:x8; dest:x9; op1val:0x7ffffff7;
TEST_RD_OP( psextb.h, x9, x8, 0x00000000, 0x7ffffff7, x1, 44*XLEN/8, x2)

inst_23:
// rs1==x9, rd==x8, rs1_h0_val == -17, 
// opcode: psextb.h ; op1:x9; dest:x8; op1val:0x7fffffef;
TEST_RD_OP( psextb.h, x8, x9, 0x00000000, 0x7fffffef, x1, 46*XLEN/8, x2)

inst_24:
// rs1==x6, rd==x7, rs1_h0_val == -33, 
// opcode: psextb.h ; op1:x6; dest:x7; op1val:0x7fffffdf;
TEST_RD_OP( psextb.h, x7, x6, 0x00000000, 0x7fffffdf, x1, 48*XLEN/8, x2)

inst_25:
// rs1==x7, rd==x6, rs1_h0_val == -65, 
// opcode: psextb.h ; op1:x7; dest:x6; op1val:0x7fffffbf;
TEST_RD_OP( psextb.h, x6, x7, 0x00000000, 0x7fffffbf, x1, 50*XLEN/8, x8)

inst_26:
// rs1==x4, rd==x5, rs1_h0_val == -129, 
// opcode: psextb.h ; op1:x4; dest:x5; op1val:0x7fffff7f;
TEST_RD_OP( psextb.h, x5, x4, 0x00000000, 0x7fffff7f, x1, 52*XLEN/8, x8)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_27:
// rs1==x5, rd==x4, rs1_h0_val == -257, 
// opcode: psextb.h ; op1:x5; dest:x4; op1val:0x7ffffeff;
TEST_RD_OP( psextb.h, x4, x5, 0x00000000, 0x7ffffeff, x6, 0*XLEN/8, x8)

inst_28:
// rs1==x2, rd==x3, rs1_h0_val == -513, 
// opcode: psextb.h ; op1:x2; dest:x3; op1val:0x7ffffdff;
TEST_RD_OP( psextb.h, x3, x2, 0x00000000, 0x7ffffdff, x6, 2*XLEN/8, x8)

inst_29:
// rs1==x3, rd==x2, rs1_h0_val == -1025, 
// opcode: psextb.h ; op1:x3; dest:x2; op1val:0x7ffffbff;
TEST_RD_OP( psextb.h, x2, x3, 0x00000000, 0x7ffffbff, x6, 4*XLEN/8, x8)

inst_30:
// rs1==x0, rd==x1, rs1_h0_val == -2049, 
// opcode: psextb.h ; op1:x0; dest:x1; op1val:0x7ffff7ff;
TEST_RD_OP( psextb.h, x1, x0, 0x00000000, 0x7ffff7ff, x6, 6*XLEN/8, x8)

inst_31:
// rs1==x1, rd==x0, rs1_h0_val == -4097, 
// opcode: psextb.h ; op1:x1; dest:x0; op1val:0x7fffefff;
TEST_RD_OP( psextb.h, x0, x1, 0x00000000, 0x7fffefff, x6, 8*XLEN/8, x8)

inst_32:
// rs1_h0_val == -8193, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fffdfff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fffdfff, x6, 10*XLEN/8, x8)

inst_33:
// rs1_h0_val == -16385, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fffbfff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fffbfff, x6, 12*XLEN/8, x8)

inst_34:
// rs1_h0_val == 21845, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fff5555;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fff5555, x6, 14*XLEN/8, x8)

inst_35:
// rs1_h0_val == -21846, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fffaaaa;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fffaaaa, x6, 16*XLEN/8, x8)

inst_36:
// rs1_h1_val == -32768, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x80007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x80007fff, x6, 18*XLEN/8, x8)

inst_37:
// rs1_h1_val == -1, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xffff7fff, x6, 20*XLEN/8, x8)

inst_38:
// rs1_h1_val == 0, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x007fff, x6, 22*XLEN/8, x8)

inst_39:
// rs1_h1_val == 1, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x017fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x017fff, x6, 24*XLEN/8, x8)

inst_40:
// rs1_h1_val == -513, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfdff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfdff7fff, x6, 26*XLEN/8, x8)

inst_41:
// rs1_h1_val == -1025, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfbff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfbff7fff, x6, 28*XLEN/8, x8)

inst_42:
// rs1_h1_val == -2049, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xf7ff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xf7ff7fff, x6, 30*XLEN/8, x8)

inst_43:
// rs1_h1_val == -4097, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xefff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xefff7fff, x6, 32*XLEN/8, x8)

inst_44:
// rs1_h1_val == -8193, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xdfff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xdfff7fff, x6, 34*XLEN/8, x8)

inst_45:
// rs1_h1_val == -16385, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xbfff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xbfff7fff, x6, 36*XLEN/8, x8)

inst_46:
// rs1_h1_val == 21845, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x55557fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x55557fff, x6, 38*XLEN/8, x8)

inst_47:
// rs1_h1_val == -21846, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xaaaa7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xaaaa7fff, x6, 40*XLEN/8, x8)

inst_48:
// rs1_h1_val == 2, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x027fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x027fff, x6, 42*XLEN/8, x8)

inst_49:
// rs1_h1_val == 4, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x047fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x047fff, x6, 44*XLEN/8, x8)

inst_50:
// rs1_h1_val == 8, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x087fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x087fff, x6, 46*XLEN/8, x8)

inst_51:
// rs1_h1_val == 16, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x107fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x107fff, x6, 48*XLEN/8, x8)

inst_52:
// rs1_h1_val == 32, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x207fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x207fff, x6, 50*XLEN/8, x8)

inst_53:
// rs1_h1_val == 64, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x407fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x407fff, x6, 52*XLEN/8, x8)

inst_54:
// rs1_h1_val == 128, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x807fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x807fff, x6, 54*XLEN/8, x8)

inst_55:
// rs1_h1_val == 256, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x1007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x1007fff, x6, 56*XLEN/8, x8)

inst_56:
// rs1_h1_val == 512, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x2007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x2007fff, x6, 58*XLEN/8, x8)

inst_57:
// rs1_h1_val == 1024, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x4007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x4007fff, x6, 60*XLEN/8, x8)

inst_58:
// rs1_h1_val == 2048, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x8007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x8007fff, x6, 62*XLEN/8, x8)

inst_59:
// rs1_h1_val == 4096, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x10007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x10007fff, x6, 64*XLEN/8, x8)

inst_60:
// rs1_h1_val == 8192, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x20007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x20007fff, x6, 66*XLEN/8, x8)

inst_61:
// rs1_h1_val == 16384, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x40007fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x40007fff, x6, 68*XLEN/8, x8)

inst_62:
// rs1_h1_val == -2, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfffe7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfffe7fff, x6, 70*XLEN/8, x8)

inst_63:
// rs1_h1_val == -3, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfffd7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfffd7fff, x6, 72*XLEN/8, x8)

inst_64:
// rs1_h1_val == -5, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfffb7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfffb7fff, x6, 74*XLEN/8, x8)

inst_65:
// rs1_h1_val == -9, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfff77fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfff77fff, x6, 76*XLEN/8, x8)

inst_66:
// rs1_h1_val == -17, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffef7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xffef7fff, x6, 78*XLEN/8, x8)

inst_67:
// rs1_h1_val == -33, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffdf7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xffdf7fff, x6, 80*XLEN/8, x8)

inst_68:
// rs1_h1_val == -65, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffbf7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xffbf7fff, x6, 82*XLEN/8, x8)

inst_69:
// rs1_h1_val == -129, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xff7f7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xff7f7fff, x6, 84*XLEN/8, x8)

inst_70:
// rs1_h1_val == -257, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfeff7fff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0xfeff7fff, x6, 86*XLEN/8, x8)

inst_71:
// rs1_h0_val == -2049, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7ffff7ff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7ffff7ff, x6, 88*XLEN/8, x8)

inst_72:
// rs1_h0_val == -4097, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fffefff;
TEST_RD_OP( psextb.h, x31, x30, 0x00000000, 0x7fffefff, x6, 90*XLEN/8, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 54*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 92*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
