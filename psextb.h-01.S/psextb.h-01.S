
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 09:26:37 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p6-7.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psextb.h instruction of the RISC-V RV64PZicsr extension for the psextb.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psextb.h)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1==x2, rd==x29, rs1_h0_val == -32768, rs1_h2_val == -16385, rs1_h3_val == -33, rs1_h1_val == 32
// opcode: psextb.h ; op1:x2; dest:x29; op1val:0xffdfbfff00208000;
TEST_RD_OP( psextb.h, x29, x2, 0x0000000000000000, 0xffdfbfff00208000, x7, 0*XLEN/8, x12)

inst_1:
// rs1==x6, rd==x23, rs1_h0_val == -1, rs1_h3_val == 2, rs1_h2_val == 1, rs1_h1_val == 128
// opcode: psextb.h ; op1:x6; dest:x23; op1val:0x0200010080ffff;
TEST_RD_OP( psextb.h, x23, x6, 0x0000000000000000, 0x0200010080ffff, x7, 2*XLEN/8, x12)

inst_2:
// rs1==x23, rd==x1, rs1_h0_val == 0, rs1_h1_val == 2, rs1_h2_val == -21846, rs1_h3_val == 512
// opcode: psextb.h ; op1:x23; dest:x1; op1val:0x200aaaa00020000;
TEST_RD_OP( psextb.h, x1, x23, 0x0000000000000000, 0x200aaaa00020000, x7, 4*XLEN/8, x12)

inst_3:
// rs1==x20, rd==x31, rs1_h0_val == 1, rs1_h1_val == 0, rs1_h3_val == 128
// opcode: psextb.h ; op1:x20; dest:x31; op1val:0x80000900000001;
TEST_RD_OP( psextb.h, x31, x20, 0x0000000000000000, 0x80000900000001, x7, 6*XLEN/8, x12)

inst_4:
// rs1==x3, rd==x20, rs1_h0_val == 32767, rs1_h1_val == 4, rs1_h3_val == -2, rs1_h2_val == -17
// opcode: psextb.h ; op1:x3; dest:x20; op1val:0xfffeffef00047fff;
TEST_RD_OP( psextb.h, x20, x3, 0x0000000000000000, 0xfffeffef00047fff, x7, 8*XLEN/8, x12)

inst_5:
// rs1==x1, rd==x9, rs1_h0_val == 2, 
// opcode: psextb.h ; op1:x1; dest:x9; op1val:0xfff8fff900060002;
TEST_RD_OP( psextb.h, x9, x1, 0x0000000000000000, 0xfff8fff900060002, x7, 10*XLEN/8, x12)

inst_6:
// rs1==x28, rd==x16, rs1_h0_val == 4, rs1_h3_val == 32
// opcode: psextb.h ; op1:x28; dest:x16; op1val:0x20fff93fff0004;
TEST_RD_OP( psextb.h, x16, x28, 0x0000000000000000, 0x20fff93fff0004, x7, 12*XLEN/8, x12)

inst_7:
// rs1==x10, rd==x4, rs1_h0_val == 8, rs1_h3_val == 2048, rs1_h1_val == 2048, rs1_h2_val == 512
// opcode: psextb.h ; op1:x10; dest:x4; op1val:0x800020008000008;
TEST_RD_OP( psextb.h, x4, x10, 0x0000000000000000, 0x800020008000008, x7, 14*XLEN/8, x12)

inst_8:
// rs1==x5, rd==x3, rs1_h0_val == 16, rs1_h1_val == -1025
// opcode: psextb.h ; op1:x5; dest:x3; op1val:0x05ffeffbff0010;
TEST_RD_OP( psextb.h, x3, x5, 0x0000000000000000, 0x05ffeffbff0010, x7, 16*XLEN/8, x12)

inst_9:
// rs1==x30, rd==x14, rs1_h0_val == 32, rs1_h3_val == -513, rs1_h2_val == 256
// opcode: psextb.h ; op1:x30; dest:x14; op1val:0xfdff0100fff60020;
TEST_RD_OP( psextb.h, x14, x30, 0x0000000000000000, 0xfdff0100fff60020, x7, 18*XLEN/8, x12)

inst_10:
// rs1==x31, rd==x13, rs1_h0_val == 64, rs1_h1_val == -5
// opcode: psextb.h ; op1:x31; dest:x13; op1val:0x20fff9fffb0040;
TEST_RD_OP( psextb.h, x13, x31, 0x0000000000000000, 0x20fff9fffb0040, x7, 20*XLEN/8, x12)

inst_11:
// rs1==x4, rd==x25, rs1_h0_val == 128, rs1_h1_val == 8, rs1_h3_val == -16385
// opcode: psextb.h ; op1:x4; dest:x25; op1val:0xbfffffef00080080;
TEST_RD_OP( psextb.h, x25, x4, 0x0000000000000000, 0xbfffffef00080080, x7, 22*XLEN/8, x12)

inst_12:
// rs1==x14, rd==x0, rs1_h0_val == 256, rs1_h2_val == 0
// opcode: psextb.h ; op1:x14; dest:x0; op1val:0xbfff000008000100;
TEST_RD_OP( psextb.h, x0, x14, 0x0000000000000000, 0xbfff000008000100, x7, 24*XLEN/8, x12)

inst_13:
// rs1==x16, rd==x5, rs1_h0_val == 512, rs1_h3_val == 64
// opcode: psextb.h ; op1:x16; dest:x5; op1val:0x40ffef00040200;
TEST_RD_OP( psextb.h, x5, x16, 0x0000000000000000, 0x40ffef00040200, x7, 26*XLEN/8, x12)

inst_14:
// rs1==x9, rd==x8, rs1_h0_val == 1024, rs1_h3_val == -2049
// opcode: psextb.h ; op1:x9; dest:x8; op1val:0xf7ff3fff00040400;
TEST_RD_OP( psextb.h, x8, x9, 0x0000000000000000, 0xf7ff3fff00040400, x7, 28*XLEN/8, x12)

inst_15:
// rs1==x15, rd==x2, rs1_h0_val == 2048, rs1_h2_val == -257, rs1_h1_val == 16
// opcode: psextb.h ; op1:x15; dest:x2; op1val:0xffdffeff00100800;
TEST_RD_OP( psextb.h, x2, x15, 0x0000000000000000, 0xffdffeff00100800, x7, 30*XLEN/8, x12)

inst_16:
// rs1==x17, rd==x10, rs1_h0_val == 4096, rs1_h2_val == 16384
// opcode: psextb.h ; op1:x17; dest:x10; op1val:0x07400000081000;
TEST_RD_OP( psextb.h, x10, x17, 0x0000000000000000, 0x07400000081000, x7, 32*XLEN/8, x12)

inst_17:
// rs1==x8, rd==x28, rs1_h0_val == 8192, rs1_h1_val == 32767, rs1_h3_val == -5
// opcode: psextb.h ; op1:x8; dest:x28; op1val:0xfffb00097fff2000;
TEST_RD_OP( psextb.h, x28, x8, 0x0000000000000000, 0xfffb00097fff2000, x7, 34*XLEN/8, x12)

inst_18:
// rs1==x29, rd==x21, rs1_h0_val == 16384, rs1_h1_val == -513, rs1_h2_val == 64
// opcode: psextb.h ; op1:x29; dest:x21; op1val:0x020040fdff4000;
TEST_RD_OP( psextb.h, x21, x29, 0x0000000000000000, 0x020040fdff4000, x7, 36*XLEN/8, x12)

inst_19:
// rs1==x13, rd==x19, rs1_h0_val == -2, rs1_h1_val == 256, rs1_h2_val == 21845, rs1_h3_val == 16384
// opcode: psextb.h ; op1:x13; dest:x19; op1val:0x400055550100fffe;
TEST_RD_OP( psextb.h, x19, x13, 0x0000000000000000, 0x400055550100fffe, x7, 38*XLEN/8, x12)

inst_20:
// rs1==x19, rd==x15, rs1_h0_val == -3, rs1_h1_val == 4096, rs1_h2_val == 2
// opcode: psextb.h ; op1:x19; dest:x15; op1val:0x0700021000fffd;
TEST_RD_OP( psextb.h, x15, x19, 0x0000000000000000, 0x0700021000fffd, x7, 40*XLEN/8, x12)

inst_21:
// rs1==x27, rd==x30, rs1_h0_val == -5, 
// opcode: psextb.h ; op1:x27; dest:x30; op1val:0x09fff80000fffb;
TEST_RD_OP( psextb.h, x30, x27, 0x0000000000000000, 0x09fff80000fffb, x7, 42*XLEN/8, x12)

inst_22:
// rs1==x0, rd==x22, rs1_h0_val == -9, rs1_h2_val == -8193, rs1_h1_val == -17
// opcode: psextb.h ; op1:x0; dest:x22; op1val:0x4000dfffffeffff7;
TEST_RD_OP( psextb.h, x22, x0, 0x0000000000000000, 0x4000dfffffeffff7, x7, 44*XLEN/8, x12)

inst_23:
// rs1==x25, rd==x27, rs1_h0_val == -17, rs1_h3_val == -4097, rs1_h1_val == -21846
// opcode: psextb.h ; op1:x25; dest:x27; op1val:0xefff0003aaaaffef;
TEST_RD_OP( psextb.h, x27, x25, 0x0000000000000000, 0xefff0003aaaaffef, x7, 46*XLEN/8, x12)

inst_24:
// rs1==x11, rd==x17, rs1_h0_val == -33, rs1_h1_val == -9, rs1_h2_val == -129, rs1_h3_val == 1024
// opcode: psextb.h ; op1:x11; dest:x17; op1val:0x400ff7ffff7ffdf;
TEST_RD_OP( psextb.h, x17, x11, 0x0000000000000000, 0x400ff7ffff7ffdf, x7, 48*XLEN/8, x12)

inst_25:
// rs1==x26, rd==x24, rs1_h0_val == -65, rs1_h1_val == 64, rs1_h2_val == 2048
// opcode: psextb.h ; op1:x26; dest:x24; op1val:0xefff08000040ffbf;
TEST_RD_OP( psextb.h, x24, x26, 0x0000000000000000, 0xefff08000040ffbf, x7, 50*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:
// rs1==x24, rd==x12, rs1_h0_val == -129, 
// opcode: psextb.h ; op1:x24; dest:x12; op1val:0xfff900050000ff7f;
TEST_RD_OP( psextb.h, x12, x24, 0x0000000000000000, 0xfff900050000ff7f, x1, 0*XLEN/8, x2)

inst_27:
// rs1==x18, rd==x7, rs1_h0_val == -257, rs1_h3_val == 8
// opcode: psextb.h ; op1:x18; dest:x7; op1val:0x08fffafff6feff;
TEST_RD_OP( psextb.h, x7, x18, 0x0000000000000000, 0x08fffafff6feff, x1, 2*XLEN/8, x2)

inst_28:
// rs1==x22, rd==x26, rs1_h0_val == -513, rs1_h1_val == -32768
// opcode: psextb.h ; op1:x22; dest:x26; op1val:0xfff9bfff8000fdff;
TEST_RD_OP( psextb.h, x26, x22, 0x0000000000000000, 0xfff9bfff8000fdff, x1, 4*XLEN/8, x2)

inst_29:
// rs1==x12, rd==x18, rs1_h0_val == -1025, rs1_h1_val == 1
// opcode: psextb.h ; op1:x12; dest:x18; op1val:0x80fff60001fbff;
TEST_RD_OP( psextb.h, x18, x12, 0x0000000000000000, 0x80fff60001fbff, x1, 6*XLEN/8, x2)

inst_30:
// rs1==x7, rd==x11, rs1_h0_val == -2049, rs1_h2_val == 16, rs1_h1_val == -33
// opcode: psextb.h ; op1:x7; dest:x11; op1val:0xfff90010ffdff7ff;
TEST_RD_OP( psextb.h, x11, x7, 0x0000000000000000, 0xfff90010ffdff7ff, x1, 8*XLEN/8, x2)

inst_31:
// rs1==x21, rd==x6, rs1_h3_val == -3, 
// opcode: psextb.h ; op1:x21; dest:x6; op1val:0xfffd4000fdff0200;
TEST_RD_OP( psextb.h, x6, x21, 0x0000000000000000, 0xfffd4000fdff0200, x1, 10*XLEN/8, x2)

inst_32:
// rs1_h3_val == -9, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfff700011000ffef;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfff700011000ffef, x1, 12*XLEN/8, x2)

inst_33:
// rs1_h3_val == -17, rs1_h0_val == -21846
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffef02001000aaaa;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xffef02001000aaaa, x1, 14*XLEN/8, x2)

inst_34:
// rs1_h3_val == -65, rs1_h2_val == -3
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffbffffd0100ffbf;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xffbffffd0100ffbf, x1, 16*XLEN/8, x2)

inst_35:
// rs1_h3_val == -129, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xff7f020000020009;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xff7f020000020009, x1, 18*XLEN/8, x2)

inst_36:
// rs1_h3_val == -257, rs1_h2_val == -2
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfefffffe0004fffb;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfefffffe0004fffb, x1, 20*XLEN/8, x2)

inst_37:
// rs1_h3_val == -1025, rs1_h2_val == 4
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfbff00040002fffa;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfbff00040002fffa, x1, 22*XLEN/8, x2)

inst_38:
// rs1_h3_val == -8193, rs1_h0_val == -16385, rs1_h2_val == 8
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xdfff00080000bfff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xdfff00080000bfff, x1, 24*XLEN/8, x2)

inst_39:
// rs1_h3_val == 21845, rs1_h0_val == -8193, rs1_h1_val == 512, rs1_h2_val == 4096
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x555510000200dfff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x555510000200dfff, x1, 26*XLEN/8, x2)

inst_40:
// rs1_h3_val == -21846, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xaaaaff7ffff70010;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xaaaaff7ffff70010, x1, 28*XLEN/8, x2)

inst_41:
// rs1_h0_val == -4097, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x0208000007efff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x0208000007efff, x1, 30*XLEN/8, x2)

inst_42:
// rs1_h0_val == 21845, rs1_h1_val == 21845, rs1_h2_val == -4097
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfbffefff55555555;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfbffefff55555555, x1, 32*XLEN/8, x2)

inst_43:
// rs1_h1_val == -1, rs1_h2_val == 32767
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x067fffffff0200;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x067fffffff0200, x1, 34*XLEN/8, x2)

inst_44:
// rs1_h1_val == 1024, rs1_h2_val == -32768
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xaaaa80000400fffa;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xaaaa80000400fffa, x1, 36*XLEN/8, x2)

inst_45:
// rs1_h1_val == 8192, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x08fff820001000;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x08fff820001000, x1, 38*XLEN/8, x2)

inst_46:
// rs1_h1_val == 16384, rs1_h3_val == 1
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x01ffef4000bfff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x01ffef4000bfff, x1, 40*XLEN/8, x2)

inst_47:
// rs1_h1_val == -2049, rs1_h2_val == 8192
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffdf2000f7ff0080;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xffdf2000f7ff0080, x1, 42*XLEN/8, x2)

inst_48:
// rs1_h1_val == -4097, rs1_h3_val == 256
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x100fffeefff0080;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x100fffeefff0080, x1, 44*XLEN/8, x2)

inst_49:
// rs1_h1_val == -8193, rs1_h2_val == -2049
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xdffff7ffdffffbff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xdffff7ffdffffbff, x1, 46*XLEN/8, x2)

inst_50:
// rs1_h1_val == -16385, rs1_h2_val == -1025
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x40fbffbffffffd;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x40fbffbffffffd, x1, 48*XLEN/8, x2)

inst_51:
// rs1_h2_val == -1, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfbfffffffdff0200;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfbfffffffdff0200, x1, 50*XLEN/8, x2)

inst_52:
// rs1_h2_val == 32, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xbfff0020ffeffff7;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xbfff0020ffeffff7, x1, 52*XLEN/8, x2)

inst_53:
// rs1_h2_val == 128, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xbfff008008000100;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xbfff008008000100, x1, 54*XLEN/8, x2)

inst_54:
// rs1_h2_val == 1024, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x55550400bffffffd;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x55550400bffffffd, x1, 56*XLEN/8, x2)

inst_55:
// rs1_h2_val == -5, rs1_h3_val == 8192
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x2000fffbfffabfff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x2000fffbfffabfff, x1, 58*XLEN/8, x2)

inst_56:
// rs1_h2_val == -9, rs1_h1_val == -257
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xff7ffff7fefffdff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xff7ffff7fefffdff, x1, 60*XLEN/8, x2)

inst_57:
// rs1_h2_val == -33, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xff7fffdf7ffffffd;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xff7fffdf7ffffffd, x1, 62*XLEN/8, x2)

inst_58:
// rs1_h2_val == -65, rs1_h3_val == -32768
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x8000ffbffdffffdf;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x8000ffbffdffffdf, x1, 64*XLEN/8, x2)

inst_59:
// rs1_h2_val == -513, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xffbffdffc0000002;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xffbffdffc0000002, x1, 66*XLEN/8, x2)

inst_60:
// rs1_h3_val == -1, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfffffff9fffb1000;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfffffff9fffb1000, x1, 68*XLEN/8, x2)

inst_61:
// rs1_h3_val == 0, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x00fffcaaaa3fff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x00fffcaaaa3fff, x1, 70*XLEN/8, x2)

inst_62:
// rs1_h3_val == 32767, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x7fff1000bffffff6;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x7fff1000bffffff6, x1, 72*XLEN/8, x2)

inst_63:
// rs1_h3_val == 4, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x04fffff7ff0080;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x04fffff7ff0080, x1, 74*XLEN/8, x2)

inst_64:
// rs1_h3_val == 16, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x100003feff0006;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x100003feff0006, x1, 76*XLEN/8, x2)

inst_65:
// rs1_h1_val == -2, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfffe0100fffeefff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfffe0100fffeefff, x1, 78*XLEN/8, x2)

inst_66:
// rs1_h1_val == -3, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xfff77ffffffd0400;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xfff77ffffffd0400, x1, 80*XLEN/8, x2)

inst_67:
// rs1_h3_val == 4096, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x10008000effff7ff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x10008000effff7ff, x1, 82*XLEN/8, x2)

inst_68:
// rs1_h1_val == -65, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x020009ffbfefff;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x020009ffbfefff, x1, 84*XLEN/8, x2)

inst_69:
// rs1_h1_val == -129, 
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xdffffff8ff7fffbf;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xdffffff8ff7fffbf, x1, 86*XLEN/8, x2)

inst_70:
// rs1_h0_val == 256, rs1_h2_val == 0
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0xbfff000008000100;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0xbfff000008000100, x1, 88*XLEN/8, x2)

inst_71:
// rs1_h0_val == -9, rs1_h2_val == -8193, rs1_h1_val == -17
// opcode: psextb.h ; op1:x30; dest:x31; op1val:0x4000dfffffeffff7;
TEST_RD_OP( psextb.h, x31, x30, 0x0000000000000000, 0x4000dfffffeffff7, x1, 90*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 52*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 92*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
