
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulh.h.bo instruction of the RISC-V RV64PZicsr extension for the pmulh.h.bo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulh.h.bo)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x5, rs2==x11, rd==x11, rs1_h0_val == -32768, rs2_h2_val == 16, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == -21846, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val != rs2_h3_val, rs1_h2_val == 4096, rs1_h3_val == 8192, rs2_h0_val == 2048
// opcode: pmulh.h.bo ; op1:x5; op2:x11; dest:x11; op1val:0x20001000aaaa8000;  op2val:0xfffc0010fffb0800
TEST_RR_OP(pmulh.h.bo, x11, x5, x11, 0x0000000000000000, 0x20001000aaaa8000, 0xfffc0010fffb0800, x4, 0*XLEN/8, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x24, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -17, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -4097, rs2_h1_val == 16
// opcode: pmulh.h.bo ; op1:x30; op2:x30; dest:x24; op1val:0xfff600060009ffff;  op2val:0xeffffff60010ffef
TEST_RR_OP(pmulh.h.bo, x24, x30, x30, 0x0000000000000000, 0xfff600060009ffff, 0xeffffff60010ffef, x4, 1*XLEN/8, x10)

inst_2:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h0_val == 0, rs1_h3_val == -5, rs2_h1_val == 512, rs2_h0_val == -2, rs2_h2_val == -17, rs1_h1_val == 256, rs2_h3_val == -9, rs1_h2_val == 2048
// opcode: pmulh.h.bo ; op1:x0; op2:x0; dest:x0; op1val:0xfffb080001000000;  op2val:0xfff7ffef0200fffe
TEST_RR_OP(pmulh.h.bo, x0, x0, x0, 0x0000000000000000, 0xfffb080001000000, 0xfff7ffef0200fffe, x4, 2*XLEN/8, x10)

inst_3:
// rs1 == rd != rs2, rs1==x7, rs2==x23, rd==x7, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 8, rs1_h1_val == 16, rs1_h3_val == 21845, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 21845, rs2_h0_val == 32, rs2_h2_val == 4
// opcode: pmulh.h.bo ; op1:x7; op2:x23; dest:x7; op1val:0x5555000500100001;  op2val:0x08000455550020
TEST_RR_OP(pmulh.h.bo, x7, x7, x23, 0x0000000000000000, 0x5555000500100001, 0x08000455550020, x4, 3*XLEN/8, x10)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x15, rd==x19, rs1_h0_val == 32767, rs1_h2_val == -65, rs2_h3_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 512, rs2_h1_val == -3, rs2_h0_val == -513, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == -2
// opcode: pmulh.h.bo ; op1:x16; op2:x15; dest:x19; op1val:0x06ffbffffe7fff;  op2val:0x020200fffdfdff
TEST_RR_OP(pmulh.h.bo, x19, x16, x15, 0x0000000000000000, 0x06ffbffffe7fff, 0x020200fffdfdff, x4, 4*XLEN/8, x10)

inst_5:
// rs1==x17, rs2==x2, rd==x6, rs1_h0_val == 2, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 21845, rs2_h3_val == -32768, rs1_h2_val == -3
// opcode: pmulh.h.bo ; op1:x17; op2:x2; dest:x6; op1val:0x2000fffd00050002;  op2val:0x8000fffcff7f5555
TEST_RR_OP(pmulh.h.bo, x6, x17, x2, 0x0000000000000000, 0x2000fffd00050002, 0x8000fffcff7f5555, x4, 5*XLEN/8, x10)

inst_6:
// rs1==x9, rs2==x28, rd==x1, rs1_h0_val == 4, rs2_h1_val == 32767, rs1_h1_val == 8192, rs1_h2_val == -9
// opcode: pmulh.h.bo ; op1:x9; op2:x28; dest:x1; op1val:0xfffafff720000004;  op2val:0xefff00097fff0009
TEST_RR_OP(pmulh.h.bo, x1, x9, x28, 0x0000000000000000, 0xfffafff720000004, 0xefff00097fff0009, x4, 6*XLEN/8, x10)

inst_7:
// rs1==x29, rs2==x12, rd==x9, rs1_h0_val == 8, rs1_h3_val == -8193, rs2_h2_val == -3, rs1_h1_val == 64, rs1_h2_val == 64, rs2_h0_val == 1, rs2_h1_val == -16385, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pmulh.h.bo ; op1:x29; op2:x12; dest:x9; op1val:0xdfff004000400008;  op2val:0x3ffffffdbfff0001
TEST_RR_OP(pmulh.h.bo, x9, x29, x12, 0x0000000000000000, 0xdfff004000400008, 0x3ffffffdbfff0001, x4, 7*XLEN/8, x10)

inst_8:
// rs1==x3, rs2==x24, rd==x30, rs1_h0_val == 16, rs1_h1_val == -2049, rs2_h3_val == 16, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == 4096, rs2_h1_val == 32
// opcode: pmulh.h.bo ; op1:x3; op2:x24; dest:x30; op1val:0x10000800f7ff0010;  op2val:0x10fff900203fff
TEST_RR_OP(pmulh.h.bo, x30, x3, x24, 0x0000000000000000, 0x10000800f7ff0010, 0x10fff900203fff, x4, 8*XLEN/8, x10)

inst_9:
// rs1==x1, rs2==x20, rd==x26, rs1_h0_val == 32, rs2_h1_val == 16384, rs1_h3_val == 32, rs2_h3_val == -257, rs2_h2_val == -1, rs2_h0_val == 256
// opcode: pmulh.h.bo ; op1:x1; op2:x20; dest:x26; op1val:0x20ffbf00030020;  op2val:0xfeffffff40000100
TEST_RR_OP(pmulh.h.bo, x26, x1, x20, 0x0000000000000000, 0x20ffbf00030020, 0xfeffffff40000100, x4, 9*XLEN/8, x10)

inst_10:
// rs1==x6, rs2==x1, rd==x15, rs1_h0_val == 64, rs1_h3_val == -32768, rs2_h2_val == -513
// opcode: pmulh.h.bo ; op1:x6; op2:x1; dest:x15; op1val:0x8000004000050040;  op2val:0x08fdff4000fff8
TEST_RR_OP(pmulh.h.bo, x15, x6, x1, 0x0000000000000000, 0x8000004000050040, 0x08fdff4000fff8, x4, 10*XLEN/8, x10)

inst_11:
// rs1==x2, rs2==x18, rd==x27, rs1_h0_val == 128, rs1_h1_val == 1024, rs2_h3_val == -2049, rs2_h1_val == -33, rs1_h2_val == 21845
// opcode: pmulh.h.bo ; op1:x2; op2:x18; dest:x27; op1val:0xfffb555504000080;  op2val:0xf7ff0004ffdffff8
TEST_RR_OP(pmulh.h.bo, x27, x2, x18, 0x0000000000000000, 0xfffb555504000080, 0xf7ff0004ffdffff8, x4, 11*XLEN/8, x10)

inst_12:
// rs1==x15, rs2==x25, rd==x13, rs1_h0_val == 256, rs2_h2_val == -33, rs1_h2_val == 16384, rs2_h0_val == -21846, rs2_h1_val == -2
// opcode: pmulh.h.bo ; op1:x15; op2:x25; dest:x13; op1val:0x2000400000100100;  op2val:0xfff7ffdffffeaaaa
TEST_RR_OP(pmulh.h.bo, x13, x15, x25, 0x0000000000000000, 0x2000400000100100, 0xfff7ffdffffeaaaa, x4, 12*XLEN/8, x10)

inst_13:
// rs1==x25, rs2==x8, rd==x18, rs1_h0_val == 512, rs2_h3_val == -3, rs2_h0_val == -129, rs2_h1_val == -65, rs2_h2_val == 1024
// opcode: pmulh.h.bo ; op1:x25; op2:x8; dest:x18; op1val:0xfffbfffc01000200;  op2val:0xfffd0400ffbfff7f
TEST_RR_OP(pmulh.h.bo, x18, x25, x8, 0x0000000000000000, 0xfffbfffc01000200, 0xfffd0400ffbfff7f, x4, 13*XLEN/8, x10)

inst_14:
// rs1==x23, rs2==x21, rd==x2, rs1_h0_val == 1024, rs2_h3_val == -17, rs2_h2_val == 1, rs2_h1_val == 64
// opcode: pmulh.h.bo ; op1:x23; op2:x21; dest:x2; op1val:0x8000004020000400;  op2val:0xffef00010040ffef
TEST_RR_OP(pmulh.h.bo, x2, x23, x21, 0x0000000000000000, 0x8000004020000400, 0xffef00010040ffef, x4, 14*XLEN/8, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x13, rs2==x22, rd==x8, rs1_h0_val == 2048, rs2_h3_val == -1025, rs1_h2_val == 512, rs2_h0_val == 8
// opcode: pmulh.h.bo ; op1:x13; op2:x22; dest:x8; op1val:0xfff802003fff0800;  op2val:0xfbff0003fffb0008
TEST_RR_OP(pmulh.h.bo, x8, x13, x22, 0x0000000000000000, 0xfff802003fff0800, 0xfbff0003fffb0008, x1, 0*XLEN/8, x5)

inst_16:
// rs1==x11, rs2==x31, rd==x22, rs1_h0_val == 4096, rs1_h2_val == 8192, rs2_h2_val == -1025, rs1_h3_val == rs2_h3_val, rs2_h1_val == -257
// opcode: pmulh.h.bo ; op1:x11; op2:x31; dest:x22; op1val:0xfff8200000071000;  op2val:0xfff8fbfffeffc000
TEST_RR_OP(pmulh.h.bo, x22, x11, x31, 0x0000000000000000, 0xfff8200000071000, 0xfff8fbfffeffc000, x1, 1*XLEN/8, x5)

inst_17:
// rs1==x10, rs2==x4, rd==x17, rs1_h0_val == 8192, rs2_h0_val == 16, rs2_h3_val == 32767, rs1_h2_val == -21846, rs1_h3_val == 0
// opcode: pmulh.h.bo ; op1:x10; op2:x4; dest:x17; op1val:0x00aaaa01002000;  op2val:0x7fff0003feff0010
TEST_RR_OP(pmulh.h.bo, x17, x10, x4, 0x0000000000000000, 0x00aaaa01002000, 0x7fff0003feff0010, x1, 2*XLEN/8, x5)

inst_18:
// rs1==x24, rs2==x29, rd==x4, rs1_h0_val == 16384, rs1_h2_val == 1, rs2_h0_val == -1025, rs2_h2_val == -5, rs1_h3_val == 2, rs2_h3_val == -1
// opcode: pmulh.h.bo ; op1:x24; op2:x29; dest:x4; op1val:0x02000100404000;  op2val:0xfffffffb4000fbff
TEST_RR_OP(pmulh.h.bo, x4, x24, x29, 0x0000000000000000, 0x02000100404000, 0xfffffffb4000fbff, x1, 3*XLEN/8, x5)

inst_19:
// rs1==x12, rs2==x26, rd==x16, rs1_h0_val == -2, rs2_h0_val == 128, rs2_h1_val == 1
// opcode: pmulh.h.bo ; op1:x12; op2:x26; dest:x16; op1val:0x06fff90003fffe;  op2val:0xfff6000500010080
TEST_RR_OP(pmulh.h.bo, x16, x12, x26, 0x0000000000000000, 0x06fff90003fffe, 0xfff6000500010080, x1, 4*XLEN/8, x5)

inst_20:
// rs1==x26, rs2==x7, rd==x3, rs1_h0_val == -3, rs1_h3_val == -129
// opcode: pmulh.h.bo ; op1:x26; op2:x7; dest:x3; op1val:0xff7f0007c000fffd;  op2val:0xfff60003fffaffef
TEST_RR_OP(pmulh.h.bo, x3, x26, x7, 0x0000000000000000, 0xff7f0007c000fffd, 0xfff60003fffaffef, x1, 5*XLEN/8, x5)

inst_21:
// rs1==x27, rs2==x9, rd==x20, rs1_h0_val == -5, rs1_h2_val == -1, rs2_h1_val == -4097, rs2_h0_val == -9
// opcode: pmulh.h.bo ; op1:x27; op2:x9; dest:x20; op1val:0x1000fffffff6fffb;  op2val:0xffef0001effffff7
TEST_RR_OP(pmulh.h.bo, x20, x27, x9, 0x0000000000000000, 0x1000fffffff6fffb, 0xffef0001effffff7, x1, 6*XLEN/8, x5)

inst_22:
// rs1==x8, rs2==x27, rd==x12, rs1_h0_val == -9, rs1_h1_val == -3, rs2_h0_val == 64, rs2_h1_val == -1
// opcode: pmulh.h.bo ; op1:x8; op2:x27; dest:x12; op1val:0x5555fff9fffdfff7;  op2val:0xfff70200ffff0040
TEST_RR_OP(pmulh.h.bo, x12, x8, x27, 0x0000000000000000, 0x5555fff9fffdfff7, 0xfff70200ffff0040, x1, 7*XLEN/8, x5)

inst_23:
// rs1==x18, rs2==x13, rd==x21, rs1_h0_val == -17, rs2_h3_val == -513, rs2_h2_val == 32767, rs1_h3_val == 1
// opcode: pmulh.h.bo ; op1:x18; op2:x13; dest:x21; op1val:0x01fffd0005ffef;  op2val:0xfdff7fff0001fbff
TEST_RR_OP(pmulh.h.bo, x21, x18, x13, 0x0000000000000000, 0x01fffd0005ffef, 0xfdff7fff0001fbff, x1, 8*XLEN/8, x5)

inst_24:
// rs1==x22, rs2==x16, rd==x14, rs1_h0_val == -33, rs2_h3_val == 1, rs1_h2_val == -1025, rs1_h3_val == 64, rs1_h1_val == -257
// opcode: pmulh.h.bo ; op1:x22; op2:x16; dest:x14; op1val:0x40fbfffeffffdf;  op2val:0x010003fffefff8
TEST_RR_OP(pmulh.h.bo, x14, x22, x16, 0x0000000000000000, 0x40fbfffeffffdf, 0x010003fffefff8, x1, 9*XLEN/8, x5)

inst_25:
// rs1==x28, rs2==x6, rd==x25, rs1_h0_val == -65, rs2_h0_val == -5, rs1_h2_val == -4097, rs1_h1_val == -9, rs2_h3_val == -16385, rs1_h3_val == 16384
// opcode: pmulh.h.bo ; op1:x28; op2:x6; dest:x25; op1val:0x4000effffff7ffbf;  op2val:0xbfff0003fffffffb
TEST_RR_OP(pmulh.h.bo, x25, x28, x6, 0x0000000000000000, 0x4000effffff7ffbf, 0xbfff0003fffffffb, x1, 10*XLEN/8, x5)

inst_26:
// rs1==x19, rs2==x3, rd==x29, rs1_h0_val == -129, rs2_h1_val == -2049, rs1_h1_val == 4096, rs2_h0_val == 1024
// opcode: pmulh.h.bo ; op1:x19; op2:x3; dest:x29; op1val:0xfff9ffff1000ff7f;  op2val:0xfff70006f7ff0400
TEST_RR_OP(pmulh.h.bo, x29, x19, x3, 0x0000000000000000, 0xfff9ffff1000ff7f, 0xfff70006f7ff0400, x1, 11*XLEN/8, x2)

inst_27:
// rs1==x4, rs2==x14, rd==x5, rs1_h0_val == -257, rs2_h3_val == 8192, rs2_h1_val == 4096, rs1_h3_val == -1
// opcode: pmulh.h.bo ; op1:x4; op2:x14; dest:x5; op1val:0xffffaaaafff8feff;  op2val:0x2000ffff1000fffe
TEST_RR_OP(pmulh.h.bo, x5, x4, x14, 0x0000000000000000, 0xffffaaaafff8feff, 0x2000ffff1000fffe, x1, 12*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28:
// rs1==x21, rs2==x5, rd==x31, rs1_h0_val == -513, rs1_h3_val == 1024
// opcode: pmulh.h.bo ; op1:x21; op2:x5; dest:x31; op1val:0x400ffff0009fdff;  op2val:0xfff70007ff7f0006
TEST_RR_OP(pmulh.h.bo, x31, x21, x5, 0x0000000000000000, 0x400ffff0009fdff, 0xfff70007ff7f0006, x1, 0*XLEN/8, x2)

inst_29:
// rs1==x20, rs2==x10, rd==x23, rs1_h0_val == -1025, rs1_h3_val == 32767, rs2_h0_val == 16384, rs2_h1_val == -17, rs2_h2_val == 8
// opcode: pmulh.h.bo ; op1:x20; op2:x10; dest:x23; op1val:0x7ffffff7fff9fbff;  op2val:0x20000008ffef4000
TEST_RR_OP(pmulh.h.bo, x23, x20, x10, 0x0000000000000000, 0x7ffffff7fff9fbff, 0x20000008ffef4000, x1, 1*XLEN/8, x2)

inst_30:
// rs1==x31, rs2==x17, rd==x10, rs1_h0_val == -2049, rs1_h2_val == 0, rs2_h3_val == 4096, rs1_h1_val == 1
// opcode: pmulh.h.bo ; op1:x31; op2:x17; dest:x10; op1val:0xfff900000001f7ff;  op2val:0x10000006ffdffffa
TEST_RR_OP(pmulh.h.bo, x10, x31, x17, 0x0000000000000000, 0xfff900000001f7ff, 0x10000006ffdffffa, x1, 2*XLEN/8, x2)

inst_31:
// rs1==x14, rs2==x19, rd==x28, rs1_h0_val == -4097, rs2_h0_val == -3, rs2_h3_val == 1024, rs1_h2_val == 4, rs1_h1_val == 512, rs2_h2_val == -2049
// opcode: pmulh.h.bo ; op1:x14; op2:x19; dest:x28; op1val:0x40000040200efff;  op2val:0x400f7fffffefffd
TEST_RR_OP(pmulh.h.bo, x28, x14, x19, 0x0000000000000000, 0x40000040200efff, 0x400f7fffffefffd, x1, 3*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs1_h1_val == 32767, rs2_h0_val == -16385, rs1_h3_val == 8, rs2_h2_val == 2
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x083fff7fffdfff;  op2val:0x020002c000bfff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x083fff7fffdfff, 0x020002c000bfff, x1, 4*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs2_h0_val == 4096, rs1_h2_val == 2, rs2_h1_val == -513
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0900020003bfff;  op2val:0xffef0005fdff1000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x0900020003bfff, 0xffef0005fdff1000, x1, 5*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs2_h0_val == -33, rs2_h2_val == 32, rs1_h1_val == 0
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x40fffa00005555;  op2val:0x10000020fff8ffdf
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x40fffa00005555, 0x10000020fff8ffdf, x1, 6*XLEN/8, x2)

inst_35:
// rs2_h3_val == 4, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x02fffafffe0001;  op2val:0x04fffcc000c000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x02fffafffe0001, 0x04fffcc000c000, x1, 7*XLEN/8, x2)

inst_36:
// rs2_h3_val == 32, rs2_h2_val == 64, rs1_h0_val == rs2_h0_val, rs2_h0_val == 2, rs1_h3_val == -257
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000200050002;  op2val:0x200040fffa0002
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfeff000200050002, 0x200040fffa0002, x1, 8*XLEN/8, x2)

inst_37:
// rs2_h3_val == 64, rs1_h2_val == 16, rs2_h2_val == -2, rs1_h3_val == 256, rs1_h1_val == 21845
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x100001055551000;  op2val:0x40fffe00060008
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x100001055551000, 0x40fffe00060008, x1, 9*XLEN/8, x2)

inst_38:
// rs2_h3_val == 128, rs2_h2_val == 8192, rs1_h3_val == -2
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000000058000;  op2val:0x802000fffd0020
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffe000000058000, 0x802000fffd0020, x1, 10*XLEN/8, x2)

inst_39:
// rs2_h3_val == 256, rs2_h0_val == 0
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x55550003fff7fffc;  op2val:0x100fffd55550000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x55550003fff7fffc, 0x100fffd55550000, x1, 11*XLEN/8, x2)

inst_40:
// rs2_h3_val == 512, rs1_h3_val == 2048, rs2_h2_val == 4096, rs1_h2_val == -2, rs1_h1_val == -1
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800fffefffffffd;  op2val:0x200100000400001
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x800fffefffffffd, 0x200100000400001, x1, 12*XLEN/8, x2)

inst_41:
// rs2_h3_val == 2048, rs2_h0_val == -8193, rs1_h1_val == -1025, rs2_h2_val == -9
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x030010fbfffffb;  op2val:0x800fff70001dfff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x030010fbfffffb, 0x800fff70001dfff, x1, 13*XLEN/8, x2)

inst_42:
// rs2_h3_val == 16384, rs1_h2_val == -33, rs1_h1_val == -8193, rs2_h0_val == -2049
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffdfdffffbff;  op2val:0x400000010010f7ff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff9ffdfdffffbff, 0x400000010010f7ff, x1, 14*XLEN/8, x2)

inst_43:
// rs2_h3_val == -2, rs1_h2_val == -2049, rs2_h2_val == -4097
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7ff20000800;  op2val:0xfffeefffc000bfff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff9f7ff20000800, 0xfffeefffc000bfff, x1, 15*XLEN/8, x2)

inst_44:
// rs2_h3_val == -5, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fff3fff0003dfff;  op2val:0xfffbfffd0001fff7
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fff3fff0003dfff, 0xfffbfffd0001fff7, x1, 16*XLEN/8, x2)

inst_45:
// rs2_h3_val == -33, rs2_h0_val == -65
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000220000007;  op2val:0xffdffff80001ffbf
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xff7f000220000007, 0xffdffff80001ffbf, x1, 17*XLEN/8, x2)

inst_46:
// rs2_h3_val == -65, rs1_h2_val == -8193
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x05dfff00067fff;  op2val:0xffbf0004fffcfff6
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x05dfff00067fff, 0xffbf0004fffcfff6, x1, 18*XLEN/8, x2)

inst_47:
// rs2_h3_val == -129, rs1_h1_val == 2048, rs2_h0_val == 4
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff6dfff08000003;  op2val:0xff7f0200fffc0004
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff6dfff08000003, 0xff7f0200fffc0004, x1, 19*XLEN/8, x2)

inst_48:
// rs2_h3_val == -8193, rs2_h2_val == -32768, rs1_h1_val == rs2_h1_val
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff60010fff9fffe;  op2val:0xdfff8000fff90004
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff60010fff9fffe, 0xdfff8000fff90004, x1, 20*XLEN/8, x2)

inst_49:
// rs2_h3_val == 21845, rs1_h1_val == -65
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff95555ffbf0400;  op2val:0x5555fff800060008
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff95555ffbf0400, 0x5555fff800060008, x1, 21*XLEN/8, x2)

inst_50:
// rs2_h3_val == -21846, rs1_h2_val == rs2_h2_val, rs1_h1_val == -17
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x400007ffefffff;  op2val:0xaaaa000710000100
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x400007ffefffff, 0xaaaa000710000100, x1, 22*XLEN/8, x2)

inst_51:
// rs1_h0_val == -21846, rs1_h1_val == 4
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x06c0000004aaaa;  op2val:0x8000003f7ff0040
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x06c0000004aaaa, 0x8000003f7ff0040, x1, 23*XLEN/8, x2)

inst_52:
// rs1_h1_val == -32768, rs2_h2_val == 21845
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffa02008000f7ff;  op2val:0x200555540000006
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffa02008000f7ff, 0x200555540000006, x1, 24*XLEN/8, x2)

inst_53:
// rs1_h1_val == 2, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff70002ffff;  op2val:0x040400feff5555
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xc000fff70002ffff, 0x040400feff5555, x1, 25*XLEN/8, x2)

inst_54:
// rs1_h1_val == 8, rs1_h3_val == -65
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff800080007;  op2val:0xffdffffe00200007
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffbffff800080007, 0xffdffffe00200007, x1, 26*XLEN/8, x2)

inst_55:
// rs1_h1_val == 32, rs1_h2_val == -32768, rs1_h3_val == -2049
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff800000204000;  op2val:0x01fdff0006ffbf
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xf7ff800000204000, 0x01fdff0006ffbf, x1, 27*XLEN/8, x2)

inst_56:
// rs1_h1_val == 128, rs2_h2_val == 2048
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000555500800006;  op2val:0xffdf0800efff0080
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000555500800006, 0xffdf0800efff0080, x1, 28*XLEN/8, x2)

inst_57:
// rs1_h1_val == 16384, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x00000440000040;  op2val:0x40ffdffeff5555
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x00000440000040, 0x40ffdffeff5555, x1, 29*XLEN/8, x2)

inst_58:
// rs1_h3_val == -3, rs2_h2_val == -21846
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800ffbfffbf;  op2val:0x04aaaa10000040
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd0800ffbfffbf, 0x04aaaa10000040, x1, 30*XLEN/8, x2)

inst_59:
// rs1_h3_val == -9, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7effffffa0001;  op2val:0xffbf0004fffef7ff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff7effffffa0001, 0xffbf0004fffef7ff, x1, 31*XLEN/8, x2)

inst_60:
// rs1_h3_val == -17, rs2_h1_val == -1025, rs1_h2_val == -257
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffeffeff40000000;  op2val:0x4008000fbff0004
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffeffeff40000000, 0x4008000fbff0004, x1, 32*XLEN/8, x2)

inst_61:
// rs1_h3_val == -33, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000300057fff;  op2val:0x20004001000fffa
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffdf000300057fff, 0x20004001000fffa, x1, 33*XLEN/8, x2)

inst_62:
// rs1_h3_val == -513, rs2_h1_val == 1024, rs1_h2_val == -129
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f02001000;  op2val:0xfffaaaaa04000003
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfdffff7f02001000, 0xfffaaaaa04000003, x1, 34*XLEN/8, x2)

inst_63:
// rs1_h3_val == -1025, rs2_h2_val == 0, rs2_h1_val == -32768
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005fff9fffb;  op2val:0x4000000080000040
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbff0005fff9fffb, 0x4000000080000040, x1, 35*XLEN/8, x2)

inst_64:
// rs1_h3_val == -4097, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefff001000100001;  op2val:0xfbff7fffc0000005
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xefff001000100001, 0xfbff7fffc0000005, x1, 36*XLEN/8, x2)

inst_65:
// rs1_h3_val == -16385, rs1_h1_val == -4097
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002efff1000;  op2val:0x10004000051000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xbfff0002efff1000, 0x10004000051000, x1, 37*XLEN/8, x2)

inst_66:
// rs1_h3_val == -21846, rs1_h2_val == 32
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00200003efff;  op2val:0xffff7fff1000ffbf
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xaaaa00200003efff, 0xffff7fff1000ffbf, x1, 38*XLEN/8, x2)

inst_67:
// rs2_h0_val == -32768, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x05fff93fff0000;  op2val:0x8000002000108000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x05fff93fff0000, 0x8000002000108000, x1, 39*XLEN/8, x2)

inst_68:
// rs2_h0_val == -1, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x5555001000090100;  op2val:0xffbfffef7fffffff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x5555001000090100, 0xffbfffef7fffffff, x1, 40*XLEN/8, x2)

inst_69:
// rs2_h0_val == 32767, rs1_h2_val == -5
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffb2000ffef;  op2val:0xfff70020bfff7fff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffdfffb2000ffef, 0xfff70020bfff7fff, x1, 41*XLEN/8, x2)

inst_70:
// rs2_h0_val == 512, rs1_h1_val == -16385
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeffbfff0000;  op2val:0x070010c0000200
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xff7ffeffbfff0000, 0x070010c0000200, x1, 42*XLEN/8, x2)

inst_71:
// rs2_h0_val == 8192, rs2_h1_val == 0
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0040000002c000;  op2val:0x01ffdf00002000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x0040000002c000, 0x01ffdf00002000, x1, 43*XLEN/8, x2)

inst_72:
// rs2_h0_val == -257, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffaaaaac000;  op2val:0xffdf0001fffdfeff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff9fffaaaaac000, 0xffdf0001fffdfeff, x1, 44*XLEN/8, x2)

inst_73:
// rs2_h0_val == -4097, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffc0001fdff;  op2val:0x050009fff8efff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x2000fffc0001fdff, 0x050009fff8efff, x1, 45*XLEN/8, x2)

inst_74:
// rs1_h1_val == -5, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffceffffffb4000;  op2val:0xaaaa0010fff68000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffceffffffb4000, 0xaaaa0010fff68000, x1, 46*XLEN/8, x2)

inst_75:
// rs2_h1_val == 2, rs1_h2_val == -16385
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffdfbfff00090009;  op2val:0x03fffb0002f7ff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffdfbfff00090009, 0x03fffb0002f7ff, x1, 47*XLEN/8, x2)

inst_76:
// rs2_h1_val == 4, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffbfff6fff7;  op2val:0xfff9fffd0004ffef
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbfffffbfff6fff7, 0xfff9fffd0004ffef, x1, 48*XLEN/8, x2)

inst_77:
// rs1_h1_val == -513, rs2_h1_val == -8193
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x072000fdff0000;  op2val:0x400fbffdfff0008
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x072000fdff0000, 0x400fbffdfff0008, x1, 49*XLEN/8, x2)

inst_78:
// rs2_h1_val == 256, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff6bfff0010;  op2val:0xaaaa004001000080
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x5555fff6bfff0010, 0xaaaa004001000080, x1, 50*XLEN/8, x2)

inst_79:
// rs2_h1_val == 2048, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10000009aaaafeff;  op2val:0xf7fffffb0800ff7f
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x10000009aaaafeff, 0xf7fffffb0800ff7f, x1, 51*XLEN/8, x2)

inst_80:
// rs2_h1_val == 8192, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00000008feff;  op2val:0xfffd3fff20000002
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffc00000008feff, 0xfffd3fff20000002, x1, 52*XLEN/8, x2)

inst_81:
// rs2_h1_val == -9, rs1_h1_val == -129, rs1_h3_val == 128
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800009ff7ffffb;  op2val:0xbfff0007fff7fff7
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x800009ff7ffffb, 0xbfff0007fff7fff7, x1, 53*XLEN/8, x2)

inst_82:
// rs1_h2_val == 32767, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10007fff00000100;  op2val:0xfffa0003efff1000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x10007fff00000100, 0xfffa0003efff1000, x1, 54*XLEN/8, x2)

inst_83:
// rs1_h2_val == 8, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800008fffa0040;  op2val:0xfbff000300040080
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x800008fffa0040, 0xfbff000300040080, x1, 55*XLEN/8, x2)

inst_84:
// rs1_h2_val == 128, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080f7fffeff;  op2val:0x200200000031000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffbf0080f7fffeff, 0x200200000031000, x1, 56*XLEN/8, x2)

inst_85:
// rs1_h2_val == 256, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7010010000080;  op2val:0xc00000000002c000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff7010010000080, 0xc00000000002c000, x1, 57*XLEN/8, x2)

inst_86:
// rs1_h2_val == 1024, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbff04000080fff8;  op2val:0x800000203fff0020
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbff04000080fff8, 0x800000203fff0020, x1, 58*XLEN/8, x2)

inst_87:
// rs2_h1_val == -21846, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x05fff7fffadfff;  op2val:0x10fffaaaaa0080
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x05fff7fffadfff, 0x10fffaaaaa0080, x1, 59*XLEN/8, x2)

inst_88:
// rs1_h2_val == -17, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffeffffcffbf;  op2val:0xff7ffffb8000efff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xffdfffeffffcffbf, 0xff7ffffb8000efff, x1, 60*XLEN/8, x2)

inst_89:
// rs1_h3_val == 512, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x20000027ffffbff;  op2val:0x3fffffef00060100
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x20000027ffffbff, 0x3fffffef00060100, x1, 61*XLEN/8, x2)

inst_90:
// rs2_h2_val == 128, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fffffefc000;  op2val:0x04008000090005
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff77fffffefc000, 0x04008000090005, x1, 62*XLEN/8, x2)

inst_91:
// rs1_h2_val == -513, rs1_h3_val == 4
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x04fdff1000efff;  op2val:0x40ffef00100040
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x04fdff1000efff, 0x40ffef00100040, x1, 63*XLEN/8, x2)

inst_92:
// rs2_h2_val == 256, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x20fffdfff8fffe;  op2val:0x07010004000400
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x20fffdfff8fffe, 0x07010004000400, x1, 64*XLEN/8, x2)

inst_93:
// rs2_h2_val == 16384, rs1_h1_val == -33
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x072000ffdf2000;  op2val:0xefff4000fffafff9
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x072000ffdf2000, 0xefff4000fffafff9, x1, 65*XLEN/8, x2)

inst_94:
// rs2_h2_val == -65, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0020effffff6;  op2val:0xffdfffbfff7ffbff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfdff0020effffff6, 0xffdfffbfff7ffbff, x1, 66*XLEN/8, x2)

inst_95:
// rs2_h2_val == -129, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff6c000ffdffffd;  op2val:0x08ff7fbffffffa
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff6c000ffdffffd, 0x08ff7fbffffffa, x1, 67*XLEN/8, x2)

inst_96:
// rs2_h2_val == -257, rs1_h3_val == 16
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000001000ffbf;  op2val:0x05feff0001fffc
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000001000ffbf, 0x05feff0001fffc, x1, 68*XLEN/8, x2)

inst_97:
// rs2_h2_val == -8193, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800004000009aaaa;  op2val:0x05dffffffaefff
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x800004000009aaaa, 0x05dffffffaefff, x1, 69*XLEN/8, x2)

inst_98:
// rs2_h2_val == -16385, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd0200ffff;  op2val:0x20bffffffd2000
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffbfffd0200ffff, 0x20bffffffd2000, x1, 70*XLEN/8, x2)

inst_99:
// rs2_h1_val == 8, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000097fff0800;  op2val:0x10fbff00080002
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000097fff0800, 0x10fbff00080002, x1, 71*XLEN/8, x2)

inst_100:
// rs2_h3_val == 0, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffc000fff60002;  op2val:0x000010fffbffbf
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbffc000fff60002, 0x000010fffbffbf, x1, 72*XLEN/8, x2)

inst_101:
// rs2_h1_val == 128, 
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000efffaaaafeff;  op2val:0xff7ffdff00800080
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000efffaaaafeff, 0xff7ffdff00800080, x1, 73*XLEN/8, x2)

inst_102:
// rs1_h0_val == 0, rs1_h3_val == -5, rs2_h1_val == 512, rs2_h0_val == -2, rs2_h2_val == -17, rs1_h1_val == 256, rs2_h3_val == -9, rs1_h2_val == 2048
// opcode: pmulh.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffb080001000000;  op2val:0xfff7ffef0200fffe
TEST_RR_OP(pmulh.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffb080001000000, 0xfff7ffef0200fffe, x1, 74*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 75*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
