
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pasub.h instruction of the RISC-V RV64PZicsr extension for the pasub.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pasub.h)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x9, rd==x21, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -33, rs1_h0_val != rs2_h0_val, rs2_h1_val == -2, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -1, rs2_h2_val == 16384, rs1_h1_val != rs2_h1_val, rs2_h0_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -129, rs1_h3_val != rs2_h3_val, rs1_h1_val == -129
// opcode: pasub.h ; op1:x6; op2:x9; dest:x21; op1val:0xffdfffffff7f8000;  op2val:0xff7f4000fffef7ff
TEST_RR_OP(pasub.h, x21, x6, x9, 0x0000000000000000, 0xffdfffffff7f8000, 0xff7f4000fffef7ff, x3, 0*XLEN/8, x11)

inst_1:
// rs2 == rd != rs1, rs1==x0, rs2==x2, rd==x2, rs1_h0_val == -1, rs2_h2_val == 16, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -513, rs2_h3_val == -4097, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == 21845, rs1_h3_val == 1024, rs1_h1_val == -17
// opcode: pasub.h ; op1:x0; op2:x2; dest:x2; op1val:0x400ffffffefffff;  op2val:0xefff00105555fdff
TEST_RR_OP(pasub.h, x2, x0, x2, 0x0000000000000000, 0x400ffffffefffff, 0xefff00105555fdff, x3, 1*XLEN/8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x15, rs1_h0_val == 0, rs2_h3_val == 8, rs1_h1_val == 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -2049, rs2_h2_val == -129, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 16
// opcode: pasub.h ; op1:x30; op2:x30; dest:x15; op1val:0x3ffffffa00000000;  op2val:0x08ff7ff7ff0010
TEST_RR_OP(pasub.h, x15, x30, x30, 0x0000000000000000, 0x3ffffffa00000000, 0x08ff7ff7ff0010, x3, 2*XLEN/8, x11)

inst_3:
// rs1 == rd != rs2, rs1==x16, rs2==x26, rd==x16, rs1_h0_val == 1, rs1_h1_val == -1025, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == -3, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -1, rs1_h3_val == 8, rs1_h2_val == 256, rs2_h1_val == -16385
// opcode: pasub.h ; op1:x16; op2:x26; dest:x16; op1val:0x080100fbff0001;  op2val:0xfffafffdbfffffff
TEST_RR_OP(pasub.h, x16, x16, x26, 0x0000000000000000, 0x080100fbff0001, 0xfffafffdbfffffff, x3, 3*XLEN/8, x11)

inst_4:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 2, rs1_h3_val == -16385, rs2_h0_val == 32767, rs2_h2_val == 1
// opcode: pasub.h ; op1:x4; op2:x4; dest:x4; op1val:0xbffffffa00027fff;  op2val:0xfff9000155557fff
TEST_RR_OP(pasub.h, x4, x4, x4, 0x0000000000000000, 0xbffffffa00027fff, 0xfff9000155557fff, x3, 4*XLEN/8, x11)

inst_5:
// rs1==x9, rs2==x29, rd==x0, rs1_h0_val == 2, rs2_h1_val == 1024, rs2_h0_val == -17, rs1_h1_val == 1, rs2_h2_val == -17, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024
// opcode: pasub.h ; op1:x9; op2:x29; dest:x0; op1val:0xfff6040000010002;  op2val:0x05ffef0400ffef
TEST_RR_OP(pasub.h, x0, x9, x29, 0x0000000000000000, 0xfff6040000010002, 0x05ffef0400ffef, x3, 5*XLEN/8, x11)

inst_6:
// rs1==x25, rs2==x31, rd==x18, rs1_h0_val == 4, rs2_h0_val == -5, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -32768, rs2_h3_val == 512, rs2_h1_val == -1
// opcode: pasub.h ; op1:x25; op2:x31; dest:x18; op1val:0xc000800000050004;  op2val:0x200fff8fffffffb
TEST_RR_OP(pasub.h, x18, x25, x31, 0x0000000000000000, 0xc000800000050004, 0x200fff8fffffffb, x3, 6*XLEN/8, x11)

inst_7:
// rs1==x2, rs2==x22, rd==x8, rs1_h0_val == 8, rs2_h2_val == 2048, rs2_h1_val == -33, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -32768, rs2_h3_val == -513
// opcode: pasub.h ; op1:x2; op2:x22; dest:x8; op1val:0xfff6040000010008;  op2val:0xfdff0800ffdf8000
TEST_RR_OP(pasub.h, x8, x2, x22, 0x0000000000000000, 0xfff6040000010008, 0xfdff0800ffdf8000, x3, 7*XLEN/8, x11)

inst_8:
// rs1==x28, rs2==x18, rd==x7, rs1_h0_val == 16, rs1_h2_val == 8192, rs2_h0_val == 128, rs1_h3_val == 8192, rs1_h1_val == -2
// opcode: pasub.h ; op1:x28; op2:x18; dest:x7; op1val:0x20002000fffe0010;  op2val:0x3fff000100090080
TEST_RR_OP(pasub.h, x7, x28, x18, 0x0000000000000000, 0x20002000fffe0010, 0x3fff000100090080, x3, 8*XLEN/8, x11)

inst_9:
// rs1==x10, rs2==x5, rd==x22, rs1_h0_val == 32, rs2_h2_val == 64, rs2_h3_val == -17, rs1_h2_val == 512
// opcode: pasub.h ; op1:x10; op2:x5; dest:x22; op1val:0x060200c0000020;  op2val:0xffef004000090080
TEST_RR_OP(pasub.h, x22, x10, x5, 0x0000000000000000, 0x060200c0000020, 0xffef004000090080, x3, 9*XLEN/8, x11)

inst_10:
// rs1==x27, rs2==x15, rd==x28, rs1_h0_val == 64, rs2_h2_val == -65, rs1_h3_val == 21845
// opcode: pasub.h ; op1:x27; op2:x15; dest:x28; op1val:0x555580003fff0040;  op2val:0xff7fffbffff6fffb
TEST_RR_OP(pasub.h, x28, x27, x15, 0x0000000000000000, 0x555580003fff0040, 0xff7fffbffff6fffb, x3, 10*XLEN/8, x11)

inst_11:
// rs1==x18, rs2==x28, rd==x6, rs1_h0_val == 128, rs2_h0_val == 4096, rs1_h3_val == -257, rs1_h2_val == 21845, rs1_h1_val == rs2_h1_val, rs2_h3_val == 21845
// opcode: pasub.h ; op1:x18; op2:x28; dest:x6; op1val:0xfeff555500060080;  op2val:0x5555000100061000
TEST_RR_OP(pasub.h, x6, x18, x28, 0x0000000000000000, 0xfeff555500060080, 0x5555000100061000, x3, 11*XLEN/8, x11)

inst_12:
// rs1==x13, rs2==x1, rd==x24, rs1_h0_val == 256, rs2_h1_val == 256, rs1_h1_val == 512, rs1_h3_val == 16, rs2_h2_val == -4097
// opcode: pasub.h ; op1:x13; op2:x1; dest:x24; op1val:0x10000302000100;  op2val:0x03efff0100fffa
TEST_RR_OP(pasub.h, x24, x13, x1, 0x0000000000000000, 0x10000302000100, 0x03efff0100fffa, x3, 12*XLEN/8, x11)

inst_13:
// rs1==x12, rs2==x14, rd==x10, rs1_h0_val == 512, rs1_h3_val == 2, rs2_h3_val == 8192, rs1_h1_val == 8192
// opcode: pasub.h ; op1:x12; op2:x14; dest:x10; op1val:0x02000520000200;  op2val:0x20000001fff93fff
TEST_RR_OP(pasub.h, x10, x12, x14, 0x0000000000000000, 0x02000520000200, 0x20000001fff93fff, x3, 13*XLEN/8, x11)

inst_14:
// rs1==x8, rs2==x20, rd==x29, rs1_h0_val == 1024, rs1_h3_val == -3, rs1_h1_val == -2049, rs2_h1_val == -5, rs2_h0_val == 21845, rs1_h2_val == 16384, rs2_h2_val == 2
// opcode: pasub.h ; op1:x8; op2:x20; dest:x29; op1val:0xfffd4000f7ff0400;  op2val:0xc0000002fffb5555
TEST_RR_OP(pasub.h, x29, x8, x20, 0x0000000000000000, 0xfffd4000f7ff0400, 0xc0000002fffb5555, x3, 14*XLEN/8, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x26, rs2==x23, rd==x27, rs1_h0_val == 2048, rs1_h1_val == -513, rs1_h3_val == -17, rs2_h0_val == -9, rs2_h3_val == 4096, rs2_h1_val == 32767
// opcode: pasub.h ; op1:x26; op2:x23; dest:x27; op1val:0xffef8000fdff0800;  op2val:0x1000fffd7ffffff7
TEST_RR_OP(pasub.h, x27, x26, x23, 0x0000000000000000, 0xffef8000fdff0800, 0x1000fffd7ffffff7, x2, 0*XLEN/8, x4)

inst_16:
// rs1==x24, rs2==x3, rd==x30, rs1_h0_val == 4096, rs2_h3_val == 256, rs1_h2_val == 4, rs2_h2_val == -257, rs2_h1_val == 4, rs1_h3_val == 16384
// opcode: pasub.h ; op1:x24; op2:x3; dest:x30; op1val:0x4000000400091000;  op2val:0x100feff00040005
TEST_RR_OP(pasub.h, x30, x24, x3, 0x0000000000000000, 0x4000000400091000, 0x100feff00040005, x2, 1*XLEN/8, x4)

inst_17:
// rs1==x1, rs2==x11, rd==x12, rs1_h0_val == 8192, rs1_h2_val == -16385, rs2_h3_val == -21846
// opcode: pasub.h ; op1:x1; op2:x11; dest:x12; op1val:0xfff6bffffbff2000;  op2val:0xaaaa00010400fff9
TEST_RR_OP(pasub.h, x12, x1, x11, 0x0000000000000000, 0xfff6bffffbff2000, 0xaaaa00010400fff9, x2, 2*XLEN/8, x4)

inst_18:
// rs1==x14, rs2==x0, rd==x9, rs1_h0_val == 16384, rs2_h3_val == -16385, rs2_h0_val == 1024
// opcode: pasub.h ; op1:x14; op2:x0; dest:x9; op1val:0x05fff800054000;  op2val:0xbfff400000060400
TEST_RR_OP(pasub.h, x9, x14, x0, 0x0000000000000000, 0x05fff800054000, 0xbfff400000060400, x2, 3*XLEN/8, x4)

inst_19:
// rs1==x20, rs2==x27, rd==x3, rs1_h0_val == -2, rs1_h3_val == 64, rs1_h2_val == -4097
// opcode: pasub.h ; op1:x20; op2:x27; dest:x3; op1val:0x40efff0005fffe;  op2val:0x05000901008000
TEST_RR_OP(pasub.h, x3, x20, x27, 0x0000000000000000, 0x40efff0005fffe, 0x05000901008000, x2, 4*XLEN/8, x4)

inst_20:
// rs1==x23, rs2==x6, rd==x19, rs1_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -21846, rs1_h1_val == -1, rs2_h1_val == -257
// opcode: pasub.h ; op1:x23; op2:x6; dest:x19; op1val:0x08aaaafffffffd;  op2val:0x070001feff0010
TEST_RR_OP(pasub.h, x19, x23, x6, 0x0000000000000000, 0x08aaaafffffffd, 0x070001feff0010, x2, 5*XLEN/8, x4)

inst_21:
// rs1==x11, rs2==x25, rd==x5, rs1_h0_val == -5, rs2_h2_val == -8193, rs2_h3_val == -8193
// opcode: pasub.h ; op1:x11; op2:x25; dest:x5; op1val:0xfff600072000fffb;  op2val:0xdfffdfff7ffff7ff
TEST_RR_OP(pasub.h, x5, x11, x25, 0x0000000000000000, 0xfff600072000fffb, 0xdfffdfff7ffff7ff, x2, 6*XLEN/8, x4)

inst_22:
// rs1==x19, rs2==x17, rd==x14, rs1_h0_val == -9, rs1_h1_val == -5, rs2_h0_val == -16385
// opcode: pasub.h ; op1:x19; op2:x17; dest:x14; op1val:0x09bffffffbfff7;  op2val:0x100000060003bfff
TEST_RR_OP(pasub.h, x14, x19, x17, 0x0000000000000000, 0x09bffffffbfff7, 0x100000060003bfff, x2, 7*XLEN/8, x4)

inst_23:
// rs1==x22, rs2==x12, rd==x31, rs1_h0_val == -17, rs1_h2_val == -65, rs1_h3_val == -32768
// opcode: pasub.h ; op1:x22; op2:x12; dest:x31; op1val:0x8000ffbfffefffef;  op2val:0xdfff0005fffa0005
TEST_RR_OP(pasub.h, x31, x22, x12, 0x0000000000000000, 0x8000ffbfffefffef, 0xdfff0005fffa0005, x2, 8*XLEN/8, x4)

inst_24:
// rs1==x17, rs2==x21, rd==x26, rs1_h0_val == -33, rs2_h1_val == 128, rs1_h1_val == 16, rs2_h0_val == 4, rs1_h2_val == -17
// opcode: pasub.h ; op1:x17; op2:x21; dest:x26; op1val:0x400ffef0010ffdf;  op2val:0xfffcfff900800004
TEST_RR_OP(pasub.h, x26, x17, x21, 0x0000000000000000, 0x400ffef0010ffdf, 0xfffcfff900800004, x2, 9*XLEN/8, x4)

inst_25:
// rs1==x7, rs2==x16, rd==x17, rs1_h0_val == -65, rs2_h0_val == -8193, rs1_h3_val == 512, rs1_h1_val == -16385, rs2_h1_val == 0
// opcode: pasub.h ; op1:x7; op2:x16; dest:x17; op1val:0x200fff9bfffffbf;  op2val:0xc000fffa0000dfff
TEST_RR_OP(pasub.h, x17, x7, x16, 0x0000000000000000, 0x200fff9bfffffbf, 0xc000fffa0000dfff, x2, 10*XLEN/8, x4)

inst_26:
// rs1==x31, rs2==x19, rd==x23, rs1_h0_val == -129, rs1_h2_val == -129, rs1_h1_val == -32768, rs2_h0_val == -65, rs1_h3_val == 256, rs2_h2_val == 32767
// opcode: pasub.h ; op1:x31; op2:x19; dest:x23; op1val:0x100ff7f8000ff7f;  op2val:0xfdff7ffffffeffbf
TEST_RR_OP(pasub.h, x23, x31, x19, 0x0000000000000000, 0x100ff7f8000ff7f, 0xfdff7ffffffeffbf, x2, 11*XLEN/8, x4)

inst_27:
// rs1==x21, rs2==x10, rd==x20, rs1_h0_val == -257, rs1_h1_val == -8193, rs1_h2_val == -1025, rs1_h3_val == -65, rs2_h1_val == -17, rs2_h2_val == 8
// opcode: pasub.h ; op1:x21; op2:x10; dest:x20; op1val:0xffbffbffdffffeff;  op2val:0xfff60008ffeffffc
TEST_RR_OP(pasub.h, x20, x21, x10, 0x0000000000000000, 0xffbffbffdffffeff, 0xfff60008ffeffffc, x2, 12*XLEN/8, x4)

inst_28:
// rs1==x5, rs2==x13, rd==x25, rs1_h0_val == -513, rs2_h0_val == 8192, rs2_h1_val == -65
// opcode: pasub.h ; op1:x5; op2:x13; dest:x25; op1val:0x0800090001fdff;  op2val:0x2000007ffbf2000
TEST_RR_OP(pasub.h, x25, x5, x13, 0x0000000000000000, 0x0800090001fdff, 0x2000007ffbf2000, x2, 13*XLEN/8, x4)

inst_29:
// rs1==x29, rs2==x8, rd==x11, rs1_h0_val == -1025, rs1_h2_val == -513, rs2_h1_val == 16384, rs2_h2_val == -1025, rs2_h0_val == 32, rs1_h3_val == -2
// opcode: pasub.h ; op1:x29; op2:x8; dest:x11; op1val:0xfffefdfffff9fbff;  op2val:0xfffcfbff40000020
TEST_RR_OP(pasub.h, x11, x29, x8, 0x0000000000000000, 0xfffefdfffff9fbff, 0xfffcfbff40000020, x2, 14*XLEN/8, x4)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_30:
// rs1==x15, rs2==x24, rd==x13, rs1_h0_val == -2049, rs2_h3_val == 2, rs2_h1_val == 4096
// opcode: pasub.h ; op1:x15; op2:x24; dest:x13; op1val:0x0500050006f7ff;  op2val:0x02000310000004
TEST_RR_OP(pasub.h, x13, x15, x24, 0x0000000000000000, 0x0500050006f7ff, 0x02000310000004, x2, 0*XLEN/8, x4)

inst_31:
// rs1==x3, rs2==x7, rd==x1, rs1_h0_val == -4097, rs1_h2_val == 2
// opcode: pasub.h ; op1:x3; op2:x7; dest:x1; op1val:0x0200020005efff;  op2val:0x0600100003c000
TEST_RR_OP(pasub.h, x1, x3, x7, 0x0000000000000000, 0x0200020005efff, 0x0600100003c000, x2, 1*XLEN/8, x4)

inst_32:
// rs1_h0_val == -8193, rs2_h1_val == -4097, rs2_h2_val == -21846
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff6fffedfff;  op2val:0x100aaaaeffffffa
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xbffffff6fffedfff, 0x100aaaaeffffffa, x2, 2*XLEN/8, x4)

inst_33:
// rs1_h0_val == -16385, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdfffbffbfff;  op2val:0x1000ff7ffffe0004
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x4000fdfffbffbfff, 0x1000ff7ffffe0004, x2, 3*XLEN/8, x4)

inst_34:
// rs1_h0_val == 21845, rs1_h2_val == 0, rs2_h2_val == -9, rs2_h3_val == 16384, rs2_h0_val == 2, rs1_h3_val == 128, rs1_h1_val == -9
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x800000fff75555;  op2val:0x4000fff700090002
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x800000fff75555, 0x4000fff700090002, x2, 4*XLEN/8, x4)

inst_35:
// rs1_h0_val == -21846, rs1_h1_val == 32767, rs1_h3_val == 32767
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff97fffaaaa;  op2val:0xbfff0003c000fffb
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x7ffffff97fffaaaa, 0xbfff0003c000fffb, x2, 5*XLEN/8, x4)

inst_36:
// rs2_h3_val == 32767, rs2_h1_val == 8, rs2_h0_val == 256, rs1_h2_val == 8
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x08000800053fff;  op2val:0x7fff000700080100
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x08000800053fff, 0x7fff000700080100, x2, 6*XLEN/8, x4)

inst_37:
// rs2_h3_val == 4, rs2_h2_val == -1
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffcff7f0200;  op2val:0x04ffff00080002
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8000fffcff7f0200, 0x04ffff00080002, x2, 7*XLEN/8, x4)

inst_38:
// rs2_h3_val == 16, rs1_h2_val == -33, rs1_h3_val == -1, rs1_h1_val == 21845
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf55557fff;  op2val:0x10000700800003
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xffffffdf55557fff, 0x10000700800003, x2, 8*XLEN/8, x4)

inst_39:
// rs2_h3_val == 32, rs1_h1_val == 1024
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8040000400fffe;  op2val:0x203fff00055555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8040000400fffe, 0x203fff00055555, x2, 9*XLEN/8, x4)

inst_40:
// rs2_h3_val == 64, rs2_h1_val == -3, rs1_h1_val == 128
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe3fff0080fff6;  op2val:0x40fefffffdbfff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffe3fff0080fff6, 0x40fefffffdbfff, x2, 10*XLEN/8, x4)

inst_41:
// rs2_h3_val == 128, rs2_h1_val == 512, rs1_h1_val == -4097, rs2_h0_val == -4097
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffaefff0200;  op2val:0x8000010200efff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffefffaefff0200, 0x8000010200efff, x2, 11*XLEN/8, x4)

inst_42:
// rs2_h3_val == 1024, rs2_h1_val == -8193, rs2_h2_val == -5, rs1_h3_val == -129
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffdfffffc0010;  op2val:0x400fffbdfff0007
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xff7ffdfffffc0010, 0x400fffbdfff0007, x2, 12*XLEN/8, x4)

inst_43:
// rs2_h3_val == 2048, rs2_h2_val == -513
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf3fff0010;  op2val:0x800fdff00070002
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8000ffdf3fff0010, 0x800fdff00070002, x2, 13*XLEN/8, x4)

inst_44:
// rs2_h3_val == -2, rs1_h2_val == 1
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x0800017fff0001;  op2val:0xfffefdffffdffdff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x0800017fff0001, 0xfffefdffffdffdff, x2, 14*XLEN/8, x4)

inst_45:
// rs2_h3_val == -3, rs1_h2_val == -2, rs1_h1_val == 8, rs2_h1_val == 8192
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffe00080100;  op2val:0xfffd000120000080
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffafffe00080100, 0xfffd000120000080, x2, 15*XLEN/8, x4)

inst_46:
// rs2_h3_val == -5, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00060003ffff;  op2val:0xfffbfffdf7ff7fff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xffbf00060003ffff, 0xfffbfffdf7ff7fff, x2, 16*XLEN/8, x4)

inst_47:
// rs2_h3_val == -9, rs1_h1_val == -3, rs2_h2_val == 128
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x55554000fffd0005;  op2val:0xfff700800006bfff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x55554000fffd0005, 0xfff700800006bfff, x2, 17*XLEN/8, x4)

inst_48:
// rs2_h3_val == -33, rs2_h2_val == -32768, rs2_h0_val == 0
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffdf00090010;  op2val:0xffdf8000fffe0000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x3fffffdf00090010, 0xffdf8000fffe0000, x2, 18*XLEN/8, x4)

inst_49:
// rs2_h3_val == -65, rs1_h1_val == 2048
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00000800c000;  op2val:0xffbf0800fffb5555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffe00000800c000, 0xffbf0800fffb5555, x2, 19*XLEN/8, x4)

inst_50:
// rs2_h3_val == -257, rs1_h3_val == 4096
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000fbfffff8ffff;  op2val:0xfeff0005fffd0009
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x1000fbfffff8ffff, 0xfeff0005fffd0009, x2, 20*XLEN/8, x4)

inst_51:
// rs2_h3_val == -1025, rs1_h3_val == 2048, rs2_h2_val == 1024
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000000dfff0004;  op2val:0xfbff04000080dfff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8000000dfff0004, 0xfbff04000080dfff, x2, 21*XLEN/8, x4)

inst_52:
// rs2_h3_val == -2049, rs2_h2_val == 4
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff2000fffc0009;  op2val:0xf7ff0004dfff0020
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x3fff2000fffc0009, 0xf7ff0004dfff0020, x2, 22*XLEN/8, x4)

inst_53:
// rs1_h1_val == 4, rs2_h2_val == 21845
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000300040800;  op2val:0xefff555510000002
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfeff000300040800, 0xefff555510000002, x2, 23*XLEN/8, x4)

inst_54:
// rs1_h1_val == 32, rs2_h2_val == -16385
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x02020000201000;  op2val:0xf7ffbffffff62000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x02020000201000, 0xf7ffbffffff62000, x2, 24*XLEN/8, x4)

inst_55:
// rs1_h1_val == 64, rs2_h1_val == -21846
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x100000500400200;  op2val:0x55550006aaaafffc
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x100000500400200, 0x55550006aaaafffc, x2, 25*XLEN/8, x4)

inst_56:
// rs1_h1_val == 256, rs2_h2_val == 4096
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffff01000004;  op2val:0x1010007fff0009
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff8ffff01000004, 0x1010007fff0009, x2, 26*XLEN/8, x4)

inst_57:
// rs1_h2_val == rs2_h2_val, rs1_h2_val == 32, rs1_h3_val == -4097, rs2_h2_val == 32
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020fffcfdff;  op2val:0x060020dfffffef
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xefff0020fffcfdff, 0x060020dfffffef, x2, 27*XLEN/8, x4)

inst_58:
// rs1_h1_val == 4096, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff810000200;  op2val:0xfffddfff20003fff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff9fff810000200, 0xfffddfff20003fff, x2, 28*XLEN/8, x4)

inst_59:
// rs1_h1_val == 16384, rs2_h1_val == 32, rs1_h3_val == 1
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x0100204000c000;  op2val:0x40007fff00205555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x0100204000c000, 0x40007fff00205555, x2, 29*XLEN/8, x4)

inst_60:
// rs1_h3_val == -5, rs2_h2_val == 0
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb80000400c000;  op2val:0xfffd000055550006
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffb80000400c000, 0xfffd000055550006, x2, 30*XLEN/8, x4)

inst_61:
// rs1_h3_val == -9, rs2_h0_val == 8
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70200bfff0000;  op2val:0x05dfffdfff0008
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff70200bfff0000, 0x05dfffdfff0008, x2, 31*XLEN/8, x4)

inst_62:
// rs1_h3_val == -513, rs2_h1_val == 2048
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0005c000ff7f;  op2val:0xfffbfeff08002000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfdff0005c000ff7f, 0xfffbfeff08002000, x2, 32*XLEN/8, x4)

inst_63:
// rs1_h3_val == -1025, rs1_h2_val == -5
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffbfffdfffc;  op2val:0xfff7004020000020
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfbfffffbfffdfffc, 0xfff7004020000020, x2, 33*XLEN/8, x4)

inst_64:
// rs1_h3_val == -2049, rs1_h1_val == -257
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0002feff0004;  op2val:0xefff5555fff6fffb
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0002feff0004, 0xefff5555fff6fffb, x2, 34*XLEN/8, x4)

inst_65:
// rs1_h3_val == -8193, rs2_h0_val == 16384
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa00010009;  op2val:0xffbf040000204000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xdffffffa00010009, 0xffbf040000204000, x2, 35*XLEN/8, x4)

inst_66:
// rs1_h3_val == -21846, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555fffdc000;  op2val:0x10400000045555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xaaaa5555fffdc000, 0x10400000045555, x2, 36*XLEN/8, x4)

inst_67:
// rs2_h0_val == 1, rs2_h2_val == -33
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fbffc000ffbf;  op2val:0xfffeffdffeff0001
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x09fbffc000ffbf, 0xfffeffdffeff0001, x2, 37*XLEN/8, x4)

inst_68:
// rs2_h0_val == 64, rs2_h2_val == -2, rs2_h1_val == 64
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffe00070040;  op2val:0x03fffe00400040
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff6fffe00070040, 0x03fffe00400040, x2, 38*XLEN/8, x4)

inst_69:
// rs2_h0_val == 512, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000050009ffbf;  op2val:0x2000000402000200
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8000050009ffbf, 0x2000000402000200, x2, 39*XLEN/8, x4)

inst_70:
// rs2_h0_val == 2048, rs2_h1_val == -1025
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000bffffffdff7f;  op2val:0x08fffbfbff0800
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x8000bffffffdff7f, 0x08fffbfbff0800, x2, 40*XLEN/8, x4)

inst_71:
// rs2_h0_val == -2, rs1_h2_val == 32767
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x4007ffffffcffbf;  op2val:0xff7fc000fefffffe
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x4007ffffffcffbf, 0xff7fc000fefffffe, x2, 41*XLEN/8, x4)

inst_72:
// rs2_h0_val == -3, rs2_h3_val == 0
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff00040009ffdf;  op2val:0x00aaaaffdffffd
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xefff00040009ffdf, 0x00aaaaffdffffd, x2, 42*XLEN/8, x4)

inst_73:
// rs2_h0_val == -33, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff00040006ffff;  op2val:0xffdffffbfbffffdf
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xffff00040006ffff, 0xffdffffbfbffffdf, x2, 43*XLEN/8, x4)

inst_74:
// rs2_h0_val == -129, rs2_h2_val == 512
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbfff00002000;  op2val:0x3fff02000009ff7f
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffdbfff00002000, 0x3fff02000009ff7f, x2, 44*XLEN/8, x4)

inst_75:
// rs2_h0_val == -257, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff3fff00077fff;  op2val:0x07fffb2000feff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfdff3fff00077fff, 0x07fffb2000feff, x2, 45*XLEN/8, x4)

inst_76:
// rs2_h0_val == -1025, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00062000feff;  op2val:0xfbffffbf4000fbff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xbfff00062000feff, 0xfbffffbf4000fbff, x2, 46*XLEN/8, x4)

inst_77:
// rs1_h1_val == -21846, rs1_h2_val == -3
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffdaaaa0800;  op2val:0x800000500080004
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff8fffdaaaa0800, 0x800000500080004, x2, 47*XLEN/8, x4)

inst_78:
// rs2_h1_val == -9, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffbfff60002;  op2val:0xfff70006fff7feff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x3ffffffbfff60002, 0xfff70006fff7feff, x2, 48*XLEN/8, x4)

inst_79:
// rs2_h1_val == -129, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x012000fff6fffb;  op2val:0x805555ff7f8000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x012000fff6fffb, 0x805555ff7f8000, x2, 49*XLEN/8, x4)

inst_80:
// rs1_h2_val == 16, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00100001fffe;  op2val:0xfefffff600075555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x3fff00100001fffe, 0xfefffff600075555, x2, 50*XLEN/8, x4)

inst_81:
// rs2_h1_val == -513, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0200fffffff9;  op2val:0xf7ff0008fdff2000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffb0200fffffff9, 0xf7ff0008fdff2000, x2, 51*XLEN/8, x4)

inst_82:
// rs1_h2_val == 64, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000004000400040;  op2val:0xefff55550100fdff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x2000004000400040, 0xefff55550100fdff, x2, 52*XLEN/8, x4)

inst_83:
// rs1_h2_val == 128, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x100008000055555;  op2val:0xaaaaefff3ffffffa
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x100008000055555, 0xaaaaefff3ffffffa, x2, 53*XLEN/8, x4)

inst_84:
// rs1_h2_val == 2048, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f08000002fffa;  op2val:0xdffffeffffdffff8
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xff7f08000002fffa, 0xdffffeffffdffff8, x2, 54*XLEN/8, x4)

inst_85:
// rs1_h2_val == 4096, rs2_h0_val == -21846
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x40010000002ffbf;  op2val:0x08feffbfffaaaa
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x40010000002ffbf, 0x08feffbfffaaaa, x2, 55*XLEN/8, x4)

inst_86:
// rs1_h2_val == -9, rs2_h2_val == 8192
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x800fff7fffeaaaa;  op2val:0x042000c0000100
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x800fff7fffeaaaa, 0x042000c0000100, x2, 56*XLEN/8, x4)

inst_87:
// rs2_h3_val == -1, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3ffffffe0080;  op2val:0xfffffff7fffafffe
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xffbf3ffffffe0080, 0xfffffff7fffafffe, x2, 57*XLEN/8, x4)

inst_88:
// rs1_h2_val == -257, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x09feff00805555;  op2val:0x5555000155550002
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x09feff00805555, 0x5555000155550002, x2, 58*XLEN/8, x4)

inst_89:
// rs2_h2_val == 256, rs2_h1_val == 1
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff004000067fff;  op2val:0xfff601000001bfff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xffff004000067fff, 0xfff601000001bfff, x2, 59*XLEN/8, x4)

inst_90:
// rs1_h2_val == -2049, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffdfffff6;  op2val:0x08ffdff7fffeff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffff7fffdfffff6, 0x08ffdff7fffeff, x2, 60*XLEN/8, x4)

inst_91:
// rs1_h2_val == -8193, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x09dffffffdfff8;  op2val:0xffdf0008fbff3fff
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x09dffffffdfff8, 0xffdf0008fbff3fff, x2, 61*XLEN/8, x4)

inst_92:
// rs1_h3_val == 0, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x000400bffff7ff;  op2val:0x5555fff6fffc0008
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x000400bffff7ff, 0x5555fff6fffc0008, x2, 62*XLEN/8, x4)

inst_93:
// rs1_h3_val == 4, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x041000fff90006;  op2val:0xdfffffdf01001000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x041000fff90006, 0xdfffffdf01001000, x2, 63*XLEN/8, x4)

inst_94:
// rs1_h1_val == -33, rs2_h1_val == 2
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc4000ffdf0400;  op2val:0x407fff0002fff6
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffc4000ffdf0400, 0x407fff0002fff6, x2, 64*XLEN/8, x4)

inst_95:
// rs2_h1_val == 16, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffbbffffff6;  op2val:0x200000060010ffbf
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xc000fffbbffffff6, 0x200000060010ffbf, x2, 65*XLEN/8, x4)

inst_96:
// rs2_h1_val == -32768, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xc00004002000feff;  op2val:0x400000068000fff7
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xc00004002000feff, 0x400000068000fff7, x2, 66*XLEN/8, x4)

inst_97:
// rs1_h3_val == 32, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x208000dfff0800;  op2val:0xfff8ffbf0020fffe
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x208000dfff0800, 0xfff8ffbf0020fffe, x2, 67*XLEN/8, x4)

inst_98:
// rs1_h3_val == rs2_h3_val, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdffff60008;  op2val:0xfdfffff77fff5555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfdffffdffff60008, 0xfdfffff77fff5555, x2, 68*XLEN/8, x4)

inst_99:
// rs2_h3_val == -32768, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x10ffefc0004000;  op2val:0x8000fffd80000010
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x10ffefc0004000, 0x8000fffd80000010, x2, 69*XLEN/8, x4)

inst_100:
// rs1_h1_val == -65, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x100c000ffbffff6;  op2val:0x060008fff65555
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x100c000ffbffff6, 0x060008fff65555, x2, 70*XLEN/8, x4)

inst_101:
// rs2_h2_val == -2049, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff901000100aaaa;  op2val:0xffeff7fffff81000
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff901000100aaaa, 0xffeff7fffff81000, x2, 71*XLEN/8, x4)

inst_102:
// rs2_h3_val == 1, 
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffafff80005;  op2val:0x01400000030020
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfffcfffafff80005, 0x01400000030020, x2, 72*XLEN/8, x4)

inst_103:
// rs1_h0_val == 2, rs2_h1_val == 1024, rs2_h0_val == -17, rs1_h1_val == 1, rs2_h2_val == -17, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6040000010002;  op2val:0x05ffef0400ffef
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0xfff6040000010002, 0x05ffef0400ffef, x2, 73*XLEN/8, x4)

inst_104:
// rs1_h0_val == 16384, rs2_h3_val == -16385, rs2_h0_val == 1024
// opcode: pasub.h ; op1:x30; op2:x29; dest:x31; op1val:0x05fff800054000;  op2val:0xbfff400000060400
TEST_RR_OP(pasub.h, x31, x30, x29, 0x0000000000000000, 0x05fff800054000, 0xbfff400000060400, x2, 74*XLEN/8, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 75*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
