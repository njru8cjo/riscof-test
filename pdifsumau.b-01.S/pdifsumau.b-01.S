
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec  8 04:22:25 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdifsumau.b instruction of the RISC-V RV64PZicsr extension for the pdifsumau.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdifsumau.b)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b0_val == -128, rs2_b5_val == -5, rs1_b7_val == -17, rs1_b1_val == -86, rs2_b7_val == 1, rs2_b0_val == -65, rs2_b1_val == -5, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val != rs2_b0_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val != rs2_b1_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b2_val != rs2_b2_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b4_val != rs2_b4_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b5_val != rs2_b5_val, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b6_val != rs2_b6_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b7_val != rs2_b7_val, rs1_b5_val == -33, rs1_b6_val == 127
// opcode: pdifsumau.b ; op1:x6; op2:x6; dest:x6; op1val:0xef7fdf05f6f6aa80;  op2val:0x1f8fbfa0909fbbf
TEST_RR_OP(pdifsumau.b, x6, x6, x6, 0x0000000000000000, 0xef7fdf05f6f6aa80, 0x1f8fbfa0909fbbf, x2, 0*XLEN/8, x4)

inst_1:// rs1 == rd != rs2, rs1==x30, rs2==x3, rd==x30, rs1_b0_val == -1, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b3_val == -33, rs2_b0_val == -3, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b5_val == -2, rs2_b4_val == -128, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == -5, rs2_b5_val == -65, rs2_b7_val == -3, rs2_b2_val == 85
// opcode: pdifsumau.b ; op1:x30; op2:x3; dest:x30; op1val:0x909fef906fbc0ff;  op2val:0xfdc0bf80df553ffd
TEST_RR_OP(pdifsumau.b, x30, x30, x3, 0x0000000000000000, 0x909fef906fbc0ff, 0xfdc0bf80df553ffd, x2, 1*XLEN/8, x4)

inst_2:// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x7, rs1_b0_val == 0, rs2_b0_val == 1, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == -3, rs1_b3_val == -9, rs1_b7_val == -1, rs1_b2_val == 4, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b2_val == -5, rs2_b6_val == 127, rs2_b1_val == 127, rs1_b1_val == 4, rs1_b6_val == 1, rs1_b4_val == -3, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b4_val == -17
// opcode: pdifsumau.b ; op1:x11; op2:x11; dest:x7; op1val:0xff0105fdf7040400;  op2val:0x57f06effdfb7f01
TEST_RR_OP(pdifsumau.b, x7, x11, x11, 0x0000000000000000, 0xff0105fdf7040400, 0x57f06effdfb7f01, x2, 2*XLEN/8, x4)

inst_3:// rs2 == rd != rs1, rs1==x7, rs2==x15, rd==x15, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 32, rs2_b3_val == 64, rs2_b0_val == 2, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == -3, rs1_b7_val == 16, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b6_val == 1, rs2_b7_val == -65
// opcode: pdifsumau.b ; op1:x7; op2:x15; dest:x15; op1val:0x1007f83f20c0c001;  op2val:0xbf01fc0540fd3f02
TEST_RR_OP(pdifsumau.b, x15, x7, x15, 0x0000000000000000, 0x1007f83f20c0c001, 0xbf01fc0540fd3f02, x2, 3*XLEN/8, x4)

inst_4:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x28, rd==x1, rs1_b0_val == 127, rs1_b6_val == 64, rs1_b3_val == -65, rs2_b7_val == 4, rs1_b5_val == 85, rs1_b7_val == -2, rs2_b1_val == 8, rs1_b4_val == rs2_b4_val, rs2_b6_val == 2
// opcode: pdifsumau.b ; op1:x3; op2:x28; dest:x1; op1val:0xfe4055f6bf04097f;  op2val:0x40206f640c00801
TEST_RR_OP(pdifsumau.b, x1, x3, x28, 0x0000000000000000, 0xfe4055f6bf04097f, 0x40206f640c00801, x2, 4*XLEN/8, x4)

inst_5:// rs1==x19, rs2==x24, rd==x23, rs1_b0_val == 2, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b1_val == -33, rs2_b6_val == -33, rs1_b4_val == -1, rs1_b2_val == -17, rs2_b1_val == -2
// opcode: pdifsumau.b ; op1:x19; op2:x24; dest:x23; op1val:0x706f9fff6efdf02;  op2val:0xf6df09f905f9fef9
TEST_RR_OP(pdifsumau.b, x23, x19, x24, 0x0000000000000000, 0x706f9fff6efdf02, 0xf6df09f905f9fef9, x2, 5*XLEN/8, x4)

inst_6:// rs1==x9, rs2==x20, rd==x24, rs1_b0_val == 4, rs2_b6_val == 32, rs2_b3_val == 16, rs2_b1_val == -65, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b5_val == -3, rs1_b1_val == 127, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: pdifsumau.b ; op1:x9; op2:x20; dest:x24; op1val:0x5f8033ff8ef7f04;  op2val:0xf920fd0910fabfc0
TEST_RR_OP(pdifsumau.b, x24, x9, x20, 0x0000000000000000, 0x5f8033ff8ef7f04, 0xf920fd0910fabfc0, x2, 6*XLEN/8, x4)

inst_7:// rs1==x20, rs2==x23, rd==x14, rs1_b0_val == 8, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 16, rs2_b1_val == 1, rs2_b6_val == -128, rs1_b4_val == 32, rs1_b1_val == 16, rs1_b7_val == -65
// opcode: pdifsumau.b ; op1:x20; op2:x23; dest:x14; op1val:0xbf7ff82020101008;  op2val:0x980fdef105501fc
TEST_RR_OP(pdifsumau.b, x14, x20, x23, 0x0000000000000000, 0xbf7ff82020101008, 0x980fdef105501fc, x2, 7*XLEN/8, x4)

inst_8:// rs1==x25, rs2==x31, rd==x21, rs1_b0_val == 16, rs2_b6_val == -3, rs2_b2_val == 127, rs1_b7_val == -128, rs2_b5_val == 16, rs2_b7_val == 0, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b0_val == -86, rs2_b4_val == 2, rs1_b1_val == 1, rs1_b2_val == -86
// opcode: pdifsumau.b ; op1:x25; op2:x31; dest:x21; op1val:0x800705f820aa0110;  op2val:0xfd1002037ff8aa
TEST_RR_OP(pdifsumau.b, x21, x25, x31, 0x0000000000000000, 0x800705f820aa0110, 0xfd1002037ff8aa, x2, 8*XLEN/8, x4)

inst_9:// rs1==x27, rs2==x9, rd==x22, rs1_b0_val == 32, rs1_b3_val == 4, rs1_b6_val == 85, rs2_b5_val == 4, rs2_b0_val == -9, rs1_b7_val == 0, rs2_b4_val == 32, rs2_b3_val == 1
// opcode: pdifsumau.b ; op1:x27; op2:x9; dest:x22; op1val:0x55030704ef0420;  op2val:0x97f0420010707f7
TEST_RR_OP(pdifsumau.b, x22, x27, x9, 0x0000000000000000, 0x55030704ef0420, 0x97f0420010707f7, x2, 9*XLEN/8, x4)

inst_10:// rs1==x22, rs2==x12, rd==x27, rs1_b0_val == 64, rs2_b6_val == 16, rs1_b6_val == -65, rs1_b5_val == 2, rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b0_val == -5, rs2_b5_val == -2, rs1_b2_val == 32, rs1_b4_val == 16, rs2_b3_val == 0, rs2_b7_val == -86
// opcode: pdifsumau.b ; op1:x22; op2:x12; dest:x27; op1val:0xc0bf021007200540;  op2val:0xaa10fefc00f9f6fb
TEST_RR_OP(pdifsumau.b, x27, x22, x12, 0x0000000000000000, 0xc0bf021007200540, 0xaa10fefc00f9f6fb, x2, 10*XLEN/8, x4)

inst_11:// rs1==x8, rs2==x21, rd==x5, rs1_b0_val == -2, rs1_b4_val == 85, rs2_b6_val == -9, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b3_val == -17, rs2_b5_val == 32, rs1_b5_val == -9, rs2_b7_val == 32, rs2_b2_val == -17
// opcode: pdifsumau.b ; op1:x8; op2:x21; dest:x5; op1val:0x705f755f92005fe;  op2val:0x20f7203fefef3ff9
TEST_RR_OP(pdifsumau.b, x5, x8, x21, 0x0000000000000000, 0x705f755f92005fe, 0x20f7203fefef3ff9, x2, 11*XLEN/8, x4)

inst_12:// rs1==x12, rs2==x26, rd==x18, rs1_b0_val == -3, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val == -33, rs2_b3_val == -5, rs1_b2_val == 0, rs2_b2_val == -33, rs1_b7_val == -9, rs1_b3_val == 1
// opcode: pdifsumau.b ; op1:x12; op2:x26; dest:x18; op1val:0xf7dffafd010004fd;  op2val:0xf6fc0909fbdf7ff9
TEST_RR_OP(pdifsumau.b, x18, x12, x26, 0x0000000000000000, 0xf7dffafd010004fd, 0xf6fc0909fbdf7ff9, x2, 12*XLEN/8, x4)

inst_13:// rs1==x0, rs2==x7, rd==x8, rs1_b0_val == -5, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b3_val == -9, rs1_b2_val == -33, rs2_b1_val == 2, rs2_b4_val == -2, rs1_b7_val == 85
// opcode: pdifsumau.b ; op1:x0; op2:x7; dest:x8; op1val:0x5507f8faf6df04fb;  op2val:0xf602fefef7fd0201
TEST_RR_OP(pdifsumau.b, x8, x0, x7, 0x0000000000000000, 0x5507f8faf6df04fb, 0xf602fefef7fd0201, x2, 13*XLEN/8, x4)

inst_14:// rs1==x5, rs2==x8, rd==x16, rs1_b0_val == -9, rs1_b4_val == -65, rs2_b6_val == 64, rs2_b4_val == -86, rs2_b2_val == 4, rs1_b7_val == 8, rs1_b1_val == -1, rs1_b2_val == 85, rs1_b3_val == -128, rs1_b6_val == 2
// opcode: pdifsumau.b ; op1:x5; op2:x8; dest:x16; op1val:0x802fcbf8055fff7;  op2val:0xf6403faa0304fb03
TEST_RR_OP(pdifsumau.b, x16, x5, x8, 0x0000000000000000, 0x802fcbf8055fff7, 0xf6403faa0304fb03, x2, 14*XLEN/8, x4)

inst_15:// rs1==x18, rs2==x0, rd==x3, rs1_b0_val == -17, rs1_b7_val == 32, rs2_b5_val == 85, rs2_b3_val == -2
// opcode: pdifsumau.b ; op1:x18; op2:x0; dest:x3; op1val:0x20fcf9f9c0effaef;  op2val:0x6df5502fef9bff7
TEST_RR_OP(pdifsumau.b, x3, x18, x0, 0x0000000000000000, 0x20fcf9f9c0effaef, 0x6df5502fef9bff7, x2, 15*XLEN/8, x6)

inst_16:// rs1==x17, rs2==x30, rd==x20, rs1_b0_val == -33, rs1_b1_val == -3, rs1_b4_val == -2, rs1_b2_val == 127, rs2_b3_val == -65
// opcode: pdifsumau.b ; op1:x17; op2:x30; dest:x20; op1val:0x506f8fe047ffddf;  op2val:0x4c05503bf3ff6f9
TEST_RR_OP(pdifsumau.b, x20, x17, x30, 0x0000000000000000, 0x506f8fe047ffddf, 0x4c05503bf3ff6f9, x2, 16*XLEN/8, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:// rs1==x10, rs2==x4, rd==x25, rs1_b0_val == -65, rs1_b1_val == -9, rs2_b5_val == -128, rs1_b6_val == -5, rs2_b1_val == -86, rs1_b5_val == 127, rs2_b0_val == -33, rs1_b4_val == 1, rs1_b7_val == -5
// opcode: pdifsumau.b ; op1:x10; op2:x4; dest:x25; op1val:0xfbfb7f01f605f7bf;  op2val:0xf90580f9fe7faadf
TEST_RR_OP(pdifsumau.b, x25, x10, x4, 0x0000000000000000, 0xfbfb7f01f605f7bf, 0xf90580f9fe7faadf, x3, 0*XLEN/8, x6)

inst_18:// rs1==x2, rs2==x16, rd==x0, rs1_b0_val == 85, rs2_b0_val == 8, rs1_b2_val == 2, rs1_b7_val == rs2_b7_val, rs2_b1_val == -128, rs2_b4_val == 4, rs1_b1_val == 2, rs1_b6_val == 8
// opcode: pdifsumau.b ; op1:x2; op2:x16; dest:x0; op1val:0x6087f55f6020255;  op2val:0x6fc030410058008
TEST_RR_OP(pdifsumau.b, x0, x2, x16, 0x0000000000000000, 0x6087f55f6020255, 0x6fc030410058008, x3, 1*XLEN/8, x6)

inst_19:// rs1==x15, rs2==x19, rd==x26, rs1_b0_val == -86, rs1_b6_val == -3, rs1_b1_val == -65, rs1_b5_val == 1, rs2_b0_val == 16, rs2_b7_val == 127, rs2_b5_val == -17
// opcode: pdifsumau.b ; op1:x15; op2:x19; dest:x26; op1val:0xfbfd01038007bfaa;  op2val:0x7ff9ef2006c00310
TEST_RR_OP(pdifsumau.b, x26, x15, x19, 0x0000000000000000, 0xfbfd01038007bfaa, 0x7ff9ef2006c00310, x3, 2*XLEN/8, x6)

inst_20:// rs1==x4, rs2==x5, rd==x19, rs1_b1_val == -128, rs2_b3_val == 2, rs1_b3_val == 16, rs2_b5_val == 127, rs2_b1_val == 0, rs1_b4_val == 8, rs1_b7_val == -86
// opcode: pdifsumau.b ; op1:x4; op2:x5; dest:x19; op1val:0xaafcdf08101080f8;  op2val:0xfcfa7ff602f900c0
TEST_RR_OP(pdifsumau.b, x19, x4, x5, 0x0000000000000000, 0xaafcdf08101080f8, 0xfcfa7ff602f900c0, x3, 3*XLEN/8, x6)

inst_21:// rs1==x23, rs2==x29, rd==x28, rs1_b1_val == 0, rs1_b7_val == 127, rs2_b6_val == 4, rs1_b4_val == -17, rs1_b2_val == 8
// opcode: pdifsumau.b ; op1:x23; op2:x29; dest:x28; op1val:0x7fdf03efc0080080;  op2val:0x10405090203fcf6
TEST_RR_OP(pdifsumau.b, x28, x23, x29, 0x0000000000000000, 0x7fdf03efc0080080, 0x10405090203fcf6, x3, 4*XLEN/8, x6)

inst_22:// rs1==x28, rs2==x17, rd==x31, rs1_b1_val == 8, rs1_b2_val == rs2_b2_val, rs1_b4_val == 0, rs2_b1_val == 16, rs2_b7_val == -128
// opcode: pdifsumau.b ; op1:x28; op2:x17; dest:x31; op1val:0x3f5503003f030807;  op2val:0x80013f3ffa0310df
TEST_RR_OP(pdifsumau.b, x31, x28, x17, 0x0000000000000000, 0x3f5503003f030807, 0x80013f3ffa0310df, x3, 5*XLEN/8, x6)

inst_23:// rs1==x21, rs2==x10, rd==x29, rs1_b1_val == 32, rs1_b3_val == 8, rs2_b1_val == -17, rs2_b5_val == 1, rs1_b6_val == -1, rs2_b7_val == 85
// opcode: pdifsumau.b ; op1:x21; op2:x10; dest:x29; op1val:0xfeff07ff08f92009;  op2val:0x550201ef0506effc
TEST_RR_OP(pdifsumau.b, x29, x21, x10, 0x0000000000000000, 0xfeff07ff08f92009, 0x550201ef0506effc, x3, 6*XLEN/8, x6)

inst_24:// rs1==x14, rs2==x13, rd==x2, rs1_b1_val == 64, rs1_b6_val == 16, rs1_b4_val == -86, rs1_b2_val == -3, rs2_b3_val == -1
// opcode: pdifsumau.b ; op1:x14; op2:x13; dest:x2; op1val:0x2010f7aaf6fd4055;  op2val:0x98010f9ff550807
TEST_RR_OP(pdifsumau.b, x2, x14, x13, 0x0000000000000000, 0x2010f7aaf6fd4055, 0x98010f9ff550807, x3, 7*XLEN/8, x6)

inst_25:// rs1==x24, rs2==x27, rd==x9, rs1_b1_val == -2, rs1_b3_val == 2, rs2_b2_val == 8, rs1_b2_val == 64, rs2_b5_val == -33, rs2_b4_val == 8, rs2_b1_val == 4, rs2_b7_val == -2
// opcode: pdifsumau.b ; op1:x24; op2:x27; dest:x9; op1val:0x7f013f090240fe20;  op2val:0xfe03df0840080401
TEST_RR_OP(pdifsumau.b, x9, x24, x27, 0x0000000000000000, 0x7f013f090240fe20, 0xfe03df0840080401, x3, 8*XLEN/8, x6)

inst_26:// rs1==x31, rs2==x18, rd==x10, rs1_b1_val == -5, rs2_b0_val == 85, rs2_b2_val == 1
// opcode: pdifsumau.b ; op1:x31; op2:x18; dest:x10; op1val:0x80020620fafafbfb;  op2val:0x120effcfe013f55
TEST_RR_OP(pdifsumau.b, x10, x31, x18, 0x0000000000000000, 0x80020620fafafbfb, 0x120effcfe013f55, x3, 9*XLEN/8, x6)

inst_27:// rs1==x16, rs2==x1, rd==x4, rs1_b1_val == -17, rs2_b0_val == 0, rs2_b3_val == 8, rs1_b3_val == -5, rs1_b7_val == 2, rs2_b7_val == -17
// opcode: pdifsumau.b ; op1:x16; op2:x1; dest:x4; op1val:0x27f3feffbf6ef08;  op2val:0xef4055f808fd0400
TEST_RR_OP(pdifsumau.b, x4, x16, x1, 0x0000000000000000, 0x27f3feffbf6ef08, 0xef4055f808fd0400, x3, 10*XLEN/8, x6)

inst_28:// rs1==x29, rs2==x25, rd==x17, rs1_b1_val == 85, rs2_b6_val == -1, rs2_b7_val == -9
// opcode: pdifsumau.b ; op1:x29; op2:x25; dest:x17; op1val:0x800907efbf075502;  op2val:0xf7ff01070907c0f7
TEST_RR_OP(pdifsumau.b, x17, x29, x25, 0x0000000000000000, 0x800907efbf075502, 0xf7ff01070907c0f7, x3, 11*XLEN/8, x6)

inst_29:// rs1==x1, rs2==x14, rd==x13, rs2_b4_val == -33, rs1_b2_val == -1, rs2_b0_val == 64, rs1_b5_val == 8, rs2_b2_val == 2, rs1_b3_val == rs2_b3_val, rs2_b1_val == 32
// opcode: pdifsumau.b ; op1:x1; op2:x14; dest:x13; op1val:0xf8fb083f09ff007f;  op2val:0xef3ffcdf09022040
TEST_RR_OP(pdifsumau.b, x13, x1, x14, 0x0000000000000000, 0xf8fb083f09ff007f, 0xef3ffcdf09022040, x3, 12*XLEN/8, x6)

inst_30:// rs1==x13, rs2==x2, rd==x12, rs2_b4_val == -65, rs1_b3_val == 127
// opcode: pdifsumau.b ; op1:x13; op2:x2; dest:x12; op1val:0xeffbfe017ff610ff;  op2val:0x3ff9dfbfef08c0f7
TEST_RR_OP(pdifsumau.b, x12, x13, x2, 0x0000000000000000, 0xeffbfe017ff610ff, 0x3ff9dfbfef08c0f7, x3, 13*XLEN/8, x6)

inst_31:// rs1==x26, rs2==x22, rd==x11, rs2_b4_val == 85, rs1_b7_val == 4, rs2_b2_val == -86, rs1_b3_val == 64
// opcode: pdifsumau.b ; op1:x26; op2:x22; dest:x11; op1val:0x47fdf03404055bf;  op2val:0x4dfc055f7aafa01
TEST_RR_OP(pdifsumau.b, x11, x26, x22, 0x0000000000000000, 0x47fdf03404055bf, 0x4dfc055f7aafa01, x3, 14*XLEN/8, x2)

inst_32:// rs2_b5_val == -1, rs1_b5_val == -5, rs1_b3_val == -33, rs1_b6_val == -9
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x9f7fb03df10fdfa;  op2val:0xf780ffef01f820fd
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x9f7fb03df10fdfa, 0xf780ffef01f820fd, x3, 15*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:// rs2_b5_val == 0, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x4c0c0fc105507fe;  op2val:0x10400dfeff90002
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x4c0c0fc105507fe, 0x10400dfeff90002, x1, 0*XLEN/8, x2)

inst_34:// rs2_b5_val == 2, rs2_b3_val == 32, rs1_b0_val == rs2_b0_val, rs1_b4_val == -5
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcdf07fbfa08f809;  op2val:0xbffd020320020009
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfcdf07fbfa08f809, 0xbffd020320020009, x1, 1*XLEN/8, x2)

inst_35:// rs2_b5_val == 8, rs2_b2_val == -2, rs1_b5_val == -128, rs2_b4_val == 1
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x6078009f602093f;  op2val:0xfef90801fbfe2008
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x6078009f602093f, 0xfef90801fbfe2008, x1, 2*XLEN/8, x2)

inst_36:// rs2_b5_val == 64, rs2_b0_val == -1, rs1_b5_val == 0, rs1_b6_val == -86, rs1_b3_val == 85
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x4aa000755c0fb20;  op2val:0x553f4003fa0904ff
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x4aa000755c0fb20, 0x553f4003fa0904ff, x1, 3*XLEN/8, x2)

inst_37:// rs2_b5_val == -9, rs1_b4_val == -33, rs1_b6_val == -17, rs2_b3_val == 85, rs2_b1_val == -1, rs1_b5_val == -86
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xbfefaadf05f9c0ff;  op2val:0x5fcf7f85509fff6
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xbfefaadf05f9c0ff, 0x5fcf7f85509fff6, x1, 4*XLEN/8, x2)

inst_38:// rs2_b5_val == -86, rs2_b7_val == -5
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xef06fb0007070920;  op2val:0xfb7faa203fdf08fc
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xef06fb0007070920, 0xfb7faa203fdf08fc, x1, 5*XLEN/8, x2)

inst_39:// rs2_b6_val == 0, rs1_b2_val == -128, rs2_b7_val == 64
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8ffaa05f68002bf;  op2val:0x40000905effe2005
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xf8ffaa05f68002bf, 0x40000905effe2005, x1, 6*XLEN/8, x2)

inst_40:// rs2_b6_val == 8, rs2_b0_val == 32, rs2_b1_val == -33
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x5c0f855030900df;  op2val:0x40809fe0007df20
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x5c0f855030900df, 0x40809fe0007df20, x1, 7*XLEN/8, x2)

inst_41:// rs2_b6_val == -2, rs2_b3_val == -128
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xaafcfbfd0602fdf9;  op2val:0xc0fefaf980550300
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xaafcfbfd0602fdf9, 0xc0fefaf980550300, x1, 8*XLEN/8, x2)

inst_42:// rs2_b6_val == -5, rs2_b2_val == 32, rs1_b3_val == 0, rs2_b0_val == -17
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x80c0aaef00aa55f7;  op2val:0x40fb07f8f620efef
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x80c0aaef00aa55f7, 0x40fb07f8f620efef, x1, 9*XLEN/8, x2)

inst_43:// rs2_b6_val == -17, rs2_b7_val == 16, rs1_b3_val == -1
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xf609fbc0ff09df09;  op2val:0x10effafe01dffeef
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xf609fbc0ff09df09, 0x10effafe01dffeef, x1, 10*XLEN/8, x2)

inst_44:// rs2_b6_val == -65, rs1_b6_val == 0
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xf900f8fd3f80f7f9;  op2val:0x80bf06f9fafaaaff
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xf900f8fd3f80f7f9, 0x80bf06f9fafaaaff, x1, 11*XLEN/8, x2)

inst_45:// rs2_b6_val == 85, rs2_b0_val == -128, rs2_b4_val == -3
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb05f6fbf7f8aaf8;  op2val:0xef5506fd07060980
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfb05f6fbf7f8aaf8, 0xef5506fd07060980, x1, 12*XLEN/8, x2)

inst_46:// rs1_b2_val == 1, rs1_b7_val == -3, rs2_b7_val == 8, rs1_b6_val == -2, rs2_b1_val == 85
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfdfe0003200101ef;  op2val:0x8f9ffaafe045540
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfdfe0003200101ef, 0x8f9ffaafe045540, x1, 13*XLEN/8, x2)

inst_47:// rs1_b6_val == 32, rs1_b3_val == -17
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xc020f707ef0700f7;  op2val:0xf9ff8006fe2007df
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xc020f707ef0700f7, 0xf9ff8006fe2007df, x1, 14*XLEN/8, x2)

inst_48:// rs1_b7_val == 1, rs2_b2_val == 64, rs1_b6_val == 4
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x10455df02017f00;  op2val:0xfef780fd1040bf02
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x10455df02017f00, 0xfef780fd1040bf02, x1, 15*XLEN/8, x2)

inst_49:// rs1_b7_val == 64, rs2_b2_val == -65
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x4055060980050204;  op2val:0xf608fcf8fbbf0005
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x4055060980050204, 0xf608fcf8fbbf0005, x1, 16*XLEN/8, x2)

inst_50:// rs1_b7_val == -33, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf40f755f6000900;  op2val:0x3fbf7f55fdf805bf
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xdf40f755f6000900, 0x3fbf7f55fdf805bf, x1, 17*XLEN/8, x2)

inst_51:// rs2_b0_val == 127, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfaf8063f3ff9c0fc;  op2val:0x500fcbf0205047f
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfaf8063f3ff9c0fc, 0x500fcbf0205047f, x1, 18*XLEN/8, x2)

inst_52:// rs2_b0_val == 4, rs1_b5_val == rs2_b5_val, rs1_b4_val == -9, rs1_b5_val == 4
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x35504f7073f08bf;  op2val:0x5100420fb01fb04
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x35504f7073f08bf, 0x5100420fb01fb04, x1, 19*XLEN/8, x2)

inst_53:// rs2_b6_val == -86, rs2_b2_val == -128, rs2_b7_val == 2, rs1_b2_val == -2
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xf810fc2006fe03df;  op2val:0x2aa0309f6800140
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xf810fc2006fe03df, 0x2aa0309f6800140, x1, 20*XLEN/8, x2)

inst_54:// rs2_b0_val == -2, rs2_b2_val == 0
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x5508dffc02fedff7;  op2val:0xef40ff090200aafe
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x5508dffc02fedff7, 0xef40ff090200aafe, x1, 21*XLEN/8, x2)

inst_55:// rs2_b7_val == -1, rs2_b4_val == 16, rs1_b5_val == 64
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x9ff40aa037fdfff;  op2val:0xff80ff1080faf8f9
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x9ff40aa037fdfff, 0xff80ff1080faf8f9, x1, 22*XLEN/8, x2)

inst_56:// rs1_b2_val == -9, rs1_b6_val == rs2_b6_val
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9fa0609f9f7fdf6;  op2val:0x3ffac0aa55fedf04
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xf9fa0609f9f7fdf6, 0x3ffac0aa55fedf04, x1, 23*XLEN/8, x2)

inst_57:// rs1_b2_val == -65, rs1_b4_val == -128, rs2_b2_val == -1, rs1_b5_val == 16
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb55108055bffa3f;  op2val:0x3aa05faf6fff8ef
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfb55108055bffa3f, 0x3aa05faf6fff8ef, x1, 24*XLEN/8, x2)

inst_58:// rs2_b7_val == -33, rs1_b5_val == 32
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xc00620bffb0506fb;  op2val:0xdffafb80ef052010
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xc00620bffb0506fb, 0xdffafb80ef052010, x1, 25*XLEN/8, x2)

inst_59:// rs2_b1_val == -3, rs2_b3_val == -86
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x80fb03f8df20f780;  op2val:0xaa7f0955aaeffdc0
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x80fb03f8df20f780, 0xaa7f0955aaeffdc0, x1, 26*XLEN/8, x2)

inst_60:// rs2_b1_val == -9, rs1_b4_val == 127
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfabf077ff6f604fa;  op2val:0xeff7f9bf03f8f7aa
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfabf077ff6f604fa, 0xeff7f9bf03f8f7aa, x1, 27*XLEN/8, x2)

inst_61:// rs1_b3_val == -2, rs1_b1_val == rs2_b1_val, rs1_b4_val == 4
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ef0204fe00fe40;  op2val:0x40027f06fd02fe00
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x3ef0204fe00fe40, 0x40027f06fd02fe00, x1, 28*XLEN/8, x2)

inst_62:// rs1_b3_val == -3, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x71004fcfd803fc0;  op2val:0x3c03f2008400802
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x71004fcfd803fc0, 0x3c03f2008400802, x1, 29*XLEN/8, x2)

inst_63:// rs1_b3_val == -86, rs2_b2_val == 16
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa0808ffaa20fd3f;  op2val:0x3f032055fb10f903
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xaa0808ffaa20fd3f, 0x3f032055fb10f903, x1, 30*XLEN/8, x2)

inst_64:// rs1_b4_val == 2, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ffd200204010605;  op2val:0xf77fdfdf05c003f7
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x3ffd200204010605, 0xf77fdfdf05c003f7, x1, 31*XLEN/8, x2)

inst_65:// rs2_b2_val == -9, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0fdf8060606fa00;  op2val:0xbff6fa0840f709bf
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xc0fdf8060606fa00, 0xbff6fa0840f709bf, x1, 32*XLEN/8, x2)

inst_66:// rs2_b3_val == 127, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x40f8080010fe0109;  op2val:0x80fd7f047f5502fb
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x40f8080010fe0109, 0x80fd7f047f5502fb, x1, 33*XLEN/8, x2)

inst_67:// rs2_b3_val == 4, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc10fcff0102f906;  op2val:0xaafe005504060908
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xfc10fcff0102f906, 0xaafe005504060908, x1, 34*XLEN/8, x2)

inst_68:// rs1_b5_val == -1, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x10fdfffe0180fc02;  op2val:0xfff7100204f6c0f6
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x10fdfffe0180fc02, 0xfff7100204f6c0f6, x1, 35*XLEN/8, x2)

inst_69:// rs1_b4_val == 64, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x5fbf640dfaa0707;  op2val:0xeffaffbf00fd0610
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x5fbf640dfaa0707, 0xeffaffbf00fd0610, x1, 36*XLEN/8, x2)

inst_70:// rs1_b5_val == -3, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f02fd40fdf93f55;  op2val:0xff5510f806fcf8ef
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x7f02fd40fdf93f55, 0xff5510f806fcf8ef, x1, 37*XLEN/8, x2)

inst_71:// rs2_b4_val == -1, rs2_b1_val == 64
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f0520fb067ffc06;  op2val:0xfbf87ffffdfa4006
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x7f0520fb067ffc06, 0xfbf87ffffdfa4006, x1, 38*XLEN/8, x2)

inst_72:// rs2_b4_val == 0, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x55504c0fbbf04fb;  op2val:0x8fa7f00df09ff08
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x55504c0fbbf04fb, 0x8fa7f00df09ff08, x1, 39*XLEN/8, x2)

inst_73:// rs1_b5_val == -17, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x5fdef060401bf09;  op2val:0xbffd10fd7fdffe09
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x5fdef060401bf09, 0xbffd10fd7fdffe09, x1, 40*XLEN/8, x2)

inst_74:// rs2_b4_val == 127, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x80f7df0520dfff40;  op2val:0x2010807ff9000208
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x80f7df0520dfff40, 0x2010807ff9000208, x1, 41*XLEN/8, x2)

inst_75:// rs1_b5_val == -65, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x140bffd10fefbfb;  op2val:0x550909100406f706
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x140bffd10fefbfb, 0x550909100406f706, x1, 42*XLEN/8, x2)

inst_76:// rs1_b6_val == -128, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f80087f08fb0001;  op2val:0xf73f0055c0f9fff6
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x3f80087f08fb0001, 0xf73f0055c0f9fff6, x1, 43*XLEN/8, x2)

inst_77:// rs2_b4_val == 64, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x1055fc0200fefb08;  op2val:0x8005094055550440
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x1055fc0200fefb08, 0x8005094055550440, x1, 44*XLEN/8, x2)

inst_78:// rs2_b4_val == -5, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x7020601fbdffa04;  op2val:0x40fffcfbef07fd07
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x7020601fbdffa04, 0x40fffcfbef07fd07, x1, 45*XLEN/8, x2)

inst_79:// rs2_b4_val == -9, 
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f098004fd08df80;  op2val:0x800105f7f9f805fd
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x3f098004fd08df80, 0x800105f7f9f805fd, x1, 46*XLEN/8, x2)

inst_80:// rs1_b0_val == 0, rs2_b0_val == 1, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == -3, rs1_b3_val == -9, rs1_b7_val == -1, rs1_b2_val == 4, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b2_val == -5, rs2_b6_val == 127, rs2_b1_val == 127, rs1_b1_val == 4, rs1_b6_val == 1, rs1_b4_val == -3, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b4_val == -17
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0xff0105fdf7040400;  op2val:0x57f06effdfb7f01
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0xff0105fdf7040400, 0x57f06effdfb7f01, x1, 47*XLEN/8, x2)

inst_81:// rs1_b0_val == 85, rs2_b0_val == 8, rs1_b2_val == 2, rs1_b7_val == rs2_b7_val, rs2_b1_val == -128, rs2_b4_val == 4, rs1_b1_val == 2, rs1_b6_val == 8
// opcode: pdifsumau.b ; op1:x30; op2:x29; dest:x31; op1val:0x6087f55f6020255;  op2val:0x6fc030410058008
TEST_RR_OP(pdifsumau.b, x31, x30, x29, 0x0000000000000000, 0x6087f55f6020255, 0x6fc030410058008, x1, 48*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 49*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
