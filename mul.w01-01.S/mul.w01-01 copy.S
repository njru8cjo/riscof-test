
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 06:11:38 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mul.w01 instruction of the RISC-V RV64PZicsr extension for the mul.w01 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",mul.w01)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x6, rd==x4, rs1_w0_val == -2147483648, rs2_w0_val == 1073741824, rs2_w1_val == -2147483648, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val != rs2_w1_val, rs1_w1_val == -4194305
// opcode: mul.w01 ; op1:x15; op2:x6; dest:x4; op1val:0xffbfffff80000000;  op2val:0x8000000040000000
TEST_RR_OP(mul.w01, x4, x15, x6, 0x0000000000000000, 0xffbfffff80000000, 0x8000000040000000, x7, 0*XLEN/8, x10)

inst_1:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_w0_val == -1, rs2_w1_val == -1025, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -5, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: mul.w01 ; op1:x23; op2:x23; dest:x23; op1val:0x000006ffffffff;  op2val:0xfffffbfffffffffb
TEST_RR_OP(mul.w01, x23, x23, x23, 0x0000000000000000, 0x000006ffffffff, 0xfffffbfffffffffb, x7, 1*XLEN/8, x10)

inst_2:
// rs1 == rd != rs2, rs1==x0, rs2==x29, rd==x0, rs1_w0_val == 0, rs1_w1_val == -3, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -131073, rs2_w1_val == 1
// opcode: mul.w01 ; op1:x0; op2:x29; dest:x0; op1val:0xfffffffd00000000;  op2val:0x000001fffdffff
TEST_RR_OP(mul.w01, x0, x0, x29, 0x0000000000000000, 0xfffffffd00000000, 0x000001fffdffff, x7, 2*XLEN/8, x10)

inst_3:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x19, rs1_w0_val == 1, rs2_w0_val == 4096, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -1073741825
// opcode: mul.w01 ; op1:x26; op2:x26; dest:x19; op1val:0xbfffffff00000001;  op2val:0x8000000000001000
TEST_RR_OP(mul.w01, x19, x26, x26, 0x0000000000000000, 0xbfffffff00000001, 0x8000000000001000, x7, 3*XLEN/8, x10)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x24, rd==x24, rs1_w0_val == 2147483647, rs1_w1_val == 67108864, rs2_w1_val == -1073741825, rs2_w0_val == 67108864
// opcode: mul.w01 ; op1:x16; op2:x24; dest:x24; op1val:0x40000007fffffff;  op2val:0xbfffffff04000000
TEST_RR_OP(mul.w01, x24, x16, x24, 0x0000000000000000, 0x40000007fffffff, 0xbfffffff04000000, x7, 4*XLEN/8, x10)

inst_5:
// rs1==x13, rs2==x31, rd==x20, rs1_w0_val == 2, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 4, rs1_w1_val == 8192, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == -32769
// opcode: mul.w01 ; op1:x13; op2:x31; dest:x20; op1val:0x00200000000002;  op2val:0x000004ffff7fff
TEST_RR_OP(mul.w01, x20, x13, x31, 0x0000000000000000, 0x00200000000002, 0x000004ffff7fff, x7, 5*XLEN/8, x10)

inst_6:
// rs1==x3, rs2==x8, rd==x12, rs1_w0_val == 4, rs2_w0_val == 64, rs1_w1_val == 268435456, rs2_w1_val == 2097152
// opcode: mul.w01 ; op1:x3; op2:x8; dest:x12; op1val:0x1000000000000004;  op2val:0x20000000000040
TEST_RR_OP(mul.w01, x12, x3, x8, 0x0000000000000000, 0x1000000000000004, 0x20000000000040, x7, 6*XLEN/8, x10)

inst_7:
// rs1==x1, rs2==x9, rd==x5, rs1_w0_val == 8, rs2_w0_val == -536870913, rs1_w1_val == 32, rs2_w1_val == 128
// opcode: mul.w01 ; op1:x1; op2:x9; dest:x5; op1val:0x00002000000008;  op2val:0x000080dfffffff
TEST_RR_OP(mul.w01, x5, x1, x9, 0x0000000000000000, 0x00002000000008, 0x000080dfffffff, x7, 7*XLEN/8, x10)

inst_8:
// rs1==x31, rs2==x0, rd==x18, rs1_w0_val == 16, rs1_w1_val == -33554433, rs2_w1_val == 4194304
// opcode: mul.w01 ; op1:x31; op2:x0; dest:x18; op1val:0xfdffffff00000010;  op2val:0x40000000000040
TEST_RR_OP(mul.w01, x18, x31, x0, 0x0000000000000000, 0xfdffffff00000010, 0x40000000000040, x7, 8*XLEN/8, x10)

inst_9:
// rs1==x8, rs2==x2, rd==x21, rs1_w0_val == 32, rs2_w1_val == 2, rs2_w0_val == -2049
// opcode: mul.w01 ; op1:x8; op2:x2; dest:x21; op1val:0xc000000000000020;  op2val:0x000002fffff7ff
TEST_RR_OP(mul.w01, x21, x8, x2, 0x0000000000000000, 0xc000000000000020, 0x000002fffff7ff, x7, 9*XLEN/8, x10)

inst_10:
// rs1==x2, rs2==x25, rd==x26, rs1_w0_val == 64, rs2_w0_val == 262144
// opcode: mul.w01 ; op1:x2; op2:x25; dest:x26; op1val:0x00000300000040;  op2val:0x00000900040000
TEST_RR_OP(mul.w01, x26, x2, x25, 0x0000000000000000, 0x00000300000040, 0x00000900040000, x7, 10*XLEN/8, x10)

inst_11:
// rs1==x22, rs2==x3, rd==x30, rs1_w0_val == 128, rs1_w1_val == -513, rs2_w1_val == 1048576
// opcode: mul.w01 ; op1:x22; op2:x3; dest:x30; op1val:0xfffffdff00000080;  op2val:0x10000000000009
TEST_RR_OP(mul.w01, x30, x22, x3, 0x0000000000000000, 0xfffffdff00000080, 0x10000000000009, x7, 11*XLEN/8, x10)

inst_12:
// rs1==x21, rs2==x17, rd==x11, rs1_w0_val == 256, rs2_w0_val == -2147483648, rs2_w1_val == 32
// opcode: mul.w01 ; op1:x21; op2:x17; dest:x11; op1val:0xfffffff800000100;  op2val:0x00002080000000
TEST_RR_OP(mul.w01, x11, x21, x17, 0x0000000000000000, 0xfffffff800000100, 0x00002080000000, x7, 12*XLEN/8, x10)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_13:
// rs1==x28, rs2==x5, rd==x14, rs1_w0_val == 512, rs2_w0_val == -1073741825, rs1_w1_val == -2097153
// opcode: mul.w01 ; op1:x28; op2:x5; dest:x14; op1val:0xffdfffff00000200;  op2val:0x400000bfffffff
TEST_RR_OP(mul.w01, x14, x28, x5, 0x0000000000000000, 0xffdfffff00000200, 0x400000bfffffff, x8, 0*XLEN/8, x16)

inst_14:
// rs1==x12, rs2==x27, rd==x6, rs1_w0_val == 1024, rs1_w1_val == 256, rs2_w0_val == -513
// opcode: mul.w01 ; op1:x12; op2:x27; dest:x6; op1val:0x00010000000400;  op2val:0xfffffffafffffdff
TEST_RR_OP(mul.w01, x6, x12, x27, 0x0000000000000000, 0x00010000000400, 0xfffffffafffffdff, x8, 1*XLEN/8, x16)

inst_15:
// rs1==x19, rs2==x12, rd==x7, rs1_w0_val == 2048, rs2_w0_val == -16385, rs2_w1_val == 1431655765
// opcode: mul.w01 ; op1:x19; op2:x12; dest:x7; op1val:0x00000900000800;  op2val:0x55555555ffffbfff
TEST_RR_OP(mul.w01, x7, x19, x12, 0x0000000000000000, 0x00000900000800, 0x55555555ffffbfff, x8, 2*XLEN/8, x16)

inst_16:
// rs1==x5, rs2==x15, rd==x28, rs1_w0_val == 4096, rs2_w1_val == 256, rs1_w0_val == rs2_w0_val, rs1_w1_val == -1431655766
// opcode: mul.w01 ; op1:x5; op2:x15; dest:x28; op1val:0xaaaaaaaa00001000;  op2val:0x00010000001000
TEST_RR_OP(mul.w01, x28, x5, x15, 0x0000000000000000, 0xaaaaaaaa00001000, 0x00010000001000, x8, 3*XLEN/8, x16)

inst_17:
// rs1==x24, rs2==x22, rd==x1, rs1_w0_val == 8192, 
// opcode: mul.w01 ; op1:x24; op2:x22; dest:x1; op1val:0xfdffffff00002000;  op2val:0x000003ffffbfff
TEST_RR_OP(mul.w01, x1, x24, x22, 0x0000000000000000, 0xfdffffff00002000, 0x000003ffffbfff, x8, 4*XLEN/8, x16)

inst_18:
// rs1==x17, rs2==x30, rd==x13, rs1_w0_val == 16384, rs2_w1_val == -524289, rs2_w0_val == 32768
// opcode: mul.w01 ; op1:x17; op2:x30; dest:x13; op1val:0xbfffffff00004000;  op2val:0xfff7ffff00008000
TEST_RR_OP(mul.w01, x13, x17, x30, 0x0000000000000000, 0xbfffffff00004000, 0xfff7ffff00008000, x8, 5*XLEN/8, x16)

inst_19:
// rs1==x14, rs2==x10, rd==x15, rs1_w0_val == 32768, rs2_w1_val == 16, rs1_w1_val == -8388609
// opcode: mul.w01 ; op1:x14; op2:x10; dest:x15; op1val:0xff7fffff00008000;  op2val:0x00001000000009
TEST_RR_OP(mul.w01, x15, x14, x10, 0x0000000000000000, 0xff7fffff00008000, 0x00001000000009, x8, 6*XLEN/8, x16)

inst_20:
// rs1==x30, rs2==x1, rd==x2, rs1_w0_val == 65536, rs2_w1_val == 4096, rs2_w0_val == -17
// opcode: mul.w01 ; op1:x30; op2:x1; dest:x2; op1val:0x00000600010000;  op2val:0x001000ffffffef
TEST_RR_OP(mul.w01, x2, x30, x1, 0x0000000000000000, 0x00000600010000, 0x001000ffffffef, x8, 7*XLEN/8, x16)

inst_21:
// rs1==x25, rs2==x20, rd==x17, rs1_w0_val == 131072, rs2_w1_val == 65536, rs1_w1_val == 16
// opcode: mul.w01 ; op1:x25; op2:x20; dest:x17; op1val:0x00001000020000;  op2val:0x01000000000005
TEST_RR_OP(mul.w01, x17, x25, x20, 0x0000000000000000, 0x00001000020000, 0x01000000000005, x8, 8*XLEN/8, x16)

inst_22:
// rs1==x18, rs2==x11, rd==x9, rs1_w0_val == 262144, rs1_w1_val == 2147483647, rs2_w1_val == 1073741824
// opcode: mul.w01 ; op1:x18; op2:x11; dest:x9; op1val:0x7fffffff00040000;  op2val:0x4000000080000000
TEST_RR_OP(mul.w01, x9, x18, x11, 0x0000000000000000, 0x7fffffff00040000, 0x4000000080000000, x8, 9*XLEN/8, x16)

inst_23:
// rs1==x20, rs2==x28, rd==x31, rs1_w0_val == 524288, rs2_w1_val == 67108864, rs2_w0_val == -257, rs1_w1_val == 536870912
// opcode: mul.w01 ; op1:x20; op2:x28; dest:x31; op1val:0x2000000000080000;  op2val:0x4000000fffffeff
TEST_RR_OP(mul.w01, x31, x20, x28, 0x0000000000000000, 0x2000000000080000, 0x4000000fffffeff, x8, 10*XLEN/8, x16)

inst_24:
// rs1==x4, rs2==x18, rd==x27, rs1_w0_val == 1048576, rs2_w0_val == 2097152, rs2_w1_val == 268435456
// opcode: mul.w01 ; op1:x4; op2:x18; dest:x27; op1val:0x00010000100000;  op2val:0x1000000000200000
TEST_RR_OP(mul.w01, x27, x4, x18, 0x0000000000000000, 0x00010000100000, 0x1000000000200000, x8, 11*XLEN/8, x16)

inst_25:
// rs1==x10, rs2==x4, rd==x3, rs1_w0_val == 2097152, rs2_w0_val == 1048576, rs2_w1_val == -65537, rs1_w1_val == 8388608
// opcode: mul.w01 ; op1:x10; op2:x4; dest:x3; op1val:0x80000000200000;  op2val:0xfffeffff00100000
TEST_RR_OP(mul.w01, x3, x10, x4, 0x0000000000000000, 0x80000000200000, 0xfffeffff00100000, x8, 12*XLEN/8, x16)

inst_26:
// rs1==x27, rs2==x16, rd==x22, rs1_w0_val == 4194304, rs2_w0_val == 536870912, rs1_w1_val == -1048577, rs2_w1_val == -536870913
// opcode: mul.w01 ; op1:x27; op2:x16; dest:x22; op1val:0xffefffff00400000;  op2val:0xdfffffff20000000
TEST_RR_OP(mul.w01, x22, x27, x16, 0x0000000000000000, 0xffefffff00400000, 0xdfffffff20000000, x8, 13*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_27:
// rs1==x6, rs2==x21, rd==x16, rs1_w0_val == 8388608, rs2_w1_val == -33
// opcode: mul.w01 ; op1:x6; op2:x21; dest:x16; op1val:0xfdffffff00800000;  op2val:0xffffffdf3fffffff
TEST_RR_OP(mul.w01, x16, x6, x21, 0x0000000000000000, 0xfdffffff00800000, 0xffffffdf3fffffff, x1, 0*XLEN/8, x2)

inst_28:
// rs1==x29, rs2==x19, rd==x25, rs1_w0_val == 16777216, rs2_w0_val == -33554433
// opcode: mul.w01 ; op1:x29; op2:x19; dest:x25; op1val:0x00000501000000;  op2val:0xffffffdffdffffff
TEST_RR_OP(mul.w01, x25, x29, x19, 0x0000000000000000, 0x00000501000000, 0xffffffdffdffffff, x1, 1*XLEN/8, x2)

inst_29:
// rs1==x9, rs2==x13, rd==x10, rs1_w0_val == 33554432, rs1_w1_val == -1025, rs1_w1_val == rs2_w1_val
// opcode: mul.w01 ; op1:x9; op2:x13; dest:x10; op1val:0xfffffbff02000000;  op2val:0xfffffbff00008000
TEST_RR_OP(mul.w01, x10, x9, x13, 0x0000000000000000, 0xfffffbff02000000, 0xfffffbff00008000, x1, 2*XLEN/8, x2)

inst_30:
// rs1==x7, rs2==x14, rd==x8, rs1_w0_val == 67108864, rs2_w1_val == 131072, rs1_w1_val == -33
// opcode: mul.w01 ; op1:x7; op2:x14; dest:x8; op1val:0xffffffdf04000000;  op2val:0x02000000000003
TEST_RR_OP(mul.w01, x8, x7, x14, 0x0000000000000000, 0xffffffdf04000000, 0x02000000000003, x1, 3*XLEN/8, x2)

inst_31:
// rs1==x11, rs2==x7, rd==x29, rs1_w0_val == 134217728, rs2_w0_val == -2, rs2_w1_val == -16777217
// opcode: mul.w01 ; op1:x11; op2:x7; dest:x29; op1val:0xffdfffff08000000;  op2val:0xfefffffffffffffe
TEST_RR_OP(mul.w01, x29, x11, x7, 0x0000000000000000, 0xffdfffff08000000, 0xfefffffffffffffe, x1, 4*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, rs2_w0_val == -2097153, rs1_w1_val == 33554432
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000010000000;  op2val:0xfffffff6ffdfffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x200000010000000, 0xfffffff6ffdfffff, x1, 5*XLEN/8, x2)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00200020000000;  op2val:0x4000000fffffffc
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00200020000000, 0x4000000fffffffc, x1, 6*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs2_w0_val == -33
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000340000000;  op2val:0x000100ffffffdf
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000340000000, 0x000100ffffffdf, x1, 7*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs2_w0_val == -65, rs1_w1_val == -65
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffe;  op2val:0xffffffdfffffffbf
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffe, 0xffffffdfffffffbf, x1, 8*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == -33554433, rs1_w1_val == 262144
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffd;  op2val:0xfdffffffbfffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x040000fffffffd, 0xfdffffffbfffffff, x1, 9*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffb;  op2val:0xfffffff900000009
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x002000fffffffb, 0xfffffff900000009, x1, 10*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w0_val == 8192
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffff7;  op2val:0xbfffffff00002000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffff7, 0xbfffffff00002000, x1, 11*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs2_w1_val == -3, rs2_w0_val == 16777216
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffef;  op2val:0xfffffffd01000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffef, 0xfffffffd01000000, x1, 12*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs1_w1_val == -131073
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffdf;  op2val:0x00000640000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffdf, 0x00000640000000, x1, 13*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs1_w1_val == 65536, rs2_w1_val == -1431655766
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffbf;  op2val:0xaaaaaaaafffdffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x010000ffffffbf, 0xaaaaaaaafffdffff, x1, 14*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs2_w0_val == 32, rs1_w1_val == 64
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffff7f;  op2val:0x00008000000020
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000040ffffff7f, 0x00008000000020, x1, 15*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == 4, rs2_w0_val == -268435457
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffeff;  op2val:0x40000000efffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000004fffffeff, 0x40000000efffffff, x1, 16*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs2_w0_val == 134217728
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffdff;  op2val:0x4000000008000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000020fffffdff, 0x4000000008000000, x1, 17*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs1_w1_val == 2, rs2_w0_val == 16384, rs2_w1_val == -2049
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffbff;  op2val:0xfffff7ff00004000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000002fffffbff, 0xfffff7ff00004000, x1, 18*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffff7ff;  op2val:0xfff7ffffffffffbf
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000003fffff7ff, 0xfff7ffffffffffbf, x1, 19*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs2_w0_val == 16, rs1_w1_val == -2147483648, rs2_w1_val == -129
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0xffffff7f00000010
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0xffffff7f00000010, x1, 20*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs2_w1_val == -67108865
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffdfff;  op2val:0xfbffffffffffbfff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffdfff, 0xfbffffffffffbfff, x1, 21*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, rs2_w0_val == 33554432
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffbfff;  op2val:0xfffffbff02000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffbfff, 0xfffffbff02000000, x1, 22*XLEN/8, x2)

inst_50:
// rs1_w0_val == -32769, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffff7fff;  op2val:0xfeffffff80000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffff7fff, 0xfeffffff80000000, x1, 23*XLEN/8, x2)

inst_51:
// rs1_w0_val == -65537, rs1_w1_val == -65537
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffeffff;  op2val:0x00000500000007
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffefffffffeffff, 0x00000500000007, x1, 24*XLEN/8, x2)

inst_52:
// rs2_w1_val == -131073, rs1_w1_val == -67108865, rs1_w0_val == -16777217, rs2_w0_val == 2
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffeffffff;  op2val:0xfffdffff00000002
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0xfffdffff00000002, x1, 25*XLEN/8, x2)

inst_53:
// rs2_w1_val == -262145, rs2_w0_val == -134217729, rs1_w1_val == 0
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000100000;  op2val:0xfffbfffff7ffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000000100000, 0xfffbfffff7ffffff, x1, 26*XLEN/8, x2)

inst_54:
// rs2_w1_val == -1048577, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff08000000;  op2val:0xffeffffffffffdff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffdff08000000, 0xffeffffffffffdff, x1, 27*XLEN/8, x2)

inst_55:
// rs2_w1_val == -2097153, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000008;  op2val:0xffdffffffdffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff800000008, 0xffdffffffdffffff, x1, 28*XLEN/8, x2)

inst_56:
// rs2_w1_val == -4194305, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000100;  op2val:0xffbffffffffffff6
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000600000100, 0xffbffffffffffff6, x1, 29*XLEN/8, x2)

inst_57:
// rs2_w1_val == -8388609, rs1_w1_val == -262145
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000006;  op2val:0xff7fffff00100000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000006, 0xff7fffff00100000, x1, 30*XLEN/8, x2)

inst_58:
// rs2_w1_val == -134217729, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffff7f;  op2val:0xf7ffffffc0000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffff7f, 0xf7ffffffc0000000, x1, 31*XLEN/8, x2)

inst_59:
// rs2_w1_val == -268435457, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffffe;  op2val:0xefffffff00002000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffe, 0xefffffff00002000, x1, 32*XLEN/8, x2)

inst_60:
// rs1_w0_val == -131073, rs2_w0_val == 256, rs1_w1_val == 16384
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffdffff;  op2val:0xbfffffff00000100
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x004000fffdffff, 0xbfffffff00000100, x1, 33*XLEN/8, x2)

inst_61:
// rs1_w0_val == -262145, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffbffff;  op2val:0x000020bfffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x010000fffbffff, 0x000020bfffffff, x1, 34*XLEN/8, x2)

inst_62:
// rs1_w0_val == -524289, rs1_w1_val == 134217728, rs2_w0_val == -3, rs2_w1_val == -8193
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fff7ffff;  op2val:0xffffdffffffffffd
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x8000000fff7ffff, 0xffffdffffffffffd, x1, 35*XLEN/8, x2)

inst_63:
// rs1_w0_val == -1048577, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffefffff;  op2val:0xfffdffff01000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffefffff, 0xfffdffff01000000, x1, 36*XLEN/8, x2)

inst_64:
// rs1_w0_val == -2097153, rs2_w0_val == 1
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffdfffff;  op2val:0x40000000000001
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000000ffdfffff, 0x40000000000001, x1, 37*XLEN/8, x2)

inst_65:
// rs1_w0_val == -4194305, rs1_w1_val == 8
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffbfffff;  op2val:0x000100fffffffc
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000008ffbfffff, 0x000100fffffffc, x1, 38*XLEN/8, x2)

inst_66:
// rs1_w0_val == -8388609, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ff7fffff;  op2val:0x80000000fffffffa
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x800000ff7fffff, 0x80000000fffffffa, x1, 39*XLEN/8, x2)

inst_67:
// rs1_w0_val == -33554433, rs2_w0_val == -16777217, rs2_w1_val == 134217728
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffdffffff;  op2val:0x8000000feffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xbffffffffdffffff, 0x8000000feffffff, x1, 40*XLEN/8, x2)

inst_68:
// rs1_w0_val == -67108865, rs2_w0_val == 131072
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fbffffff;  op2val:0xfffffffd00020000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000006fbffffff, 0xfffffffd00020000, x1, 41*XLEN/8, x2)

inst_69:
// rs1_w0_val == -134217729, rs2_w1_val == -257, rs2_w0_val == -1048577
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6f7ffffff;  op2val:0xfffffeffffefffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff6f7ffffff, 0xfffffeffffefffff, x1, 42*XLEN/8, x2)

inst_70:
// rs1_w0_val == -268435457, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0xff7fffffffff7fff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xff7fffffefffffff, 0xff7fffffffff7fff, x1, 43*XLEN/8, x2)

inst_71:
// rs1_w0_val == -536870913, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000020dfffffff;  op2val:0xfdffffff00000020
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000020dfffffff, 0xfdffffff00000020, x1, 44*XLEN/8, x2)

inst_72:
// rs1_w0_val == -1073741825, rs2_w0_val == 4194304, rs1_w1_val == -9
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0xefffffff00400000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0xefffffff00400000, x1, 45*XLEN/8, x2)

inst_73:
// rs1_w0_val == 1431655765, rs2_w1_val == -65
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000055555555;  op2val:0xffffffbf01000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xc000000055555555, 0xffffffbf01000000, x1, 46*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1431655766, rs1_w1_val == -1
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffaaaaaaaa;  op2val:0xffdfffffdfffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffffffaaaaaaaa, 0xffdfffffdfffffff, x1, 47*XLEN/8, x2)

inst_75:
// rs1_w1_val == 1, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffff7f;  op2val:0x3fffffff00040000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000001ffffff7f, 0x3fffffff00040000, x1, 48*XLEN/8, x2)

inst_76:
// rs1_w1_val == 128, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fbffffff;  op2val:0xff7ffffffffffff6
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000080fbffffff, 0xff7ffffffffffff6, x1, 49*XLEN/8, x2)

inst_77:
// rs1_w1_val == 512, rs2_w1_val == -17
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffff9;  op2val:0xffffffefdfffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000200fffffff9, 0xffffffefdfffffff, x1, 50*XLEN/8, x2)

inst_78:
// rs1_w1_val == 1024, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffeffff;  op2val:0xfffffffdfeffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000400fffeffff, 0xfffffffdfeffffff, x1, 51*XLEN/8, x2)

inst_79:
// rs1_w1_val == 2048, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000100;  op2val:0xf7fffffffffffdff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00080000000100, 0xf7fffffffffffdff, x1, 52*XLEN/8, x2)

inst_80:
// rs1_w1_val == 4096, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffdff;  op2val:0xdfffffff00400000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x001000fffffdff, 0xdfffffff00400000, x1, 53*XLEN/8, x2)

inst_81:
// rs1_w1_val == 32768, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000040000;  op2val:0x800000000000001
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00800000040000, 0x800000000000001, x1, 54*XLEN/8, x2)

inst_82:
// rs1_w1_val == 131072, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x020000bfffffff;  op2val:0xfffff7ff00000020
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x020000bfffffff, 0xfffff7ff00000020, x1, 55*XLEN/8, x2)

inst_83:
// rs1_w1_val == 524288, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000001000;  op2val:0xfff7ffff00000005
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x08000000001000, 0xfff7ffff00000005, x1, 56*XLEN/8, x2)

inst_84:
// rs1_w1_val == 1048576, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffdffff;  op2val:0xfffff7fff7ffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x100000fffdffff, 0xfffff7fff7ffffff, x1, 57*XLEN/8, x2)

inst_85:
// rs1_w1_val == 2097152, rs2_w1_val == 512
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000800000;  op2val:0x000200fffff7ff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x20000000800000, 0x000200fffff7ff, x1, 58*XLEN/8, x2)

inst_86:
// rs1_w1_val == 4194304, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000800000;  op2val:0x00002000000009
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x40000000800000, 0x00002000000009, x1, 59*XLEN/8, x2)

inst_87:
// rs1_w1_val == 16777216, rs2_w0_val == -65537
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000aaaaaaaa;  op2val:0x020000fffeffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x1000000aaaaaaaa, 0x020000fffeffff, x1, 60*XLEN/8, x2)

inst_88:
// rs1_w1_val == 1073741824, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff9;  op2val:0xffffffeff7ffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff9, 0xffffffeff7ffffff, x1, 61*XLEN/8, x2)

inst_89:
// rs1_w1_val == -2, rs2_w0_val == 524288
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffdf;  op2val:0x4000000000080000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffdf, 0x4000000000080000, x1, 62*XLEN/8, x2)

inst_90:
// rs1_w1_val == -134217729, rs2_w1_val == -16385
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff20000000;  op2val:0xffffbfff00100000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xf7ffffff20000000, 0xffffbfff00100000, x1, 63*XLEN/8, x2)

inst_91:
// rs1_w1_val == -268435457, rs2_w0_val == 128, rs2_w1_val == -2
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffdfff;  op2val:0xfffffffe00000080
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xefffffffffffdfff, 0xfffffffe00000080, x1, 64*XLEN/8, x2)

inst_92:
// rs1_w1_val == -536870913, rs2_w0_val == 8
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff7;  op2val:0xffffffbf00000008
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff7, 0xffffffbf00000008, x1, 65*XLEN/8, x2)

inst_93:
// rs1_w1_val == 1431655765, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000800;  op2val:0xf7ffffff00000100
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x5555555500000800, 0xf7ffffff00000100, x1, 66*XLEN/8, x2)

inst_94:
// rs2_w0_val == -1, rs2_w1_val == 8, rs1_w1_val == -8193
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffdfffffff;  op2val:0x000008ffffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffdfffdfffffff, 0x000008ffffffff, x1, 67*XLEN/8, x2)

inst_95:
// rs2_w0_val == 0, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffff7ff;  op2val:0xffffdfff00000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x80000000fffff7ff, 0xffffdfff00000000, x1, 68*XLEN/8, x2)

inst_96:
// rs2_w0_val == 2147483647, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffeffff;  op2val:0xfbffffff7fffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffeffff, 0xfbffffff7fffffff, x1, 69*XLEN/8, x2)

inst_97:
// rs2_w0_val == 4, rs2_w1_val == -5
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000000;  op2val:0xfffffffb00000004
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000500000000, 0xfffffffb00000004, x1, 70*XLEN/8, x2)

inst_98:
// rs2_w0_val == 512, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffbfffff;  op2val:0x5555555500000200
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xff7fffffffbfffff, 0x5555555500000200, x1, 71*XLEN/8, x2)

inst_99:
// rs2_w0_val == 1024, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0xffffffdf00000400
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0xffffffdf00000400, x1, 72*XLEN/8, x2)

inst_100:
// rs2_w0_val == 2048, rs2_w1_val == 8388608
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000003;  op2val:0x80000000000800
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000600000003, 0x80000000000800, x1, 73*XLEN/8, x2)

inst_101:
// rs2_w0_val == 65536, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ff7fffff;  op2val:0xfffffff900010000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x10000000ff7fffff, 0xfffffff900010000, x1, 74*XLEN/8, x2)

inst_102:
// rs2_w0_val == 8388608, rs2_w1_val == 33554432
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffbff;  op2val:0x200000000800000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffbff, 0x200000000800000, x1, 75*XLEN/8, x2)

inst_103:
// rs2_w0_val == 268435456, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000080;  op2val:0x00000610000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000200000080, 0x00000610000000, x1, 76*XLEN/8, x2)

inst_104:
// rs2_w0_val == -9, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff8;  op2val:0x020000fffffff7
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff8, 0x020000fffffff7, x1, 77*XLEN/8, x2)

inst_105:
// rs2_w0_val == -129, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500010000;  op2val:0x4000000ffffff7f
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000500010000, 0x4000000ffffff7f, x1, 78*XLEN/8, x2)

inst_106:
// rs2_w0_val == -1025, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff7fffffff;  op2val:0xfefffffffffffbff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfbffffff7fffffff, 0xfefffffffffffbff, x1, 79*XLEN/8, x2)

inst_107:
// rs2_w0_val == -4097, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000200;  op2val:0xffffdfffffffefff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x02000000000200, 0xffffdfffffffefff, x1, 80*XLEN/8, x2)

inst_108:
// rs2_w0_val == -8193, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000200;  op2val:0xfdffffffffffdfff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000700000200, 0xfdffffffffffdfff, x1, 81*XLEN/8, x2)

inst_109:
// rs2_w0_val == -262145, rs2_w1_val == 524288
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffeffff;  op2val:0x080000fffbffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffeffff, 0x080000fffbffff, x1, 82*XLEN/8, x2)

inst_110:
// rs2_w0_val == -524289, rs2_w1_val == -4097, rs1_w1_val == -129
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fbfffffff;  op2val:0xffffeffffff7ffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffff7fbfffffff, 0xffffeffffff7ffff, x1, 83*XLEN/8, x2)

inst_111:
// rs2_w0_val == -4194305, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000004000;  op2val:0x3fffffffffbfffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x100000000004000, 0x3fffffffffbfffff, x1, 84*XLEN/8, x2)

inst_112:
// rs2_w0_val == -8388609, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fdffffff;  op2val:0xfffffeffff7fffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x100000fdffffff, 0xfffffeffff7fffff, x1, 85*XLEN/8, x2)

inst_113:
// rs2_w0_val == -67108865, rs1_w1_val == -16777217
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000004;  op2val:0x001000fbffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000004, 0x001000fbffffff, x1, 86*XLEN/8, x2)

inst_114:
// rs2_w0_val == 1431655765, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xdfffffff55555555
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xdfffffff55555555, x1, 87*XLEN/8, x2)

inst_115:
// rs2_w0_val == -1431655766, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffbfffff;  op2val:0xc0000000aaaaaaaa
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000200ffbfffff, 0xc0000000aaaaaaaa, x1, 88*XLEN/8, x2)

inst_116:
// rs2_w1_val == -1, rs1_w1_val == -32769
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff40000000;  op2val:0xffffffff00000040
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffff7fff40000000, 0xffffffff00000040, x1, 89*XLEN/8, x2)

inst_117:
// rs2_w1_val == 0, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fdffffff;  op2val:0x000000ffffdfff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x200000fdffffff, 0x000000ffffdfff, x1, 90*XLEN/8, x2)

inst_118:
// rs2_w1_val == 2147483647, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffff7ffffff;  op2val:0x7fffffff00000003
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xeffffffff7ffffff, 0x7fffffff00000003, x1, 91*XLEN/8, x2)

inst_119:
// rs2_w1_val == 64, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffbfffff;  op2val:0x00004000000002
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfeffffffffbfffff, 0x00004000000002, x1, 92*XLEN/8, x2)

inst_120:
// rs2_w1_val == 1024, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00020000;  op2val:0x0004007fffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffd00020000, 0x0004007fffffff, x1, 93*XLEN/8, x2)

inst_121:
// rs2_w1_val == 2048, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffff7ff;  op2val:0x000800fffffffc
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffeffffffffff7ff, 0x000800fffffffc, x1, 94*XLEN/8, x2)

inst_122:
// rs2_w1_val == 8192, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffefff;  op2val:0x00200000000400
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffefff, 0x00200000000400, x1, 95*XLEN/8, x2)

inst_123:
// rs2_w1_val == 262144, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000004;  op2val:0x040000ffffbfff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000004, 0x040000ffffbfff, x1, 96*XLEN/8, x2)

inst_124:
// rs2_w1_val == 16777216, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000040;  op2val:0x100000004000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffffff00000040, 0x100000004000000, x1, 97*XLEN/8, x2)

inst_125:
// rs1_w1_val == -5, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000009;  op2val:0x200000ffdfffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000009, 0x200000ffdfffff, x1, 98*XLEN/8, x2)

inst_126:
// rs1_w1_val == -17, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00400000;  op2val:0xff7ffffffff7ffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffffef00400000, 0xff7ffffffff7ffff, x1, 99*XLEN/8, x2)

inst_127:
// rs2_w1_val == 536870912, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000002;  op2val:0x20000000fffffffe
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0x20000000fffffffe, x1, 100*XLEN/8, x2)

inst_128:
// rs1_w1_val == -257, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000001;  op2val:0x00000900000200
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000001, 0x00000900000200, x1, 101*XLEN/8, x2)

inst_129:
// rs1_w1_val == -2049, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffff7fff;  op2val:0x800000000000020
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffff7fff, 0x800000000000020, x1, 102*XLEN/8, x2)

inst_130:
// rs2_w1_val == -9, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000310000000;  op2val:0xfffffff7ffffdfff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x00000310000000, 0xfffffff7ffffdfff, x1, 103*XLEN/8, x2)

inst_131:
// rs1_w1_val == -4097, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000005;  op2val:0xfffffffb7fffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffefff00000005, 0xfffffffb7fffffff, x1, 104*XLEN/8, x2)

inst_132:
// rs1_w1_val == -16385, rs2_w1_val == -513
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffbff;  op2val:0xfffffdfffffeffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffbff, 0xfffffdfffffeffff, x1, 105*XLEN/8, x2)

inst_133:
// rs1_w1_val == -524289, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffff9;  op2val:0xfbfffffffdffffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff9, 0xfbfffffffdffffff, x1, 106*XLEN/8, x2)

inst_134:
// rs2_w1_val == -32769, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000200bfffffff;  op2val:0xffff7fff00000002
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000200bfffffff, 0xffff7fff00000002, x1, 107*XLEN/8, x2)

inst_135:
// rs2_w1_val == 16384, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000020;  op2val:0x00400000000800
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x02000000000020, 0x00400000000800, x1, 108*XLEN/8, x2)

inst_136:
// rs2_w1_val == 32768, 
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000800f7ffffff;  op2val:0x00800002000000
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000800f7ffffff, 0x00800002000000, x1, 109*XLEN/8, x2)

inst_137:
// rs1_w0_val == -1, rs2_w1_val == -1025, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -5, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffff;  op2val:0xfffffbfffffffffb
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0x000006ffffffff, 0xfffffbfffffffffb, x1, 110*XLEN/8, x2)

inst_138:
// rs1_w0_val == 0, rs1_w1_val == -3, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -131073, rs2_w1_val == 1
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000000;  op2val:0x000001fffdffff
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000000, 0x000001fffdffff, x1, 111*XLEN/8, x2)

inst_139:
// rs1_w0_val == 16, rs1_w1_val == -33554433, rs2_w1_val == 4194304
// opcode: mul.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000010;  op2val:0x40000000000040
TEST_RR_OP(mul.w01, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000010, 0x40000000000040, x1, 112*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x8_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 113*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
