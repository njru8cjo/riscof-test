
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdifu.b instruction of the RISC-V RV64PZicsr extension for the pdifu.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdifu.b)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x8, rd==x20, rs1_b0_val == -128, rs1_b7_val == 64, rs2_b6_val == -9, rs2_b7_val == 85, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val != rs2_b0_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b2_val == 0, rs1_b1_val != rs2_b1_val, rs1_b3_val == -65, rs1_b2_val != rs2_b2_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b4_val != rs2_b4_val, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val != rs2_b6_val, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b5_val == 16, rs1_b7_val != rs2_b7_val, rs1_b6_val == -128
// opcode: pdifu.b ; op1:x9; op2:x8; dest:x20; op1val:0x408010c0bf3f0780;  op2val:0x55f707f83f00f6fc
TEST_RR_OP(pdifu.b, x20, x9, x8, 0x0000000000000000, 0x408010c0bf3f0780, 0x55f707f83f00f6fc, x5, 0*XLEN/8, x18)

inst_1:// rs2 == rd != rs1, rs1==x0, rs2==x3, rd==x3, rs1_b0_val == -1, rs1_b6_val == 16, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b4_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b0_val == 127, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b2_val == 1, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs2_b7_val == 2, rs1_b7_val == 8, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b2_val == -9, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val == -3, rs2_b3_val == -1
// opcode: pdifu.b ; op1:x0; op2:x3; dest:x3; op1val:0x810c0fd550107ff;  op2val:0x207fa55fff7f67f
TEST_RR_OP(pdifu.b, x3, x0, x3, 0x0000000000000000, 0x810c0fd550107ff, 0x207fa55fff7f67f, x5, 1*XLEN/8, x18)

inst_2:// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x6, rs1_b0_val == 0, rs1_b3_val == 8, rs2_b3_val == 32, rs1_b1_val == 85, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b5_val == -33, rs2_b4_val == 127, rs2_b6_val == -1, rs2_b1_val == 64
// opcode: pdifu.b ; op1:x30; op2:x30; dest:x6; op1val:0xf8fadff608f85500;  op2val:0x6fff97f20034009
TEST_RR_OP(pdifu.b, x6, x30, x30, 0x0000000000000000, 0xf8fadff608f85500, 0x6fff97f20034009, x5, 2*XLEN/8, x18)

inst_3:// rs1 == rd != rs2, rs1==x22, rs2==x26, rd==x22, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 16, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b5_val == -2, rs2_b4_val == 1, rs2_b1_val == -128, rs1_b7_val == 32, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b7_val == -33, rs1_b6_val == 2
// opcode: pdifu.b ; op1:x22; op2:x26; dest:x22; op1val:0x2002c003c0fc0901;  op2val:0xdf06fe01103f8003
TEST_RR_OP(pdifu.b, x22, x22, x26, 0x0000000000000000, 0x2002c003c0fc0901, 0xdf06fe01103f8003, x5, 3*XLEN/8, x18)

inst_4:// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b3_val == 4, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b0_val == -65, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b1_val == -2
// opcode: pdifu.b ; op1:x7; op2:x7; dest:x7; op1val:0x203fdf3fbff6067f;  op2val:0xf9fffcfc04f9febf
TEST_RR_OP(pdifu.b, x7, x7, x7, 0x0000000000000000, 0x203fdf3fbff6067f, 0xf9fffcfc04f9febf, x5, 4*XLEN/8, x18)

inst_5:// rs1==x20, rs2==x31, rd==x16, rs1_b0_val == 2, rs2_b1_val == -5, rs1_b5_val < 0 and rs2_b5_val > 0, rs2_b0_val == 1, rs2_b6_val == -3, rs2_b5_val == 16, rs2_b2_val == 2, rs2_b7_val == 1, rs1_b5_val == -9, rs1_b1_val == 127, rs1_b2_val == -33, rs1_b7_val == -3, rs1_b4_val == -17
// opcode: pdifu.b ; op1:x20; op2:x31; dest:x16; op1val:0xfd02f7ef03df7f02;  op2val:0x1fd10f61002fb01
TEST_RR_OP(pdifu.b, x16, x20, x31, 0x0000000000000000, 0xfd02f7ef03df7f02, 0x1fd10f61002fb01, x5, 5*XLEN/8, x18)

inst_6:// rs1==x31, rs2==x20, rd==x14, rs1_b0_val == 4, rs1_b1_val == -17, rs1_b6_val == -3, rs2_b3_val == 64, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b3_val == -33, rs1_b7_val == -1, rs2_b7_val == -128, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b4_val == 1, rs2_b2_val == -65, rs2_b4_val == -17
// opcode: pdifu.b ; op1:x31; op2:x20; dest:x14; op1val:0xfffdf701dfc0ef04;  op2val:0x8003f8ef40bf0607
TEST_RR_OP(pdifu.b, x14, x31, x20, 0x0000000000000000, 0xfffdf701dfc0ef04, 0x8003f8ef40bf0607, x5, 6*XLEN/8, x18)

inst_7:// rs1==x2, rs2==x9, rd==x27, rs1_b0_val == 8, rs1_b1_val == -5, rs1_b6_val == 32, rs2_b6_val == -2, rs1_b3_val == -3, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == 127, rs1_b7_val == 2, rs2_b4_val == 4, rs1_b2_val == -86, rs2_b3_val == 0, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: pdifu.b ; op1:x2; op2:x9; dest:x27; op1val:0x2203f07fdaafb08;  op2val:0xfafefa04007fc0c0
TEST_RR_OP(pdifu.b, x27, x2, x9, 0x0000000000000000, 0x2203f07fdaafb08, 0xfafefa04007fc0c0, x5, 7*XLEN/8, x18)

inst_8:// rs1==x11, rs2==x1, rd==x19, rs1_b0_val == 16, rs2_b1_val == -33, rs2_b5_val == -1, rs1_b6_val == rs2_b6_val, rs2_b0_val == -9, rs1_b5_val == -2, rs1_b1_val == 1, rs2_b4_val == 8, rs2_b6_val == 2
// opcode: pdifu.b ; op1:x11; op2:x1; dest:x19; op1val:0x302fec003030110;  op2val:0xc002ff0840f8dff7
TEST_RR_OP(pdifu.b, x19, x11, x1, 0x0000000000000000, 0x302fec003030110, 0xc002ff0840f8dff7, x5, 8*XLEN/8, x18)

inst_9:// rs1==x13, rs2==x12, rd==x9, rs1_b0_val == 32, rs2_b3_val == 8, rs2_b6_val == -86, rs1_b7_val == -128, rs1_b2_val == -2, rs1_b5_val == -65, rs1_b4_val == -9, rs1_b6_val == 4, rs1_b3_val == 1
// opcode: pdifu.b ; op1:x13; op2:x12; dest:x9; op1val:0x8004bff701fef820;  op2val:0x3faa03fc0809fef7
TEST_RR_OP(pdifu.b, x9, x13, x12, 0x0000000000000000, 0x8004bff701fef820, 0x3faa03fc0809fef7, x5, 9*XLEN/8, x18)

inst_10:// rs1==x4, rs2==x10, rd==x15, rs1_b0_val == 64, rs1_b5_val == 1, rs2_b2_val == -128, rs2_b3_val == -2, rs1_b4_val == 127, rs2_b7_val == -2, rs1_b7_val == -33, rs2_b1_val == 32
// opcode: pdifu.b ; op1:x4; op2:x10; dest:x15; op1val:0xdf10017f3f06fa40;  op2val:0xfef9fc08fe802007
TEST_RR_OP(pdifu.b, x15, x4, x10, 0x0000000000000000, 0xdf10017f3f06fa40, 0xfef9fc08fe802007, x5, 10*XLEN/8, x18)

inst_11:// rs1==x17, rs2==x11, rd==x4, rs1_b0_val == -2, rs2_b0_val == 16, rs2_b3_val == -5, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 64, rs2_b4_val == -3, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b7_val == -9, rs1_b4_val == -2, rs1_b3_val == -128
// opcode: pdifu.b ; op1:x17; op2:x11; dest:x4; op1val:0x40f606fe8040effe;  op2val:0xf70905fdfb7f8010
TEST_RR_OP(pdifu.b, x4, x17, x11, 0x0000000000000000, 0x40f606fe8040effe, 0xf70905fdfb7f8010, x5, 11*XLEN/8, x18)

inst_12:// rs1==x10, rs2==x6, rd==x28, rs1_b0_val == -3, rs2_b0_val == 0, rs2_b5_val == -128, rs1_b5_val == 2, rs2_b3_val == -9, rs1_b7_val == 1, rs1_b2_val == 8, rs2_b6_val == -128, rs1_b1_val == 4
// opcode: pdifu.b ; op1:x10; op2:x6; dest:x28; op1val:0x10202fd070804fd;  op2val:0xfa80807ff7092000
TEST_RR_OP(pdifu.b, x28, x10, x6, 0x0000000000000000, 0x10202fd070804fd, 0xfa80807ff7092000, x5, 12*XLEN/8, x18)

inst_13:// rs1==x3, rs2==x23, rd==x29, rs1_b0_val == -5, rs1_b4_val == -86, rs1_b5_val == -128, rs2_b1_val == -65, rs2_b3_val == -3, rs2_b2_val == -1, rs2_b6_val == -33, rs2_b5_val == -9, rs1_b3_val == 0, rs1_b6_val == 8
// opcode: pdifu.b ; op1:x3; op2:x23; dest:x29; op1val:0x30880aa000706fb;  op2val:0x9dff77ffdffbf09
TEST_RR_OP(pdifu.b, x29, x3, x23, 0x0000000000000000, 0x30880aa000706fb, 0x9dff77ffdffbf09, x5, 13*XLEN/8, x18)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:// rs1==x15, rs2==x16, rd==x21, rs1_b0_val == -9, rs2_b1_val == 85, rs2_b0_val == 32, rs2_b6_val == -65, rs1_b2_val == 32, rs2_b2_val == 64, rs1_b4_val == 16, rs1_b7_val == -9, rs2_b3_val == -128, rs1_b1_val == 64
// opcode: pdifu.b ; op1:x15; op2:x16; dest:x21; op1val:0xf710fe10f82040f7;  op2val:0x3fbff90380405520
TEST_RR_OP(pdifu.b, x21, x15, x16, 0x0000000000000000, 0xf710fe10f82040f7, 0x3fbff90380405520, x3, 0*XLEN/8, x7)

inst_15:// rs1==x14, rs2==x18, rd==x10, rs1_b0_val == -17, rs1_b3_val == 4, rs1_b1_val == -65, rs1_b2_val == 0, rs2_b3_val == -33, rs1_b4_val == -128, rs1_b2_val == rs2_b2_val, rs2_b5_val == -86, rs2_b7_val == -3, rs1_b6_val == 1, rs2_b4_val == -5
// opcode: pdifu.b ; op1:x14; op2:x18; dest:x10; op1val:0xdf01f7800400bfef;  op2val:0xfd03aafbdf00fa20
TEST_RR_OP(pdifu.b, x10, x14, x18, 0x0000000000000000, 0xdf01f7800400bfef, 0xfd03aafbdf00fa20, x3, 1*XLEN/8, x7)

inst_16:// rs1==x1, rs2==x25, rd==x2, rs1_b0_val == -33, rs1_b5_val == 127, rs2_b1_val == 4, rs2_b4_val == -86, rs2_b2_val == 16
// opcode: pdifu.b ; op1:x1; op2:x25; dest:x2; op1val:0x2807f07f6faefdf;  op2val:0xfe3ff8aac01004fa
TEST_RR_OP(pdifu.b, x2, x1, x25, 0x0000000000000000, 0x2807f07f6faefdf, 0xfe3ff8aac01004fa, x3, 2*XLEN/8, x7)

inst_17:// rs1==x24, rs2==x13, rd==x30, rs1_b0_val == -65, rs2_b3_val == 2, rs2_b4_val == -65, rs1_b2_val == -128, rs2_b2_val == 1, rs2_b0_val == -17
// opcode: pdifu.b ; op1:x24; op2:x13; dest:x30; op1val:0x2060905fd8007bf;  op2val:0xfdbfffbf0201faef
TEST_RR_OP(pdifu.b, x30, x24, x13, 0x0000000000000000, 0x2060905fd8007bf, 0xfdbfffbf0201faef, x3, 3*XLEN/8, x7)

inst_18:// rs1==x8, rs2==x19, rd==x25, rs1_b0_val == 85, rs1_b3_val == 127, rs2_b5_val == 4, rs1_b2_val == 127, rs2_b4_val == -1, rs2_b7_val == 4, rs2_b2_val == -5, rs1_b4_val == 64, rs2_b1_val == 16
// opcode: pdifu.b ; op1:x8; op2:x19; dest:x25; op1val:0x6083f407f7fef55;  op2val:0x40704ff09fb103f
TEST_RR_OP(pdifu.b, x25, x8, x19, 0x0000000000000000, 0x6083f407f7fef55, 0x40704ff09fb103f, x3, 4*XLEN/8, x7)

inst_19:// rs1==x6, rs2==x17, rd==x13, rs1_b0_val == -86, rs1_b4_val == 85, rs2_b5_val == 85
// opcode: pdifu.b ; op1:x6; op2:x17; dest:x13; op1val:0x5fc0755067f55aa;  op2val:0x553f55f907fa3f09
TEST_RR_OP(pdifu.b, x13, x6, x17, 0x0000000000000000, 0x5fc0755067f55aa, 0x553f55f907fa3f09, x3, 5*XLEN/8, x7)

inst_20:// rs1==x27, rs2==x5, rd==x24, rs1_b1_val == -128, rs1_b6_val == 0, rs1_b3_val == 16, rs1_b2_val == 2, rs1_b3_val == rs2_b3_val
// opcode: pdifu.b ; op1:x27; op2:x5; dest:x24; op1val:0x3f0006fc100280fb;  op2val:0x309f9071010fb09
TEST_RR_OP(pdifu.b, x24, x27, x5, 0x0000000000000000, 0x3f0006fc100280fb, 0x309f9071010fb09, x3, 6*XLEN/8, x7)

inst_21:// rs1==x18, rs2==x21, rd==x8, rs1_b1_val == -1, rs1_b4_val == -33, rs2_b1_val == -3, rs1_b6_val == -5, rs2_b0_val == 4, rs1_b7_val == 0, rs1_b2_val == -17
// opcode: pdifu.b ; op1:x18; op2:x21; dest:x8; op1val:0xfbf9dfc0efff80;  op2val:0xc0fef70900fffd04
TEST_RR_OP(pdifu.b, x8, x18, x21, 0x0000000000000000, 0xfbf9dfc0efff80, 0xc0fef70900fffd04, x3, 7*XLEN/8, x7)

inst_22:// rs1==x5, rs2==x4, rd==x26, rs1_b1_val == 0, rs1_b7_val == 127, rs1_b6_val == -1, rs2_b6_val == 64, rs2_b0_val == -2
// opcode: pdifu.b ; op1:x5; op2:x4; dest:x26; op1val:0x7fff06fc550900fa;  op2val:0x5540f607c00610fe
TEST_RR_OP(pdifu.b, x26, x5, x4, 0x0000000000000000, 0x7fff06fc550900fa, 0x5540f607c00610fe, x3, 8*XLEN/8, x7)

inst_23:// rs1==x19, rs2==x14, rd==x11, rs1_b1_val == 2, rs1_b6_val == -2, rs1_b5_val == -1, rs2_b0_val == 64, rs1_b4_val == 4, rs2_b2_val == -33
// opcode: pdifu.b ; op1:x19; op2:x14; dest:x11; op1val:0x3ffeff0409f60220;  op2val:0xf609aafc80df3f40
TEST_RR_OP(pdifu.b, x11, x19, x14, 0x0000000000000000, 0x3ffeff0409f60220, 0xf609aafc80df3f40, x3, 9*XLEN/8, x7)

inst_24:// rs1==x16, rs2==x29, rd==x18, rs1_b1_val == 8, rs2_b4_val == 2
// opcode: pdifu.b ; op1:x16; op2:x29; dest:x18; op1val:0xc0fdbf8055c008f7;  op2val:0xfa090402dffbfc01
TEST_RR_OP(pdifu.b, x18, x16, x29, 0x0000000000000000, 0xc0fdbf8055c008f7, 0xfa090402dffbfc01, x3, 10*XLEN/8, x7)

inst_25:// rs1==x12, rs2==x0, rd==x17, rs1_b1_val == 16, rs1_b3_val == -2, rs2_b3_val == -65, rs2_b2_val == 32, rs2_b0_val == 85, rs1_b2_val == -5, rs2_b4_val == -9
// opcode: pdifu.b ; op1:x12; op2:x0; dest:x17; op1val:0xf7200655fefb1009;  op2val:0xf9fff9f7bf203f55
TEST_RR_OP(pdifu.b, x17, x12, x0, 0x0000000000000000, 0xf7200655fefb1009, 0xf9fff9f7bf203f55, x3, 11*XLEN/8, x7)

inst_26:// rs1==x26, rs2==x2, rd==x1, rs1_b1_val == 32, rs1_b6_val == 85, rs2_b5_val == -17, rs1_b3_val == 32
// opcode: pdifu.b ; op1:x26; op2:x2; dest:x1; op1val:0xff5507042003203f;  op2val:0x33fefeffe06fd03
TEST_RR_OP(pdifu.b, x1, x26, x2, 0x0000000000000000, 0xff5507042003203f, 0x33fefeffe06fd03, x3, 12*XLEN/8, x7)

inst_27:// rs1==x21, rs2==x15, rd==x5, rs2_b4_val == -33, rs2_b2_val == 85, rs2_b7_val == 32, rs1_b2_val == -9
// opcode: pdifu.b ; op1:x21; op2:x15; dest:x5; op1val:0xfadf80fdf70806;  op2val:0x20f604df02550620
TEST_RR_OP(pdifu.b, x5, x21, x15, 0x0000000000000000, 0xfadf80fdf70806, 0x20f604df02550620, x3, 13*XLEN/8, x7)

inst_28:// rs1==x25, rs2==x28, rd==x0, rs2_b5_val == 0, rs2_b3_val == 127, rs2_b1_val == 2, rs1_b5_val == 8, rs2_b6_val == -17
// opcode: pdifu.b ; op1:x25; op2:x28; dest:x0; op1val:0x30208f9fe03f9f7;  op2val:0xf6ef00097fc00203
TEST_RR_OP(pdifu.b, x0, x25, x28, 0x0000000000000000, 0x30208f9fe03f9f7, 0xf6ef00097fc00203, x3, 14*XLEN/8, x7)

inst_29:// rs1==x29, rs2==x22, rd==x31, rs2_b5_val == 1, rs1_b6_val == -17
// opcode: pdifu.b ; op1:x29; op2:x22; dest:x31; op1val:0xfcefbfef203ff9f8;  op2val:0xf60601c002f909f9
TEST_RR_OP(pdifu.b, x31, x29, x22, 0x0000000000000000, 0xfcefbfef203ff9f8, 0xf60601c002f909f9, x3, 15*XLEN/8, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:// rs1==x23, rs2==x27, rd==x12, rs2_b5_val == 127, rs2_b7_val == 127
// opcode: pdifu.b ; op1:x23; op2:x27; dest:x12; op1val:0xfcf6f90908020110;  op2val:0x7faa7ff7023ff9f9
TEST_RR_OP(pdifu.b, x12, x23, x27, 0x0000000000000000, 0xfcf6f90908020110, 0x7faa7ff7023ff9f9, x1, 0*XLEN/8, x2)

inst_31:// rs1==x28, rs2==x24, rd==x23, rs2_b5_val == 2, rs2_b0_val == -3, rs1_b5_val == 64, rs2_b3_val == -86
// opcode: pdifu.b ; op1:x28; op2:x24; dest:x23; op1val:0x20034055f9fbefbf;  op2val:0x6df027faaf905fd
TEST_RR_OP(pdifu.b, x23, x28, x24, 0x0000000000000000, 0x20034055f9fbefbf, 0x6df027faaf905fd, x1, 1*XLEN/8, x2)

inst_32:// rs2_b5_val == 8, rs2_b4_val == 32, rs1_b5_val == rs2_b5_val, rs2_b3_val == -17, rs2_b6_val == 8
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfff808f905801020;  op2val:0xfc080820eff8fb03
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfff808f905801020, 0xfc080820eff8fb03, x1, 2*XLEN/8, x2)

inst_33:// rs2_b5_val == 32, rs1_b5_val == -5, rs1_b7_val == -5, rs1_b2_val == -3
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb01fb3ffafd5520;  op2val:0xfcfe2008bfbf027f
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfb01fb3ffafd5520, 0xfcfe2008bfbf027f, x1, 3*XLEN/8, x2)

inst_34:// rs2_b5_val == 64, rs1_b4_val == 32, rs2_b0_val == -1, rs1_b1_val == -33, rs2_b2_val == -86
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x09f7203f00dffc;  op2val:0x70340fc7faafdff
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x09f7203f00dffc, 0x70340fc7faafdff, x1, 4*XLEN/8, x2)

inst_35:// rs2_b5_val == -3, rs1_b3_val == -17
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3fef0309ef7fff3f;  op2val:0x509fdfff600c020
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x3fef0309ef7fff3f, 0x509fdfff600c020, x1, 5*XLEN/8, x2)

inst_36:// rs2_b5_val == -5, rs1_b3_val == -9, rs2_b2_val == 8, rs2_b7_val == 8, rs2_b4_val == 64, rs1_b7_val == -86
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xaafa06c0f7010010;  op2val:0x8dffb40ff080520
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xaafa06c0f7010010, 0x8dffb40ff080520, x1, 6*XLEN/8, x2)

inst_37:// rs2_b5_val == -33, rs1_b6_val == -33, rs1_b3_val == -5, rs2_b2_val == -2, rs1_b7_val == -2, rs2_b1_val == 8
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfedf10aafbfe20bf;  op2val:0xfcc0dfc0fdfe0806
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfedf10aafbfe20bf, 0xfcc0dfc0fdfe0806, x1, 7*XLEN/8, x2)

inst_38:// rs2_b5_val == -65, rs2_b0_val == -33
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x655f8f9030207f8;  op2val:0xf905bf0602ff02df
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x655f8f9030207f8, 0xf905bf0602ff02df, x1, 8*XLEN/8, x2)

inst_39:// rs2_b6_val == 0, rs1_b6_val == 64, rs2_b1_val == -17
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc4002df03203ff9;  op2val:0xf700f8fdfd10ef01
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfc4002df03203ff9, 0xf700f8fdfd10ef01, x1, 9*XLEN/8, x2)

inst_40:// rs2_b6_val == 1, rs1_b2_val == -65, rs1_b5_val == 0, rs2_b1_val == -86
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x7fa000910bf06ff;  op2val:0x50103c07ff7aafa
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x7fa000910bf06ff, 0x50103c07ff7aafa, x1, 10*XLEN/8, x2)

inst_41:// rs2_b6_val == 127, rs1_b4_val == -65, rs1_b2_val == 85
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x907c0bf7f550210;  op2val:0x87f08fb0620eff6
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x907c0bf7f550210, 0x87f08fb0620eff6, x1, 11*XLEN/8, x2)

inst_42:// rs2_b6_val == 4, rs1_b3_val == 64
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfe02df4002ff80;  op2val:0x504efbf7ff6f97f
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfe02df4002ff80, 0x504efbf7ff6f97f, x1, 12*XLEN/8, x2)

inst_43:// rs1_b1_val == -2, rs1_b1_val == rs2_b1_val, rs1_b4_val == 8
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa08fe08fb3ffe04;  op2val:0x305df0204fffe40
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfa08fe08fb3ffe04, 0x305df0204fffe40, x1, 13*XLEN/8, x2)

inst_44:// rs1_b1_val == -3, rs2_b7_val == -1, rs2_b6_val == -5
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x58001fcfb06fd10;  op2val:0xfffbff20fef9f601
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x58001fcfb06fd10, 0xfffbff20fef9f601, x1, 14*XLEN/8, x2)

inst_45:// rs1_b6_val == -9, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8f7fbbffdf63fef;  op2val:0x3f40f855f907f610
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xf8f7fbbffdf63fef, 0x3f40f855f907f610, x1, 15*XLEN/8, x2)

inst_46:// rs1_b6_val == -65, rs2_b0_val == 8, rs2_b2_val == 4, rs1_b5_val == -86, rs2_b1_val == 1, rs2_b7_val == -65, rs1_b7_val == 85
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x55bfaafaf6054020;  op2val:0xbf40f805df040108
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x55bfaafaf6054020, 0xbf40f805df040108, x1, 16*XLEN/8, x2)

inst_47:// rs1_b6_val == -86, rs1_b4_val == -1, rs2_b0_val == -5, rs2_b3_val == 1
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xffaa09fffe20f8c0;  op2val:0x5508f72001fcfcfb
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xffaa09fffe20f8c0, 0x5508f72001fcfcfb, x1, 17*XLEN/8, x2)

inst_48:// rs1_b7_val == 4, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x405aaffeffcf97f;  op2val:0xdff605ef02aaf901
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x405aaffeffcf97f, 0xdff605ef02aaf901, x1, 18*XLEN/8, x2)

inst_49:// rs1_b7_val == 16, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1055fcaaf7200740;  op2val:0xdf400004fe00ef04
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x1055fcaaf7200740, 0xdf400004fe00ef04, x1, 19*XLEN/8, x2)

inst_50:// rs1_b7_val == -17, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xefdf7ff90805dfef;  op2val:0xf7c040fc02c0c001
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xefdf7ff90805dfef, 0xf7c040fc02c0c001, x1, 20*XLEN/8, x2)

inst_51:// rs1_b7_val == -65, rs2_b4_val == -128, rs1_b5_val == 32
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf0720553ff920f8;  op2val:0xfdfbc08003068005
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xbf0720553ff920f8, 0xfdfbc08003068005, x1, 21*XLEN/8, x2)

inst_52:// rs2_b6_val == 16, rs1_b5_val == -3
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfdfdfd100805bffa;  op2val:0x6103f0103010955
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfdfdfd100805bffa, 0x6103f0103010955, x1, 22*XLEN/8, x2)

inst_53:// rs2_b0_val == -128, rs1_b4_val == -5, rs2_b7_val == -86
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xefc040fb3f0707fa;  op2val:0xaa061055fb40f880
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xefc040fb3f0707fa, 0xaa061055fb40f880, x1, 23*XLEN/8, x2)

inst_54:// rs2_b6_val == 32, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x205400605fdfedf;  op2val:0xf920dfffaac00707
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x205400605fdfedf, 0xf920dfffaac00707, x1, 24*XLEN/8, x2)

inst_55:// rs1_b1_val == -9, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xdfc000fb0609f702;  op2val:0x2007f9ef02fff907
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xdfc000fb0609f702, 0x2007f9ef02fff907, x1, 25*XLEN/8, x2)

inst_56:// rs2_b0_val == 2, rs1_b3_val == -1
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x40fadffbff7ffd80;  op2val:0x3aaeff705fa0802
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x40fadffbff7ffd80, 0x3aaeff705fa0802, x1, 26*XLEN/8, x2)

inst_57:// rs1_b1_val == -86, rs1_b2_val == 16, rs2_b4_val == 16
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x310f9f8fb10aafe;  op2val:0x3ffaf810f7fc403f
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x310f9f8fb10aafe, 0x3ffaf810f7fc403f, x1, 27*XLEN/8, x2)

inst_58:// rs1_b3_val == 2, rs1_b7_val == rs2_b7_val
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x50202010280f7fa;  op2val:0x5bffbf63f0107df
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x50202010280f7fa, 0x5bffbf63f0107df, x1, 28*XLEN/8, x2)

inst_59:// rs2_b1_val == -9, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x4003bf08fb07f903;  op2val:0xfc40f710f740f780
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x4003bf08fb07f903, 0xfc40f710f740f780, x1, 29*XLEN/8, x2)

inst_60:// rs1_b0_val == rs2_b0_val, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x6200180f640bf08;  op2val:0xff3ffec0fbc00908
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x6200180f640bf08, 0xff3ffec0fbc00908, x1, 30*XLEN/8, x2)

inst_61:// rs1_b3_val == -86, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9fafc7faafa55f9;  op2val:0x7ff82080aaf6fbbf
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xf9fafc7faafa55f9, 0x7ff82080aaf6fbbf, x1, 31*XLEN/8, x2)

inst_62:// rs1_b4_val == 0, rs2_b0_val == -86
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9050300feefc009;  op2val:0xc00806fdf7c0feaa
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xf9050300feefc009, 0xc00806fdf7c0feaa, x1, 32*XLEN/8, x2)

inst_63:// rs2_b2_val == -3, rs1_b4_val == 2
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1020df02eff6eff9;  op2val:0x3fbfcf8aafd02df
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x1020df02eff6eff9, 0x3fbfcf8aafd02df, x1, 33*XLEN/8, x2)

inst_64:// rs2_b2_val == -17, rs2_b6_val == 85, rs2_b7_val == -17
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1fb0504fb05ef04;  op2val:0xef55034020effaf9
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x1fb0504fb05ef04, 0xef55034020effaf9, x1, 34*XLEN/8, x2)

inst_65:// rs1_b4_val == rs2_b4_val, rs1_b5_val == 4, rs2_b3_val == 85
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfef904f6ff003ff7;  op2val:0x500fff655ff03fe
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfef904f6ff003ff7, 0x500fff655ff03fe, x1, 35*XLEN/8, x2)

inst_66:// rs1_b2_val == -1, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x023f2010ff55fb;  op2val:0xfaeffe7ffa090403
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x023f2010ff55fb, 0xfaeffe7ffa090403, x1, 36*XLEN/8, x2)

inst_67:// rs1_b2_val == 4, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x40510f8f70400df;  op2val:0x607f73f10fbfa02
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x40510f8f70400df, 0x607f73f10fbfa02, x1, 37*XLEN/8, x2)

inst_68:// rs2_b7_val == 0, rs2_b4_val == -2
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x7ffe05dff97ff609;  op2val:0xfa40fe05083f07
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x7ffe05dff97ff609, 0xfa40fe05083f07, x1, 38*XLEN/8, x2)

inst_69:// rs2_b4_val == 0, rs2_b7_val == -5
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa3ff61006c0fadf;  op2val:0xfb07c00000ef06df
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xaa3ff61006c0fadf, 0xfb07c00000ef06df, x1, 39*XLEN/8, x2)

inst_70:// rs1_b5_val == -17, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x09ef04f7551000;  op2val:0x2fff9dff901df55
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x09ef04f7551000, 0x2fff9dff901df55, x1, 40*XLEN/8, x2)

inst_71:// rs2_b7_val == 16, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x103f08fbff074000;  op2val:0x1001f9f9c0fd0600
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x103f08fbff074000, 0x1001f9f9c0fd0600, x1, 41*XLEN/8, x2)

inst_72:// rs2_b1_val == -1, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd06c0ff0007fd08;  op2val:0x1fa8004fc10ff05
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xfd06c0ff0007fd08, 0x1fa8004fc10ff05, x1, 42*XLEN/8, x2)

inst_73:// rs2_b7_val == 64, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x55fd20efc03fbfbf;  op2val:0x4007c0f755df02f6
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x55fd20efc03fbfbf, 0x4007c0f755df02f6, x1, 43*XLEN/8, x2)

inst_74:// rs2_b1_val == 127, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x2fb0602f6aadffd;  op2val:0xbfaaf71003057f80
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x2fb0602f6aadffd, 0xbfaaf71003057f80, x1, 44*XLEN/8, x2)

inst_75:// rs1_b6_val == 127, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xef7ffffd0104bf05;  op2val:0xffefff5500dff640
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xef7ffffd0104bf05, 0xffefff5500dff640, x1, 45*XLEN/8, x2)

inst_76:// rs1_b5_val == 85, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8ef554010ef0100;  op2val:0xff7f035506f980
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xf8ef554010ef0100, 0xff7f035506f980, x1, 46*XLEN/8, x2)

inst_77:// rs2_b1_val == 0, 
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf80080f6bff83f55;  op2val:0x80f803fc10040009
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0xf80080f6bff83f55, 0x80f803fc10040009, x1, 47*XLEN/8, x2)

inst_78:// rs1_b0_val == -1, rs1_b6_val == 16, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b4_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b0_val == 127, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b2_val == 1, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs2_b7_val == 2, rs1_b7_val == 8, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b2_val == -9, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val == -3, rs2_b3_val == -1
// opcode: pdifu.b ; op1:x30; op2:x29; dest:x31; op1val:0x810c0fd550107ff;  op2val:0x207fa55fff7f67f
TEST_RR_OP(pdifu.b, x31, x30, x29, 0x0000000000000000, 0x810c0fd550107ff, 0x207fa55fff7f67f, x1, 48*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 49*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
