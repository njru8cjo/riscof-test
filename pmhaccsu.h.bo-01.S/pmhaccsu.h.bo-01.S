
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhaccsu.h.bo instruction of the RISC-V RV64PZicsr extension for the pmhaccsu.h.bo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhaccsu.h.bo)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x14, rs2==x5, rd==x5, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -16385, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs1_h1_val != rs2_h1_val, rs2_h2_val == 1, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val != rs2_h3_val, rs2_h0_val == 128, rs1_h3_val == 16384
// opcode: pmhaccsu.h.bo ; op1:x14; op2:x5; dest:x5; op1val:0x4000fff6bfff8000;  op2val:0xfffc0001fffb0080
TEST_RR_OP(pmhaccsu.h.bo, x5, x14, x5, 0x0000000000000000, 0x4000fff6bfff8000, 0xfffc0001fffb0080, x1, 0*XLEN/8, x2)

inst_1:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x14, rs1_h0_val == -1, rs1_h3_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == rs2_h0_val, rs2_h3_val == 64, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == -2, rs1_h1_val == 16, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -513, rs2_h0_val == -1, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024
// opcode: pmhaccsu.h.bo ; op1:x17; op2:x17; dest:x14; op1val:0xfffd04000010ffff;  op2val:0x40fffefdffffff
TEST_RR_OP(pmhaccsu.h.bo, x14, x17, x17, 0x0000000000000000, 0xfffd04000010ffff, 0x40fffefdffffff, x1, 1*XLEN/8, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs1_h0_val == 0, rs2_h1_val == -3, rs1_h3_val == -2049, rs1_h2_val == -5, rs2_h3_val == 1
// opcode: pmhaccsu.h.bo ; op1:x8; op2:x8; dest:x8; op1val:0xf7fffffbfff90000;  op2val:0x010003fffdffff
TEST_RR_OP(pmhaccsu.h.bo, x8, x8, x8, 0x0000000000000000, 0xf7fffffbfff90000, 0x010003fffdffff, x1, 2*XLEN/8, x2)

inst_3:
// rs1 == rd != rs2, rs1==x7, rs2==x3, rd==x7, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -32768, rs2_h1_val == -129, rs1_h3_val == 2, rs2_h0_val == 2, rs2_h3_val == -8193
// opcode: pmhaccsu.h.bo ; op1:x7; op2:x3; dest:x7; op1val:0x02000380000001;  op2val:0xdffffff6ff7f0002
TEST_RR_OP(pmhaccsu.h.bo, x7, x7, x3, 0x0000000000000000, 0x02000380000001, 0xdffffff6ff7f0002, x1, 3*XLEN/8, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x4, rd==x12, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == 32767, rs2_h2_val == -2049, rs2_h3_val == 21845
// opcode: pmhaccsu.h.bo ; op1:x9; op2:x4; dest:x12; op1val:0xfffc7fff80007fff;  op2val:0x5555f7fffffafff8
TEST_RR_OP(pmhaccsu.h.bo, x12, x9, x4, 0x0000000000000000, 0xfffc7fff80007fff, 0x5555f7fffffafff8, x1, 4*XLEN/8, x2)

inst_5:
// rs1==x20, rs2==x28, rd==x6, rs1_h0_val == 2, rs2_h3_val == 4, rs1_h3_val == -65, rs1_h1_val == 1, rs2_h1_val == -17, rs2_h2_val == -4097, rs2_h0_val == 16
// opcode: pmhaccsu.h.bo ; op1:x20; op2:x28; dest:x6; op1val:0xffbf000900010002;  op2val:0x04efffffef0010
TEST_RR_OP(pmhaccsu.h.bo, x6, x20, x28, 0x0000000000000000, 0xffbf000900010002, 0x04efffffef0010, x1, 5*XLEN/8, x2)

inst_6:
// rs1==x0, rs2==x18, rd==x27, rs1_h0_val == 4, rs2_h1_val == 512, rs1_h1_val == -21846, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 1
// opcode: pmhaccsu.h.bo ; op1:x0; op2:x18; dest:x27; op1val:0x090400aaaa0004;  op2val:0x40000302000001
TEST_RR_OP(pmhaccsu.h.bo, x27, x0, x18, 0x0000000000000000, 0x090400aaaa0004, 0x40000302000001, x1, 6*XLEN/8, x2)

inst_7:
// rs1==x24, rs2==x15, rd==x31, rs1_h0_val == 8, rs1_h2_val == 4096, rs1_h3_val == 1, rs2_h0_val == -9, rs1_h1_val == -257
// opcode: pmhaccsu.h.bo ; op1:x24; op2:x15; dest:x31; op1val:0x011000feff0008;  op2val:0x063ffffffbfff7
TEST_RR_OP(pmhaccsu.h.bo, x31, x24, x15, 0x0000000000000000, 0x011000feff0008, 0x063ffffffbfff7, x1, 7*XLEN/8, x2)

inst_8:
// rs1==x18, rs2==x23, rd==x19, rs1_h0_val == 16, rs1_h1_val == -1, rs2_h2_val == 2048, rs1_h3_val == -513, rs2_h1_val == -33, rs2_h3_val == -17, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == -2, rs2_h0_val == 512
// opcode: pmhaccsu.h.bo ; op1:x18; op2:x23; dest:x19; op1val:0xfdfffffeffff0010;  op2val:0xffef0800ffdf0200
TEST_RR_OP(pmhaccsu.h.bo, x19, x18, x23, 0x0000000000000000, 0xfdfffffeffff0010, 0xffef0800ffdf0200, x1, 8*XLEN/8, x2)

inst_9:
// rs1==x10, rs2==x13, rd==x15, rs1_h0_val == 32, rs2_h3_val == 8, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == -2, rs1_h2_val == -3, rs1_h3_val == -2
// opcode: pmhaccsu.h.bo ; op1:x10; op2:x13; dest:x15; op1val:0xfffefffdfffe0020;  op2val:0x08fff900090009
TEST_RR_OP(pmhaccsu.h.bo, x15, x10, x13, 0x0000000000000000, 0xfffefffdfffe0020, 0x08fff900090009, x1, 9*XLEN/8, x2)

inst_10:
// rs1==x13, rs2==x16, rd==x18, rs1_h0_val == 64, rs2_h2_val == 256, rs2_h0_val == -2049, rs1_h3_val == 32, rs1_h2_val == 8192, rs1_h1_val == -65
// opcode: pmhaccsu.h.bo ; op1:x13; op2:x16; dest:x18; op1val:0x202000ffbf0040;  op2val:0xdfff0100fffbf7ff
TEST_RR_OP(pmhaccsu.h.bo, x18, x13, x16, 0x0000000000000000, 0x202000ffbf0040, 0xdfff0100fffbf7ff, x1, 10*XLEN/8, x2)

inst_11:
// rs1==x4, rs2==x10, rd==x11, rs1_h0_val == 128, rs2_h0_val == -17, rs1_h2_val == -32768, rs2_h3_val == -257, rs2_h2_val == 21845, rs2_h1_val == 128
// opcode: pmhaccsu.h.bo ; op1:x4; op2:x10; dest:x11; op1val:0x208000fffa0080;  op2val:0xfeff55550080ffef
TEST_RR_OP(pmhaccsu.h.bo, x11, x4, x10, 0x0000000000000000, 0x208000fffa0080, 0xfeff55550080ffef, x1, 11*XLEN/8, x2)

inst_12:
// rs1==x22, rs2==x12, rd==x4, rs1_h0_val == 256, rs1_h1_val == -513, rs2_h3_val == 1024, rs1_h3_val == -8193, rs1_h2_val == 4, rs2_h2_val == -513, rs2_h1_val == -16385, rs2_h0_val == 32
// opcode: pmhaccsu.h.bo ; op1:x22; op2:x12; dest:x4; op1val:0xdfff0004fdff0100;  op2val:0x400fdffbfff0020
TEST_RR_OP(pmhaccsu.h.bo, x4, x22, x12, 0x0000000000000000, 0xdfff0004fdff0100, 0x400fdffbfff0020, x1, 12*XLEN/8, x2)

inst_13:
// rs1==x28, rs2==x20, rd==x24, rs1_h0_val == 512, rs2_h2_val == 16, rs2_h3_val == -32768
// opcode: pmhaccsu.h.bo ; op1:x28; op2:x20; dest:x24; op1val:0xfff81000fff60200;  op2val:0x8000001000033fff
TEST_RR_OP(pmhaccsu.h.bo, x24, x28, x20, 0x0000000000000000, 0xfff81000fff60200, 0x8000001000033fff, x1, 13*XLEN/8, x2)

inst_14:
// rs1==x11, rs2==x14, rd==x29, rs1_h0_val == 1024, rs2_h3_val == -2049, rs2_h1_val == 0, rs1_h3_val == -21846
// opcode: pmhaccsu.h.bo ; op1:x11; op2:x14; dest:x29; op1val:0xaaaa0004feff0400;  op2val:0xf7ff000300000007
TEST_RR_OP(pmhaccsu.h.bo, x29, x11, x14, 0x0000000000000000, 0xaaaa0004feff0400, 0xf7ff000300000007, x1, 14*XLEN/8, x2)

inst_15:
// rs1==x25, rs2==x26, rd==x20, rs1_h0_val == 2048, rs1_h2_val == -65, rs1_h3_val == -9, rs2_h0_val == -2, rs2_h3_val == -2, rs2_h2_val == -1, rs1_h1_val == -33
// opcode: pmhaccsu.h.bo ; op1:x25; op2:x26; dest:x20; op1val:0xfff7ffbfffdf0800;  op2val:0xfffeffff0005fffe
TEST_RR_OP(pmhaccsu.h.bo, x20, x25, x26, 0x0000000000000000, 0xfff7ffbfffdf0800, 0xfffeffff0005fffe, x1, 15*XLEN/8, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_16:
// rs1==x27, rs2==x24, rd==x10, rs1_h0_val == 4096, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -129, rs2_h0_val == -33, rs2_h1_val == 16384, rs1_h1_val == rs2_h1_val, rs1_h1_val == 16384
// opcode: pmhaccsu.h.bo ; op1:x27; op2:x24; dest:x10; op1val:0xff7fc00040001000;  op2val:0xfffc00104000ffdf
TEST_RR_OP(pmhaccsu.h.bo, x10, x27, x24, 0x0000000000000000, 0xff7fc00040001000, 0xfffc00104000ffdf, x4, 0*XLEN/8, x8)

inst_17:
// rs1==x5, rs2==x29, rd==x30, rs1_h0_val == 8192, rs1_h1_val == -3, rs2_h0_val == -21846, rs2_h2_val == 1024
// opcode: pmhaccsu.h.bo ; op1:x5; op2:x29; dest:x30; op1val:0xff7ffff9fffd2000;  op2val:0xc0000400fffdaaaa
TEST_RR_OP(pmhaccsu.h.bo, x30, x5, x29, 0x0000000000000000, 0xff7ffff9fffd2000, 0xc0000400fffdaaaa, x4, 1*XLEN/8, x8)

inst_18:
// rs1==x21, rs2==x30, rd==x0, rs1_h0_val == 16384, rs2_h1_val == 32767, rs2_h0_val == -3
// opcode: pmhaccsu.h.bo ; op1:x21; op2:x30; dest:x0; op1val:0xffbffff800064000;  op2val:0xfffec0007ffffffd
TEST_RR_OP(pmhaccsu.h.bo, x0, x21, x30, 0x0000000000000000, 0xffbffff800064000, 0xfffec0007ffffffd, x4, 2*XLEN/8, x8)

inst_19:
// rs1==x2, rs2==x0, rd==x22, rs1_h0_val == -2, rs1_h2_val == 32, rs2_h0_val == -257, rs1_h1_val == -129
// opcode: pmhaccsu.h.bo ; op1:x2; op2:x0; dest:x22; op1val:0xf7ff0020ff7ffffe;  op2val:0x80000007fffdfeff
TEST_RR_OP(pmhaccsu.h.bo, x22, x2, x0, 0x0000000000000000, 0xf7ff0020ff7ffffe, 0x80000007fffdfeff, x4, 3*XLEN/8, x8)

inst_20:
// rs1==x29, rs2==x21, rd==x2, rs1_h0_val == -3, rs2_h2_val == 32767, rs2_h0_val == 32767, rs2_h1_val == -65, rs1_h2_val == 8
// opcode: pmhaccsu.h.bo ; op1:x29; op2:x21; dest:x2; op1val:0x0700083ffffffd;  op2val:0x097fffffbf7fff
TEST_RR_OP(pmhaccsu.h.bo, x2, x29, x21, 0x0000000000000000, 0x0700083ffffffd, 0x097fffffbf7fff, x4, 4*XLEN/8, x8)

inst_21:
// rs1==x1, rs2==x22, rd==x13, rs1_h0_val == -5, rs2_h3_val == -3, rs1_h3_val == 4096, rs2_h2_val == -5, rs1_h2_val == -9
// opcode: pmhaccsu.h.bo ; op1:x1; op2:x22; dest:x13; op1val:0x1000fff78000fffb;  op2val:0xfffdfffb00060003
TEST_RR_OP(pmhaccsu.h.bo, x13, x1, x22, 0x0000000000000000, 0x1000fff78000fffb, 0xfffdfffb00060003, x4, 5*XLEN/8, x8)

inst_22:
// rs1==x30, rs2==x7, rd==x23, rs1_h0_val == -9, rs1_h2_val == 16, rs2_h0_val == 0, rs2_h1_val == 21845, rs1_h3_val == 256, rs2_h3_val == -1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x7; dest:x23; op1val:0x10000100003fff7;  op2val:0xffff040055550000
TEST_RR_OP(pmhaccsu.h.bo, x23, x30, x7, 0x0000000000000000, 0x10000100003fff7, 0xffff040055550000, x4, 6*XLEN/8, x8)

inst_23:
// rs1==x31, rs2==x19, rd==x3, rs1_h0_val == -17, rs1_h2_val == -16385, rs2_h0_val == 4
// opcode: pmhaccsu.h.bo ; op1:x31; op2:x19; dest:x3; op1val:0xaaaabffffffaffef;  op2val:0x07fff8ff7f0004
TEST_RR_OP(pmhaccsu.h.bo, x3, x31, x19, 0x0000000000000000, 0xaaaabffffffaffef, 0x07fff8ff7f0004, x4, 7*XLEN/8, x8)

inst_24:
// rs1==x6, rs2==x25, rd==x21, rs1_h0_val == -33, rs2_h2_val == 0, rs2_h3_val == 8192, rs2_h1_val == 32, rs1_h1_val == 0
// opcode: pmhaccsu.h.bo ; op1:x6; op2:x25; dest:x21; op1val:0xfdfffffd0000ffdf;  op2val:0x200000000020fffa
TEST_RR_OP(pmhaccsu.h.bo, x21, x6, x25, 0x0000000000000000, 0xfdfffffd0000ffdf, 0x200000000020fffa, x4, 8*XLEN/8, x8)

inst_25:
// rs1==x16, rs2==x27, rd==x28, rs1_h0_val == -65, rs1_h2_val == -257, rs1_h3_val == 0
// opcode: pmhaccsu.h.bo ; op1:x16; op2:x27; dest:x28; op1val:0x00fefffeffffbf;  op2val:0x555501000009ffef
TEST_RR_OP(pmhaccsu.h.bo, x28, x16, x27, 0x0000000000000000, 0x00fefffeffffbf, 0x555501000009ffef, x4, 9*XLEN/8, x8)

inst_26:
// rs1==x15, rs2==x6, rd==x1, rs1_h0_val == -129, rs2_h1_val == 4
// opcode: pmhaccsu.h.bo ; op1:x15; op2:x6; dest:x1; op1val:0xc000fffd0010ff7f;  op2val:0xfff9000900040004
TEST_RR_OP(pmhaccsu.h.bo, x1, x15, x6, 0x0000000000000000, 0xc000fffd0010ff7f, 0xfff9000900040004, x4, 10*XLEN/8, x8)

inst_27:
// rs1==x26, rs2==x2, rd==x25, rs1_h0_val == -257, rs1_h1_val == 4096, rs1_h3_val == rs2_h3_val
// opcode: pmhaccsu.h.bo ; op1:x26; op2:x2; dest:x25; op1val:0xfff610001000feff;  op2val:0xfff60007fffc0002
TEST_RR_OP(pmhaccsu.h.bo, x25, x26, x2, 0x0000000000000000, 0xfff610001000feff, 0xfff60007fffc0002, x4, 11*XLEN/8, x8)

inst_28:
// rs1==x3, rs2==x9, rd==x16, rs1_h0_val == -513, rs2_h0_val == -65, rs1_h1_val == -2049, rs2_h1_val == 64
// opcode: pmhaccsu.h.bo ; op1:x3; op2:x9; dest:x16; op1val:0xaaaa0020f7fffdff;  op2val:0x04fdff0040ffbf
TEST_RR_OP(pmhaccsu.h.bo, x16, x3, x9, 0x0000000000000000, 0xaaaa0020f7fffdff, 0x04fdff0040ffbf, x4, 12*XLEN/8, x8)

inst_29:
// rs1==x19, rs2==x1, rd==x26, rs1_h0_val == -1025, rs1_h2_val == 0, rs2_h3_val == 2048
// opcode: pmhaccsu.h.bo ; op1:x19; op2:x1; dest:x26; op1val:0xfffd0000bffffbff;  op2val:0x800fffefdfffffc
TEST_RR_OP(pmhaccsu.h.bo, x26, x19, x1, 0x0000000000000000, 0xfffd0000bffffbff, 0x800fffefdfffffc, x4, 13*XLEN/8, x8)

inst_30:
// rs1==x23, rs2==x31, rd==x17, rs1_h0_val == -2049, rs1_h2_val == -129, rs1_h1_val == 8, rs1_h3_val == -4097
// opcode: pmhaccsu.h.bo ; op1:x23; op2:x31; dest:x17; op1val:0xefffff7f0008f7ff;  op2val:0x09fdff00000004
TEST_RR_OP(pmhaccsu.h.bo, x17, x23, x31, 0x0000000000000000, 0xefffff7f0008f7ff, 0x09fdff00000004, x4, 14*XLEN/8, x8)

inst_31:
// rs1==x12, rs2==x11, rd==x9, rs1_h0_val == -4097, rs2_h0_val == -16385, rs2_h2_val == -129, rs2_h3_val == -4097, rs1_h3_val == 21845
// opcode: pmhaccsu.h.bo ; op1:x12; op2:x11; dest:x9; op1val:0x55558000feffefff;  op2val:0xefffff7ffffcbfff
TEST_RR_OP(pmhaccsu.h.bo, x9, x12, x11, 0x0000000000000000, 0x55558000feffefff, 0xefffff7ffffcbfff, x4, 15*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:
// rs1_h0_val == -8193, rs2_h2_val == -8193
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff10000007dfff;  op2val:0xefffdffffffa0200
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xdfff10000007dfff, 0xefffdffffffa0200, x1, 0*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs2_h2_val == -16385
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x09c0000009bfff;  op2val:0x8000bfff0003ffef
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x09c0000009bfff, 0x8000bfff0003ffef, x1, 1*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs2_h1_val == 2048, rs1_h3_val == -1, rs1_h2_val == -17
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00105555;  op2val:0xffffefff08000002
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xffffffef00105555, 0xffffefff08000002, x1, 2*XLEN/8, x2)

inst_35:
// rs1_h0_val == -21846, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00200006aaaa;  op2val:0xfffa0001ffbf0010
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd00200006aaaa, 0xfffa0001ffbf0010, x1, 3*XLEN/8, x2)

inst_36:
// rs2_h3_val == 32767, rs2_h0_val == -32768
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff7c0000003;  op2val:0x7fffbfff02008000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xdffffff7c0000003, 0x7fffbfff02008000, x1, 4*XLEN/8, x2)

inst_37:
// rs2_h3_val == 2, rs2_h1_val == -257
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0008fff9ff7f;  op2val:0x025555feffc000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffc0008fff9ff7f, 0x025555feffc000, x1, 5*XLEN/8, x2)

inst_38:
// rs2_h3_val == 16, rs1_h2_val == -8193, rs1_h1_val == 64
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x100dfff00400010;  op2val:0x1000090080ffef
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x100dfff00400010, 0x1000090080ffef, x1, 6*XLEN/8, x2)

inst_39:
// rs2_h3_val == 32, rs1_h3_val == 32767
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbffffefffb;  op2val:0x2000037fff0007
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fffffbffffefffb, 0x2000037fff0007, x1, 7*XLEN/8, x2)

inst_40:
// rs2_h3_val == 128, rs1_h2_val == 128, rs1_h1_val == 2048, rs2_h0_val == -5
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x555500800800fffb;  op2val:0x8000090080fffb
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x555500800800fffb, 0x8000090080fffb, x1, 8*XLEN/8, x2)

inst_41:
// rs2_h3_val == 256, rs1_h1_val == 128
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x00ffbf00800010;  op2val:0x100fffefffbffff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x00ffbf00800010, 0x100fffefffbffff, x1, 9*XLEN/8, x2)

inst_42:
// rs2_h3_val == 512, rs2_h2_val == -3, rs1_h2_val == 512, rs2_h1_val == -1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x060200fffcfffa;  op2val:0x200fffdffff0002
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x060200fffcfffa, 0x200fffdffff0002, x1, 10*XLEN/8, x2)

inst_43:
// rs2_h3_val == 4096, rs2_h1_val == 2, rs1_h1_val == 4, rs1_h3_val == 8
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x08fff600041000;  op2val:0x1000fff900020006
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x08fff600041000, 0x1000fff900020006, x1, 11*XLEN/8, x2)

inst_44:
// rs2_h3_val == 16384, rs2_h0_val == -1025
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd0001fbff;  op2val:0x4000fff9fffffbff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffffffd0001fbff, 0x4000fff9fffffbff, x1, 12*XLEN/8, x2)

inst_45:
// rs2_h3_val == -5, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0502003fff3fff;  op2val:0xfffb0007fffb0000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x0502003fff3fff, 0xfffb0007fffb0000, x1, 13*XLEN/8, x2)

inst_46:
// rs2_h3_val == -9, rs1_h2_val == rs2_h2_val
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000feff0020;  op2val:0xfff70000feff0005
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xc0000000feff0020, 0xfff70000feff0005, x1, 14*XLEN/8, x2)

inst_47:
// rs2_h3_val == -33, rs2_h2_val == -33, rs1_h3_val == -16385
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xbfff80000007fffb;  op2val:0xffdfffdffffc7fff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xbfff80000007fffb, 0xffdfffdffffc7fff, x1, 15*XLEN/8, x2)

inst_48:
// rs2_h3_val == -65, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000005fff6efff;  op2val:0xffbff7ffc000feff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xc0000005fff6efff, 0xffbff7ffc000feff, x1, 16*XLEN/8, x2)

inst_49:
// rs2_h3_val == -129, rs2_h0_val == 21845, rs2_h2_val == 128, rs1_h3_val == -32768
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x80000007ff7f0080;  op2val:0xff7f008000075555
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x80000007ff7f0080, 0xff7f008000075555, x1, 17*XLEN/8, x2)

inst_50:
// rs2_h3_val == -513, rs1_h3_val == -5, rs2_h2_val == 2, rs2_h1_val == -2
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfeffff7ffff9;  op2val:0xfdff0002fffefffd
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffbfeffff7ffff9, 0xfdff0002fffefffd, x1, 18*XLEN/8, x2)

inst_51:
// rs2_h3_val == -1025, rs2_h2_val == -32768
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10000094000ffef;  op2val:0xfbff800000060006
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10000094000ffef, 0xfbff800000060006, x1, 19*XLEN/8, x2)

inst_52:
// rs2_h3_val == -16385, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefff0006ffdf0200;  op2val:0xbfff000200200010
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xefff0006ffdf0200, 0xbfff000200200010, x1, 20*XLEN/8, x2)

inst_53:
// rs2_h3_val == -21846, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x08fff6fffaff7f;  op2val:0xaaaaffff00070007
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x08fff6fffaff7f, 0xaaaaffff00070007, x1, 21*XLEN/8, x2)

inst_54:
// rs1_h1_val == 32767, rs2_h1_val == -2049, rs1_h3_val == 128
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x80bfff7ffffff7;  op2val:0x800100f7ff0005
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x80bfff7ffffff7, 0x800100f7ff0005, x1, 22*XLEN/8, x2)

inst_55:
// rs1_h1_val == 2, rs2_h1_val == -4097, rs1_h3_val == 8192
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffa00020004;  op2val:0xfdffefffeffffff7
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x2000fffa00020004, 0xfdffefffeffffff7, x1, 23*XLEN/8, x2)

inst_56:
// rs1_h1_val == 32, rs2_h1_val == -1025, rs2_h0_val == 16384, rs2_h2_val == -21846
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaff7f0020fffc;  op2val:0xfffcaaaafbff4000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xaaaaff7f0020fffc, 0xfffcaaaafbff4000, x1, 24*XLEN/8, x2)

inst_57:
// rs1_h1_val == 256, rs2_h3_val == 0, rs2_h2_val == 8
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x08feff0100fff9;  op2val:0x0000080005fffa
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x08feff0100fff9, 0x0000080005fffa, x1, 25*XLEN/8, x2)

inst_58:
// rs1_h1_val == 512, rs2_h1_val == 256, rs1_h3_val == 1024, rs1_h2_val == -1025, rs2_h0_val == 64
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x400fbff0200ffef;  op2val:0xff7ffff801000040
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x400fbff0200ffef, 0xff7ffff801000040, x1, 26*XLEN/8, x2)

inst_59:
// rs1_h1_val == 1024, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x400c0000400feff;  op2val:0xf7fffffe02000007
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x400c0000400feff, 0xf7fffffe02000007, x1, 27*XLEN/8, x2)

inst_60:
// rs1_h3_val == -17, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffef8000ffdffffa;  op2val:0xfdfffffb0005fbff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xffef8000ffdffffa, 0xfdfffffb0005fbff, x1, 28*XLEN/8, x2)

inst_61:
// rs1_h3_val == -33, rs1_h2_val == -4097
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffdfefff40000020;  op2val:0xfbff7fff0004aaaa
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xffdfefff40000020, 0xfbff7fff0004aaaa, x1, 29*XLEN/8, x2)

inst_62:
// rs1_h3_val == -257, rs2_h2_val == 4
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00080040fffd;  op2val:0x090004fdff0005
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfeff00080040fffd, 0x090004fdff0005, x1, 30*XLEN/8, x2)

inst_63:
// rs1_h3_val == -1025, rs2_h0_val == -129, rs2_h2_val == -257, rs2_h1_val == 1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0080aaaafff8;  op2val:0xfffffeff0001ff7f
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbff0080aaaafff8, 0xfffffeff0001ff7f, x1, 31*XLEN/8, x2)

inst_64:
// rs2_h0_val == 8, rs1_h2_val == -1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x100ffff10007fff;  op2val:0xfbffaaaa00400008
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x100ffff10007fff, 0xfbffaaaa00400008, x1, 32*XLEN/8, x2)

inst_65:
// rs2_h0_val == 256, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffc02000040;  op2val:0x01000700000100
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000fffc02000040, 0x01000700000100, x1, 33*XLEN/8, x2)

inst_66:
// rs2_h0_val == 1024, rs1_h2_val == 1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x20000001fffffffb;  op2val:0xfffe000655550400
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x20000001fffffffb, 0xfffe000655550400, x1, 34*XLEN/8, x2)

inst_67:
// rs2_h0_val == 2048, rs1_h2_val == 16384
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x80400004000006;  op2val:0x400000000800800
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x80400004000006, 0x400000000800800, x1, 35*XLEN/8, x2)

inst_68:
// rs2_h0_val == 4096, rs2_h2_val == 8192
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x09fffb02007fff;  op2val:0xf7ff2000feff1000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x09fffb02007fff, 0xf7ff2000feff1000, x1, 36*XLEN/8, x2)

inst_69:
// rs2_h0_val == 8192, rs2_h2_val == 4096
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x08fffbc0000800;  op2val:0xaaaa100000402000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x08fffbc0000800, 0xaaaa100000402000, x1, 37*XLEN/8, x2)

inst_70:
// rs2_h0_val == -513, rs1_h2_val == -513
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffdff1000fff6;  op2val:0x100ffdffff6fdff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xeffffdff1000fff6, 0x100ffdffff6fdff, x1, 38*XLEN/8, x2)

inst_71:
// rs2_h0_val == -4097, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc000bfffffef;  op2val:0xfffe7fffc000efff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffbc000bfffffef, 0xfffe7fffc000efff, x1, 39*XLEN/8, x2)

inst_72:
// rs2_h0_val == -8193, rs2_h2_val == 512
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x00fdfffffd4000;  op2val:0x3fff0200fffedfff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x00fdfffffd4000, 0x3fff0200fffedfff, x1, 40*XLEN/8, x2)

inst_73:
// rs2_h1_val == -32768, rs1_h2_val == -21846
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeaaaabfffff7f;  op2val:0xdfffffdf8000ffbf
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffeaaaabfffff7f, 0xdfffffdf8000ffbf, x1, 41*XLEN/8, x2)

inst_74:
// rs1_h1_val == 8192, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff620000009;  op2val:0x200000080001fffc
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7ffffff620000009, 0x200000080001fffc, x1, 42*XLEN/8, x2)

inst_75:
// rs1_h1_val == -5, rs2_h2_val == -17
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x20c000fffb3fff;  op2val:0xaaaaffef00041000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x20c000fffb3fff, 0xaaaaffef00041000, x1, 43*XLEN/8, x2)

inst_76:
// rs1_h1_val == -9, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0008fff7dfff;  op2val:0x01fffe0100ffbf
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfdff0008fff7dfff, 0x01fffe0100ffbf, x1, 44*XLEN/8, x2)

inst_77:
// rs1_h1_val == -1025, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffbffbfffffc;  op2val:0xffbfffef00030000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xc000ffbffbfffffc, 0xffbfffef00030000, x1, 45*XLEN/8, x2)

inst_78:
// rs2_h1_val == 1024, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffd0400dfff;  op2val:0x4000010400fff8
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xeffffffd0400dfff, 0x4000010400fff8, x1, 46*XLEN/8, x2)

inst_79:
// rs1_h1_val == -4097, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x070200efff8000;  op2val:0x04fffd00010003
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x070200efff8000, 0x04fffd00010003, x1, 47*XLEN/8, x2)

inst_80:
// rs1_h1_val == -8193, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffcdfffff7f;  op2val:0x40c00000025555
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x4000fffcdfffff7f, 0x40c00000025555, x1, 48*XLEN/8, x2)

inst_81:
// rs2_h1_val == 4096, rs1_h2_val == 256
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100ffdf0009;  op2val:0xfff9fff810000005
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd0100ffdf0009, 0xfff9fff810000005, x1, 49*XLEN/8, x2)

inst_82:
// rs2_h1_val == 8192, rs1_h2_val == -33, rs1_h3_val == 512
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdf0001fff8;  op2val:0xfff800062000ff7f
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x200ffdf0001fff8, 0xfff800062000ff7f, x1, 50*XLEN/8, x2)

inst_83:
// rs1_h1_val == 21845, rs2_h2_val == 16384
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffa5555ff7f;  op2val:0x014000fffb8000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xf7fffffa5555ff7f, 0x014000fffb8000, x1, 51*XLEN/8, x2)

inst_84:
// rs2_h1_val == -9, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffc0000009fffe;  op2val:0x8000010fff7c000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fffc0000009fffe, 0x8000010fff7c000, x1, 52*XLEN/8, x2)

inst_85:
// rs1_h2_val == 2, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefff00023fff0006;  op2val:0xffef0001fbff0000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xefff00023fff0006, 0xffef0001fbff0000, x1, 53*XLEN/8, x2)

inst_86:
// rs1_h2_val == 64, rs1_h3_val == 4
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x04004080002000;  op2val:0x09555500018000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x04004080002000, 0x09555500018000, x1, 54*XLEN/8, x2)

inst_87:
// rs2_h1_val == -8193, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10000400dfff0009;  op2val:0x4000010dffffbff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10000400dfff0009, 0x4000010dffffbff, x1, 55*XLEN/8, x2)

inst_88:
// rs2_h2_val == 32, rs1_h3_val == 64
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x404000ffbffff7;  op2val:0x1000020fff80001
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x404000ffbffff7, 0x1000020fff80001, x1, 56*XLEN/8, x2)

inst_89:
// rs2_h2_val == 64, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x030005bffffeff;  op2val:0xbfff004000020400
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x030005bffffeff, 0xbfff004000020400, x1, 57*XLEN/8, x2)

inst_90:
// rs1_h2_val == -2049, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff0080bfff;  op2val:0xffbff7ffffbfffff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffff7ff0080bfff, 0xffbff7ffffbfffff, x1, 58*XLEN/8, x2)

inst_91:
// rs1_h2_val == 21845, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff85555dfff0200;  op2val:0xfffc0004fffafffa
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff85555dfff0200, 0xfffc0004fffafffa, x1, 59*XLEN/8, x2)

inst_92:
// rs1_h1_val == -17, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x03ffdfffeffffe;  op2val:0x1000efffffff0080
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x03ffdfffeffffe, 0x1000efffffff0080, x1, 60*XLEN/8, x2)

inst_93:
// rs1_h3_val == 2048, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800000440000006;  op2val:0xfff87fff00020000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x800000440000006, 0xfff87fff00020000, x1, 61*XLEN/8, x2)

inst_94:
// rs2_h2_val == -9, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff98000fff8;  op2val:0xff7ffff700041000
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff8fff98000fff8, 0xff7ffff700041000, x1, 62*XLEN/8, x2)

inst_95:
// rs2_h2_val == -65, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x55550007bffffbff;  op2val:0x10ffbf00207fff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x55550007bffffbff, 0x10ffbf00207fff, x1, 63*XLEN/8, x2)

inst_96:
// rs1_h3_val == 16, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10fbfffff9bfff;  op2val:0x09fff6fffefffa
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10fbfffff9bfff, 0x09fff6fffefffa, x1, 64*XLEN/8, x2)

inst_97:
// rs2_h2_val == -1025, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffbf0005fbff;  op2val:0xfffafbfffffd0008
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xefffffbf0005fbff, 0xfffafbfffffd0008, x1, 65*XLEN/8, x2)

inst_98:
// rs2_h1_val == -21846, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff00405555;  op2val:0x03fff7aaaaf7ff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x4000dfff00405555, 0x03fff7aaaaf7ff, x1, 66*XLEN/8, x2)

inst_99:
// rs2_h1_val == 8, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x5555f7ff0400efff;  op2val:0xfff6000400080100
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x5555f7ff0400efff, 0xfff6000400080100, x1, 67*XLEN/8, x2)

inst_100:
// rs2_h1_val == 16, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff0800fffb;  op2val:0x1000040000100005
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbffffff0800fffb, 0x1000040000100005, x1, 68*XLEN/8, x2)

inst_101:
// rs1_h2_val == 2048, 
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x010800ffdffffc;  op2val:0x100ffeffffbfff6
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x010800ffdffffc, 0x100ffeffffbfff6, x1, 69*XLEN/8, x2)

inst_102:
// rs1_h0_val == -1, rs1_h3_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == rs2_h0_val, rs2_h3_val == 64, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == -2, rs1_h1_val == 16, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -513, rs2_h0_val == -1, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd04000010ffff;  op2val:0x40fffefdffffff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd04000010ffff, 0x40fffefdffffff, x1, 70*XLEN/8, x2)

inst_103:
// rs1_h0_val == 0, rs2_h1_val == -3, rs1_h3_val == -2049, rs1_h2_val == -5, rs2_h3_val == 1
// opcode: pmhaccsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffbfff90000;  op2val:0x010003fffdffff
TEST_RR_OP(pmhaccsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xf7fffffbfff90000, 0x010003fffdffff, x1, 71*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 72*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
