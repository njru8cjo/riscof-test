
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulhsu.h.bo instruction of the RISC-V RV64PZicsr extension for the pmulhsu.h.bo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulhsu.h.bo)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs2 == rd != rs1, rs1==x27, rs2==x22, rd==x22, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -2049, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 16, rs2_h0_val == -32768, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -65, rs2_h2_val == -2049, rs1_h3_val != rs2_h3_val
// opcode: pmulhsu.h.bo ; op1:x27; op2:x22; dest:x22; op1val:0xf7ff001000098000;  op2val:0xffbff7ff00058000
TEST_RR_OP(pmulhsu.h.bo, x22, x27, x22, 0x0000000000000000, 0xf7ff001000098000, 0xffbff7ff00058000, x5, 0*XLEN/8, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x23, rs1_h0_val == -1, rs1_h3_val == -9, rs2_h2_val == -16385, rs1_h1_val == -16385, rs1_h0_val != rs2_h0_val, rs2_h3_val == 256, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 8192, rs2_h1_val == 32
// opcode: pmulhsu.h.bo ; op1:x28; op2:x28; dest:x23; op1val:0xfff72000bfffffff;  op2val:0x100bfff0020fffc
TEST_RR_OP(pmulhsu.h.bo, x23, x28, x28, 0x0000000000000000, 0xfff72000bfffffff, 0x100bfff0020fffc, x5, 1*XLEN/8, x8)

inst_2:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_h0_val == 0, rs1_h3_val == -5, rs2_h3_val == 16, rs1_h2_val == -4097, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h2_val == -5, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 32767
// opcode: pmulhsu.h.bo ; op1:x31; op2:x31; dest:x31; op1val:0xfffbefff00200000;  op2val:0x10fffbfff67fff
TEST_RR_OP(pmulhsu.h.bo, x31, x31, x31, 0x0000000000000000, 0xfffbefff00200000, 0x10fffbfff67fff, x5, 2*XLEN/8, x8)

inst_3:
// rs1 == rd != rs2, rs1==x17, rs2==x26, rd==x17, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 16384, rs2_h3_val == -16385, rs1_h1_val == 0
// opcode: pmulhsu.h.bo ; op1:x17; op2:x26; dest:x17; op1val:0xfff7c00000000001;  op2val:0xbffff7fffff94000
TEST_RR_OP(pmulhsu.h.bo, x17, x17, x26, 0x0000000000000000, 0xfff7c00000000001, 0xbffff7fffff94000, x5, 3*XLEN/8, x8)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x1, rd==x18, rs1_h0_val == 32767, rs2_h3_val == 64, rs1_h3_val == -1, rs1_h1_val == 64, rs2_h2_val == -8193, rs1_h2_val == -17, rs2_h0_val == 2048
// opcode: pmulhsu.h.bo ; op1:x9; op2:x1; dest:x18; op1val:0xffffffef00407fff;  op2val:0x40dfff00050800
TEST_RR_OP(pmulhsu.h.bo, x18, x9, x1, 0x0000000000000000, 0xffffffef00407fff, 0x40dfff00050800, x5, 4*XLEN/8, x8)

inst_5:
// rs1==x7, rs2==x4, rd==x30, rs1_h0_val == 2, rs1_h2_val == -513, rs1_h3_val == -513, rs2_h0_val == 16, rs2_h1_val == 16, rs2_h3_val == 21845
// opcode: pmulhsu.h.bo ; op1:x7; op2:x4; dest:x30; op1val:0xfdfffdff00400002;  op2val:0x5555fffb00100010
TEST_RR_OP(pmulhsu.h.bo, x30, x7, x4, 0x0000000000000000, 0xfdfffdff00400002, 0x5555fffb00100010, x5, 5*XLEN/8, x8)

inst_6:
// rs1==x3, rs2==x13, rd==x1, rs1_h0_val == 4, rs1_h1_val == -3, rs1_h2_val == -8193, rs1_h3_val == -65, rs1_h2_val < 0 and rs2_h2_val > 0
// opcode: pmulhsu.h.bo ; op1:x3; op2:x13; dest:x1; op1val:0xffbfdffffffd0004;  op2val:0x10000300100009
TEST_RR_OP(pmulhsu.h.bo, x1, x3, x13, 0x0000000000000000, 0xffbfdffffffd0004, 0x10000300100009, x5, 6*XLEN/8, x8)

inst_7:
// rs1==x21, rs2==x6, rd==x16, rs1_h0_val == 8, rs1_h2_val == -1, rs2_h2_val == -129, rs1_h3_val == 16, rs1_h3_val > 0 and rs2_h3_val > 0
// opcode: pmulhsu.h.bo ; op1:x21; op2:x6; dest:x16; op1val:0x10ffff00030008;  op2val:0x40ff7ffff60005
TEST_RR_OP(pmulhsu.h.bo, x16, x21, x6, 0x0000000000000000, 0x10ffff00030008, 0x40ff7ffff60005, x5, 7*XLEN/8, x8)

inst_8:
// rs1==x12, rs2==x18, rd==x28, rs1_h0_val == 16, rs2_h1_val == 4096, rs1_h2_val == -1025, rs2_h2_val == -3, rs2_h3_val == -9, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 2048
// opcode: pmulhsu.h.bo ; op1:x12; op2:x18; dest:x28; op1val:0x800fbff3fff0010;  op2val:0xfff7fffd10004000
TEST_RR_OP(pmulhsu.h.bo, x28, x12, x18, 0x0000000000000000, 0x800fbff3fff0010, 0xfff7fffd10004000, x5, 8*XLEN/8, x8)

inst_9:
// rs1==x19, rs2==x27, rd==x3, rs1_h0_val == 32, rs2_h2_val == 256, rs1_h3_val == -129, rs1_h1_val == 16, rs2_h1_val == -257, rs2_h3_val == -17, rs2_h0_val == 8
// opcode: pmulhsu.h.bo ; op1:x19; op2:x27; dest:x3; op1val:0xff7ffff600100020;  op2val:0xffef0100feff0008
TEST_RR_OP(pmulhsu.h.bo, x3, x19, x27, 0x0000000000000000, 0xff7ffff600100020, 0xffef0100feff0008, x5, 9*XLEN/8, x8)

inst_10:
// rs1==x24, rs2==x11, rd==x2, rs1_h0_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == rs2_h1_val, rs2_h0_val == -16385, rs2_h1_val == -8193
// opcode: pmulhsu.h.bo ; op1:x24; op2:x11; dest:x2; op1val:0x053fffdfff0040;  op2val:0xfffcfffddfffbfff
TEST_RR_OP(pmulhsu.h.bo, x2, x24, x11, 0x0000000000000000, 0x053fffdfff0040, 0xfffcfffddfffbfff, x5, 10*XLEN/8, x8)

inst_11:
// rs1==x29, rs2==x14, rd==x24, rs1_h0_val == 128, rs1_h2_val == 128, rs2_h0_val == -1025
// opcode: pmulhsu.h.bo ; op1:x29; op2:x14; dest:x24; op1val:0xff7f008000200080;  op2val:0xc000dfff0010fbff
TEST_RR_OP(pmulhsu.h.bo, x24, x29, x14, 0x0000000000000000, 0xff7f008000200080, 0xc000dfff0010fbff, x5, 11*XLEN/8, x8)

inst_12:
// rs1==x26, rs2==x23, rd==x6, rs1_h0_val == 256, rs2_h1_val == 8, rs2_h0_val == 2
// opcode: pmulhsu.h.bo ; op1:x26; op2:x23; dest:x6; op1val:0xff7f0006fff90100;  op2val:0x5555ff7f00080002
TEST_RR_OP(pmulhsu.h.bo, x6, x26, x23, 0x0000000000000000, 0xff7f0006fff90100, 0x5555ff7f00080002, x5, 12*XLEN/8, x9)

inst_13:
// rs1==x23, rs2==x20, rd==x12, rs1_h0_val == 512, rs2_h1_val == -513, rs1_h1_val == -257
// opcode: pmulhsu.h.bo ; op1:x23; op2:x20; dest:x12; op1val:0xff7f0007feff0200;  op2val:0xfffcff7ffdff0002
TEST_RR_OP(pmulhsu.h.bo, x12, x23, x20, 0x0000000000000000, 0xff7f0007feff0200, 0xfffcff7ffdff0002, x5, 13*XLEN/8, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_14:
// rs1==x4, rs2==x7, rd==x21, rs1_h0_val == 1024, rs1_h2_val == -32768, rs1_h3_val == -17, rs2_h1_val == 1
// opcode: pmulhsu.h.bo ; op1:x4; op2:x7; dest:x21; op1val:0xffef8000fffa0400;  op2val:0xfff7000300010800
TEST_RR_OP(pmulhsu.h.bo, x21, x4, x7, 0x0000000000000000, 0xffef8000fffa0400, 0xfff7000300010800, x6, 0*XLEN/8, x9)

inst_15:
// rs1==x1, rs2==x16, rd==x0, rs1_h0_val == 2048, rs1_h3_val == 1024, rs2_h1_val == 2048, rs2_h2_val == -17
// opcode: pmulhsu.h.bo ; op1:x1; op2:x16; dest:x0; op1val:0x4000003fff80800;  op2val:0xfff7ffef08008000
TEST_RR_OP(pmulhsu.h.bo, x0, x1, x16, 0x0000000000000000, 0x4000003fff80800, 0xfff7ffef08008000, x6, 1*XLEN/8, x9)

inst_16:
// rs1==x25, rs2==x0, rd==x20, rs1_h0_val == 4096, rs2_h1_val == -3, rs1_h2_val == 0, rs2_h0_val == -3, rs2_h3_val == -257
// opcode: pmulhsu.h.bo ; op1:x25; op2:x0; dest:x20; op1val:0x8000000fff91000;  op2val:0xfeffbffffffdfffd
TEST_RR_OP(pmulhsu.h.bo, x20, x25, x0, 0x0000000000000000, 0x8000000fff91000, 0xfeffbffffffdfffd, x6, 2*XLEN/8, x9)

inst_17:
// rs1==x20, rs2==x29, rd==x27, rs1_h0_val == 8192, rs1_h2_val == -16385, rs1_h1_val == -2049, rs1_h3_val == 128
// opcode: pmulhsu.h.bo ; op1:x20; op2:x29; dest:x27; op1val:0x80bffff7ff2000;  op2val:0x03010000090003
TEST_RR_OP(pmulhsu.h.bo, x27, x20, x29, 0x0000000000000000, 0x80bffff7ff2000, 0x03010000090003, x6, 3*XLEN/8, x9)

inst_18:
// rs1==x11, rs2==x17, rd==x7, rs1_h0_val == 16384, rs2_h3_val == 4, rs1_h1_val == -21846, rs2_h1_val == -9, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 1024, rs2_h0_val == 64
// opcode: pmulhsu.h.bo ; op1:x11; op2:x17; dest:x7; op1val:0x070400aaaa4000;  op2val:0x040006fff70040
TEST_RR_OP(pmulhsu.h.bo, x7, x11, x17, 0x0000000000000000, 0x070400aaaa4000, 0x040006fff70040, x6, 4*XLEN/8, x9)

inst_19:
// rs1==x5, rs2==x24, rd==x10, rs1_h0_val == -2, rs2_h1_val == 1024, rs2_h0_val == -65, rs2_h2_val == -257, rs1_h1_val == -17, rs2_h3_val == 1
// opcode: pmulhsu.h.bo ; op1:x5; op2:x24; dest:x10; op1val:0x800bfffffeffffe;  op2val:0x01feff0400ffbf
TEST_RR_OP(pmulhsu.h.bo, x10, x5, x24, 0x0000000000000000, 0x800bfffffeffffe, 0x01feff0400ffbf, x6, 5*XLEN/8, x9)

inst_20:
// rs1==x10, rs2==x12, rd==x13, rs1_h0_val == -3, rs1_h1_val == 1024, rs2_h1_val == -2
// opcode: pmulhsu.h.bo ; op1:x10; op2:x12; dest:x13; op1val:0x400ffef0400fffd;  op2val:0x5555fffafffebfff
TEST_RR_OP(pmulhsu.h.bo, x13, x10, x12, 0x0000000000000000, 0x400ffef0400fffd, 0x5555fffafffebfff, x6, 6*XLEN/8, x9)

inst_21:
// rs1==x16, rs2==x8, rd==x14, rs1_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 8192, rs2_h2_val == 8192, rs1_h2_val == 32767, rs1_h3_val == 1
// opcode: pmulhsu.h.bo ; op1:x16; op2:x8; dest:x14; op1val:0x017fff0400fffb;  op2val:0x03200020000010
TEST_RR_OP(pmulhsu.h.bo, x14, x16, x8, 0x0000000000000000, 0x017fff0400fffb, 0x03200020000010, x6, 7*XLEN/8, x9)

inst_22:
// rs1==x2, rs2==x15, rd==x4, rs1_h0_val == -9, rs1_h2_val == -33, rs1_h3_val == -33
// opcode: pmulhsu.h.bo ; op1:x2; op2:x15; dest:x4; op1val:0xffdfffdf0003fff7;  op2val:0x06fff6fffe0010
TEST_RR_OP(pmulhsu.h.bo, x4, x2, x15, 0x0000000000000000, 0xffdfffdf0003fff7, 0x06fff6fffe0010, x6, 8*XLEN/8, x9)

inst_23:
// rs1==x0, rs2==x5, rd==x26, rs1_h0_val == -17, rs2_h1_val == 4, rs1_h3_val == -8193, rs1_h1_val == 8192
// opcode: pmulhsu.h.bo ; op1:x0; op2:x5; dest:x26; op1val:0xdfff04002000ffef;  op2val:0x3ffffeff0004bfff
TEST_RR_OP(pmulhsu.h.bo, x26, x0, x5, 0x0000000000000000, 0xdfff04002000ffef, 0x3ffffeff0004bfff, x6, 9*XLEN/8, x9)

inst_24:
// rs1==x8, rs2==x21, rd==x5, rs1_h0_val == -33, rs2_h1_val == 2, rs2_h3_val == 4096
// opcode: pmulhsu.h.bo ; op1:x8; op2:x21; dest:x5; op1val:0xfffb0400ffefffdf;  op2val:0x100000050002fffd
TEST_RR_OP(pmulhsu.h.bo, x5, x8, x21, 0x0000000000000000, 0xfffb0400ffefffdf, 0x100000050002fffd, x6, 10*XLEN/8, x9)

inst_25:
// rs1==x30, rs2==x3, rd==x29, rs1_h0_val == -65, rs1_h2_val == -65, rs1_h1_val == -129, rs2_h1_val == -21846
// opcode: pmulhsu.h.bo ; op1:x30; op2:x3; dest:x29; op1val:0x80ffbfff7fffbf;  op2val:0x063fffaaaafffa
TEST_RR_OP(pmulhsu.h.bo, x29, x30, x3, 0x0000000000000000, 0x80ffbfff7fffbf, 0x063fffaaaafffa, x6, 11*XLEN/8, x9)

inst_26:
// rs1==x22, rs2==x25, rd==x11, rs1_h0_val == -129, rs2_h3_val == -4097, rs2_h0_val == 128, rs1_h1_val == 16384
// opcode: pmulhsu.h.bo ; op1:x22; op2:x25; dest:x11; op1val:0x80ffff4000ff7f;  op2val:0xefff2000fff90080
TEST_RR_OP(pmulhsu.h.bo, x11, x22, x25, 0x0000000000000000, 0x80ffff4000ff7f, 0xefff2000fff90080, x6, 12*XLEN/8, x9)

inst_27:
// rs1==x18, rs2==x30, rd==x8, rs1_h0_val == -257, rs2_h3_val == -513, rs2_h2_val == 32, rs2_h0_val == -5, rs1_h2_val == 4
// opcode: pmulhsu.h.bo ; op1:x18; op2:x30; dest:x8; op1val:0xff7f0004ffeffeff;  op2val:0xfdff0020fff8fffb
TEST_RR_OP(pmulhsu.h.bo, x8, x18, x30, 0x0000000000000000, 0xff7f0004ffeffeff, 0xfdff0020fff8fffb, x6, 13*XLEN/8, x3)

inst_28:
// rs1==x13, rs2==x2, rd==x9, rs1_h0_val == -513, rs2_h0_val == -8193
// opcode: pmulhsu.h.bo ; op1:x13; op2:x2; dest:x9; op1val:0xffef00090000fdff;  op2val:0xfff93fff0006dfff
TEST_RR_OP(pmulhsu.h.bo, x9, x13, x2, 0x0000000000000000, 0xffef00090000fdff, 0xfff93fff0006dfff, x6, 14*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x14, rs2==x10, rd==x19, rs1_h0_val == -1025, rs1_h2_val == 32, rs1_h3_val == 512, rs2_h3_val == 128
// opcode: pmulhsu.h.bo ; op1:x14; op2:x10; dest:x19; op1val:0x20000200400fbff;  op2val:0x80fff8fffafffa
TEST_RR_OP(pmulhsu.h.bo, x19, x14, x10, 0x0000000000000000, 0x20000200400fbff, 0x80fff8fffafffa, x1, 0*XLEN/8, x3)

inst_30:
// rs1==x6, rs2==x19, rd==x15, rs1_h0_val == -2049, rs2_h1_val == 512, rs1_h3_val == 4, rs2_h2_val == 2
// opcode: pmulhsu.h.bo ; op1:x6; op2:x19; dest:x15; op1val:0x04ffdf0006f7ff;  op2val:0x40000202000006
TEST_RR_OP(pmulhsu.h.bo, x15, x6, x19, 0x0000000000000000, 0x04ffdf0006f7ff, 0x40000202000006, x1, 1*XLEN/8, x3)

inst_31:
// rs1==x15, rs2==x9, rd==x25, rs1_h0_val == -4097, rs2_h3_val == -3, rs1_h1_val == -5, rs2_h1_val == -2049, rs2_h2_val == 32767
// opcode: pmulhsu.h.bo ; op1:x15; op2:x9; dest:x25; op1val:0x040004fffbefff;  op2val:0xfffd7ffff7ff0002
TEST_RR_OP(pmulhsu.h.bo, x25, x15, x9, 0x0000000000000000, 0x040004fffbefff, 0xfffd7ffff7ff0002, x1, 2*XLEN/8, x3)

inst_32:
// rs1_h0_val == -8193, rs2_h3_val == 2048, rs1_h1_val == 128, rs1_h3_val == 2, rs2_h0_val == -1, rs2_h2_val == -65
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf0080dfff;  op2val:0x800ffbffffcffff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x02ffdf0080dfff, 0x800ffbffffcffff, x1, 3*XLEN/8, x3)

inst_33:
// rs1_h0_val == -16385, rs1_h2_val == rs2_h2_val, rs2_h3_val == -33
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff93ffffff6bfff;  op2val:0xffdf3ffffffcc000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff93ffffff6bfff, 0xffdf3ffffffcc000, x1, 4*XLEN/8, x3)

inst_34:
// rs1_h0_val == 21845, rs2_h1_val == -5, rs1_h2_val == -129, rs1_h1_val == 4096
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7f10005555;  op2val:0xfff70006fffb0800
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xdfffff7f10005555, 0xfff70006fffb0800, x1, 5*XLEN/8, x3)

inst_35:
// rs1_h0_val == -21846, rs2_h0_val == -2049
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff680000007aaaa;  op2val:0x01fffafffaf7ff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff680000007aaaa, 0x01fffafffaf7ff, x1, 6*XLEN/8, x3)

inst_36:
// rs1_h1_val == -32768, rs2_h0_val == 4096, rs2_h3_val == -1025, rs1_h3_val == -257
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffdfff80008000;  op2val:0xfbffff7ffff61000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfeffdfff80008000, 0xfbffff7ffff61000, x1, 7*XLEN/8, x3)

inst_37:
// rs1_h1_val == -1, rs1_h2_val == -257, rs2_h0_val == -2
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fefffffffffe;  op2val:0xfdff0006fffcfffe
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff9fefffffffffe, 0xfdff0006fffcfffe, x1, 8*XLEN/8, x3)

inst_38:
// rs2_h3_val == 32767, rs1_h3_val == 32
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x20fffffffffffc;  op2val:0x7ffffff610000002
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x20fffffffffffc, 0x7ffffff610000002, x1, 9*XLEN/8, x3)

inst_39:
// rs2_h3_val == 2, rs1_h3_val == -1025, rs2_h2_val == -1, rs2_h1_val == -129
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f0003ffdf;  op2val:0x02ffffff7f0006
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfbffff7f0003ffdf, 0x02ffffff7f0006, x1, 10*XLEN/8, x3)

inst_40:
// rs2_h3_val == 8, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10fff640000800;  op2val:0x08ffbffff8fffb
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10fff640000800, 0x08ffbffff8fffb, x1, 11*XLEN/8, x3)

inst_41:
// rs2_h3_val == 32, rs2_h1_val == 256
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffff7ff7fff;  op2val:0x20fff601000006
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfdfffffff7ff7fff, 0x20fff601000006, x1, 12*XLEN/8, x3)

inst_42:
// rs2_h3_val == 512, rs1_h2_val == 64
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10004000070001;  op2val:0x20000020800fffd
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10004000070001, 0x20000020800fffd, x1, 13*XLEN/8, x3)

inst_43:
// rs2_h3_val == 1024, rs1_h3_val == 32767, rs2_h2_val == -1025, rs1_h2_val == 512, rs2_h0_val == 4, rs2_h1_val == 32767
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fff02000010fbff;  op2val:0x400fbff7fff0004
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fff02000010fbff, 0x400fbff7fff0004, x1, 14*XLEN/8, x3)

inst_44:
// rs2_h3_val == 8192, rs1_h3_val == -32768, rs2_h2_val == 2048
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x8000bfffbfffffef;  op2val:0x2000080000080004
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x8000bfffbfffffef, 0x2000080000080004, x1, 15*XLEN/8, x3)

inst_45:
// rs2_h3_val == 16384, rs1_h1_val == -9, rs1_h2_val == -9
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff7fff70040;  op2val:0x4000feff1000ffbf
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7ffffff7fff70040, 0x4000feff1000ffbf, x1, 16*XLEN/8, x3)

inst_46:
// rs2_h3_val == -2, rs2_h0_val == -33
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x07040000060400;  op2val:0xfffefffffffcffdf
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x07040000060400, 0xfffefffffffcffdf, x1, 17*XLEN/8, x3)

inst_47:
// rs2_h3_val == -5, rs2_h2_val == 4096, rs1_h3_val == -4097, rs2_h1_val == 0, rs1_h1_val == 21845
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefff000355550004;  op2val:0xfffb100000008000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xefff000355550004, 0xfffb100000008000, x1, 18*XLEN/8, x3)

inst_48:
// rs2_h3_val == -129, rs2_h1_val == -1025, rs2_h2_val == -513
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10040080000005;  op2val:0xff7ffdfffbff0040
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10040080000005, 0xff7ffdfffbff0040, x1, 19*XLEN/8, x3)

inst_49:
// rs2_h3_val == -2049, rs1_h3_val == 0
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x007ffffffcfffc;  op2val:0xf7ff200001000002
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x007ffffffcfffc, 0xf7ff200001000002, x1, 20*XLEN/8, x3)

inst_50:
// rs2_h3_val == -8193, rs1_h3_val == -2, rs1_h1_val == 1
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffc0001ff7f;  op2val:0xdffff7fffff91000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffefffc0001ff7f, 0xdffff7fffff91000, x1, 21*XLEN/8, x3)

inst_51:
// rs2_h3_val == -21846, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2002000ff7f0400;  op2val:0xaaaafffd3fff0800
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x2002000ff7f0400, 0xaaaafffd3fff0800, x1, 22*XLEN/8, x3)

inst_52:
// rs1_h1_val == 32767, rs1_h3_val == -3, rs1_h2_val == 21845
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd55557fffaaaa;  op2val:0x07bfff01008000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd55557fffaaaa, 0x07bfff01008000, x1, 23*XLEN/8, x3)

inst_53:
// rs1_h1_val == 2, rs2_h0_val == 0, rs2_h2_val == -21846
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000700023fff;  op2val:0x80aaaa02000000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff9000700023fff, 0x80aaaa02000000, x1, 24*XLEN/8, x3)

inst_54:
// rs1_h1_val == 4, rs1_h2_val == -2049, rs2_h0_val == -4097
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff0004c000;  op2val:0xfffbfff6aaaaefff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x10f7ff0004c000, 0xfffbfff6aaaaefff, x1, 25*XLEN/8, x3)

inst_55:
// rs1_h1_val == 8, rs2_h1_val == -4097
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000300083fff;  op2val:0xeffffffaefff0009
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff7000300083fff, 0xeffffffaefff0009, x1, 26*XLEN/8, x3)

inst_56:
// rs1_h1_val == 256, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fbff01001000;  op2val:0xfff63ffffbff0000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff8fbff01001000, 0xfff63ffffbff0000, x1, 27*XLEN/8, x3)

inst_57:
// rs1_h1_val == 512, rs2_h0_val == 512
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfeff800002000100;  op2val:0xffeffffbfff70200
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfeff800002000100, 0xffeffffbfff70200, x1, 28*XLEN/8, x3)

inst_58:
// rs1_h1_val == 2048, rs2_h1_val == 16384, rs2_h2_val == -9
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000308000005;  op2val:0x01fff740000006
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff7000308000005, 0x01fff740000006, x1, 29*XLEN/8, x3)

inst_59:
// rs1_h3_val == rs2_h3_val, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x07ffff00010080;  op2val:0x07f7ff00200040
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x07ffff00010080, 0x07f7ff00200040, x1, 30*XLEN/8, x3)

inst_60:
// rs1_h1_val == -2, rs2_h2_val == 8
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff80003fffe0009;  op2val:0x3fff00080000fffe
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff80003fffe0009, 0x3fff00080000fffe, x1, 31*XLEN/8, x3)

inst_61:
// rs1_h1_val == -33, rs2_h2_val == 1
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555ffdffff8;  op2val:0x04000100090009
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xefff5555ffdffff8, 0x04000100090009, x1, 32*XLEN/8, x3)

inst_62:
// rs1_h3_val == -16385, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff9fffe0006;  op2val:0xfffc0100f7ff3fff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xbffffff9fffe0006, 0xfffc0100f7ff3fff, x1, 33*XLEN/8, x3)

inst_63:
// rs1_h3_val == 21845, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x5555feff00010000;  op2val:0xaaaafbff3fff0200
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x5555feff00010000, 0xaaaafbff3fff0200, x1, 34*XLEN/8, x3)

inst_64:
// rs1_h3_val == -21846, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00000004fffe;  op2val:0x40fdfffff6ffff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xaaaa00000004fffe, 0x40fdfffff6ffff, x1, 35*XLEN/8, x3)

inst_65:
// rs2_h0_val == 1, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fbfffffc4000;  op2val:0x200bfff00040001
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff6fbfffffc4000, 0x200bfff00040001, x1, 36*XLEN/8, x3)

inst_66:
// rs2_h0_val == 32, rs1_h3_val == 256
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x100c00000070080;  op2val:0xdfff00037fff0020
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x100c00000070080, 0xdfff00037fff0020, x1, 37*XLEN/8, x3)

inst_67:
// rs2_h0_val == 256, rs1_h2_val == 4096, rs2_h3_val == 0
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2010007fff0008;  op2val:0x00ffff20000100
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x2010007fff0008, 0x00ffff20000100, x1, 38*XLEN/8, x3)

inst_68:
// rs2_h0_val == 1024, rs2_h2_val == 16
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x06100010007fff;  op2val:0xfffb0010fffb0400
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x06100010007fff, 0xfffb0010fffb0400, x1, 39*XLEN/8, x3)

inst_69:
// rs2_h0_val == 8192, rs2_h2_val == 21845, rs2_h1_val == -32768
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffffc00002000800;  op2val:0x40555580002000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xffffc00002000800, 0x40555580002000, x1, 40*XLEN/8, x3)

inst_70:
// rs2_h0_val == -9, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x03feff0004fff8;  op2val:0x40c0000200fff7
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x03feff0004fff8, 0x40c0000200fff7, x1, 41*XLEN/8, x3)

inst_71:
// rs2_h0_val == -17, rs1_h1_val == -1025, rs1_h3_val == 4096, rs1_h2_val == -5
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffbfbffff7f;  op2val:0x7ffffdff0005ffef
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x1000fffbfbffff7f, 0x7ffffdff0005ffef, x1, 42*XLEN/8, x3)

inst_72:
// rs2_h0_val == -129, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff97fff0009aaaa;  op2val:0xfefffff8fff8ff7f
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff97fff0009aaaa, 0xfefffff8fff8ff7f, x1, 43*XLEN/8, x3)

inst_73:
// rs2_h0_val == -257, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00400005fdff;  op2val:0xfbfffffa2000feff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffe00400005fdff, 0xfbfffffa2000feff, x1, 44*XLEN/8, x3)

inst_74:
// rs2_h0_val == -513, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x03fdfffffeefff;  op2val:0x80fbff0009fdff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x03fdfffffeefff, 0x80fbff0009fdff, x1, 45*XLEN/8, x3)

inst_75:
// rs2_h0_val == 21845, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdf40000001;  op2val:0xfff8fbffaaaa5555
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xaaaaffdf40000001, 0xfff8fbffaaaa5555, x1, 46*XLEN/8, x3)

inst_76:
// rs2_h0_val == -21846, rs2_h2_val == 128
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x06fffafff77fff;  op2val:0xfffe0080fff6aaaa
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x06fffafff77fff, 0xfffe0080fff6aaaa, x1, 47*XLEN/8, x3)

inst_77:
// rs2_h1_val == -1, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x090006ffef2000;  op2val:0x08ffefffffbfff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x090006ffef2000, 0x08ffefffffbfff, x1, 48*XLEN/8, x3)

inst_78:
// rs1_h1_val == -65, rs2_h2_val == 0, rs2_h1_val == -17
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeefffffbf0004;  op2val:0xffbf0000ffef0008
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffeefffffbf0004, 0xffbf0000ffef0008, x1, 49*XLEN/8, x3)

inst_79:
// rs2_h1_val == 64, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2000400005bfff;  op2val:0x4000000900400000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x2000400005bfff, 0x4000000900400000, x1, 50*XLEN/8, x3)

inst_80:
// rs1_h1_val == -513, rs2_h1_val == -16385
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffeffdff0004;  op2val:0xfffaaaaabfffff7f
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfeffffeffdff0004, 0xfffaaaaabfffff7f, x1, 51*XLEN/8, x3)

inst_81:
// rs1_h1_val == -4097, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0080efff0800;  op2val:0x40feffc000ffbf
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffe0080efff0800, 0x40feffc000ffbf, x1, 52*XLEN/8, x3)

inst_82:
// rs1_h2_val == 1, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0001fff98000;  op2val:0x7fff0003bffffeff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fff0001fff98000, 0x7fff0003bffffeff, x1, 53*XLEN/8, x3)

inst_83:
// rs2_h1_val == -33, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffc0000ff7f;  op2val:0x09bfffffdf0020
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xf7fffffc0000ff7f, 0x09bfffffdf0020, x1, 54*XLEN/8, x3)

inst_84:
// rs1_h2_val == 2, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00027ffffffc;  op2val:0xfdfffff8dffff7ff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfdff00027ffffffc, 0xfdfffff8dffff7ff, x1, 55*XLEN/8, x3)

inst_85:
// rs2_h1_val == -65, rs2_h2_val == -4097
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0200050200ffdf;  op2val:0xf7ffefffffbffffc
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x0200050200ffdf, 0xf7ffefffffbffffc, x1, 56*XLEN/8, x3)

inst_86:
// rs1_h2_val == 8, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0008fffcfdff;  op2val:0xdffffffd2000ffdf
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x7fff0008fffcfdff, 0xdffffffd2000ffdf, x1, 57*XLEN/8, x3)

inst_87:
// rs1_h2_val == 256, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100fffbf7ff;  op2val:0xefff5555ffdf3fff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd0100fffbf7ff, 0xefff5555ffdf3fff, x1, 58*XLEN/8, x3)

inst_88:
// rs2_h1_val == 21845, rs2_h2_val == -33
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00105555;  op2val:0xffbfffdf55550040
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xff7fffff00105555, 0xffbfffdf55550040, x1, 59*XLEN/8, x3)

inst_89:
// rs1_h2_val == 2048, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x020800fdffbfff;  op2val:0x40fffa00204000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x020800fdffbfff, 0x40fffa00204000, x1, 60*XLEN/8, x3)

inst_90:
// rs2_h2_val == -32768, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fff7ff0002;  op2val:0x048000fffdefff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffff7fff7ff0002, 0x048000fffdefff, x1, 61*XLEN/8, x3)

inst_91:
// rs1_h2_val == 16384, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd4000fff70100;  op2val:0x55552000fdff0800
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffd4000fff70100, 0x55552000fdff0800, x1, 62*XLEN/8, x3)

inst_92:
// rs1_h2_val == -2, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffe00050020;  op2val:0xff7f0010fffefffc
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xffdffffe00050020, 0xff7f0010fffefffc, x1, 63*XLEN/8, x3)

inst_93:
// rs2_h2_val == 64, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00071000f7ff;  op2val:0x09004000200008
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xf7ff00071000f7ff, 0x09004000200008, x1, 64*XLEN/8, x3)

inst_94:
// rs2_h2_val == 512, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffa00038000;  op2val:0x040200fffe5555
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xbffffffa00038000, 0x040200fffe5555, x1, 65*XLEN/8, x3)

inst_95:
// rs2_h2_val == 1024, rs1_h3_val == 16384
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x4000100000800200;  op2val:0x0104000001dfff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x4000100000800200, 0x0104000001dfff, x1, 66*XLEN/8, x3)

inst_96:
// rs2_h2_val == 16384, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0400803fff5555;  op2val:0x0940007fff0080
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x0400803fff5555, 0x0940007fff0080, x1, 67*XLEN/8, x3)

inst_97:
// rs1_h2_val == -21846, rs2_h2_val == -2
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdaaaa10007fff;  op2val:0x03fffefffeefff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfffdaaaa10007fff, 0x03fffefffeefff, x1, 68*XLEN/8, x3)

inst_98:
// rs1_h2_val == -3, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd04000009;  op2val:0x03fff74000fffa
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x01fffd04000009, 0x03fff74000fffa, x1, 69*XLEN/8, x3)

inst_99:
// rs1_h3_val == 8, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x0802007ffffffb;  op2val:0xffeffffe0010fdff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x0802007ffffffb, 0xffeffffe0010fdff, x1, 70*XLEN/8, x3)

inst_100:
// rs1_h3_val == 64, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x40040004000008;  op2val:0xffbf08007ffffffe
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x40040004000008, 0xffbf08007ffffffe, x1, 71*XLEN/8, x3)

inst_101:
// rs1_h3_val == 8192, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbffffbefff;  op2val:0x2000003fffe4000
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x2000ffbffffbefff, 0x2000003fffe4000, x1, 72*XLEN/8, x3)

inst_102:
// rs2_h3_val == -32768, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x40f7fffffd8000;  op2val:0x8000feff08007fff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x40f7fffffd8000, 0x8000feff08007fff, x1, 73*XLEN/8, x3)

inst_103:
// rs2_h3_val == -1, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffcff7f0040;  op2val:0xfffffdff0001f7ff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff8fffcff7f0040, 0xfffffdff0001f7ff, x1, 74*XLEN/8, x3)

inst_104:
// rs2_h2_val == 4, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0x800008004000fffa;  op2val:0x10000004fffd5555
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0x800008004000fffa, 0x10000004fffd5555, x1, 75*XLEN/8, x3)

inst_105:
// rs2_h1_val == 128, 
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7f00020800;  op2val:0x02fffd00800007
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff7ff7f00020800, 0x02fffd00800007, x1, 76*XLEN/8, x3)

inst_106:
// rs1_h0_val == -1, rs1_h3_val == -9, rs2_h2_val == -16385, rs1_h1_val == -16385, rs1_h0_val != rs2_h0_val, rs2_h3_val == 256, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 8192, rs2_h1_val == 32
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xfff72000bfffffff;  op2val:0x100bfff0020fffc
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xfff72000bfffffff, 0x100bfff0020fffc, x1, 77*XLEN/8, x3)

inst_107:
// rs1_h0_val == -17, rs2_h1_val == 4, rs1_h3_val == -8193, rs1_h1_val == 8192
// opcode: pmulhsu.h.bo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff04002000ffef;  op2val:0x3ffffeff0004bfff
TEST_RR_OP(pmulhsu.h.bo, x31, x30, x29, 0x0000000000000000, 0xdfff04002000ffef, 0x3ffffeff0004bfff, x1, 78*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 79*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
