
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the paaddu.h instruction of the RISC-V RV64PZicsr extension for the paaddu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",paaddu.h)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x9, rd==x16, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 8, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32767, rs1_h1_val == rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val, rs2_h1_val == 32767, rs1_h2_val == -3, rs2_h2_val == 2
// opcode: paaddu.h ; op1:x19; op2:x9; dest:x16; op1val:0xfff9fffd7fff8000;  op2val:0x0800027ffffff9
TEST_RR_OP(paaddu.h, x16, x19, x9, 0x0000000000000000, 0xfff9fffd7fff8000, 0x0800027ffffff9, x5, 0*XLEN/8, x4)

inst_1:
// rs2 == rd != rs1, rs1==x25, rs2==x27, rd==x27, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == 32767, rs1_h2_val == 256, rs2_h3_val == -129, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == -65
// opcode: paaddu.h ; op1:x25; op2:x27; dest:x27; op1val:0xfff90100ffbfffff;  op2val:0xff7ffff600037fff
TEST_RR_OP(paaddu.h, x27, x25, x27, 0x0000000000000000, 0xfff90100ffbfffff, 0xff7ffff600037fff, x5, 1*XLEN/8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x15, rs1_h0_val == 0, rs2_h3_val == 16, rs2_h1_val == 8192, rs2_h0_val == -4097, rs2_h2_val == -65, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 4096
// opcode: paaddu.h ; op1:x22; op2:x22; dest:x15; op1val:0x0410007fff0000;  op2val:0x10ffbf2000efff
TEST_RR_OP(paaddu.h, x15, x22, x22, 0x0000000000000000, 0x0410007fff0000, 0x10ffbf2000efff, x5, 2*XLEN/8, x4)

inst_3:
// rs1 == rd != rs2, rs1==x21, rs2==x6, rd==x21, rs1_h0_val == 1, rs1_h1_val == -513, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -21846, rs2_h1_val == -65, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h0_val == 64
// opcode: paaddu.h ; op1:x21; op2:x6; dest:x21; op1val:0x40aaaafdff0001;  op2val:0xc0000005ffbf0040
TEST_RR_OP(paaddu.h, x21, x21, x6, 0x0000000000000000, 0x40aaaafdff0001, 0xc0000005ffbf0040, x5, 3*XLEN/8, x4)

inst_4:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -2049, rs2_h1_val == -33, rs2_h0_val == -513, rs1_h2_val == 16, rs2_h2_val == -1025, rs1_h1_val == -129
// opcode: paaddu.h ; op1:x29; op2:x29; dest:x29; op1val:0xf7ff0010ff7f7fff;  op2val:0xfffcfbffffdffdff
TEST_RR_OP(paaddu.h, x29, x29, x29, 0x0000000000000000, 0xf7ff0010ff7f7fff, 0xfffcfbffffdffdff, x5, 4*XLEN/8, x4)

inst_5:
// rs1==x15, rs2==x19, rd==x20, rs1_h0_val == 2, rs1_h1_val == -16385, rs2_h1_val == -5, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -1, rs2_h2_val == 1, rs2_h3_val == -8193
// opcode: paaddu.h ; op1:x15; op2:x19; dest:x20; op1val:0x051000bfff0002;  op2val:0xdfff0001fffbffff
TEST_RR_OP(paaddu.h, x20, x15, x19, 0x0000000000000000, 0x051000bfff0002, 0xdfff0001fffbffff, x5, 5*XLEN/8, x4)

inst_6:
// rs1==x0, rs2==x16, rd==x3, rs1_h0_val == 4, rs1_h2_val == -1025, rs2_h3_val == 256, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 8, rs2_h2_val == -32768, rs1_h1_val == -17
// opcode: paaddu.h ; op1:x0; op2:x16; dest:x3; op1val:0xc000fbffffef0004;  op2val:0x1008000fff60008
TEST_RR_OP(paaddu.h, x3, x0, x16, 0x0000000000000000, 0xc000fbffffef0004, 0x1008000fff60008, x5, 6*XLEN/8, x4)

inst_7:
// rs1==x28, rs2==x3, rd==x13, rs1_h0_val == 8, rs1_h3_val == -3, rs2_h0_val == -3, rs1_h2_val == rs2_h2_val, rs1_h1_val == 2048, rs2_h3_val == -33, rs2_h1_val == 128
// opcode: paaddu.h ; op1:x28; op2:x3; dest:x13; op1val:0xfffd000908000008;  op2val:0xffdf00090080fffd
TEST_RR_OP(paaddu.h, x13, x28, x3, 0x0000000000000000, 0xfffd000908000008, 0xffdf00090080fffd, x5, 7*XLEN/8, x4)

inst_8:
// rs1==x3, rs2==x14, rd==x6, rs1_h0_val == 16, rs1_h1_val == -2049, rs1_h3_val == -1025, rs2_h3_val == -5, rs2_h2_val == -129, rs2_h1_val == -2049
// opcode: paaddu.h ; op1:x3; op2:x14; dest:x6; op1val:0xfbff0003f7ff0010;  op2val:0xfffbff7ff7ff7fff
TEST_RR_OP(paaddu.h, x6, x3, x14, 0x0000000000000000, 0xfbff0003f7ff0010, 0xfffbff7ff7ff7fff, x5, 8*XLEN/8, x4)

inst_9:
// rs1==x20, rs2==x13, rd==x2, rs1_h0_val == 32, rs1_h3_val == 4096, rs2_h3_val == -2049, rs1_h1_val == -33
// opcode: paaddu.h ; op1:x20; op2:x13; dest:x2; op1val:0x1000fffdffdf0020;  op2val:0xf7ff0002ffdffff8
TEST_RR_OP(paaddu.h, x2, x20, x13, 0x0000000000000000, 0x1000fffdffdf0020, 0xf7ff0002ffdffff8, x5, 9*XLEN/8, x4)

inst_10:
// rs1==x6, rs2==x12, rd==x31, rs1_h0_val == 64, rs2_h2_val == 32, rs1_h1_val == 1024, rs2_h1_val == 21845, rs2_h0_val == 512, rs2_h3_val == 0
// opcode: paaddu.h ; op1:x6; op2:x12; dest:x31; op1val:0xfff6000704000040;  op2val:0x00002055550200
TEST_RR_OP(paaddu.h, x31, x6, x12, 0x0000000000000000, 0xfff6000704000040, 0x00002055550200, x5, 10*XLEN/8, x4)

inst_11:
// rs1==x2, rs2==x1, rd==x19, rs1_h0_val == 128, rs1_h2_val == 4, rs2_h2_val == 1024
// opcode: paaddu.h ; op1:x2; op2:x1; dest:x19; op1val:0x3fff00043fff0080;  op2val:0x00040055550005
TEST_RR_OP(paaddu.h, x19, x2, x1, 0x0000000000000000, 0x3fff00043fff0080, 0x00040055550005, x5, 11*XLEN/8, x4)

inst_12:
// rs1==x13, rs2==x26, rd==x24, rs1_h0_val == 256, rs1_h3_val == -17, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -257, rs1_h1_val == 256, rs2_h1_val == -21846
// opcode: paaddu.h ; op1:x13; op2:x26; dest:x24; op1val:0xffef3fff01000100;  op2val:0x090009aaaafeff
TEST_RR_OP(paaddu.h, x24, x13, x26, 0x0000000000000000, 0xffef3fff01000100, 0x090009aaaafeff, x5, 12*XLEN/8, x4)

inst_13:
// rs1==x31, rs2==x23, rd==x0, rs1_h0_val == 512, rs2_h0_val == -129, rs2_h1_val == -17, rs1_h3_val == -257
// opcode: paaddu.h ; op1:x31; op2:x23; dest:x0; op1val:0xfeff3fff00050200;  op2val:0x060400ffefff7f
TEST_RR_OP(paaddu.h, x0, x31, x23, 0x0000000000000000, 0xfeff3fff00050200, 0x060400ffefff7f, x5, 13*XLEN/8, x4)

inst_14:
// rs1==x12, rs2==x25, rd==x26, rs1_h0_val == 1024, rs2_h0_val == -8193, rs1_h1_val == -1025, rs1_h3_val == 1, rs1_h2_val == 2048
// opcode: paaddu.h ; op1:x12; op2:x25; dest:x26; op1val:0x010800fbff0400;  op2val:0x0500073fffdfff
TEST_RR_OP(paaddu.h, x26, x12, x25, 0x0000000000000000, 0x010800fbff0400, 0x0500073fffdfff, x5, 14*XLEN/8, x4)

inst_15:
// rs1==x17, rs2==x7, rd==x25, rs1_h0_val == 2048, rs1_h2_val == -65, rs2_h2_val == -21846, rs1_h3_val == -21846
// opcode: paaddu.h ; op1:x17; op2:x7; dest:x25; op1val:0xaaaaffbfffdf0800;  op2val:0x10aaaa0006fff6
TEST_RR_OP(paaddu.h, x25, x17, x7, 0x0000000000000000, 0xaaaaffbfffdf0800, 0x10aaaa0006fff6, x5, 15*XLEN/8, x4)

inst_16:
// rs1==x10, rs2==x15, rd==x1, rs1_h0_val == 4096, rs2_h0_val == -65, rs1_h2_val == -513, rs2_h3_val == -16385, rs2_h1_val == -2
// opcode: paaddu.h ; op1:x10; op2:x15; dest:x1; op1val:0xfff8fdffffdf1000;  op2val:0xbfff0020fffeffbf
TEST_RR_OP(paaddu.h, x1, x10, x15, 0x0000000000000000, 0xfff8fdffffdf1000, 0xbfff0020fffeffbf, x5, 16*XLEN/8, x4)

inst_17:
// rs1==x26, rs2==x20, rd==x9, rs1_h0_val == 8192, rs2_h0_val == 4096, rs2_h1_val == 4096, rs1_h1_val == -1, rs2_h3_val == 32, rs2_h2_val == 4096, rs1_h3_val == -1
// opcode: paaddu.h ; op1:x26; op2:x20; dest:x9; op1val:0xfffffffcffff2000;  op2val:0x20100010001000
TEST_RR_OP(paaddu.h, x9, x26, x20, 0x0000000000000000, 0xfffffffcffff2000, 0x20100010001000, x5, 17*XLEN/8, x6)

inst_18:
// rs1==x4, rs2==x18, rd==x17, rs1_h0_val == 16384, rs1_h3_val == -513, rs2_h3_val == -513, rs1_h3_val == rs2_h3_val
// opcode: paaddu.h ; op1:x4; op2:x18; dest:x17; op1val:0xfdff0007ff7f4000;  op2val:0xfdff0003fffcc000
TEST_RR_OP(paaddu.h, x17, x4, x18, 0x0000000000000000, 0xfdff0007ff7f4000, 0xfdff0003fffcc000, x5, 18*XLEN/8, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_19:
// rs1==x11, rs2==x31, rd==x8, rs1_h0_val == -2, rs1_h2_val == 16384, rs2_h1_val == 16, rs1_h3_val == 16384, rs2_h0_val == -17
// opcode: paaddu.h ; op1:x11; op2:x31; dest:x8; op1val:0x400040000005fffe;  op2val:0x09aaaa0010ffef
TEST_RR_OP(paaddu.h, x8, x11, x31, 0x0000000000000000, 0x400040000005fffe, 0x09aaaa0010ffef, x3, 0*XLEN/8, x6)

inst_20:
// rs1==x9, rs2==x28, rd==x18, rs1_h0_val == -3, rs2_h0_val == 256, rs2_h1_val == 32
// opcode: paaddu.h ; op1:x9; op2:x28; dest:x18; op1val:0xfeffffbffff6fffd;  op2val:0xdffffffa00200100
TEST_RR_OP(paaddu.h, x18, x9, x28, 0x0000000000000000, 0xfeffffbffff6fffd, 0xdffffffa00200100, x3, 1*XLEN/8, x6)

inst_21:
// rs1==x8, rs2==x11, rd==x4, rs1_h0_val == -5, rs1_h3_val == 2, rs2_h1_val == -4097, rs2_h2_val == -5
// opcode: paaddu.h ; op1:x8; op2:x11; dest:x4; op1val:0x020007bffffffb;  op2val:0x08fffbefff3fff
TEST_RR_OP(paaddu.h, x4, x8, x11, 0x0000000000000000, 0x020007bffffffb, 0x08fffbefff3fff, x3, 2*XLEN/8, x6)

inst_22:
// rs1==x18, rs2==x5, rd==x28, rs1_h0_val == -9, rs2_h0_val == 8192, rs1_h1_val == 512, rs1_h2_val == 1, rs2_h2_val == -1
// opcode: paaddu.h ; op1:x18; op2:x5; dest:x28; op1val:0x0500010200fff7;  op2val:0x10ffff55552000
TEST_RR_OP(paaddu.h, x28, x18, x5, 0x0000000000000000, 0x0500010200fff7, 0x10ffff55552000, x3, 3*XLEN/8, x6)

inst_23:
// rs1==x23, rs2==x8, rd==x30, rs1_h0_val == -17, rs1_h3_val == 32767, rs2_h1_val == -9, rs1_h1_val == 0
// opcode: paaddu.h ; op1:x23; op2:x8; dest:x30; op1val:0x7fff00040000ffef;  op2val:0xbfff0003fff70007
TEST_RR_OP(paaddu.h, x30, x23, x8, 0x0000000000000000, 0x7fff00040000ffef, 0xbfff0003fff70007, x3, 4*XLEN/8, x6)

inst_24:
// rs1==x16, rs2==x30, rd==x23, rs1_h0_val == -33, rs2_h1_val == 0, rs2_h3_val == -257
// opcode: paaddu.h ; op1:x16; op2:x30; dest:x23; op1val:0x4008000200ffdf;  op2val:0xfeff000500000008
TEST_RR_OP(paaddu.h, x23, x16, x30, 0x0000000000000000, 0x4008000200ffdf, 0xfeff000500000008, x3, 5*XLEN/8, x6)

inst_25:
// rs1==x30, rs2==x24, rd==x7, rs1_h0_val == -65, rs2_h1_val == 256, rs1_h0_val == rs2_h0_val, rs1_h3_val == -129, rs1_h2_val == 8, rs2_h2_val == -257
// opcode: paaddu.h ; op1:x30; op2:x24; dest:x7; op1val:0xff7f0008ffbfffbf;  op2val:0xdffffeff0100ffbf
TEST_RR_OP(paaddu.h, x7, x30, x24, 0x0000000000000000, 0xff7f0008ffbfffbf, 0xdffffeff0100ffbf, x3, 6*XLEN/8, x6)

inst_26:
// rs1==x5, rs2==x21, rd==x22, rs1_h0_val == -129, rs2_h3_val == -4097, rs1_h3_val == -4097, rs2_h0_val == 1
// opcode: paaddu.h ; op1:x5; op2:x21; dest:x22; op1val:0xefffaaaa0400ff7f;  op2val:0xeffffffbfff70001
TEST_RR_OP(paaddu.h, x22, x5, x21, 0x0000000000000000, 0xefffaaaa0400ff7f, 0xeffffffbfff70001, x3, 7*XLEN/8, x6)

inst_27:
// rs1==x24, rs2==x0, rd==x11, rs1_h0_val == -257, rs2_h1_val == -8193, rs2_h2_val == 4, rs2_h3_val == 21845
// opcode: paaddu.h ; op1:x24; op2:x0; dest:x11; op1val:0xffef00050800feff;  op2val:0x55550004dfffdfff
TEST_RR_OP(paaddu.h, x11, x24, x0, 0x0000000000000000, 0xffef00050800feff, 0x55550004dfffdfff, x3, 8*XLEN/8, x6)

inst_28:
// rs1==x14, rs2==x4, rd==x12, rs1_h0_val == -513, rs2_h2_val == -2, rs2_h3_val == 2048, rs2_h1_val == -32768, rs1_h3_val == 16, rs1_h1_val == -3, rs2_h0_val == 1024
// opcode: paaddu.h ; op1:x14; op2:x4; dest:x12; op1val:0x100001fffdfdff;  op2val:0x800fffe80000400
TEST_RR_OP(paaddu.h, x12, x14, x4, 0x0000000000000000, 0x100001fffdfdff, 0x800fffe80000400, x3, 9*XLEN/8, x6)

inst_29:
// rs1==x1, rs2==x2, rd==x14, rs1_h0_val == -1025, rs1_h2_val == -2049, rs1_h1_val == 16, rs2_h2_val == -33, rs2_h0_val == -16385, rs2_h3_val == -3, rs2_h1_val == -16385
// opcode: paaddu.h ; op1:x1; op2:x2; dest:x14; op1val:0xaaaaf7ff0010fbff;  op2val:0xfffdffdfbfffbfff
TEST_RR_OP(paaddu.h, x14, x1, x2, 0x0000000000000000, 0xaaaaf7ff0010fbff, 0xfffdffdfbfffbfff, x3, 10*XLEN/8, x6)

inst_30:
// rs1==x7, rs2==x17, rd==x10, rs1_h0_val == -2049, rs1_h2_val == -8193, rs2_h3_val == 8192, rs2_h0_val == -5, rs1_h3_val == 0
// opcode: paaddu.h ; op1:x7; op2:x17; dest:x10; op1val:0x00dffffff6f7ff;  op2val:0x200000070007fffb
TEST_RR_OP(paaddu.h, x10, x7, x17, 0x0000000000000000, 0x00dffffff6f7ff, 0x200000070007fffb, x3, 11*XLEN/8, x6)

inst_31:
// rs1==x27, rs2==x10, rd==x5, rs1_h0_val == -4097, rs2_h3_val == 32767, rs1_h3_val == 512, rs2_h2_val == -16385
// opcode: paaddu.h ; op1:x27; op2:x10; dest:x5; op1val:0x20000057fffefff;  op2val:0x7fffbfffaaaa7fff
TEST_RR_OP(paaddu.h, x5, x27, x10, 0x0000000000000000, 0x20000057fffefff, 0x7fffbfffaaaa7fff, x3, 12*XLEN/8, x6)

inst_32:
// rs1_h0_val == -8193, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc0003fff0007dfff;  op2val:0xefff00098000efff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xc0003fff0007dfff, 0xefff00098000efff, x3, 13*XLEN/8, x6)

inst_33:
// rs2_h3_val == 2, rs1_h3_val == -5, rs1_h1_val == -21846
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ffaaaa0003;  op2val:0x02ffdfefff3fff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffbf7ffaaaa0003, 0x02ffdfefff3fff, x3, 14*XLEN/8, x1)

inst_34:
// rs2_h3_val == 4, rs1_h2_val == -129, rs2_h2_val == 8, rs1_h3_val == -2
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffeff7f0006fffd;  op2val:0x040008fffaffef
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffeff7f0006fffd, 0x040008fffaffef, x3, 15*XLEN/8, x1)

inst_35:
// rs2_h3_val == 64, rs2_h1_val == -129, rs2_h2_val == -9
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffc0010ff7f;  op2val:0x40fff7ff7ffff6
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x4000fffc0010ff7f, 0x40fff7ff7ffff6, x3, 16*XLEN/8, x1)

inst_36:
// rs2_h3_val == 128, rs2_h0_val == 21845, rs1_h3_val == -65
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00010007fdff;  op2val:0x803fff00005555
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffbf00010007fdff, 0x803fff00005555, x3, 17*XLEN/8, x1)

inst_37:
// rs2_h3_val == 512, rs1_h2_val == 128, rs1_h3_val == -32768
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000008008000000;  op2val:0x2000002dfffbfff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x8000008008000000, 0x2000002dfffbfff, x3, 18*XLEN/8, x1)

inst_38:
// rs2_h3_val == 1024, rs2_h0_val == -33, rs2_h2_val == 21845, rs1_h1_val == 4096
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fffa1000fffa;  op2val:0x4005555fff6ffdf
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x00fffa1000fffa, 0x4005555fff6ffdf, x3, 19*XLEN/8, x1)

inst_39:
// rs2_h3_val == 4096, rs1_h3_val == 8, rs2_h1_val == 64
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x080800fffcff7f;  op2val:0x1000c0000040c000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x080800fffcff7f, 0x1000c0000040c000, x3, 20*XLEN/8, x1)

inst_40:
// rs2_h3_val == 16384, rs2_h0_val == 32, rs2_h2_val == -513
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbff7fffdfffffc;  op2val:0x4000fdff01000020
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffbff7fffdfffffc, 0x4000fdff01000020, x3, 21*XLEN/8, x1)

inst_41:
// rs2_h3_val == -2, rs1_h2_val == 21845, rs2_h2_val == 64
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff5555fbfffff6;  op2val:0xfffe004000200007
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x7fff5555fbfffff6, 0xfffe004000200007, x3, 22*XLEN/8, x1)

inst_42:
// rs2_h3_val == -9, rs1_h2_val == 0, rs1_h1_val == 1
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0800000001fffa;  op2val:0xfff700018000c000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x0800000001fffa, 0xfff700018000c000, x3, 23*XLEN/8, x1)

inst_43:
// rs2_h3_val == -17, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff90005fffa;  op2val:0xffeffffcbfff0020
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xeffffff90005fffa, 0xffeffffcbfff0020, x3, 24*XLEN/8, x1)

inst_44:
// rs2_h3_val == -65, rs1_h3_val == 1024
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400fff60010fff8;  op2val:0xffbf00203fff0005
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x400fff60010fff8, 0xffbf00203fff0005, x3, 25*XLEN/8, x1)

inst_45:
// rs2_h3_val == -1025, rs2_h0_val == -2
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff610000006ffef;  op2val:0xfbfffff93ffffffe
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfff610000006ffef, 0xfbfffff93ffffffe, x3, 26*XLEN/8, x1)

inst_46:
// rs2_h3_val == -21846, rs1_h2_val == -5, rs1_h3_val == -16385
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffb0005ffdf;  op2val:0xaaaa100000402000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xbffffffb0005ffdf, 0xaaaa100000402000, x3, 27*XLEN/8, x1)

inst_47:
// rs1_h0_val == -16385, rs1_h2_val == -32768
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4080007fffbfff;  op2val:0xffdf0004c0007fff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x4080007fffbfff, 0xffdf0004c0007fff, x3, 28*XLEN/8, x1)

inst_48:
// rs1_h0_val == 21845, rs1_h2_val == 32, rs2_h1_val == -1025, rs2_h0_val == -9
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00002000095555;  op2val:0x031000fbfffff7
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x00002000095555, 0x031000fbfffff7, x3, 29*XLEN/8, x1)

inst_49:
// rs1_h0_val == -21846, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000006fffcaaaa;  op2val:0xfbff00040003ff7f
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x40000006fffcaaaa, 0xfbff00040003ff7f, x3, 30*XLEN/8, x1)

inst_50:
// rs1_h1_val == -32768, rs1_h3_val == 2048
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800000680000001;  op2val:0xfeff800000062000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x800000680000001, 0xfeff800000062000, x3, 31*XLEN/8, x1)

inst_51:
// rs1_h1_val == 2, rs2_h1_val == -3, rs1_h2_val == 8192, rs2_h2_val == -8193
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc20000002efff;  op2val:0x7fffdffffffdfeff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffc20000002efff, 0x7fffdffffffdfeff, x3, 32*XLEN/8, x1)

inst_52:
// rs1_h1_val == 4, rs1_h3_val == 8192
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd0004fff9;  op2val:0xffef0020f7fffffb
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x2000fffd0004fff9, 0xffef0020f7fffffb, x3, 33*XLEN/8, x1)

inst_53:
// rs1_h1_val == 8, rs2_h0_val == -1025
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffb0008fff8;  op2val:0xc00000050005fbff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffafffb0008fff8, 0xc00000050005fbff, x3, 34*XLEN/8, x1)

inst_54:
// rs1_h1_val == 32, rs1_h3_val == 256
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000200020feff;  op2val:0x09ffdffff80003
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x10000200020feff, 0x09ffdffff80003, x3, 35*XLEN/8, x1)

inst_55:
// rs1_h1_val == 64, rs2_h1_val == 16384
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff800400003;  op2val:0x0700404000bfff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffbfff800400003, 0x0700404000bfff, x3, 36*XLEN/8, x1)

inst_56:
// rs1_h1_val == 128, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x03400000800005;  op2val:0x003ffffff95555
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x03400000800005, 0x003ffffff95555, x3, 37*XLEN/8, x1)

inst_57:
// rs1_h1_val == 8192, rs1_h2_val == -33, rs2_h1_val == 8
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf2000dfff;  op2val:0xfffafffc00080200
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfdffffdf2000dfff, 0xfffafffc00080200, x3, 38*XLEN/8, x1)

inst_58:
// rs1_h3_val == -9, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7dfffffff0000;  op2val:0x80ffbffffcfff7
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfff7dfffffff0000, 0x80ffbffffcfff7, x3, 39*XLEN/8, x1)

inst_59:
// rs1_h3_val == -33, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdff80000200;  op2val:0x02bfffffbf7fff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffdffdff80000200, 0x02bfffffbf7fff, x3, 40*XLEN/8, x1)

inst_60:
// rs1_h3_val == -8193, rs2_h2_val == 16, rs2_h1_val == -257
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000ffdf4000;  op2val:0x050010fefffeff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xdfff2000ffdf4000, 0x050010fefffeff, x3, 41*XLEN/8, x1)

inst_61:
// rs1_h3_val == 21845, rs2_h2_val == 128, rs1_h1_val == -2
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555c000fffe0800;  op2val:0xfff800800100fffe
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x5555c000fffe0800, 0xfff800800100fffe, x3, 42*XLEN/8, x1)

inst_62:
// rs2_h0_val == -32768, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffd00050000;  op2val:0x3ffffffcaaaa8000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfefffffd00050000, 0x3ffffffcaaaa8000, x3, 43*XLEN/8, x1)

inst_63:
// rs2_h0_val == 0, rs1_h2_val == -16385
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcbffff7ff0008;  op2val:0xefffbffffff90000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffcbffff7ff0008, 0xefffbffffff90000, x3, 44*XLEN/8, x1)

inst_64:
// rs2_h0_val == 2, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffdf00020200;  op2val:0xfff93ffffff70002
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffeffdf00020200, 0xfff93ffffff70002, x3, 45*XLEN/8, x1)

inst_65:
// rs2_h0_val == 4, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef3fff00800006;  op2val:0x80fffefeff0004
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffef3fff00800006, 0x80fffefeff0004, x3, 46*XLEN/8, x1)

inst_66:
// rs2_h0_val == 16, rs1_h3_val == 128, rs1_h1_val == 16384, rs2_h2_val == -4097
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80000340000009;  op2val:0xfff8efffefff0010
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x80000340000009, 0xfff8efffefff0010, x3, 47*XLEN/8, x1)

inst_67:
// rs2_h0_val == 128, rs1_h2_val == -17
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08ffefffff0020;  op2val:0xfff7000310000080
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x08ffefffff0020, 0xfff7000310000080, x3, 48*XLEN/8, x1)

inst_68:
// rs2_h0_val == 2048, rs2_h2_val == 2048
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0004fffff7ff;  op2val:0xffef080000070800
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffdf0004fffff7ff, 0xffef080000070800, x3, 49*XLEN/8, x1)

inst_69:
// rs2_h0_val == 16384, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fffc0000100bfff;  op2val:0xdfff0002ff7f4000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x7fffc0000100bfff, 0xdfff0002ff7f4000, x3, 50*XLEN/8, x1)

inst_70:
// rs2_h0_val == -2049, rs1_h2_val == 64, rs2_h2_val == 16384
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffaffbf;  op2val:0x044000effff7ff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x000040fffaffbf, 0x044000effff7ff, x3, 51*XLEN/8, x1)

inst_71:
// rs2_h0_val == -21846, rs1_h2_val == 2
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000022000c000;  op2val:0x2000fffabfffaaaa
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x10000022000c000, 0x2000fffabfffaaaa, x3, 52*XLEN/8, x1)

inst_72:
// rs2_h1_val == -1, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x07fbfffdffc000;  op2val:0x090001ffffff7f
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x07fbfffdffc000, 0x090001ffffff7f, x3, 53*XLEN/8, x1)

inst_73:
// rs2_h1_val == 1, rs1_h2_val == -257, rs2_h3_val == 1
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40fefffffdc000;  op2val:0x01fffc0001aaaa
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x40fefffffdc000, 0x01fffc0001aaaa, x3, 54*XLEN/8, x1)

inst_74:
// rs1_h1_val == -5, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdfffffbefff;  op2val:0x060008ff7faaaa
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffbffdfffffbefff, 0x060008ff7faaaa, x3, 55*XLEN/8, x1)

inst_75:
// rs2_h1_val == 512, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fff900405555;  op2val:0xbfff80000200fff8
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x00fff900405555, 0xbfff80000200fff8, x3, 56*XLEN/8, x1)

inst_76:
// rs2_h1_val == 1024, rs1_h2_val == 1024
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x020400ffff0020;  op2val:0xbfff40000400fffb
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x020400ffff0020, 0xbfff40000400fffb, x3, 57*XLEN/8, x1)

inst_77:
// rs1_h1_val == -4097, rs2_h2_val == 0
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000effffffa;  op2val:0x8000000007fffa
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfffe2000effffffa, 0x8000000007fffa, x3, 58*XLEN/8, x1)

inst_78:
// rs2_h1_val == 2048, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fbfffdfffffe;  op2val:0xffbffff708008000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x09fbfffdfffffe, 0xffbffff708008000, x3, 59*XLEN/8, x1)

inst_79:
// rs1_h1_val == -8193, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200fff8dfffbfff;  op2val:0x80fff700070000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x200fff8dfffbfff, 0x80fff700070000, x3, 60*XLEN/8, x1)

inst_80:
// rs1_h1_val == 21845, rs2_h3_val == -1
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf55550004;  op2val:0xffff3fff0003fffb
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffffffdf55550004, 0xffff3fff0003fffb, x3, 61*XLEN/8, x1)

inst_81:
// rs1_h2_val == -1, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffff00800800;  op2val:0x2008000feff0020
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfff9ffff00800800, 0x2008000feff0020, x3, 62*XLEN/8, x1)

inst_82:
// rs1_h2_val == 32767, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x097fff0080ffdf;  op2val:0x800400feffffef
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x097fff0080ffdf, 0x800400feffffef, x3, 63*XLEN/8, x1)

inst_83:
// rs2_h1_val == -513, rs2_h2_val == -2049
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000020fffbfff8;  op2val:0xfffaf7fffdff0006
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x2000020fffbfff8, 0xfffaf7fffdff0006, x3, 64*XLEN/8, x1)

inst_84:
// rs1_h2_val == 512, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff020000067fff;  op2val:0xfff900000080fff8
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x3fff020000067fff, 0xfff900000080fff8, x3, 65*XLEN/8, x1)

inst_85:
// rs2_h2_val == 256, rs2_h1_val == 4
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x804000ffdffffa;  op2val:0xfffe01000004dfff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x804000ffdffffa, 0xfffe01000004dfff, x3, 66*XLEN/8, x1)

inst_86:
// rs1_h1_val == -9, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555fff70000;  op2val:0x20fff7fff68000
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfbff5555fff70000, 0x20fff7fff68000, x3, 67*XLEN/8, x1)

inst_87:
// rs2_h2_val == 512, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0001fffef7ff;  op2val:0xdfff0200fffafffc
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x7fff0001fffef7ff, 0xdfff0200fffafffc, x3, 68*XLEN/8, x1)

inst_88:
// rs1_h2_val == -4097, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40efff02002000;  op2val:0x10000400ffdf0020
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x40efff02002000, 0x10000400ffdf0020, x3, 69*XLEN/8, x1)

inst_89:
// rs2_h2_val == 8192, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x040006fffaaaaa;  op2val:0xfff92000fffdfffb
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x040006fffaaaaa, 0xfff92000fffdfffb, x3, 70*XLEN/8, x1)

inst_90:
// rs2_h2_val == -3, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff600090010;  op2val:0xfbfffffdfffcfffd
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x8000fff600090010, 0xfbfffffdfffcfffd, x3, 71*XLEN/8, x1)

inst_91:
// rs2_h2_val == -17, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffffffc0006;  op2val:0x03ffeffffcfffa
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x2000fffffffc0006, 0x03ffeffffcfffa, x3, 72*XLEN/8, x1)

inst_92:
// rs2_h2_val == 32767, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100000500800009;  op2val:0x4007ffffff80800
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x100000500800009, 0x4007ffffff80800, x3, 73*XLEN/8, x1)

inst_93:
// rs1_h3_val == 32, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20100001000080;  op2val:0xfff70010feffffdf
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x20100001000080, 0xfff70010feffffdf, x3, 74*XLEN/8, x1)

inst_94:
// rs2_h1_val == 2, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbffff8c000;  op2val:0xffffffff00020007
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x1000ffbffff8c000, 0xffffffff00020007, x3, 75*XLEN/8, x1)

inst_95:
// rs1_h2_val == -2, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffe0200ffef;  op2val:0x01ffbffffdfeff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xbffffffe0200ffef, 0x01ffbffffdfeff, x3, 76*XLEN/8, x1)

inst_96:
// rs2_h3_val == -32768, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000100000200;  op2val:0x800008007fffdfff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfff9000100000200, 0x800008007fffdfff, x3, 77*XLEN/8, x1)

inst_97:
// rs1_h2_val == -9, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff7aaaafffa;  op2val:0x3ffffbff0020fff8
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x8000fff7aaaafffa, 0x3ffffbff0020fff8, x3, 78*XLEN/8, x1)

inst_98:
// rs1_h1_val == -257, 
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef0200feff0004;  op2val:0x7ffff7ff0003fffe
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffef0200feff0004, 0x7ffff7ff0003fffe, x3, 79*XLEN/8, x1)

inst_99:
// rs1_h0_val == 0, rs2_h3_val == 16, rs2_h1_val == 8192, rs2_h0_val == -4097, rs2_h2_val == -65, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 4096
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0410007fff0000;  op2val:0x10ffbf2000efff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0x0410007fff0000, 0x10ffbf2000efff, x3, 80*XLEN/8, x1)

inst_100:
// rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -2049, rs2_h1_val == -33, rs2_h0_val == -513, rs1_h2_val == 16, rs2_h2_val == -1025, rs1_h1_val == -129
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010ff7f7fff;  op2val:0xfffcfbffffdffdff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0010ff7f7fff, 0xfffcfbffffdffdff, x3, 81*XLEN/8, x1)

inst_101:
// rs1_h0_val == 4, rs1_h2_val == -1025, rs2_h3_val == 256, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 8, rs2_h2_val == -32768, rs1_h1_val == -17
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbffffef0004;  op2val:0x1008000fff60008
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xc000fbffffef0004, 0x1008000fff60008, x3, 82*XLEN/8, x1)

inst_102:
// rs1_h0_val == 512, rs2_h0_val == -129, rs2_h1_val == -17, rs1_h3_val == -257
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff3fff00050200;  op2val:0x060400ffefff7f
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xfeff3fff00050200, 0x060400ffefff7f, x3, 83*XLEN/8, x1)

inst_103:
// rs1_h0_val == -257, rs2_h1_val == -8193, rs2_h2_val == 4, rs2_h3_val == 21845
// opcode: paaddu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef00050800feff;  op2val:0x55550004dfffdfff
TEST_RR_OP(paaddu.h, x31, x30, x29, 0x0000000000000000, 0xffef00050800feff, 0x55550004dfffdfff, x3, 84*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 19*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 85*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
