
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 06:11:38 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the maccu.w01 instruction of the RISC-V RV64PZicsr extension for the maccu.w01 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",maccu.w01)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x26, rd==x17, rs1_w0_val == -2147483648, rs2_w1_val == 268435456, rs1_w1_val == -1025, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val != rs2_w1_val, rs2_w0_val == -131073
// opcode: maccu.w01 ; op1:x24; op2:x26; dest:x17; op1val:0xfffffbff80000000;  op2val:0x10000000fffdffff
TEST_RR_OP(maccu.w01, x17, x24, x26, 0x0000000000000000, 0xfffffbff80000000, 0x10000000fffdffff, x1, 0*XLEN/8, x9)

inst_1:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_w0_val == -1, rs1_w1_val == 0
// opcode: maccu.w01 ; op1:x5; op2:x5; dest:x5; op1val:0x000000ffffffff;  op2val:0xfffffff6fffffff8
TEST_RR_OP(maccu.w01, x5, x5, x5, 0x0000000000000000, 0x000000ffffffff, 0xfffffff6fffffff8, x1, 1*XLEN/8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x27, rs2==x22, rd==x27, rs1_w0_val == 0, rs1_w1_val == 65536, rs2_w1_val == 8, rs2_w0_val == 16, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: maccu.w01 ; op1:x27; op2:x22; dest:x27; op1val:0x01000000000000;  op2val:0x00000800000010
TEST_RR_OP(maccu.w01, x27, x27, x22, 0x0000000000000000, 0x01000000000000, 0x00000800000010, x1, 2*XLEN/8, x9)

inst_3:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x6, rs1_w0_val == 1, rs2_w0_val == -4194305, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == 2048, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -257
// opcode: maccu.w01 ; op1:x17; op2:x17; dest:x6; op1val:0x00080000000001;  op2val:0xfffffeffffbfffff
TEST_RR_OP(maccu.w01, x6, x17, x17, 0x0000000000000000, 0x00080000000001, 0xfffffeffffbfffff, x1, 3*XLEN/8, x9)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x4, rd==x4, rs1_w0_val == 2147483647, rs2_w0_val == 1048576, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 134217728, rs2_w1_val == -8388609
// opcode: maccu.w01 ; op1:x12; op2:x4; dest:x4; op1val:0x80000007fffffff;  op2val:0xff7fffff00100000
TEST_RR_OP(maccu.w01, x4, x12, x4, 0x0000000000000000, 0x80000007fffffff, 0xff7fffff00100000, x1, 4*XLEN/8, x9)

inst_5:
// rs1==x22, rs2==x3, rd==x31, rs1_w0_val == 2, rs2_w1_val == -262145, rs2_w0_val == -3
// opcode: maccu.w01 ; op1:x22; op2:x3; dest:x31; op1val:0x3fffffff00000002;  op2val:0xfffbfffffffffffd
TEST_RR_OP(maccu.w01, x31, x22, x3, 0x0000000000000000, 0x3fffffff00000002, 0xfffbfffffffffffd, x1, 5*XLEN/8, x9)

inst_6:
// rs1==x15, rs2==x21, rd==x12, rs1_w0_val == 4, rs1_w1_val == -17
// opcode: maccu.w01 ; op1:x15; op2:x21; dest:x12; op1val:0xffffffef00000004;  op2val:0x0000053fffffff
TEST_RR_OP(maccu.w01, x12, x15, x21, 0x0000000000000000, 0xffffffef00000004, 0x0000053fffffff, x1, 6*XLEN/8, x9)

inst_7:
// rs1==x4, rs2==x10, rd==x20, rs1_w0_val == 8, rs2_w1_val == 2, rs2_w0_val == 16777216, rs1_w1_val == -8388609
// opcode: maccu.w01 ; op1:x4; op2:x10; dest:x20; op1val:0xff7fffff00000008;  op2val:0x00000201000000
TEST_RR_OP(maccu.w01, x20, x4, x10, 0x0000000000000000, 0xff7fffff00000008, 0x00000201000000, x1, 7*XLEN/8, x9)

inst_8:
// rs1==x3, rs2==x0, rd==x11, rs1_w0_val == 16, rs2_w1_val == -3, rs2_w0_val == -8388609, rs1_w1_val == 16
// opcode: maccu.w01 ; op1:x3; op2:x0; dest:x11; op1val:0x00001000000010;  op2val:0xfffffffdff7fffff
TEST_RR_OP(maccu.w01, x11, x3, x0, 0x0000000000000000, 0x00001000000010, 0xfffffffdff7fffff, x1, 8*XLEN/8, x9)

inst_9:
// rs1==x7, rs2==x28, rd==x16, rs1_w0_val == 32, rs1_w1_val == 4, rs2_w0_val == 262144
// opcode: maccu.w01 ; op1:x7; op2:x28; dest:x16; op1val:0x00000400000020;  op2val:0xfffffeff00040000
TEST_RR_OP(maccu.w01, x16, x7, x28, 0x0000000000000000, 0x00000400000020, 0xfffffeff00040000, x1, 9*XLEN/8, x9)

inst_10:
// rs1==x0, rs2==x2, rd==x10, rs1_w0_val == 64, rs2_w0_val == 2147483647, rs2_w1_val == -65, rs1_w1_val == 1073741824
// opcode: maccu.w01 ; op1:x0; op2:x2; dest:x10; op1val:0x4000000000000040;  op2val:0xffffffbf7fffffff
TEST_RR_OP(maccu.w01, x10, x0, x2, 0x0000000000000000, 0x4000000000000040, 0xffffffbf7fffffff, x1, 10*XLEN/8, x9)

inst_11:
// rs1==x21, rs2==x16, rd==x14, rs1_w0_val == 128, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -2049, rs2_w1_val == -32769, rs2_w0_val == 134217728
// opcode: maccu.w01 ; op1:x21; op2:x16; dest:x14; op1val:0xfffff7ff00000080;  op2val:0xffff7fff08000000
TEST_RR_OP(maccu.w01, x14, x21, x16, 0x0000000000000000, 0xfffff7ff00000080, 0xffff7fff08000000, x1, 11*XLEN/8, x9)

inst_12:
// rs1==x18, rs2==x31, rd==x30, rs1_w0_val == 256, rs1_w1_val == -536870913, rs2_w0_val == 1024
// opcode: maccu.w01 ; op1:x18; op2:x31; dest:x30; op1val:0xdfffffff00000100;  op2val:0xfffffff800000400
TEST_RR_OP(maccu.w01, x30, x18, x31, 0x0000000000000000, 0xdfffffff00000100, 0xfffffff800000400, x1, 12*XLEN/8, x9)

inst_13:
// rs1==x11, rs2==x12, rd==x28, rs1_w0_val == 512, rs1_w1_val == 262144, rs2_w1_val == -9
// opcode: maccu.w01 ; op1:x11; op2:x12; dest:x28; op1val:0x04000000000200;  op2val:0xfffffff7c0000000
TEST_RR_OP(maccu.w01, x28, x11, x12, 0x0000000000000000, 0x04000000000200, 0xfffffff7c0000000, x1, 13*XLEN/8, x9)

inst_14:
// rs1==x23, rs2==x8, rd==x25, rs1_w0_val == 1024, rs2_w1_val == -33554433, rs1_w1_val == 16384
// opcode: maccu.w01 ; op1:x23; op2:x8; dest:x25; op1val:0x00400000000400;  op2val:0xfdffffff00000009
TEST_RR_OP(maccu.w01, x25, x23, x8, 0x0000000000000000, 0x00400000000400, 0xfdffffff00000009, x1, 14*XLEN/8, x9)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x6, rs2==x7, rd==x2, rs1_w0_val == 2048, rs1_w1_val == -513, rs2_w1_val == 16
// opcode: maccu.w01 ; op1:x6; op2:x7; dest:x2; op1val:0xfffffdff00000800;  op2val:0x000010fffffffd
TEST_RR_OP(maccu.w01, x2, x6, x7, 0x0000000000000000, 0xfffffdff00000800, 0x000010fffffffd, x4, 0*XLEN/8, x5)

inst_16:
// rs1==x13, rs2==x15, rd==x3, rs1_w0_val == 4096, rs2_w1_val == -2097153
// opcode: maccu.w01 ; op1:x13; op2:x15; dest:x3; op1val:0x00000400001000;  op2val:0xffdfffff08000000
TEST_RR_OP(maccu.w01, x3, x13, x15, 0x0000000000000000, 0x00000400001000, 0xffdfffff08000000, x4, 1*XLEN/8, x5)

inst_17:
// rs1==x29, rs2==x27, rd==x7, rs1_w0_val == 8192, rs1_w1_val == 67108864, rs2_w1_val == -17
// opcode: maccu.w01 ; op1:x29; op2:x27; dest:x7; op1val:0x400000000002000;  op2val:0xffffffef00000005
TEST_RR_OP(maccu.w01, x7, x29, x27, 0x0000000000000000, 0x400000000002000, 0xffffffef00000005, x4, 2*XLEN/8, x5)

inst_18:
// rs1==x28, rs2==x1, rd==x15, rs1_w0_val == 16384, rs1_w1_val == 8
// opcode: maccu.w01 ; op1:x28; op2:x1; dest:x15; op1val:0x00000800004000;  op2val:0x000007c0000000
TEST_RR_OP(maccu.w01, x15, x28, x1, 0x0000000000000000, 0x00000800004000, 0x000007c0000000, x4, 3*XLEN/8, x5)

inst_19:
// rs1==x9, rs2==x25, rd==x1, rs1_w0_val == 32768, rs1_w1_val == -2
// opcode: maccu.w01 ; op1:x9; op2:x25; dest:x1; op1val:0xfffffffe00008000;  op2val:0x000007ffbfffff
TEST_RR_OP(maccu.w01, x1, x9, x25, 0x0000000000000000, 0xfffffffe00008000, 0x000007ffbfffff, x4, 4*XLEN/8, x5)

inst_20:
// rs1==x26, rs2==x19, rd==x29, rs1_w0_val == 65536, rs2_w1_val == -1073741825, rs2_w0_val == 4
// opcode: maccu.w01 ; op1:x26; op2:x19; dest:x29; op1val:0xfffffffa00010000;  op2val:0xbfffffff00000004
TEST_RR_OP(maccu.w01, x29, x26, x19, 0x0000000000000000, 0xfffffffa00010000, 0xbfffffff00000004, x4, 5*XLEN/8, x5)

inst_21:
// rs1==x10, rs2==x29, rd==x0, rs1_w0_val == 131072, rs2_w0_val == -536870913, rs1_w1_val == -33, rs2_w1_val == 1
// opcode: maccu.w01 ; op1:x10; op2:x29; dest:x0; op1val:0xffffffdf00020000;  op2val:0x000001dfffffff
TEST_RR_OP(maccu.w01, x0, x10, x29, 0x0000000000000000, 0xffffffdf00020000, 0x000001dfffffff, x4, 6*XLEN/8, x5)

inst_22:
// rs1==x16, rs2==x18, rd==x9, rs1_w0_val == 262144, rs1_w1_val == -524289
// opcode: maccu.w01 ; op1:x16; op2:x18; dest:x9; op1val:0xfff7ffff00040000;  op2val:0xc0000000fffffffc
TEST_RR_OP(maccu.w01, x9, x16, x18, 0x0000000000000000, 0xfff7ffff00040000, 0xc0000000fffffffc, x4, 7*XLEN/8, x5)

inst_23:
// rs1==x31, rs2==x24, rd==x21, rs1_w0_val == 524288, rs2_w1_val == 32, rs2_w0_val == -1025
// opcode: maccu.w01 ; op1:x31; op2:x24; dest:x21; op1val:0x00000900080000;  op2val:0x000020fffffbff
TEST_RR_OP(maccu.w01, x21, x31, x24, 0x0000000000000000, 0x00000900080000, 0x000020fffffbff, x4, 8*XLEN/8, x5)

inst_24:
// rs1==x20, rs2==x30, rd==x8, rs1_w0_val == 1048576, rs2_w0_val == -65, rs1_w1_val == -2147483648
// opcode: maccu.w01 ; op1:x20; op2:x30; dest:x8; op1val:0x8000000000100000;  op2val:0xffdfffffffffffbf
TEST_RR_OP(maccu.w01, x8, x20, x30, 0x0000000000000000, 0x8000000000100000, 0xffdfffffffffffbf, x4, 9*XLEN/8, x5)

inst_25:
// rs1==x30, rs2==x9, rd==x22, rs1_w0_val == 2097152, rs2_w1_val == 4, rs2_w0_val == -32769
// opcode: maccu.w01 ; op1:x30; op2:x9; dest:x22; op1val:0x3fffffff00200000;  op2val:0x000004ffff7fff
TEST_RR_OP(maccu.w01, x22, x30, x9, 0x0000000000000000, 0x3fffffff00200000, 0x000004ffff7fff, x4, 10*XLEN/8, x5)

inst_26:
// rs1==x14, rs2==x20, rd==x26, rs1_w0_val == 4194304, rs1_w1_val == -3, rs2_w1_val == -524289, rs2_w0_val == 131072
// opcode: maccu.w01 ; op1:x14; op2:x20; dest:x26; op1val:0xfffffffd00400000;  op2val:0xfff7ffff00020000
TEST_RR_OP(maccu.w01, x26, x14, x20, 0x0000000000000000, 0xfffffffd00400000, 0xfff7ffff00020000, x4, 11*XLEN/8, x5)

inst_27:
// rs1==x25, rs2==x11, rd==x19, rs1_w0_val == 8388608, rs2_w0_val == 0, rs2_w1_val == 262144
// opcode: maccu.w01 ; op1:x25; op2:x11; dest:x19; op1val:0xfffffff600800000;  op2val:0x04000000000000
TEST_RR_OP(maccu.w01, x19, x25, x11, 0x0000000000000000, 0xfffffff600800000, 0x04000000000000, x4, 12*XLEN/8, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_28:
// rs1==x19, rs2==x13, rd==x18, rs1_w0_val == 16777216, rs2_w0_val == -2097153, rs2_w1_val == 4096
// opcode: maccu.w01 ; op1:x19; op2:x13; dest:x18; op1val:0x00000301000000;  op2val:0x001000ffdfffff
TEST_RR_OP(maccu.w01, x18, x19, x13, 0x0000000000000000, 0x00000301000000, 0x001000ffdfffff, x3, 0*XLEN/8, x5)

inst_29:
// rs1==x2, rs2==x14, rd==x24, rs1_w0_val == 33554432, rs2_w0_val == -67108865, rs1_w1_val == 2097152
// opcode: maccu.w01 ; op1:x2; op2:x14; dest:x24; op1val:0x20000002000000;  op2val:0x001000fbffffff
TEST_RR_OP(maccu.w01, x24, x2, x14, 0x0000000000000000, 0x20000002000000, 0x001000fbffffff, x3, 1*XLEN/8, x5)

inst_30:
// rs1==x8, rs2==x23, rd==x13, rs1_w0_val == 67108864, rs1_w1_val == 2147483647, rs2_w1_val == -129
// opcode: maccu.w01 ; op1:x8; op2:x23; dest:x13; op1val:0x7fffffff04000000;  op2val:0xffffff7f3fffffff
TEST_RR_OP(maccu.w01, x13, x8, x23, 0x0000000000000000, 0x7fffffff04000000, 0xffffff7f3fffffff, x3, 2*XLEN/8, x5)

inst_31:
// rs1==x1, rs2==x6, rd==x23, rs1_w0_val == 134217728, rs2_w1_val == 512, rs2_w0_val == 1
// opcode: maccu.w01 ; op1:x1; op2:x6; dest:x23; op1val:0x00000008000000;  op2val:0x00020000000001
TEST_RR_OP(maccu.w01, x23, x1, x6, 0x0000000000000000, 0x00000008000000, 0x00020000000001, x3, 3*XLEN/8, x5)

inst_32:
// rs1_w0_val == 268435456, rs2_w1_val == 524288, rs2_w0_val == -17
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff10000000;  op2val:0x080000ffffffef
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffbff10000000, 0x080000ffffffef, x3, 4*XLEN/8, x5)

inst_33:
// rs1_w0_val == 536870912, rs2_w0_val == 1073741824
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020000000;  op2val:0xfdffffff40000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x20000020000000, 0xfdffffff40000000, x3, 5*XLEN/8, x5)

inst_34:
// rs1_w0_val == 1073741824, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0xfffffeff00000400
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x8000000040000000, 0xfffffeff00000400, x3, 6*XLEN/8, x5)

inst_35:
// rs1_w0_val == -2, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -16777217
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffe;  op2val:0x00000800020000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffe, 0x00000800020000, x3, 7*XLEN/8, x5)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == -67108865, rs1_w1_val == 4096
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffffd;  op2val:0xfbffffff01000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x001000fffffffd, 0xfbffffff01000000, x3, 8*XLEN/8, x5)

inst_37:
// rs1_w0_val == -5, rs2_w1_val == 32768, rs1_w1_val == -1431655766
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffb;  op2val:0x00800000040000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffb, 0x00800000040000, x3, 9*XLEN/8, x5)

inst_38:
// rs1_w0_val == -9, rs2_w0_val == 33554432
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffff7;  op2val:0xffdfffff02000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x004000fffffff7, 0xffdfffff02000000, x3, 10*XLEN/8, x5)

inst_39:
// rs1_w0_val == -17, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffef;  op2val:0xfffffffd08000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000800ffffffef, 0xfffffffd08000000, x3, 11*XLEN/8, x5)

inst_40:
// rs1_w0_val == -33, rs1_w1_val == 512, rs2_w0_val == -2, rs2_w1_val == 2048
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffdf;  op2val:0x000800fffffffe
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000200ffffffdf, 0x000800fffffffe, x3, 12*XLEN/8, x5)

inst_41:
// rs1_w0_val == -65, rs2_w1_val == 0
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffbf;  op2val:0x000000ffff7fff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffbf, 0x000000ffff7fff, x3, 13*XLEN/8, x5)

inst_42:
// rs1_w0_val == -129, rs2_w1_val == -1048577
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffff7f;  op2val:0xffeffffffffffffd
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffff7f, 0xffeffffffffffffd, x3, 14*XLEN/8, x5)

inst_43:
// rs1_w0_val == -257, rs2_w1_val == -2147483648, rs2_w0_val == -262145
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffeff;  op2val:0x80000000fffbffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x40000000fffffeff, 0x80000000fffbffff, x3, 15*XLEN/8, x5)

inst_44:
// rs1_w0_val == -513, rs2_w1_val == 2097152
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffdff;  op2val:0x200000ffbfffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffdff, 0x200000ffbfffff, x3, 16*XLEN/8, x5)

inst_45:
// rs1_w0_val == -1025, rs2_w1_val == -1025, rs1_w1_val == -9, rs2_w0_val == -1048577
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffbff;  op2val:0xfffffbffffefffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffbff, 0xfffffbffffefffff, x3, 17*XLEN/8, x5)

inst_46:
// rs1_w0_val == -2049, rs2_w0_val == 268435456, rs2_w1_val == -268435457
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffff7ff;  op2val:0xefffffff10000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffefffff7ff, 0xefffffff10000000, x3, 18*XLEN/8, x5)

inst_47:
// rs1_w0_val == -4097, rs2_w0_val == 4194304, rs1_w1_val == 8192
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffffefff;  op2val:0xfffffff800400000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x002000ffffefff, 0xfffffff800400000, x3, 19*XLEN/8, x5)

inst_48:
// rs1_w0_val == -8193, rs2_w1_val == -16777217, rs1_w1_val == -1073741825, rs2_w0_val == -268435457
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffdfff;  op2val:0xfeffffffefffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffdfff, 0xfeffffffefffffff, x3, 20*XLEN/8, x5)

inst_49:
// rs1_w0_val == -16385, rs2_w0_val == -33
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffbfff;  op2val:0xffffffefffffffdf
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffbfff, 0xffffffefffffffdf, x3, 21*XLEN/8, x5)

inst_50:
// rs1_w0_val == -32769, rs2_w0_val == -33554433
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffff7fff;  op2val:0x200000fdffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x004000ffff7fff, 0x200000fdffffff, x3, 22*XLEN/8, x5)

inst_51:
// rs2_w1_val == -131073, rs2_w0_val == 8192, rs1_w0_val == -524289
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fff7ffff;  op2val:0xfffdffff00002000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x40000000fff7ffff, 0xfffdffff00002000, x3, 23*XLEN/8, x5)

inst_52:
// rs2_w1_val == -4194305, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000400;  op2val:0xffbfffff00002000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00000400000400, 0xffbfffff00002000, x3, 24*XLEN/8, x5)

inst_53:
// rs2_w1_val == -134217729, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffffffbf;  op2val:0xf7ffffff00020000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000009ffffffbf, 0xf7ffffff00020000, x3, 25*XLEN/8, x5)

inst_54:
// rs2_w1_val == -536870913, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0xdfffffff00000006
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0xdfffffff00000006, x3, 26*XLEN/8, x5)

inst_55:
// rs2_w1_val == 1431655765, rs2_w0_val == -8193, rs1_w1_val == -65537
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00004000;  op2val:0x55555555ffffdfff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffeffff00004000, 0x55555555ffffdfff, x3, 27*XLEN/8, x5)

inst_56:
// rs2_w1_val == -1431655766, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000404000000;  op2val:0xaaaaaaaaffdfffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00000404000000, 0xaaaaaaaaffdfffff, x3, 28*XLEN/8, x5)

inst_57:
// rs1_w0_val == rs2_w0_val, rs2_w0_val == 8
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000008;  op2val:0xbfffffff00000008
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000008, 0xbfffffff00000008, x3, 29*XLEN/8, x5)

inst_58:
// rs1_w1_val == rs2_w1_val, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffff7fff;  op2val:0x00001000000005
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000010ffff7fff, 0x00001000000005, x3, 30*XLEN/8, x5)

inst_59:
// rs1_w0_val == -65537, rs2_w0_val == -129
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffeffff;  op2val:0xfff7ffffffffff7f
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000003fffeffff, 0xfff7ffffffffff7f, x3, 31*XLEN/8, x5)

inst_60:
// rs1_w0_val == -131073, rs2_w1_val == 16777216, rs1_w1_val == 268435456
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffdffff;  op2val:0x1000000fffffffe
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x10000000fffdffff, 0x1000000fffffffe, x3, 32*XLEN/8, x5)

inst_61:
// rs1_w0_val == -262145, rs1_w1_val == 536870912
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffbffff;  op2val:0xff7fffff00000010
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x20000000fffbffff, 0xff7fffff00000010, x3, 33*XLEN/8, x5)

inst_62:
// rs1_w0_val == -1048577, rs2_w0_val == -257
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffefffff;  op2val:0xffffffbffffffeff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffefffff, 0xffffffbffffffeff, x3, 34*XLEN/8, x5)

inst_63:
// rs1_w0_val == -2097153, rs2_w0_val == -1073741825, rs1_w1_val == 8388608
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffdfffff;  op2val:0xf7ffffffbfffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x800000ffdfffff, 0xf7ffffffbfffffff, x3, 35*XLEN/8, x5)

inst_64:
// rs1_w0_val == -4194305, rs2_w0_val == 128
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffbfffff;  op2val:0x00000100000080
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000006ffbfffff, 0x00000100000080, x3, 36*XLEN/8, x5)

inst_65:
// rs1_w0_val == -8388609, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ff7fffff;  op2val:0xfffffbff00000010
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x8000000ff7fffff, 0xfffffbff00000010, x3, 37*XLEN/8, x5)

inst_66:
// rs1_w0_val == -16777217, rs2_w0_val == -1
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffeffffff;  op2val:0xefffffffffffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffdfffeffffff, 0xefffffffffffffff, x3, 38*XLEN/8, x5)

inst_67:
// rs1_w0_val == -33554433, rs2_w0_val == -513, rs1_w1_val == 128
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fdffffff;  op2val:0x000003fffffdff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000080fdffffff, 0x000003fffffdff, x3, 39*XLEN/8, x5)

inst_68:
// rs1_w0_val == -67108865, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fbffffff;  op2val:0xfbffffffffdfffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x800000fbffffff, 0xfbffffffffdfffff, x3, 40*XLEN/8, x5)

inst_69:
// rs1_w0_val == -134217729, rs1_w1_val == -4194305
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffff7ffffff;  op2val:0xc000000000000007
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffbffffff7ffffff, 0xc000000000000007, x3, 41*XLEN/8, x5)

inst_70:
// rs1_w0_val == -268435457, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0x5555555500002000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffdefffffff, 0x5555555500002000, x3, 42*XLEN/8, x5)

inst_71:
// rs1_w0_val == -536870913, rs2_w0_val == -1431655766, rs2_w1_val == -1
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffedfffffff;  op2val:0xffffffffaaaaaaaa
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffedfffffff, 0xffffffffaaaaaaaa, x3, 43*XLEN/8, x5)

inst_72:
// rs1_w0_val == -1073741825, rs2_w1_val == -8193, rs1_w1_val == 32768
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x008000bfffffff;  op2val:0xffffdfffc0000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x008000bfffffff, 0xffffdfffc0000000, x3, 44*XLEN/8, x5)

inst_73:
// rs1_w0_val == 1431655765, rs2_w1_val == 8192
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x20000055555555;  op2val:0x002000ffffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x20000055555555, 0x002000ffffffff, x3, 45*XLEN/8, x5)

inst_74:
// rs1_w0_val == -1431655766, rs1_w1_val == -65
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfaaaaaaaa;  op2val:0x002000ffffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffbfaaaaaaaa, 0x002000ffffffff, x3, 46*XLEN/8, x5)

inst_75:
// rs1_w1_val == -1, rs2_w1_val == 67108864
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000009;  op2val:0x4000000bfffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffff00000009, 0x4000000bfffffff, x3, 47*XLEN/8, x5)

inst_76:
// rs1_w1_val == 1, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffff9;  op2val:0x000000fbffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000001fffffff9, 0x000000fbffffff, x3, 48*XLEN/8, x5)

inst_77:
// rs1_w1_val == 2, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200040000;  op2val:0x00000400000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00000200040000, 0x00000400000000, x3, 49*XLEN/8, x5)

inst_78:
// rs1_w1_val == 32, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff6;  op2val:0x040000fffffffa
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000020fffffff6, 0x040000fffffffa, x3, 50*XLEN/8, x5)

inst_79:
// rs1_w1_val == 64, rs2_w0_val == 32768
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000002000;  op2val:0xfffbffff00008000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00004000002000, 0xfffbffff00008000, x3, 51*XLEN/8, x5)

inst_80:
// rs1_w1_val == 256, rs2_w1_val == 134217728
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000040;  op2val:0x8000000ffffff7f
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00010000000040, 0x8000000ffffff7f, x3, 52*XLEN/8, x5)

inst_81:
// rs1_w1_val == 1024, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00040004000000;  op2val:0x55555555fffffffd
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00040004000000, 0x55555555fffffffd, x3, 53*XLEN/8, x5)

inst_82:
// rs1_w1_val == 131072, rs2_w0_val == -2049, rs2_w1_val == 128
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x020000f7ffffff;  op2val:0x000080fffff7ff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x020000f7ffffff, 0x000080fffff7ff, x3, 54*XLEN/8, x5)

inst_83:
// rs1_w1_val == 524288, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000006;  op2val:0x000002fffffeff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x08000000000006, 0x000002fffffeff, x3, 55*XLEN/8, x5)

inst_84:
// rs1_w1_val == 1048576, rs2_w1_val == 1073741824
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000040;  op2val:0x40000000fbffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x10000000000040, 0x40000000fbffffff, x3, 56*XLEN/8, x5)

inst_85:
// rs1_w1_val == 4194304, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000080;  op2val:0x00000700008000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x40000000000080, 0x00000700008000, x3, 57*XLEN/8, x5)

inst_86:
// rs1_w1_val == -33554433, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffefff;  op2val:0xfffbffff00040000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffefff, 0xfffbffff00040000, x3, 58*XLEN/8, x5)

inst_87:
// rs1_w1_val == -67108865, rs2_w0_val == 524288
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00200000;  op2val:0xffffffbf00080000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfbffffff00200000, 0xffffffbf00080000, x3, 59*XLEN/8, x5)

inst_88:
// rs1_w1_val == -134217729, rs2_w1_val == -513
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000100;  op2val:0xfffffdff00400000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000100, 0xfffffdff00400000, x3, 60*XLEN/8, x5)

inst_89:
// rs1_w1_val == -268435457, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00800000;  op2val:0xfffdfffffffffff8
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xefffffff00800000, 0xfffdfffffffffff8, x3, 61*XLEN/8, x5)

inst_90:
// rs1_w1_val == 1431655765, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffdfffff;  op2val:0xfffffff800000003
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x55555555ffdfffff, 0xfffffff800000003, x3, 62*XLEN/8, x5)

inst_91:
// rs2_w0_val == -2147483648, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ff7fffff;  op2val:0xc000000080000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0xc000000080000000, x3, 63*XLEN/8, x5)

inst_92:
// rs2_w0_val == 2, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00001000;  op2val:0xffffff7f00000002
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00001000, 0xffffff7f00000002, x3, 64*XLEN/8, x5)

inst_93:
// rs2_w0_val == 32, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x04000040000000;  op2val:0x5555555500000020
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x04000040000000, 0x5555555500000020, x3, 65*XLEN/8, x5)

inst_94:
// rs2_w0_val == 64, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000009;  op2val:0x00080000000040
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x400000000000009, 0x00080000000040, x3, 66*XLEN/8, x5)

inst_95:
// rs2_w0_val == 256, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf55555555;  op2val:0xfffbffff00000100
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffbf55555555, 0xfffbffff00000100, x3, 67*XLEN/8, x5)

inst_96:
// rs2_w0_val == 512, rs2_w1_val == 33554432
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fbffffff;  op2val:0x200000000000200
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x008000fbffffff, 0x200000000000200, x3, 68*XLEN/8, x5)

inst_97:
// rs2_w0_val == 2048, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffff7ff;  op2val:0x3fffffff00000800
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffff7ff, 0x3fffffff00000800, x3, 69*XLEN/8, x5)

inst_98:
// rs2_w0_val == 4096, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff8;  op2val:0xaaaaaaaa00001000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff8, 0xaaaaaaaa00001000, x3, 70*XLEN/8, x5)

inst_99:
// rs2_w0_val == 16384, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffff6;  op2val:0xffffff7f00004000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000010fffffff6, 0xffffff7f00004000, x3, 71*XLEN/8, x5)

inst_100:
// rs2_w0_val == 65536, rs2_w1_val == 64
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffbffffff;  op2val:0x00004000010000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfbfffffffbffffff, 0x00004000010000, x3, 72*XLEN/8, x5)

inst_101:
// rs2_w0_val == 2097152, rs2_w1_val == 131072
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffdff;  op2val:0x02000000200000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x004000fffffdff, 0x02000000200000, x3, 73*XLEN/8, x5)

inst_102:
// rs2_w0_val == 8388608, rs1_w1_val == 16777216
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000002;  op2val:0xfdffffff00800000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x100000000000002, 0xfdffffff00800000, x3, 74*XLEN/8, x5)

inst_103:
// rs2_w0_val == 67108864, rs2_w1_val == 1024, rs1_w1_val == -16385
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff01000000;  op2val:0x00040004000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffbfff01000000, 0x00040004000000, x3, 75*XLEN/8, x5)

inst_104:
// rs2_w0_val == 536870912, rs1_w1_val == 33554432
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000c0000000;  op2val:0xfffffff720000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x2000000c0000000, 0xfffffff720000000, x3, 76*XLEN/8, x5)

inst_105:
// rs2_w0_val == -5, rs2_w1_val == -4097
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000003;  op2val:0xffffeffffffffffb
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00040000000003, 0xffffeffffffffffb, x3, 77*XLEN/8, x5)

inst_106:
// rs2_w0_val == -9, rs1_w1_val == -257
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffefffff;  op2val:0xffffeffffffffff7
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffeffffefffff, 0xffffeffffffffff7, x3, 78*XLEN/8, x5)

inst_107:
// rs2_w0_val == -16777217, rs2_w1_val == 256, rs1_w1_val == -5
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00800000;  op2val:0x000100feffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0x000100feffffff, x3, 79*XLEN/8, x5)

inst_108:
// rs2_w0_val == -134217729, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff8;  op2val:0xfffffffcf7ffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000002fffffff8, 0xfffffffcf7ffffff, x3, 80*XLEN/8, x5)

inst_109:
// rs2_w0_val == 1431655765, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000008;  op2val:0x20000055555555
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffff800000008, 0x20000055555555, x3, 81*XLEN/8, x5)

inst_110:
// rs2_w1_val == 2147483647, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000040000;  op2val:0x7fffffff00001000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00008000040000, 0x7fffffff00001000, x3, 82*XLEN/8, x5)

inst_111:
// rs2_w1_val == 16384, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x001000efffffff;  op2val:0x004000feffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x001000efffffff, 0x004000feffffff, x3, 83*XLEN/8, x5)

inst_112:
// rs2_w1_val == 65536, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffff7ff;  op2val:0x01000008000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffff7ff, 0x01000008000000, x3, 84*XLEN/8, x5)

inst_113:
// rs1_w1_val == -262145, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffff7f;  op2val:0xfffffbff01000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffff7f, 0xfffffbff01000000, x3, 85*XLEN/8, x5)

inst_114:
// rs2_w1_val == 1048576, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00100010000000;  op2val:0x100000ffbfffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00100010000000, 0x100000ffbfffff, x3, 86*XLEN/8, x5)

inst_115:
// rs2_w1_val == 4194304, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000003;  op2val:0x40000000000800
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x200000000000003, 0x40000000000800, x3, 87*XLEN/8, x5)

inst_116:
// rs2_w1_val == 8388608, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000008;  op2val:0x800000ffffffef
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00000800000008, 0x800000ffffffef, x3, 88*XLEN/8, x5)

inst_117:
// rs1_w1_val == -1048577, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000400;  op2val:0x55555555ffffff7f
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffefffff00000400, 0x55555555ffffff7f, x3, 89*XLEN/8, x5)

inst_118:
// rs2_w1_val == 536870912, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000003;  op2val:0x2000000000008000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000003, 0x2000000000008000, x3, 90*XLEN/8, x5)

inst_119:
// rs1_w1_val == -129, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fff7fffff;  op2val:0xfffffff9fffffeff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffff7fff7fffff, 0xfffffff9fffffeff, x3, 91*XLEN/8, x5)

inst_120:
// rs2_w1_val == -2, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000000aaaaaaaa;  op2val:0xfffffffe3fffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000000aaaaaaaa, 0xfffffffe3fffffff, x3, 92*XLEN/8, x5)

inst_121:
// rs2_w1_val == -5, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffdfffff;  op2val:0xfffffffbffffdfff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000040ffdfffff, 0xfffffffbffffdfff, x3, 93*XLEN/8, x5)

inst_122:
// rs1_w1_val == -4097, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00002000;  op2val:0x00080010000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffefff00002000, 0x00080010000000, x3, 94*XLEN/8, x5)

inst_123:
// rs1_w1_val == -8193, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffbff;  op2val:0xfffffffcfdffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffbff, 0xfffffffcfdffffff, x3, 95*XLEN/8, x5)

inst_124:
// rs2_w1_val == -33, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000400000;  op2val:0xffffffdffffffffa
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x100000000400000, 0xffffffdffffffffa, x3, 96*XLEN/8, x5)

inst_125:
// rs1_w1_val == -32769, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00004000;  op2val:0x80000008000000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffff7fff00004000, 0x80000008000000, x3, 97*XLEN/8, x5)

inst_126:
// rs2_w0_val == -4097, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffff7;  op2val:0x000009ffffefff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000001fffffff7, 0x000009ffffefff, x3, 98*XLEN/8, x5)

inst_127:
// rs1_w1_val == -131073, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffff7ffffff;  op2val:0xffbfffff00008000
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xfffdfffff7ffffff, 0xffbfffff00008000, x3, 99*XLEN/8, x5)

inst_128:
// rs2_w0_val == -16385, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x10000008000000;  op2val:0x2000000ffffbfff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x10000008000000, 0x2000000ffffbfff, x3, 100*XLEN/8, x5)

inst_129:
// rs2_w1_val == -2049, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffff7fff;  op2val:0xfffff7ff00000008
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffefffff7fff, 0xfffff7ff00000008, x3, 101*XLEN/8, x5)

inst_130:
// rs2_w0_val == -65537, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffeff;  op2val:0x000080fffeffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffeff, 0x000080fffeffff, x3, 102*XLEN/8, x5)

inst_131:
// rs1_w1_val == -2097153, rs2_w1_val == -16385
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000800;  op2val:0xffffbffffffbffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000800, 0xffffbffffffbffff, x3, 103*XLEN/8, x5)

inst_132:
// rs2_w0_val == -524289, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000f7ffffff;  op2val:0x100000fff7ffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x4000000f7ffffff, 0x100000fff7ffff, x3, 104*XLEN/8, x5)

inst_133:
// rs2_w1_val == -65537, 
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000002000;  op2val:0xfffeffff00000005
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x200000000002000, 0xfffeffff00000005, x3, 105*XLEN/8, x5)

inst_134:
// rs1_w0_val == -1, rs1_w1_val == 0
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffff;  op2val:0xfffffff6fffffff8
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x000000ffffffff, 0xfffffff6fffffff8, x3, 106*XLEN/8, x5)

inst_135:
// rs1_w0_val == 1, rs2_w0_val == -4194305, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == 2048, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -257
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000001;  op2val:0xfffffeffffbfffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00080000000001, 0xfffffeffffbfffff, x3, 107*XLEN/8, x5)

inst_136:
// rs1_w0_val == 16, rs2_w1_val == -3, rs2_w0_val == -8388609, rs1_w1_val == 16
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000010;  op2val:0xfffffffdff7fffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x00001000000010, 0xfffffffdff7fffff, x3, 108*XLEN/8, x5)

inst_137:
// rs1_w0_val == 64, rs2_w0_val == 2147483647, rs2_w1_val == -65, rs1_w1_val == 1073741824
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000040;  op2val:0xffffffbf7fffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0x4000000000000040, 0xffffffbf7fffffff, x3, 109*XLEN/8, x5)

inst_138:
// rs1_w0_val == 131072, rs2_w0_val == -536870913, rs1_w1_val == -33, rs2_w1_val == 1
// opcode: maccu.w01 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0x000001dfffffff
TEST_RR_OP(maccu.w01, x31, x30, x29, 0x0000000000000000, 0xffffffdf00020000, 0x000001dfffffff, x3, 110*XLEN/8, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 111*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
