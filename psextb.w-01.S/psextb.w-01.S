
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:15:07 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p6-7.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psextb.w instruction of the RISC-V RV64PZicsr extension for the psextb.w covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psextb.w)

RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd, rs1==x0, rd==x0, rs1_w0_val == -2147483648, imm_val == 16, rs1_w1_val == 64
// opcode: psextb.w ; op1:x0; dest:x0; op1val:0x00004080000000;  immval:0x10
TEST_IMM_OP( psextb.w, x0, x0, 0x0000000000000000, 0x00004080000000, 0x10, x9, 0*XLEN/8, x11)

inst_1:
// rs1 != rd, rs1==x8, rd==x29, rs1_w0_val == -1, imm_val == 6
// opcode: psextb.w ; op1:x8; dest:x29; op1val:0x000040ffffffff;  immval:0x6
TEST_IMM_OP( psextb.w, x29, x8, 0x0000000000000000, 0x000040ffffffff, 0x6, x9, 1*XLEN/8, x11)

inst_2:
// rs1==x3, rd==x6, rs1_w0_val == 0, imm_val == 31, rs1_w1_val == -2
// opcode: psextb.w ; op1:x3; dest:x6; op1val:0xfffffffe00000000;  immval:0x1f
TEST_IMM_OP( psextb.w, x6, x3, 0x0000000000000000, 0xfffffffe00000000, 0x1f, x9, 2*XLEN/8, x11)

inst_3:
// rs1==x20, rd==x2, rs1_w0_val == 1, imm_val == 25, rs1_w1_val == -268435457
// opcode: psextb.w ; op1:x20; dest:x2; op1val:0xefffffff00000001;  immval:0x19
TEST_IMM_OP( psextb.w, x2, x20, 0x0000000000000000, 0xefffffff00000001, 0x19, x9, 3*XLEN/8, x11)

inst_4:
// rs1==x25, rd==x5, rs1_w0_val == 2147483647, rs1_w1_val == -5, imm_val == 27
// opcode: psextb.w ; op1:x25; dest:x5; op1val:0xfffffffb7fffffff;  immval:0x1b
TEST_IMM_OP( psextb.w, x5, x25, 0x0000000000000000, 0xfffffffb7fffffff, 0x1b, x9, 4*XLEN/8, x11)

inst_5:
// rs1==x18, rd==x10, rs1_w0_val == 2, imm_val == 19
// opcode: psextb.w ; op1:x18; dest:x10; op1val:0x00000300000002;  immval:0x13
TEST_IMM_OP( psextb.w, x10, x18, 0x0000000000000000, 0x00000300000002, 0x13, x9, 5*XLEN/8, x11)

inst_6:
// rs1==x30, rd==x15, rs1_w0_val == 4, imm_val == 15, rs1_w1_val == 1
// opcode: psextb.w ; op1:x30; dest:x15; op1val:0x00000100000004;  immval:0xf
TEST_IMM_OP( psextb.w, x15, x30, 0x0000000000000000, 0x00000100000004, 0xf, x9, 6*XLEN/8, x11)

inst_7:
// rs1==x15, rd==x18, rs1_w0_val == 8, rs1_w1_val == -3, imm_val == 18
// opcode: psextb.w ; op1:x15; dest:x18; op1val:0xfffffffd00000008;  immval:0x12
TEST_IMM_OP( psextb.w, x18, x15, 0x0000000000000000, 0xfffffffd00000008, 0x12, x9, 7*XLEN/8, x11)

inst_8:
// rs1==x6, rd==x25, rs1_w0_val == 16, imm_val == 3
// opcode: psextb.w ; op1:x6; dest:x25; op1val:0x00000900000010;  immval:0x3
TEST_IMM_OP( psextb.w, x25, x6, 0x0000000000000000, 0x00000900000010, 0x3, x9, 8*XLEN/8, x11)

inst_9:
// rs1==x26, rd==x23, rs1_w0_val == 32, 
// opcode: psextb.w ; op1:x26; dest:x23; op1val:0xc000000000000020;  immval:0x3
TEST_IMM_OP( psextb.w, x23, x26, 0x0000000000000000, 0xc000000000000020, 0x3, x9, 9*XLEN/8, x11)

inst_10:
// rs1==x5, rd==x4, rs1_w0_val == 64, imm_val == 20, rs1_w1_val == -2097153
// opcode: psextb.w ; op1:x5; dest:x4; op1val:0xffdfffff00000040;  immval:0x14
TEST_IMM_OP( psextb.w, x4, x5, 0x0000000000000000, 0xffdfffff00000040, 0x14, x9, 10*XLEN/8, x11)

inst_11:
// rs1==x17, rd==x20, rs1_w0_val == 128, rs1_w1_val == 2097152
// opcode: psextb.w ; op1:x17; dest:x20; op1val:0x20000000000080;  immval:0x19
TEST_IMM_OP( psextb.w, x20, x17, 0x0000000000000000, 0x20000000000080, 0x19, x9, 11*XLEN/8, x11)

inst_12:
// rs1==x14, rd==x27, rs1_w0_val == 256, imm_val == 11
// opcode: psextb.w ; op1:x14; dest:x27; op1val:0xfffffff600000100;  immval:0xb
TEST_IMM_OP( psextb.w, x27, x14, 0x0000000000000000, 0xfffffff600000100, 0xb, x9, 12*XLEN/8, x11)

inst_13:
// rs1==x19, rd==x13, rs1_w0_val == 512, rs1_w1_val == 256, imm_val == 24
// opcode: psextb.w ; op1:x19; dest:x13; op1val:0x00010000000200;  immval:0x18
TEST_IMM_OP( psextb.w, x13, x19, 0x0000000000000000, 0x00010000000200, 0x18, x9, 13*XLEN/8, x11)

inst_14:
// rs1==x12, rd==x28, rs1_w0_val == 1024, rs1_w1_val == 67108864, imm_val == 30
// opcode: psextb.w ; op1:x12; dest:x28; op1val:0x400000000000400;  immval:0x1e
TEST_IMM_OP( psextb.w, x28, x12, 0x0000000000000000, 0x400000000000400, 0x1e, x9, 14*XLEN/8, x11)

inst_15:
// rs1==x13, rd==x31, rs1_w0_val == 2048, imm_val == 0, rs1_w1_val == -17
// opcode: psextb.w ; op1:x13; dest:x31; op1val:0xffffffef00000800;  immval:0x0
TEST_IMM_OP( psextb.w, x31, x13, 0x0000000000000000, 0xffffffef00000800, 0x0, x9, 15*XLEN/8, x11)

inst_16:
// rs1==x28, rd==x22, rs1_w0_val == 4096, 
// opcode: psextb.w ; op1:x28; dest:x22; op1val:0x00010000001000;  immval:0x1e
TEST_IMM_OP( psextb.w, x22, x28, 0x0000000000000000, 0x00010000001000, 0x1e, x9, 16*XLEN/8, x11)

inst_17:
// rs1==x29, rd==x3, rs1_w0_val == 8192, rs1_w1_val == -1073741825
// opcode: psextb.w ; op1:x29; dest:x3; op1val:0xbfffffff00002000;  immval:0x1f
TEST_IMM_OP( psextb.w, x3, x29, 0x0000000000000000, 0xbfffffff00002000, 0x1f, x9, 17*XLEN/8, x11)

inst_18:
// rs1==x1, rd==x19, rs1_w0_val == 16384, imm_val == 9, rs1_w1_val == -8193
// opcode: psextb.w ; op1:x1; dest:x19; op1val:0xffffdfff00004000;  immval:0x9
TEST_IMM_OP( psextb.w, x19, x1, 0x0000000000000000, 0xffffdfff00004000, 0x9, x9, 18*XLEN/8, x11)

inst_19:
// rs1==x10, rd==x30, rs1_w0_val == 32768, rs1_w1_val == 1048576, imm_val == 13
// opcode: psextb.w ; op1:x10; dest:x30; op1val:0x10000000008000;  immval:0xd
TEST_IMM_OP( psextb.w, x30, x10, 0x0000000000000000, 0x10000000008000, 0xd, x9, 19*XLEN/8, x11)

inst_20:
// rs1==x7, rd==x21, rs1_w0_val == 65536, rs1_w1_val == 131072
// opcode: psextb.w ; op1:x7; dest:x21; op1val:0x02000000010000;  immval:0x13
TEST_IMM_OP( psextb.w, x21, x7, 0x0000000000000000, 0x02000000010000, 0x13, x9, 20*XLEN/8, x11)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x31, rd==x1, rs1_w0_val == 131072, rs1_w1_val == -1025
// opcode: psextb.w ; op1:x31; dest:x1; op1val:0xfffffbff00020000;  immval:0xd
TEST_IMM_OP( psextb.w, x1, x31, 0x0000000000000000, 0xfffffbff00020000, 0xd, x3, 0*XLEN/8, x5)

inst_22:
// rs1==x27, rd==x9, rs1_w0_val == 262144, 
// opcode: psextb.w ; op1:x27; dest:x9; op1val:0x00000300040000;  immval:0x1f
TEST_IMM_OP( psextb.w, x9, x27, 0x0000000000000000, 0x00000300040000, 0x1f, x3, 1*XLEN/8, x5)

inst_23:
// rs1==x22, rd==x24, rs1_w0_val == 524288, 
// opcode: psextb.w ; op1:x22; dest:x24; op1val:0x3fffffff00080000;  immval:0xb
TEST_IMM_OP( psextb.w, x24, x22, 0x0000000000000000, 0x3fffffff00080000, 0xb, x3, 2*XLEN/8, x5)

inst_24:
// rs1==x16, rd==x26, rs1_w0_val == 1048576, 
// opcode: psextb.w ; op1:x16; dest:x26; op1val:0xfffffffe00100000;  immval:0xd
TEST_IMM_OP( psextb.w, x26, x16, 0x0000000000000000, 0xfffffffe00100000, 0xd, x3, 3*XLEN/8, x5)

inst_25:
// rs1==x11, rd==x12, rs1_w0_val == 2097152, rs1_w1_val == 33554432
// opcode: psextb.w ; op1:x11; dest:x12; op1val:0x200000000200000;  immval:0x18
TEST_IMM_OP( psextb.w, x12, x11, 0x0000000000000000, 0x200000000200000, 0x18, x3, 4*XLEN/8, x5)

inst_26:
// rs1==x24, rd==x7, rs1_w0_val == 4194304, rs1_w1_val == -1, imm_val == 14
// opcode: psextb.w ; op1:x24; dest:x7; op1val:0xffffffff00400000;  immval:0xe
TEST_IMM_OP( psextb.w, x7, x24, 0x0000000000000000, 0xffffffff00400000, 0xe, x3, 5*XLEN/8, x5)

inst_27:
// rs1==x21, rd==x14, rs1_w0_val == 8388608, 
// opcode: psextb.w ; op1:x21; dest:x14; op1val:0xc000000000800000;  immval:0xb
TEST_IMM_OP( psextb.w, x14, x21, 0x0000000000000000, 0xc000000000800000, 0xb, x3, 6*XLEN/8, x5)

inst_28:
// rs1==x4, rd==x8, rs1_w0_val == 16777216, rs1_w1_val == 16777216
// opcode: psextb.w ; op1:x4; dest:x8; op1val:0x100000001000000;  immval:0x19
TEST_IMM_OP( psextb.w, x8, x4, 0x0000000000000000, 0x100000001000000, 0x19, x3, 7*XLEN/8, x5)

inst_29:
// rs1==x2, rd==x11, rs1_w0_val == 33554432, 
// opcode: psextb.w ; op1:x2; dest:x11; op1val:0xffffffef02000000;  immval:0x13
TEST_IMM_OP( psextb.w, x11, x2, 0x0000000000000000, 0xffffffef02000000, 0x13, x3, 8*XLEN/8, x5)

inst_30:
// rs1==x9, rd==x17, rs1_w0_val == 67108864, rs1_w1_val == -2147483648
// opcode: psextb.w ; op1:x9; dest:x17; op1val:0x8000000004000000;  immval:0x9
TEST_IMM_OP( psextb.w, x17, x9, 0x0000000000000000, 0x8000000004000000, 0x9, x3, 9*XLEN/8, x5)

inst_31:
// rs1==x23, rd==x16, rs1_w0_val == 134217728, imm_val == 17
// opcode: psextb.w ; op1:x23; dest:x16; op1val:0x400000008000000;  immval:0x11
TEST_IMM_OP( psextb.w, x16, x23, 0x0000000000000000, 0x400000008000000, 0x11, x3, 10*XLEN/8, x5)

inst_32:
// rs1_w0_val == 268435456, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffb10000000;  immval:0x0
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffb10000000, 0x0, x3, 11*XLEN/8, x5)

inst_33:
// rs1_w0_val == 536870912, imm_val == 26, rs1_w1_val == 8192
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x00200020000000;  immval:0x1a
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x00200020000000, 0x1a, x3, 12*XLEN/8, x5)

inst_34:
// rs1_w0_val == 1073741824, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffd40000000;  immval:0xf
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffd40000000, 0xf, x3, 13*XLEN/8, x5)

inst_35:
// rs1_w0_val == -2, imm_val == 22
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000007fffffffe;  immval:0x16
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000007fffffffe, 0x16, x3, 14*XLEN/8, x5)

inst_36:
// rs1_w0_val == -3, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffbfffffffd;  immval:0xb
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffbfffffffd, 0xb, x3, 15*XLEN/8, x5)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == -65537
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffefffffffffffb;  immval:0x16
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffefffffffffffb, 0x16, x3, 16*XLEN/8, x5)

inst_38:
// rs1_w0_val == -9, rs1_w1_val == -524289
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfff7fffffffffff7;  immval:0x13
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfff7fffffffffff7, 0x13, x3, 17*XLEN/8, x5)

inst_39:
// rs1_w0_val == -17, rs1_w1_val == -9, imm_val == 10
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffff7ffffffef;  immval:0xa
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffff7ffffffef, 0xa, x3, 18*XLEN/8, x5)

inst_40:
// rs1_w0_val == -33, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000040ffffffdf;  immval:0x1b
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000040ffffffdf, 0x1b, x3, 19*XLEN/8, x5)

inst_41:
// rs1_w0_val == -65, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffffffffffffbf;  immval:0x1f
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffffffffffffbf, 0x1f, x3, 20*XLEN/8, x5)

inst_42:
// rs1_w0_val == -129, imm_val == 28
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffeffffff7f;  immval:0x1c
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffeffffff7f, 0x1c, x3, 21*XLEN/8, x5)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == -65
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffffbffffffeff;  immval:0xd
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffffbffffffeff, 0xd, x3, 22*XLEN/8, x5)

inst_44:
// rs1_w0_val == -513, rs1_w1_val == 134217728, imm_val == 7
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x8000000fffffdff;  immval:0x7
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x8000000fffffdff, 0x7, x3, 23*XLEN/8, x5)

inst_45:
// rs1_w0_val == -1025, imm_val == 2, rs1_w1_val == 1431655765
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x55555555fffffbff;  immval:0x2
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x55555555fffffbff, 0x2, x3, 24*XLEN/8, x5)

inst_46:
// rs1_w0_val == -2049, imm_val == 8, rs1_w1_val == -262145
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffbfffffffff7ff;  immval:0x8
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffbfffffffff7ff, 0x8, x3, 25*XLEN/8, x5)

inst_47:
// rs1_w0_val == -4097, imm_val == 12
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffff7ffffefff;  immval:0xc
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffff7ffffefff, 0xc, x3, 26*XLEN/8, x5)

inst_48:
// rs1_w0_val == -8193, rs1_w1_val == 65536
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x010000ffffdfff;  immval:0x12
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x010000ffffdfff, 0x12, x3, 27*XLEN/8, x5)

inst_49:
// rs1_w0_val == -16385, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xbfffffffffffbfff;  immval:0xf
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xbfffffffffffbfff, 0xf, x3, 28*XLEN/8, x5)

inst_50:
// rs1_w1_val == -33554433, imm_val == 4
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfdffffff00000007;  immval:0x4
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfdffffff00000007, 0x4, x3, 29*XLEN/8, x5)

inst_51:
// rs1_w1_val == -67108865, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfbffffff10000000;  immval:0x14
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfbffffff10000000, 0x14, x3, 30*XLEN/8, x5)

inst_52:
// rs1_w1_val == -134217729, imm_val == 5
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xf7ffffff00000001;  immval:0x5
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xf7ffffff00000001, 0x5, x3, 31*XLEN/8, x5)

inst_53:
// rs1_w1_val == -536870913, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xdffffffffffffffd;  immval:0xc
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xdffffffffffffffd, 0xc, x3, 32*XLEN/8, x5)

inst_54:
// rs1_w1_val == -1431655766, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xaaaaaaaafffffdff;  immval:0xd
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xaaaaaaaafffffdff, 0xd, x3, 33*XLEN/8, x5)

inst_55:
// imm_val == 1, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffdfff02000000;  immval:0x1
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffdfff02000000, 0x1, x3, 34*XLEN/8, x5)

inst_56:
// imm_val == 21, rs1_w1_val == 8
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000008ffffffbf;  immval:0x15
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000008ffffffbf, 0x15, x3, 35*XLEN/8, x5)

inst_57:
// imm_val == 23, rs1_w0_val == -2097153, rs1_w1_val == -513
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffdffffdfffff;  immval:0x17
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffdffffdfffff, 0x17, x3, 36*XLEN/8, x5)

inst_58:
// imm_val == 29, rs1_w1_val == 1024
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000400fffffffd;  immval:0x1d
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000400fffffffd, 0x1d, x3, 37*XLEN/8, x5)

inst_59:
// rs1_w0_val == -32769, rs1_w1_val == 512
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000200ffff7fff;  immval:0x8
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000200ffff7fff, 0x8, x3, 38*XLEN/8, x5)

inst_60:
// rs1_w0_val == -65537, rs1_w1_val == 32
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000020fffeffff;  immval:0x10
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000020fffeffff, 0x10, x3, 39*XLEN/8, x5)

inst_61:
// rs1_w0_val == -131073, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffff6fffdffff;  immval:0x18
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffff6fffdffff, 0x18, x3, 40*XLEN/8, x5)

inst_62:
// rs1_w0_val == -262145, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffff7fffbffff;  immval:0x3
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffff7fffbffff, 0x3, x3, 41*XLEN/8, x5)

inst_63:
// rs1_w0_val == -524289, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffffbffff7ffff;  immval:0xc
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffffbffff7ffff, 0xc, x3, 42*XLEN/8, x5)

inst_64:
// rs1_w0_val == -1048577, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x2000000ffefffff;  immval:0x0
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x2000000ffefffff, 0x0, x3, 43*XLEN/8, x5)

inst_65:
// rs1_w0_val == -4194305, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x020000ffbfffff;  immval:0xd
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x020000ffbfffff, 0xd, x3, 44*XLEN/8, x5)

inst_66:
// rs1_w0_val == -8388609, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffeff7fffff;  immval:0x7
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffeff7fffff, 0x7, x3, 45*XLEN/8, x5)

inst_67:
// rs1_w0_val == -16777217, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000007feffffff;  immval:0x9
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000007feffffff, 0x9, x3, 46*XLEN/8, x5)

inst_68:
// rs1_w0_val == -33554433, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffcfdffffff;  immval:0x11
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffcfdffffff, 0x11, x3, 47*XLEN/8, x5)

inst_69:
// rs1_w0_val == -67108865, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffff9fbffffff;  immval:0x1d
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffff9fbffffff, 0x1d, x3, 48*XLEN/8, x5)

inst_70:
// rs1_w0_val == -134217729, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x002000f7ffffff;  immval:0x3
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x002000f7ffffff, 0x3, x3, 49*XLEN/8, x5)

inst_71:
// rs1_w0_val == -268435457, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xaaaaaaaaefffffff;  immval:0x7
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xaaaaaaaaefffffff, 0x7, x3, 50*XLEN/8, x5)

inst_72:
// rs1_w0_val == -536870913, rs1_w1_val == 268435456
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x10000000dfffffff;  immval:0xd
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x10000000dfffffff, 0xd, x3, 51*XLEN/8, x5)

inst_73:
// rs1_w0_val == -1073741825, rs1_w1_val == 536870912
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x20000000bfffffff;  immval:0x8
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x20000000bfffffff, 0x8, x3, 52*XLEN/8, x5)

inst_74:
// rs1_w0_val == 1431655765, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffffa55555555;  immval:0x2
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffffa55555555, 0x2, x3, 53*XLEN/8, x5)

inst_75:
// rs1_w0_val == -1431655766, rs1_w1_val == 2048
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000800aaaaaaaa;  immval:0x1c
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000800aaaaaaaa, 0x1c, x3, 54*XLEN/8, x5)

inst_76:
// rs1_w1_val == 0, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x00000000000004;  immval:0x1e
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x00000000000004, 0x1e, x3, 55*XLEN/8, x5)

inst_77:
// rs1_w1_val == 2147483647, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x7fffffff01000000;  immval:0x1b
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x7fffffff01000000, 0x1b, x3, 56*XLEN/8, x5)

inst_78:
// rs1_w1_val == 2, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x00000200002000;  immval:0x13
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x00000200002000, 0x13, x3, 57*XLEN/8, x5)

inst_79:
// rs1_w1_val == 4, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000004fffffffb;  immval:0xe
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000004fffffffb, 0xe, x3, 58*XLEN/8, x5)

inst_80:
// rs1_w1_val == 16, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x000010ffffffff;  immval:0x1c
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x000010ffffffff, 0x1c, x3, 59*XLEN/8, x5)

inst_81:
// rs1_w1_val == 128, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x0000807fffffff;  immval:0x4
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x0000807fffffff, 0x4, x3, 60*XLEN/8, x5)

inst_82:
// rs1_w1_val == 4096, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x00100000000009;  immval:0x13
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x00100000000009, 0x13, x3, 61*XLEN/8, x5)

inst_83:
// rs1_w1_val == 16384, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x004000fffffff9;  immval:0x18
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x004000fffffff9, 0x18, x3, 62*XLEN/8, x5)

inst_84:
// rs1_w1_val == 32768, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x008000efffffff;  immval:0x4
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x008000efffffff, 0x4, x3, 63*XLEN/8, x5)

inst_85:
// rs1_w1_val == 262144, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x040000feffffff;  immval:0x17
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x040000feffffff, 0x17, x3, 64*XLEN/8, x5)

inst_86:
// rs1_w1_val == 524288, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x08000000010000;  immval:0x17
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x08000000010000, 0x17, x3, 65*XLEN/8, x5)

inst_87:
// rs1_w1_val == 1073741824, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x4000000000000005;  immval:0x2
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x4000000000000005, 0x2, x3, 66*XLEN/8, x5)

inst_88:
// rs1_w1_val == -33, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffffdf00080000;  immval:0x11
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffffdf00080000, 0x11, x3, 67*XLEN/8, x5)

inst_89:
// rs1_w1_val == -129, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffff7ffffdffff;  immval:0x1a
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffff7ffffdffff, 0x1a, x3, 68*XLEN/8, x5)

inst_90:
// rs1_w1_val == -257, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffffeffffefffff;  immval:0x16
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffffeffffefffff, 0x16, x3, 69*XLEN/8, x5)

inst_91:
// rs1_w1_val == -2049, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffff7ffefffffff;  immval:0x18
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffff7ffefffffff, 0x18, x3, 70*XLEN/8, x5)

inst_92:
// rs1_w1_val == -4097, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffefffffffffef;  immval:0x4
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffefffffffffef, 0x4, x3, 71*XLEN/8, x5)

inst_93:
// rs1_w1_val == -16385, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffffbffffffffff6;  immval:0x18
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffffbffffffffff6, 0x18, x3, 72*XLEN/8, x5)

inst_94:
// rs1_w1_val == -32769, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffff7ffffffffff6;  immval:0x1a
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffff7ffffffffff6, 0x1a, x3, 73*XLEN/8, x5)

inst_95:
// rs1_w1_val == -131073, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfffdffff08000000;  immval:0x1e
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfffdffff08000000, 0x1e, x3, 74*XLEN/8, x5)

inst_96:
// rs1_w1_val == 8388608, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x800000ffffffef;  immval:0x7
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x800000ffffffef, 0x7, x3, 75*XLEN/8, x5)

inst_97:
// rs1_w1_val == -8388609, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xff7fffff00002000;  immval:0x1d
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xff7fffff00002000, 0x1d, x3, 76*XLEN/8, x5)

inst_98:
// rs1_w1_val == -1048577, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffeffffffffeffff;  immval:0x12
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffeffffffffeffff, 0x12, x3, 77*XLEN/8, x5)

inst_99:
// rs1_w1_val == -4194305, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xffbfffff00800000;  immval:0x0
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xffbfffff00800000, 0x0, x3, 78*XLEN/8, x5)

inst_100:
// rs1_w1_val == 4194304, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x400000dfffffff;  immval:0xc
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x400000dfffffff, 0xc, x3, 79*XLEN/8, x5)

inst_101:
// rs1_w1_val == -16777217, 
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0xfeffffff00000010;  immval:0x13
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0xfeffffff00000010, 0x13, x3, 80*XLEN/8, x5)

inst_102:
// rs1_w0_val == -2147483648, imm_val == 16, rs1_w1_val == 64
// opcode: psextb.w ; op1:x30; dest:x31; op1val:0x00004080000000;  immval:0x10
TEST_IMM_OP( psextb.w, x31, x30, 0x0000000000000000, 0x00004080000000, 0x10, x3, 81*XLEN/8, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x9_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x9_1:
    .fill 21*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 82*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
