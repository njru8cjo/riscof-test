
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Dec  4 06:11:48 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/cgf_files/p8.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the padd.b.b0 instruction of the RISC-V RV32PZicsr extension for the padd.b.b0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",padd.b.b0)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x28, rd==x7, rs1_b0_val == -128, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b1_val != rs2_b1_val, rs1_b3_val == -65, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 32, rs1_b2_val != rs2_b2_val, rs2_b3_val == 8, rs2_b0_val == 2, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val
// opcode: padd.b.b0 ; op1:x18; op2:x28; dest:x7; op1val:0xbf20f880;  op2val:0x8fc0502
TEST_RR_OP(padd.b.b0, x7, x18, x28, 0x00000000, 0xbf20f880, 0x8fc0502, x1, 0*XLEN/8, x6)

inst_1:// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_b0_val == -1, rs1_b1_val == 2, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b2_val == -1, rs1_b1_val > 0 and rs2_b1_val < 0
// opcode: padd.b.b0 ; op1:x23; op2:x23; dest:x23; op1val:0xfa0702ff;  op2val:0x6ffc0fa
TEST_RR_OP(padd.b.b0, x23, x23, x23, 0x00000000, 0xfa0702ff, 0x6ffc0fa, x1, 1*XLEN/8, x6)

inst_2:// rs2 == rd != rs1, rs1==x30, rs2==x29, rd==x29, rs1_b0_val == 0, rs1_b1_val == -3, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == -65, rs2_b3_val == -128, rs1_b2_val == 8, rs2_b0_val == -128, rs2_b1_val == -33, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b3_val == -1
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x29; op1val:0xff08fd00;  op2val:0x80bfdf80
TEST_RR_OP(padd.b.b0, x29, x30, x29, 0x00000000, 0xff08fd00, 0x80bfdf80, x1, 2*XLEN/8, x6)

inst_3:// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x27, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b3_val == 32, rs2_b2_val == -5, rs1_b2_val == -1, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b0_val == -1, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b3_val == -17
// opcode: padd.b.b0 ; op1:x9; op2:x9; dest:x27; op1val:0x20fff601;  op2val:0xeffb05ff
TEST_RR_OP(padd.b.b0, x27, x9, x9, 0x00000000, 0x20fff601, 0xeffb05ff, x1, 3*XLEN/8, x6)

inst_4:// rs1 == rd != rs2, rs1==x3, rs2==x13, rd==x3, rs1_b0_val == 127, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == -86, rs1_b3_val == 16
// opcode: padd.b.b0 ; op1:x3; op2:x13; dest:x3; op1val:0x10fc3f7f;  op2val:0x3fc0c0aa
TEST_RR_OP(padd.b.b0, x3, x3, x13, 0x00000000, 0x10fc3f7f, 0x3fc0c0aa, x1, 4*XLEN/8, x6)

inst_5:// rs1==x2, rs2==x12, rd==x20, rs1_b0_val == 2, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 85, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b3_val == 32, rs2_b0_val == -2
// opcode: padd.b.b0 ; op1:x2; op2:x12; dest:x20; op1val:0x55fc0702;  op2val:0x203f09fe
TEST_RR_OP(padd.b.b0, x20, x2, x12, 0x00000000, 0x55fc0702, 0x203f09fe, x1, 5*XLEN/8, x6)

inst_6:// rs1==x26, rs2==x21, rd==x10, rs1_b0_val == 4, rs2_b2_val == -2, rs1_b3_val == 64, rs2_b1_val == 64, rs1_b2_val == 4, rs1_b1_val == 8
// opcode: padd.b.b0 ; op1:x26; op2:x21; dest:x10; op1val:0x40040804;  op2val:0xf8fe40f9
TEST_RR_OP(padd.b.b0, x10, x26, x21, 0x00000000, 0x40040804, 0xf8fe40f9, x1, 6*XLEN/8, x6)

inst_7:// rs1==x19, rs2==x18, rd==x13, rs1_b0_val == 8, rs1_b3_val == 2, rs2_b1_val == 4, rs2_b2_val == 85, rs2_b3_val == 2, rs1_b2_val == -2, rs1_b1_val == -1, rs1_b3_val == rs2_b3_val
// opcode: padd.b.b0 ; op1:x19; op2:x18; dest:x13; op1val:0x2feff08;  op2val:0x25504f6
TEST_RR_OP(padd.b.b0, x13, x19, x18, 0x00000000, 0x2feff08, 0x25504f6, x1, 7*XLEN/8, x6)

inst_8:// rs1==x25, rs2==x16, rd==x2, rs1_b0_val == 16, rs2_b1_val == -5, rs1_b3_val == -33, rs1_b1_val == 85, rs2_b2_val == -17
// opcode: padd.b.b0 ; op1:x25; op2:x16; dest:x2; op1val:0xdf205510;  op2val:0x3feffbfe
TEST_RR_OP(padd.b.b0, x2, x25, x16, 0x00000000, 0xdf205510, 0x3feffbfe, x1, 8*XLEN/8, x6)

inst_9:// rs1==x8, rs2==x17, rd==x11, rs1_b0_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 127, rs1_b1_val == 32
// opcode: padd.b.b0 ; op1:x8; op2:x17; dest:x11; op1val:0x40062020;  op2val:0x5f6fa7f
TEST_RR_OP(padd.b.b0, x11, x8, x17, 0x00000000, 0x40062020, 0x5f6fa7f, x1, 9*XLEN/8, x6)

inst_10:// rs1==x28, rs2==x22, rd==x5, rs1_b0_val == 64, rs2_b1_val == 8, rs1_b2_val == 127, rs1_b3_val == -128
// opcode: padd.b.b0 ; op1:x28; op2:x22; dest:x5; op1val:0x807ff940;  op2val:0x3fe08f9
TEST_RR_OP(padd.b.b0, x5, x28, x22, 0x00000000, 0x807ff940, 0x3fe08f9, x1, 10*XLEN/8, x6)

inst_11:// rs1==x0, rs2==x8, rd==x4, rs1_b0_val == -2, rs1_b2_val == -128
// opcode: padd.b.b0 ; op1:x0; op2:x8; dest:x4; op1val:0xfa80f9fe;  op2val:0xf63f07ff
TEST_RR_OP(padd.b.b0, x4, x0, x8, 0x00000000, 0xfa80f9fe, 0xf63f07ff, x1, 11*XLEN/8, x6)

inst_12:// rs1==x14, rs2==x3, rd==x19, rs1_b0_val == -3, rs2_b1_val == -128, rs2_b2_val == -3, rs1_b1_val == -86, rs1_b2_val == rs2_b2_val, rs1_b2_val == -3, rs2_b0_val == 32
// opcode: padd.b.b0 ; op1:x14; op2:x3; dest:x19; op1val:0x9fdaafd;  op2val:0xf9fd8020
TEST_RR_OP(padd.b.b0, x19, x14, x3, 0x00000000, 0x9fdaafd, 0xf9fd8020, x1, 12*XLEN/8, x13)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_13:// rs1==x24, rs2==x14, rd==x6, rs1_b0_val == -5, rs2_b3_val == -3, rs2_b0_val == 85, rs1_b2_val == -9, rs2_b2_val == 64
// opcode: padd.b.b0 ; op1:x24; op2:x14; dest:x6; op1val:0x80f708fb;  op2val:0xfd40fb55
TEST_RR_OP(padd.b.b0, x6, x24, x14, 0x00000000, 0x80f708fb, 0xfd40fb55, x3, 0*XLEN/8, x13)

inst_14:// rs1==x12, rs2==x10, rd==x31, rs1_b0_val == -9, rs2_b1_val == -17, rs1_b2_val == -86, rs2_b2_val == -128
// opcode: padd.b.b0 ; op1:x12; op2:x10; dest:x31; op1val:0x55aafaf7;  op2val:0x3f80ef20
TEST_RR_OP(padd.b.b0, x31, x12, x10, 0x00000000, 0x55aafaf7, 0x3f80ef20, x3, 1*XLEN/8, x13)

inst_15:// rs1==x6, rs2==x24, rd==x9, rs1_b0_val == -17, rs2_b2_val == 32, rs2_b3_val == 85
// opcode: padd.b.b0 ; op1:x6; op2:x24; dest:x9; op1val:0xfff602ef;  op2val:0x552080c0
TEST_RR_OP(padd.b.b0, x9, x6, x24, 0x00000000, 0xfff602ef, 0x552080c0, x3, 2*XLEN/8, x13)

inst_16:// rs1==x4, rs2==x26, rd==x22, rs1_b0_val == -33, rs2_b3_val == -9, rs1_b2_val > 0 and rs2_b2_val > 0
// opcode: padd.b.b0 ; op1:x4; op2:x26; dest:x22; op1val:0x22007df;  op2val:0xf73fdf7f
TEST_RR_OP(padd.b.b0, x22, x4, x26, 0x00000000, 0x22007df, 0xf73fdf7f, x3, 3*XLEN/8, x13)

inst_17:// rs1==x22, rs2==x7, rd==x25, rs1_b0_val == -65, rs1_b3_val == -5, rs2_b1_val == 85
// opcode: padd.b.b0 ; op1:x22; op2:x7; dest:x25; op1val:0xfbff02bf;  op2val:0xf8fd55fa
TEST_RR_OP(padd.b.b0, x25, x22, x7, 0x00000000, 0xfbff02bf, 0xf8fd55fa, x3, 4*XLEN/8, x13)

inst_18:// rs1==x20, rs2==x2, rd==x28, rs1_b0_val == 85, rs2_b2_val == 16, rs1_b2_val == -17
// opcode: padd.b.b0 ; op1:x20; op2:x2; dest:x28; op1val:0x5ef0855;  op2val:0xfc10f905
TEST_RR_OP(padd.b.b0, x28, x20, x2, 0x00000000, 0x5ef0855, 0xfc10f905, x3, 5*XLEN/8, x13)

inst_19:// rs1==x5, rs2==x4, rd==x14, rs1_b0_val == -86, rs1_b1_val == 4, rs2_b0_val == -5, rs2_b3_val == 0
// opcode: padd.b.b0 ; op1:x5; op2:x4; dest:x14; op1val:0x97f04aa;  op2val:0xfb80fb
TEST_RR_OP(padd.b.b0, x14, x5, x4, 0x00000000, 0x97f04aa, 0xfb80fb, x3, 6*XLEN/8, x13)

inst_20:// rs1==x21, rs2==x31, rd==x1, rs1_b1_val == -128, rs2_b2_val == 8, rs2_b0_val == 8
// opcode: padd.b.b0 ; op1:x21; op2:x31; dest:x1; op1val:0x20ef80df;  op2val:0x908fc08
TEST_RR_OP(padd.b.b0, x1, x21, x31, 0x00000000, 0x20ef80df, 0x908fc08, x3, 7*XLEN/8, x13)

inst_21:// rs1==x31, rs2==x5, rd==x16, rs1_b1_val == 0, rs2_b3_val == -5, rs2_b2_val == 0, rs2_b1_val == 1
// opcode: padd.b.b0 ; op1:x31; op2:x5; dest:x16; op1val:0x40050009;  op2val:0xfb000105
TEST_RR_OP(padd.b.b0, x16, x31, x5, 0x00000000, 0x40050009, 0xfb000105, x3, 8*XLEN/8, x13)

inst_22:// rs1==x29, rs2==x19, rd==x8, rs1_b1_val == 1, rs1_b2_val == 64
// opcode: padd.b.b0 ; op1:x29; op2:x19; dest:x8; op1val:0xdf400101;  op2val:0x608037f
TEST_RR_OP(padd.b.b0, x8, x29, x19, 0x00000000, 0xdf400101, 0x608037f, x3, 9*XLEN/8, x13)

inst_23:// rs1==x10, rs2==x11, rd==x17, rs1_b1_val == 127, rs1_b2_val == 85, rs2_b3_val == 64
// opcode: padd.b.b0 ; op1:x10; op2:x11; dest:x17; op1val:0x80557ffc;  op2val:0x40f909fe
TEST_RR_OP(padd.b.b0, x17, x10, x11, 0x00000000, 0x80557ffc, 0x40f909fe, x3, 10*XLEN/8, x13)

inst_24:// rs1==x11, rs2==x27, rd==x24, rs1_b1_val == 16, rs2_b0_val == 16, rs2_b3_val == -86
// opcode: padd.b.b0 ; op1:x11; op2:x27; dest:x24; op1val:0x40ef10f9;  op2val:0xaa20ef10
TEST_RR_OP(padd.b.b0, x24, x11, x27, 0x00000000, 0x40ef10f9, 0xaa20ef10, x3, 11*XLEN/8, x13)

inst_25:// rs1==x27, rs2==x25, rd==x21, rs2_b2_val == -9, rs2_b0_val == -65
// opcode: padd.b.b0 ; op1:x27; op2:x25; dest:x21; op1val:0x55fa053f;  op2val:0x2f7c0bf
TEST_RR_OP(padd.b.b0, x21, x27, x25, 0x00000000, 0x55fa053f, 0x2f7c0bf, x3, 12*XLEN/8, x4)

inst_26:// rs1==x15, rs2==x0, rd==x18, rs2_b2_val == -33, rs1_b0_val == rs2_b0_val, rs1_b1_val == -2
// opcode: padd.b.b0 ; op1:x15; op2:x0; dest:x18; op1val:0x80fffe05;  op2val:0xc0df0105
TEST_RR_OP(padd.b.b0, x18, x15, x0, 0x00000000, 0x80fffe05, 0xc0df0105, x3, 13*XLEN/8, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_27:// rs1==x7, rs2==x20, rd==x26, rs2_b2_val == -86, rs2_b0_val == 0
// opcode: padd.b.b0 ; op1:x7; op2:x20; dest:x26; op1val:0x320fd04;  op2val:0x2aa4000
TEST_RR_OP(padd.b.b0, x26, x7, x20, 0x00000000, 0x320fd04, 0x2aa4000, x2, 0*XLEN/8, x4)

inst_28:// rs1==x16, rs2==x15, rd==x12, rs2_b3_val == -1, rs2_b1_val == -9, rs1_b3_val == 0
// opcode: padd.b.b0 ; op1:x16; op2:x15; dest:x12; op1val:0xf9f6f7;  op2val:0xffaaf710
TEST_RR_OP(padd.b.b0, x12, x16, x15, 0x00000000, 0xf9f6f7, 0xffaaf710, x2, 1*XLEN/8, x4)

inst_29:// rs1==x17, rs2==x30, rd==x15, rs2_b3_val == 1, rs1_b1_val == rs2_b1_val
// opcode: padd.b.b0 ; op1:x17; op2:x30; dest:x15; op1val:0x6eff802;  op2val:0x1f6f855
TEST_RR_OP(padd.b.b0, x15, x17, x30, 0x00000000, 0x6eff802, 0x1f6f855, x2, 2*XLEN/8, x4)

inst_30:// rs1==x13, rs2==x1, rd==x30, rs2_b3_val == 127, rs2_b1_val == 2
// opcode: padd.b.b0 ; op1:x13; op2:x1; dest:x30; op1val:0x7f7ff06;  op2val:0x7ffd02c0
TEST_RR_OP(padd.b.b0, x30, x13, x1, 0x00000000, 0x7f7ff06, 0x7ffd02c0, x2, 3*XLEN/8, x4)

inst_31:// rs1==x1, rs2==x6, rd==x0, rs2_b3_val == 4, 
// opcode: padd.b.b0 ; op1:x1; op2:x6; dest:x0; op1val:0x2009003f;  op2val:0x409fc05
TEST_RR_OP(padd.b.b0, x0, x1, x6, 0x00000000, 0x2009003f, 0x409fc05, x2, 4*XLEN/8, x4)

inst_32:// rs2_b3_val == 16, rs2_b2_val == 4
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x5507feaa;  op2val:0x1004f605
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x5507feaa, 0x1004f605, x2, 5*XLEN/8, x4)

inst_33:// rs2_b3_val == -2, rs2_b1_val == -3
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x04023f;  op2val:0xfedffdf9
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x04023f, 0xfedffdf9, x2, 6*XLEN/8, x4)

inst_34:// rs2_b3_val == -33, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x6fa0380;  op2val:0xdf40f680
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x6fa0380, 0xdf40f680, x2, 7*XLEN/8, x4)

inst_35:// rs2_b3_val == -65, rs1_b3_val == -3
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfdf920;  op2val:0xbfaa3ff6
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfdfdf920, 0xbfaa3ff6, x2, 8*XLEN/8, x4)

inst_36:// rs1_b1_val == 64, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfa034009;  op2val:0xdf040708
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfa034009, 0xdf040708, x2, 9*XLEN/8, x4)

inst_37:// rs1_b1_val == -5, rs1_b3_val == 1
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x103fbfb;  op2val:0x10f8063f
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x103fbfb, 0x10f8063f, x2, 10*XLEN/8, x4)

inst_38:// rs1_b1_val == -9, rs2_b1_val == -2
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff7f6;  op2val:0xaa3ffe02
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x20fff7f6, 0xaa3ffe02, x2, 11*XLEN/8, x4)

inst_39:// rs1_b1_val == -17, rs1_b3_val == -86
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xaa08ef02;  op2val:0x1ef40ff
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xaa08ef02, 0x1ef40ff, x2, 12*XLEN/8, x4)

inst_40:// rs1_b1_val == -33, rs2_b2_val == 1
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfa07dfef;  op2val:0x550104bf
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfa07dfef, 0x550104bf, x2, 13*XLEN/8, x4)

inst_41:// rs1_b3_val == 127, rs1_b2_val == 16
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x7f10ef07;  op2val:0x10dffb80
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x7f10ef07, 0x10dffb80, x2, 14*XLEN/8, x4)

inst_42:// rs1_b3_val == 4, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x4f6fd00;  op2val:0x20106f6
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x4f6fd00, 0x20106f6, x2, 15*XLEN/8, x4)

inst_43:// rs1_b3_val == 8, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x8050455;  op2val:0x908c0fa
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x8050455, 0x908c0fa, x2, 16*XLEN/8, x4)

inst_44:// rs1_b3_val == -2, rs2_b1_val == -65
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfef840ef;  op2val:0xf810bf08
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfef840ef, 0xf810bf08, x2, 17*XLEN/8, x4)

inst_45:// rs1_b3_val == -9, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fafefc;  op2val:0x5506f820
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xf7fafefc, 0x5506f820, x2, 18*XLEN/8, x4)

inst_46:// rs1_b3_val == -17, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xef200480;  op2val:0x205fb55
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xef200480, 0x205fb55, x2, 19*XLEN/8, x4)

inst_47:// rs2_b0_val == 1, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x904fc05;  op2val:0x8060301
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x904fc05, 0x8060301, x2, 20*XLEN/8, x4)

inst_48:// rs2_b0_val == 4, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x707fb80;  op2val:0xfdff0304
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x707fb80, 0xfdff0304, x2, 21*XLEN/8, x4)

inst_49:// rs2_b0_val == 64, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfefc7f;  op2val:0xc080f840
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfdfefc7f, 0xc080f840, x2, 22*XLEN/8, x4)

inst_50:// rs2_b0_val == -3, rs2_b1_val == 16, rs1_b2_val == 2
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x3f02f605;  op2val:0xdfdf10fd
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x3f02f605, 0xdfdf10fd, x2, 23*XLEN/8, x4)

inst_51:// rs2_b0_val == -9, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf7feaa;  op2val:0x80802f7
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xaaf7feaa, 0x80802f7, x2, 24*XLEN/8, x4)

inst_52:// rs2_b0_val == -33, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xf6f620f8;  op2val:0xf655fbdf
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xf6f620f8, 0xf655fbdf, x2, 25*XLEN/8, x4)

inst_53:// rs1_b1_val == -65, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x7f55bffd;  op2val:0xf9090800
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x7f55bffd, 0xf9090800, x2, 26*XLEN/8, x4)

inst_54:// rs2_b1_val == -1, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0355df;  op2val:0xbf10fff7
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xdf0355df, 0xbf10fff7, x2, 27*XLEN/8, x4)

inst_55:// rs2_b1_val == 0, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfe040380;  op2val:0xff4000aa
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfe040380, 0xff4000aa, x2, 28*XLEN/8, x4)

inst_56:// rs2_b1_val == 127, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f805ff;  op2val:0x4067fdf
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xf7f805ff, 0x4067fdf, x2, 29*XLEN/8, x4)

inst_57:// rs1_b2_val == 0, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x90003ef;  op2val:0x80bf4009
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x90003ef, 0x80bf4009, x2, 30*XLEN/8, x4)

inst_58:// rs1_b2_val == 1, rs2_b2_val == 2
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x3f0101fa;  op2val:0x5020708
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x3f0101fa, 0x5020708, x2, 31*XLEN/8, x4)

inst_59:// rs2_b1_val == 32, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xf9020709;  op2val:0x30320df
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xf9020709, 0x30320df, x2, 32*XLEN/8, x4)

inst_60:// rs1_b2_val == -5, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x8fb3ff6;  op2val:0xfef82004
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x8fb3ff6, 0xfef82004, x2, 33*XLEN/8, x4)

inst_61:// rs2_b1_val == -86, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x47f0007;  op2val:0xffefaa05
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x47f0007, 0xffefaa05, x2, 34*XLEN/8, x4)

inst_62:// rs1_b2_val == -33, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xaadfdffa;  op2val:0xbf20fc04
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xaadfdffa, 0xbf20fc04, x2, 35*XLEN/8, x4)

inst_63:// rs1_b2_val == -65, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x40bff7aa;  op2val:0xff08aa00
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x40bff7aa, 0xff08aa00, x2, 36*XLEN/8, x4)

inst_64:// rs2_b2_val == 127, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x55aa7f05;  op2val:0x407ff704
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x55aa7f05, 0x407ff704, x2, 37*XLEN/8, x4)

inst_65:// rs2_b0_val == -17, 
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfc3f8040;  op2val:0xbfbf05ef
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfc3f8040, 0xbfbf05ef, x2, 38*XLEN/8, x4)

inst_66:// rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b3_val == 32, rs2_b2_val == -5, rs1_b2_val == -1, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b0_val == -1, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b3_val == -17
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff601;  op2val:0xeffb05ff
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0x20fff601, 0xeffb05ff, x2, 39*XLEN/8, x4)

inst_67:// rs1_b0_val == -2, rs1_b2_val == -128
// opcode: padd.b.b0 ; op1:x30; op2:x29; dest:x31; op1val:0xfa80f9fe;  op2val:0xf63f07ff
TEST_RR_OP(padd.b.b0, x31, x30, x29, 0x00000000, 0xfa80f9fe, 0xf63f07ff, x2, 40*XLEN/8, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 41*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
