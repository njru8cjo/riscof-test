
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Mar 14 02:36:27 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmul.w.heo instruction of the RISC-V RV64PZicsr extension for the pmul.w.heo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmul.w.heo)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x24, rs2==x10, rd==x10, rs1_w0_val == -2147483648, rs2_w0_val == 1048576, rs1_w1_val == -67108865, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs2_w1_val == 128, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val != rs2_w1_val
// opcode: pmul.w.heo ; op1:x24; op2:x10; dest:x10; op1val:0xfbffffff80000000;  op2val:0x00008000100000
TEST_RR_OP(pmul.w.heo, x10, x24, x10, 0x0000000000000000, 0xfbffffff80000000, 0x00008000100000, x4, 0*XLEN/8, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x3, rd==x9, rs1_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -2049, rs2_w0_val == 131072, rs2_w1_val == -1431655766
// opcode: pmul.w.heo ; op1:x13; op2:x3; dest:x9; op1val:0xfffff7ffffffffff;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(pmul.w.heo, x9, x13, x3, 0x0000000000000000, 0xfffff7ffffffffff, 0xaaaaaaaa00020000, x4, 1*XLEN/8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x1, rs2==x26, rd==x1, rs1_w0_val == 0, rs2_w0_val == -536870913, rs2_w1_val == 8, rs1_w1_val == 16384, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pmul.w.heo ; op1:x1; op2:x26; dest:x1; op1val:0x00400000000000;  op2val:0x000008dfffffff
TEST_RR_OP(pmul.w.heo, x1, x1, x26, 0x0000000000000000, 0x00400000000000, 0x000008dfffffff, x4, 2*XLEN/8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_w0_val == 1, rs1_w1_val == -5, rs2_w0_val == -1431655766, rs2_w1_val == 131072, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: pmul.w.heo ; op1:x29; op2:x29; dest:x29; op1val:0xfffffffb00000001;  op2val:0x020000aaaaaaaa
TEST_RR_OP(pmul.w.heo, x29, x29, x29, 0x0000000000000000, 0xfffffffb00000001, 0x020000aaaaaaaa, x4, 3*XLEN/8, x8)

inst_4:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x18, rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 536870912, rs2_w1_val == 8192, rs1_w1_val == 32768
// opcode: pmul.w.heo ; op1:x17; op2:x17; dest:x18; op1val:0x0080007fffffff;  op2val:0x00200020000000
TEST_RR_OP(pmul.w.heo, x18, x17, x17, 0x0000000000000000, 0x0080007fffffff, 0x00200020000000, x4, 4*XLEN/8, x8)

inst_5:
// rs1==x10, rs2==x5, rd==x20, rs1_w0_val == 2, rs1_w1_val == 512, rs2_w1_val == 536870912, rs2_w0_val == -268435457
// opcode: pmul.w.heo ; op1:x10; op2:x5; dest:x20; op1val:0x00020000000002;  op2val:0x20000000efffffff
TEST_RR_OP(pmul.w.heo, x20, x10, x5, 0x0000000000000000, 0x00020000000002, 0x20000000efffffff, x4, 5*XLEN/8, x8)

inst_6:
// rs1==x2, rs2==x0, rd==x3, rs1_w0_val == 4, rs2_w1_val == 32768, rs2_w0_val == -2, rs1_w1_val == -65537
// opcode: pmul.w.heo ; op1:x2; op2:x0; dest:x3; op1val:0xfffeffff00000004;  op2val:0x008000fffffffe
TEST_RR_OP(pmul.w.heo, x3, x2, x0, 0x0000000000000000, 0xfffeffff00000004, 0x008000fffffffe, x4, 6*XLEN/8, x8)

inst_7:
// rs1==x22, rs2==x1, rd==x23, rs1_w0_val == 8, rs2_w1_val == 512, rs1_w1_val == 4
// opcode: pmul.w.heo ; op1:x22; op2:x1; dest:x23; op1val:0x00000400000008;  op2val:0x000200fffffff6
TEST_RR_OP(pmul.w.heo, x23, x22, x1, 0x0000000000000000, 0x00000400000008, 0x000200fffffff6, x4, 7*XLEN/8, x8)

inst_8:
// rs1==x26, rs2==x27, rd==x6, rs1_w0_val == 16, rs2_w1_val == -4097, rs1_w1_val == -33, rs2_w0_val == 1024
// opcode: pmul.w.heo ; op1:x26; op2:x27; dest:x6; op1val:0xffffffdf00000010;  op2val:0xffffefff00000400
TEST_RR_OP(pmul.w.heo, x6, x26, x27, 0x0000000000000000, 0xffffffdf00000010, 0xffffefff00000400, x4, 8*XLEN/8, x8)

inst_9:
// rs1==x6, rs2==x15, rd==x24, rs1_w0_val == 32, rs2_w1_val == 524288, rs2_w0_val == -262145, rs1_w1_val == -129
// opcode: pmul.w.heo ; op1:x6; op2:x15; dest:x24; op1val:0xffffff7f00000020;  op2val:0x080000fffbffff
TEST_RR_OP(pmul.w.heo, x24, x6, x15, 0x0000000000000000, 0xffffff7f00000020, 0x080000fffbffff, x4, 9*XLEN/8, x8)

inst_10:
// rs1==x15, rs2==x11, rd==x28, rs1_w0_val == 64, rs2_w0_val == 2147483647, rs1_w1_val == -65
// opcode: pmul.w.heo ; op1:x15; op2:x11; dest:x28; op1val:0xffffffbf00000040;  op2val:0xfffffffc7fffffff
TEST_RR_OP(pmul.w.heo, x28, x15, x11, 0x0000000000000000, 0xffffffbf00000040, 0xfffffffc7fffffff, x4, 10*XLEN/8, x8)

inst_11:
// rs1==x12, rs2==x16, rd==x30, rs1_w0_val == 128, rs1_w1_val == -16385, rs2_w1_val == 4194304
// opcode: pmul.w.heo ; op1:x12; op2:x16; dest:x30; op1val:0xffffbfff00000080;  op2val:0x4000003fffffff
TEST_RR_OP(pmul.w.heo, x30, x12, x16, 0x0000000000000000, 0xffffbfff00000080, 0x4000003fffffff, x4, 11*XLEN/8, x8)

inst_12:
// rs1==x20, rs2==x12, rd==x27, rs1_w0_val == 256, rs2_w0_val == 0, rs2_w1_val == 0
// opcode: pmul.w.heo ; op1:x20; op2:x12; dest:x27; op1val:0x00400000000100;  op2val:0x00000000000000
TEST_RR_OP(pmul.w.heo, x27, x20, x12, 0x0000000000000000, 0x00400000000100, 0x00000000000000, x4, 12*XLEN/8, x8)

inst_13:
// rs1==x28, rs2==x24, rd==x12, rs1_w0_val == 512, rs1_w1_val == -3, rs2_w0_val == -67108865, rs2_w1_val == -16777217
// opcode: pmul.w.heo ; op1:x28; op2:x24; dest:x12; op1val:0xfffffffd00000200;  op2val:0xfefffffffbffffff
TEST_RR_OP(pmul.w.heo, x12, x28, x24, 0x0000000000000000, 0xfffffffd00000200, 0xfefffffffbffffff, x4, 13*XLEN/8, x8)

inst_14:
// rs1==x7, rs2==x22, rd==x5, rs1_w0_val == 1024, rs2_w0_val == 1073741824, rs2_w1_val == -17, rs1_w1_val == 1073741824, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmul.w.heo ; op1:x7; op2:x22; dest:x5; op1val:0x4000000000000400;  op2val:0xffffffef40000000
TEST_RR_OP(pmul.w.heo, x5, x7, x22, 0x0000000000000000, 0x4000000000000400, 0xffffffef40000000, x4, 14*XLEN/8, x8)

inst_15:
// rs1==x30, rs2==x6, rd==x0, rs1_w0_val == 2048, rs2_w1_val == -3, rs2_w0_val == 8192, rs1_w1_val == 1431655765
// opcode: pmul.w.heo ; op1:x30; op2:x6; dest:x0; op1val:0x5555555500000800;  op2val:0xfffffffd00002000
TEST_RR_OP(pmul.w.heo, x0, x30, x6, 0x0000000000000000, 0x5555555500000800, 0xfffffffd00002000, x4, 15*XLEN/8, x8)

inst_16:
// rs1==x25, rs2==x7, rd==x17, rs1_w0_val == 4096, rs2_w0_val == 16
// opcode: pmul.w.heo ; op1:x25; op2:x7; dest:x17; op1val:0xffffffbf00001000;  op2val:0xfeffffff00000010
TEST_RR_OP(pmul.w.heo, x17, x25, x7, 0x0000000000000000, 0xffffffbf00001000, 0xfeffffff00000010, x4, 16*XLEN/8, x8)

inst_17:
// rs1==x19, rs2==x23, rd==x13, rs1_w0_val == 8192, rs2_w1_val == -131073, rs1_w1_val == 33554432
// opcode: pmul.w.heo ; op1:x19; op2:x23; dest:x13; op1val:0x200000000002000;  op2val:0xfffdffff00000003
TEST_RR_OP(pmul.w.heo, x13, x19, x23, 0x0000000000000000, 0x200000000002000, 0xfffdffff00000003, x4, 17*XLEN/8, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x5, rs2==x18, rd==x19, rs1_w0_val == 16384, rs1_w1_val == 1024, rs2_w1_val == -65537
// opcode: pmul.w.heo ; op1:x5; op2:x18; dest:x19; op1val:0x00040000004000;  op2val:0xfffeffff00000005
TEST_RR_OP(pmul.w.heo, x19, x5, x18, 0x0000000000000000, 0x00040000004000, 0xfffeffff00000005, x1, 0*XLEN/8, x6)

inst_19:
// rs1==x31, rs2==x13, rd==x25, rs1_w0_val == 32768, rs1_w1_val == 65536, rs2_w1_val == -268435457, rs2_w0_val == 134217728
// opcode: pmul.w.heo ; op1:x31; op2:x13; dest:x25; op1val:0x01000000008000;  op2val:0xefffffff08000000
TEST_RR_OP(pmul.w.heo, x25, x31, x13, 0x0000000000000000, 0x01000000008000, 0xefffffff08000000, x1, 1*XLEN/8, x6)

inst_20:
// rs1==x27, rs2==x31, rd==x16, rs1_w0_val == 65536, rs2_w1_val == 262144
// opcode: pmul.w.heo ; op1:x27; op2:x31; dest:x16; op1val:0x00000400010000;  op2val:0x040000fffffff6
TEST_RR_OP(pmul.w.heo, x16, x27, x31, 0x0000000000000000, 0x00000400010000, 0x040000fffffff6, x1, 2*XLEN/8, x6)

inst_21:
// rs1==x16, rs2==x14, rd==x26, rs1_w0_val == 131072, rs2_w1_val == 33554432, rs2_w0_val == 16777216, rs1_w1_val == -2147483648
// opcode: pmul.w.heo ; op1:x16; op2:x14; dest:x26; op1val:0x8000000000020000;  op2val:0x200000001000000
TEST_RR_OP(pmul.w.heo, x26, x16, x14, 0x0000000000000000, 0x8000000000020000, 0x200000001000000, x1, 3*XLEN/8, x6)

inst_22:
// rs1==x21, rs2==x25, rd==x4, rs1_w0_val == 262144, rs2_w1_val == -2147483648, rs1_w1_val == -257
// opcode: pmul.w.heo ; op1:x21; op2:x25; dest:x4; op1val:0xfffffeff00040000;  op2val:0x8000000000000000
TEST_RR_OP(pmul.w.heo, x4, x21, x25, 0x0000000000000000, 0xfffffeff00040000, 0x8000000000000000, x1, 4*XLEN/8, x6)

inst_23:
// rs1==x11, rs2==x30, rd==x15, rs1_w0_val == 524288, rs2_w1_val == 67108864, rs2_w0_val == -513
// opcode: pmul.w.heo ; op1:x11; op2:x30; dest:x15; op1val:0x5555555500080000;  op2val:0x4000000fffffdff
TEST_RR_OP(pmul.w.heo, x15, x11, x30, 0x0000000000000000, 0x5555555500080000, 0x4000000fffffdff, x1, 5*XLEN/8, x6)

inst_24:
// rs1==x18, rs2==x8, rd==x14, rs1_w0_val == 1048576, rs1_w1_val == 64
// opcode: pmul.w.heo ; op1:x18; op2:x8; dest:x14; op1val:0x00004000100000;  op2val:0x0020003fffffff
TEST_RR_OP(pmul.w.heo, x14, x18, x8, 0x0000000000000000, 0x00004000100000, 0x0020003fffffff, x1, 6*XLEN/8, x6)

inst_25:
// rs1==x9, rs2==x21, rd==x11, rs1_w0_val == 2097152, rs2_w1_val == -33, rs2_w0_val == 512, rs1_w1_val == -16777217
// opcode: pmul.w.heo ; op1:x9; op2:x21; dest:x11; op1val:0xfeffffff00200000;  op2val:0xffffffdf00000200
TEST_RR_OP(pmul.w.heo, x11, x9, x21, 0x0000000000000000, 0xfeffffff00200000, 0xffffffdf00000200, x1, 7*XLEN/8, x6)

inst_26:
// rs1==x14, rs2==x9, rd==x2, rs1_w0_val == 4194304, rs2_w0_val == -33, rs1_w1_val == 8
// opcode: pmul.w.heo ; op1:x14; op2:x9; dest:x2; op1val:0x00000800400000;  op2val:0xffffefffffffffdf
TEST_RR_OP(pmul.w.heo, x2, x14, x9, 0x0000000000000000, 0x00000800400000, 0xffffefffffffffdf, x1, 8*XLEN/8, x6)

inst_27:
// rs1==x23, rs2==x2, rd==x31, rs1_w0_val == 8388608, rs2_w0_val == -3, rs1_w1_val == 4096
// opcode: pmul.w.heo ; op1:x23; op2:x2; dest:x31; op1val:0x00100000800000;  op2val:0x3ffffffffffffffd
TEST_RR_OP(pmul.w.heo, x31, x23, x2, 0x0000000000000000, 0x00100000800000, 0x3ffffffffffffffd, x1, 9*XLEN/8, x6)

inst_28:
// rs1==x0, rs2==x20, rd==x21, rs1_w0_val == 16777216, rs1_w1_val == -524289, rs2_w1_val == -1
// opcode: pmul.w.heo ; op1:x0; op2:x20; dest:x21; op1val:0xfff7ffff01000000;  op2val:0xffffffff00000009
TEST_RR_OP(pmul.w.heo, x21, x0, x20, 0x0000000000000000, 0xfff7ffff01000000, 0xffffffff00000009, x1, 10*XLEN/8, x6)

inst_29:
// rs1==x3, rs2==x28, rd==x8, rs1_w0_val == 33554432, rs2_w1_val == -4194305, rs1_w1_val == 8192, rs2_w0_val == -134217729
// opcode: pmul.w.heo ; op1:x3; op2:x28; dest:x8; op1val:0x00200002000000;  op2val:0xffbffffff7ffffff
TEST_RR_OP(pmul.w.heo, x8, x3, x28, 0x0000000000000000, 0x00200002000000, 0xffbffffff7ffffff, x1, 11*XLEN/8, x6)

inst_30:
// rs1==x4, rs2==x19, rd==x7, rs1_w0_val == 67108864, rs1_w1_val == -513, rs2_w0_val == 1
// opcode: pmul.w.heo ; op1:x4; op2:x19; dest:x7; op1val:0xfffffdff04000000;  op2val:0x8000000000000001
TEST_RR_OP(pmul.w.heo, x7, x4, x19, 0x0000000000000000, 0xfffffdff04000000, 0x8000000000000001, x1, 12*XLEN/8, x6)

inst_31:
// rs1==x8, rs2==x4, rd==x22, rs1_w0_val == 134217728, 
// opcode: pmul.w.heo ; op1:x8; op2:x4; dest:x22; op1val:0xfffffff808000000;  op2val:0x000080fffffffc
TEST_RR_OP(pmul.w.heo, x22, x8, x4, 0x0000000000000000, 0xfffffff808000000, 0x000080fffffffc, x1, 13*XLEN/8, x6)

inst_32:
// rs1_w0_val == 268435456, rs2_w1_val == 16384, rs1_w1_val == -32769
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff10000000;  op2val:0x00400000000200
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7fff10000000, 0x00400000000200, x1, 14*XLEN/8, x6)

inst_33:
// rs1_w0_val == 536870912, rs1_w1_val == -4194305
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff20000000;  op2val:0x20000000fffffdff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffff20000000, 0x20000000fffffdff, x1, 15*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs1_w1_val == 268435456, rs2_w1_val == 2097152
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x1000000040000000;  op2val:0x200000c0000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000040000000, 0x200000c0000000, x1, 16*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffe;  op2val:0xaaaaaaaaffffffdf
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffe, 0xaaaaaaaaffffffdf, x1, 17*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == 4, rs1_w1_val == -1048577, rs2_w0_val == 524288
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffd;  op2val:0x00000400080000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffd, 0x00000400080000, x1, 18*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs2_w1_val == -8388609
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffb;  op2val:0xff7ffffffffffffa
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffb, 0xff7ffffffffffffa, x1, 19*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w1_val == 1
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffff7;  op2val:0x00000100000003
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff7, 0x00000100000003, x1, 20*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs2_w0_val == 262144
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffef;  op2val:0x00000300040000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffef, 0x00000300040000, x1, 21*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs1_w1_val == -33554433, rs2_w1_val == -16385
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffdf;  op2val:0xffffbffffffffff8
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffdf, 0xffffbffffffffff8, x1, 22*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs2_w1_val == -257, rs1_w1_val == -1, rs2_w0_val == 2048
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0xfffffeff00000800
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0xfffffeff00000800, x1, 23*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs2_w0_val == 65536
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffff7f;  op2val:0xfffffffc00010000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000400ffffff7f, 0xfffffffc00010000, x1, 24*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == 2048, rs2_w1_val == 1073741824
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffeff;  op2val:0x4000000000100000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800fffffeff, 0x4000000000100000, x1, 25*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs1_w1_val == 524288
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffdff;  op2val:0xffffefff3fffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000fffffdff, 0xffffefff3fffffff, x1, 26*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs1_w1_val == -268435457
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffbff;  op2val:0xfffffffffffffff6
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffbff, 0xfffffffffffffff6, x1, 27*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs1_w1_val == -134217729
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffff7ff;  op2val:0x4000000000000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffff7ff, 0x4000000000000000, x1, 28*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs2_w1_val == -33554433, rs2_w0_val == 8388608
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffefff;  op2val:0xfdffffff00800000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffefff, 0xfdffffff00800000, x1, 29*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs2_w1_val == 16777216
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffdfff;  op2val:0x100000000020000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000ffffdfff, 0x100000000020000, x1, 30*XLEN/8, x2)

inst_49:
// rs2_w1_val == -262145, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffa;  op2val:0xfffbffff00000005
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffa, 0xfffbffff00000005, x1, 31*XLEN/8, x2)

inst_50:
// rs2_w1_val == -524289, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff7fffffff;  op2val:0xfff7ffff00080000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffbfff7fffffff, 0xfff7ffff00080000, x1, 32*XLEN/8, x2)

inst_51:
// rs2_w1_val == -1048577, rs2_w0_val == -1073741825, rs1_w1_val == -8193
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00040000;  op2val:0xffefffffbfffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffdfff00040000, 0xffefffffbfffffff, x1, 33*XLEN/8, x2)

inst_52:
// rs2_w1_val == -2097153, rs1_w0_val == -32769, rs2_w0_val == -1048577
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffff7fff;  op2val:0xffdfffffffefffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffff7fff, 0xffdfffffffefffff, x1, 34*XLEN/8, x2)

inst_53:
// rs2_w1_val == -67108865, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x20000007fffffff;  op2val:0xfbffffff00000003
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x20000007fffffff, 0xfbffffff00000003, x1, 35*XLEN/8, x2)

inst_54:
// rs2_w1_val == -134217729, rs2_w0_val == 1431655765
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffeff;  op2val:0xf7ffffff55555555
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffeff, 0xf7ffffff55555555, x1, 36*XLEN/8, x2)

inst_55:
// rs2_w1_val == -536870913, rs2_w0_val == 4
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffe;  op2val:0xdfffffff00000004
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004fffffffe, 0xdfffffff00000004, x1, 37*XLEN/8, x2)

inst_56:
// rs2_w1_val == -1073741825, rs1_w0_val == -4194305
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffbfffff;  op2val:0xbffffffffffffffe
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffefffffffbfffff, 0xbffffffffffffffe, x1, 38*XLEN/8, x2)

inst_57:
// rs2_w1_val == 1431655765, rs1_w1_val == 256, rs2_w0_val == -32769
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00010000400000;  op2val:0x55555555ffff7fff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00010000400000, 0x55555555ffff7fff, x1, 39*XLEN/8, x2)

inst_58:
// rs1_w0_val == rs2_w0_val, rs2_w0_val == -4194305
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffbfffff;  op2val:0xfeffffffffbfffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003ffbfffff, 0xfeffffffffbfffff, x1, 40*XLEN/8, x2)

inst_59:
// rs1_w1_val == rs2_w1_val, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffff7ff;  op2val:0x080000fffffdff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000fffff7ff, 0x080000fffffdff, x1, 41*XLEN/8, x2)

inst_60:
// rs1_w0_val == -16385, rs1_w1_val == -9, rs2_w0_val == 64
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffbfff;  op2val:0x20000000000040
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffbfff, 0x20000000000040, x1, 42*XLEN/8, x2)

inst_61:
// rs1_w0_val == -65537, rs2_w1_val == -1025
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffeffff;  op2val:0xfffffbff00000003
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000fffeffff, 0xfffffbff00000003, x1, 43*XLEN/8, x2)

inst_62:
// rs1_w0_val == -131073, rs1_w1_val == 1048576
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffdffff;  op2val:0xefffffffc0000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000fffdffff, 0xefffffffc0000000, x1, 44*XLEN/8, x2)

inst_63:
// rs1_w0_val == -262145, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffbffff;  op2val:0x3fffffff40000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffafffbffff, 0x3fffffff40000000, x1, 45*XLEN/8, x2)

inst_64:
// rs1_w0_val == -524289, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006fff7ffff;  op2val:0x5555555500000040
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006fff7ffff, 0x5555555500000040, x1, 46*XLEN/8, x2)

inst_65:
// rs1_w0_val == -1048577, rs2_w0_val == 4194304, rs2_w1_val == -32769
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffefffff;  op2val:0xffff7fff00400000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006ffefffff, 0xffff7fff00400000, x1, 47*XLEN/8, x2)

inst_66:
// rs1_w0_val == -2097153, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffdfffff;  op2val:0x400000000000040
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffdfffff, 0x400000000000040, x1, 48*XLEN/8, x2)

inst_67:
// rs1_w0_val == -8388609, rs2_w0_val == -2097153
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffff7fffff;  op2val:0x000200ffdfffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffefffffff7fffff, 0x000200ffdfffff, x1, 49*XLEN/8, x2)

inst_68:
// rs1_w0_val == -16777217, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000200feffffff;  op2val:0x400000000400000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000200feffffff, 0x400000000400000, x1, 50*XLEN/8, x2)

inst_69:
// rs1_w0_val == -33554433, rs2_w0_val == -524289, rs1_w1_val == -1431655766
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafdffffff;  op2val:0xffffffeffff7ffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafdffffff, 0xffffffeffff7ffff, x1, 51*XLEN/8, x2)

inst_70:
// rs1_w0_val == -67108865, rs1_w1_val == 2097152
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x200000fbffffff;  op2val:0x3ffffffffffbffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x200000fbffffff, 0x3ffffffffffbffff, x1, 52*XLEN/8, x2)

inst_71:
// rs1_w0_val == -134217729, rs2_w0_val == -8193, rs1_w1_val == 4194304
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000f7ffffff;  op2val:0x002000ffffdfff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000f7ffffff, 0x002000ffffdfff, x1, 53*XLEN/8, x2)

inst_72:
// rs1_w0_val == -268435457, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000efffffff;  op2val:0xffffffef00100000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000efffffff, 0xffffffef00100000, x1, 54*XLEN/8, x2)

inst_73:
// rs1_w0_val == -536870913, rs1_w1_val == -536870913, rs2_w1_val == -65
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffdfffffff;  op2val:0xffffffbf00000800
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xdfffffffdfffffff, 0xffffffbf00000800, x1, 55*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1073741825, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffbfffffff;  op2val:0x00000500000800
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x3fffffffbfffffff, 0x00000500000800, x1, 56*XLEN/8, x2)

inst_75:
// rs1_w0_val == 1431655765, rs2_w0_val == -1
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff855555555;  op2val:0xffff7fffffffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff855555555, 0xffff7fffffffffff, x1, 57*XLEN/8, x2)

inst_76:
// rs1_w0_val == -1431655766, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000003aaaaaaaa;  op2val:0xffffffdf7fffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003aaaaaaaa, 0xffffffdf7fffffff, x1, 58*XLEN/8, x2)

inst_77:
// rs1_w1_val == 0, rs2_w0_val == 8
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffff;  op2val:0x00400000000008
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000ffffffff, 0x00400000000008, x1, 59*XLEN/8, x2)

inst_78:
// rs1_w1_val == 1, rs2_w1_val == 65536
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000180000000;  op2val:0x01000008000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000180000000, 0x01000008000000, x1, 60*XLEN/8, x2)

inst_79:
// rs1_w1_val == 2147483647, rs2_w1_val == 2048
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffeff;  op2val:0x00080000000800
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffeff, 0x00080000000800, x1, 61*XLEN/8, x2)

inst_80:
// rs1_w1_val == 2, rs2_w1_val == 16
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000200100000;  op2val:0x000010ffff7fff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000200100000, 0x000010ffff7fff, x1, 62*XLEN/8, x2)

inst_81:
// rs1_w1_val == 16, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffffd;  op2val:0xff7fffff00000001
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000010fffffffd, 0xff7fffff00000001, x1, 63*XLEN/8, x2)

inst_82:
// rs1_w1_val == -1073741825, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffeffffff;  op2val:0xfff7ffff00000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xbffffffffeffffff, 0xfff7ffff00000000, x1, 64*XLEN/8, x2)

inst_83:
// rs2_w0_val == -2147483648, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff9;  op2val:0xfbffffff80000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff9, 0xfbffffff80000000, x1, 65*XLEN/8, x2)

inst_84:
// rs2_w0_val == 2, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffbfffffff;  op2val:0x00000100000002
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffff7ffbfffffff, 0x00000100000002, x1, 66*XLEN/8, x2)

inst_85:
// rs2_w0_val == 32, rs1_w1_val == 262144
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffbff;  op2val:0xffffefff00000020
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x040000fffffbff, 0xffffefff00000020, x1, 67*XLEN/8, x2)

inst_86:
// rs2_w0_val == 128, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ff7fffff;  op2val:0xffff7fff00000080
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff6ff7fffff, 0xffff7fff00000080, x1, 68*XLEN/8, x2)

inst_87:
// rs2_w0_val == 256, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00004000002000;  op2val:0xffffffdf00000100
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00004000002000, 0xffffffdf00000100, x1, 69*XLEN/8, x2)

inst_88:
// rs2_w0_val == 4096, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000fff7ffff;  op2val:0xffffffff00001000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000fff7ffff, 0xffffffff00001000, x1, 70*XLEN/8, x2)

inst_89:
// rs2_w0_val == 16384, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffffe;  op2val:0xf7ffffff00004000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000005fffffffe, 0xf7ffffff00004000, x1, 71*XLEN/8, x2)

inst_90:
// rs2_w0_val == 32768, rs2_w1_val == 4096
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffeff;  op2val:0x00100000008000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x200000fffffeff, 0x00100000008000, x1, 72*XLEN/8, x2)

inst_91:
// rs2_w0_val == 2097152, rs1_w1_val == 16777216, rs2_w1_val == 2
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000003;  op2val:0x00000200200000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000000000003, 0x00000200200000, x1, 73*XLEN/8, x2)

inst_92:
// rs2_w0_val == 33554432, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffff6;  op2val:0xffffffef02000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffff6, 0xffffffef02000000, x1, 74*XLEN/8, x2)

inst_93:
// rs2_w0_val == 67108864, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000900080000;  op2val:0x00800004000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000900080000, 0x00800004000000, x1, 75*XLEN/8, x2)

inst_94:
// rs2_w0_val == 268435456, rs1_w1_val == 536870912
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000020;  op2val:0x100000010000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000000000020, 0x100000010000000, x1, 76*XLEN/8, x2)

inst_95:
// rs2_w0_val == -5, rs1_w1_val == 32
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff8;  op2val:0x000001fffffffb
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000020fffffff8, 0x000001fffffffb, x1, 77*XLEN/8, x2)

inst_96:
// rs2_w0_val == -9, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff6;  op2val:0x55555555fffffff7
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x010000fffffff6, 0x55555555fffffff7, x1, 78*XLEN/8, x2)

inst_97:
// rs2_w0_val == -17, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000910000000;  op2val:0xffffffbfffffffef
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000910000000, 0xffffffbfffffffef, x1, 79*XLEN/8, x2)

inst_98:
// rs2_w0_val == -65, rs1_w1_val == -262145
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffbfffff;  op2val:0x4000000ffffffbf
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbffffffbfffff, 0x4000000ffffffbf, x1, 80*XLEN/8, x2)

inst_99:
// rs2_w0_val == -129, rs2_w1_val == -2049, rs1_w1_val == -8388609
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffdfff;  op2val:0xfffff7ffffffff7f
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffdfff, 0xfffff7ffffffff7f, x1, 81*XLEN/8, x2)

inst_100:
// rs2_w0_val == -257, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffbff;  op2val:0x40000000fffffeff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffbff, 0x40000000fffffeff, x1, 82*XLEN/8, x2)

inst_101:
// rs2_w0_val == -1025, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffffef;  op2val:0x3ffffffffffffbff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000ffffffef, 0x3ffffffffffffbff, x1, 83*XLEN/8, x2)

inst_102:
// rs2_w0_val == -2049, rs2_w1_val == 256
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffff7ff;  op2val:0x000100fffff7ff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xeffffffffffff7ff, 0x000100fffff7ff, x1, 84*XLEN/8, x2)

inst_103:
// rs2_w0_val == -4097, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000400;  op2val:0xfffffbffffffefff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000400, 0xfffffbffffffefff, x1, 85*XLEN/8, x2)

inst_104:
// rs2_w0_val == -8388609, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000008;  op2val:0x000800ff7fffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000008, 0x000800ff7fffff, x1, 86*XLEN/8, x2)

inst_105:
// rs2_w0_val == -16777217, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000800;  op2val:0xdffffffffeffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000000000800, 0xdffffffffeffffff, x1, 87*XLEN/8, x2)

inst_106:
// rs2_w0_val == -33554433, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0xc0000000fdffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0xc0000000fdffffff, x1, 88*XLEN/8, x2)

inst_107:
// rs1_w1_val == 128, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000009;  op2val:0x3ffffffffffffdff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00008000000009, 0x3ffffffffffffdff, x1, 89*XLEN/8, x2)

inst_108:
// rs2_w1_val == 2147483647, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00100000800000;  op2val:0x7fffffff10000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00100000800000, 0x7fffffff10000000, x1, 90*XLEN/8, x2)

inst_109:
// rs2_w1_val == 32, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffc;  op2val:0x000020ffffefff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000fffffffc, 0x000020ffffefff, x1, 91*XLEN/8, x2)

inst_110:
// rs2_w1_val == 64, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000000;  op2val:0x000040ffffffdf
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000000, 0x000040ffffffdf, x1, 92*XLEN/8, x2)

inst_111:
// rs1_w1_val == 131072, rs2_w0_val == -65537
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000007;  op2val:0x001000fffeffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x02000000000007, 0x001000fffeffff, x1, 93*XLEN/8, x2)

inst_112:
// rs2_w1_val == 1024, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000200;  op2val:0x00040000000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000200, 0x00040000000000, x1, 94*XLEN/8, x2)

inst_113:
// rs1_w1_val == -131073, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffeffffff;  op2val:0xfffffff600000800
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffdfffffeffffff, 0xfffffff600000800, x1, 95*XLEN/8, x2)

inst_114:
// rs1_w1_val == 8388608, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000004;  op2val:0xffdfffff00000001
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000000004, 0xffdfffff00000001, x1, 96*XLEN/8, x2)

inst_115:
// rs1_w1_val == 67108864, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000000008000;  op2val:0xf7fffffffffffffd
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000000008000, 0xf7fffffffffffffd, x1, 97*XLEN/8, x2)

inst_116:
// rs1_w1_val == 134217728, rs2_w1_val == -5
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000009;  op2val:0xfffffffb00000007
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x800000000000009, 0xfffffffb00000007, x1, 98*XLEN/8, x2)

inst_117:
// rs2_w1_val == 1048576, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffdfffff;  op2val:0x10000000800000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004ffdfffff, 0x10000000800000, x1, 99*XLEN/8, x2)

inst_118:
// rs1_w1_val == -2, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe80000000;  op2val:0x20000000fffffbff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffe80000000, 0x20000000fffffbff, x1, 100*XLEN/8, x2)

inst_119:
// rs2_w1_val == 8388608, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x80000000000005
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x80000000000005, x1, 101*XLEN/8, x2)

inst_120:
// rs1_w1_val == -17, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefc0000000;  op2val:0xffffffbf00000020
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffefc0000000, 0xffffffbf00000020, x1, 102*XLEN/8, x2)

inst_121:
// rs2_w1_val == 134217728, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000020000000;  op2val:0x8000000c0000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000020000000, 0x8000000c0000000, x1, 103*XLEN/8, x2)

inst_122:
// rs2_w1_val == 268435456, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffb;  op2val:0x10000000fffff7ff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800fffffffb, 0x10000000fffff7ff, x1, 104*XLEN/8, x2)

inst_123:
// rs2_w1_val == -2, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000800;  op2val:0xfffffffefffffff7
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000800, 0xfffffffefffffff7, x1, 105*XLEN/8, x2)

inst_124:
// rs1_w1_val == -2097153, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00200000;  op2val:0x00000000000001
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffdfffff00200000, 0x00000000000001, x1, 106*XLEN/8, x2)

inst_125:
// rs1_w1_val == -1025, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffc0000000;  op2val:0xfffffffe08000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbffc0000000, 0xfffffffe08000000, x1, 107*XLEN/8, x2)

inst_126:
// rs2_w1_val == -9, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000700004000;  op2val:0xfffffff7fffffff7
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000700004000, 0xfffffff7fffffff7, x1, 108*XLEN/8, x2)

inst_127:
// rs2_w0_val == -131073, rs2_w1_val == -8193
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000000020000;  op2val:0xffffdffffffdffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000020000, 0xffffdffffffdffff, x1, 109*XLEN/8, x2)

inst_128:
// rs2_w1_val == -513, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00800000;  op2val:0xfffffdff00000006
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfeffffff00800000, 0xfffffdff00000006, x1, 110*XLEN/8, x2)

inst_129:
// rs2_w0_val == -16385, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000200;  op2val:0x000000ffffbfff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x00040000000200, 0x000000ffffbfff, x1, 111*XLEN/8, x2)

inst_130:
// rs1_w1_val == -4097, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00002000;  op2val:0xc0000000efffffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffefff00002000, 0xc0000000efffffff, x1, 112*XLEN/8, x2)

inst_131:
// rs2_w1_val == -129, 
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000040fdffffff;  op2val:0xffffff7ffffdffff
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040fdffffff, 0xffffff7ffffdffff, x1, 113*XLEN/8, x2)

inst_132:
// rs1_w0_val == 1, rs1_w1_val == -5, rs2_w0_val == -1431655766, rs2_w1_val == 131072, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000001;  op2val:0x020000aaaaaaaa
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000001, 0x020000aaaaaaaa, x1, 114*XLEN/8, x2)

inst_133:
// rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 536870912, rs2_w1_val == 8192, rs1_w1_val == 32768
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x0080007fffffff;  op2val:0x00200020000000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x0080007fffffff, 0x00200020000000, x1, 115*XLEN/8, x2)

inst_134:
// rs1_w0_val == 4, rs2_w1_val == 32768, rs2_w0_val == -2, rs1_w1_val == -65537
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000004;  op2val:0x008000fffffffe
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000004, 0x008000fffffffe, x1, 116*XLEN/8, x2)

inst_135:
// rs1_w0_val == 2048, rs2_w1_val == -3, rs2_w0_val == 8192, rs1_w1_val == 1431655765
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000800;  op2val:0xfffffffd00002000
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0x5555555500000800, 0xfffffffd00002000, x1, 117*XLEN/8, x2)

inst_136:
// rs1_w0_val == 16777216, rs1_w1_val == -524289, rs2_w1_val == -1
// opcode: pmul.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff01000000;  op2val:0xffffffff00000009
TEST_RR_OP(pmul.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7ffff01000000, 0xffffffff00000009, x1, 118*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 18*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 119*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
