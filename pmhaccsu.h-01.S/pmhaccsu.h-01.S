
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhaccsu.h instruction of the RISC-V RV64PZicsr extension for the pmhaccsu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhaccsu.h)

RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==x7, rs2==x31, rd==x31, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 32767, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -16385, rs1_h3_val != rs2_h3_val, rs2_h2_val == -8193
// opcode: pmhaccsu.h ; op1:x7; op2:x31; dest:x31; op1val:0x7fff3fff00058000;  op2val:0x03dfffbfff0005
TEST_RR_OP(pmhaccsu.h, x31, x7, x31, 0x0000000000000000, 0x7fff3fff00058000, 0x03dfffbfff0005, x15, 0*XLEN/8, x17)

inst_1:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x21, rs1_h0_val == -1, rs1_h3_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val == rs2_h2_val, rs2_h1_val == -8193, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -257
// opcode: pmhaccsu.h ; op1:x6; op2:x6; dest:x21; op1val:0xfffdc000fffcffff;  op2val:0xfeffc000dffffffc
TEST_RR_OP(pmhaccsu.h, x21, x6, x6, 0x0000000000000000, 0xfffdc000fffcffff, 0xfeffc000dffffffc, x15, 1*XLEN/8, x17)

inst_2:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h0_val == 0, rs2_h3_val == 8, rs2_h1_val == 4096, rs1_h1_val == -21846, rs2_h2_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 4, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pmhaccsu.h ; op1:x2; op2:x2; dest:x2; op1val:0xfff60004aaaa0000;  op2val:0x08200010000006
TEST_RR_OP(pmhaccsu.h, x2, x2, x2, 0x0000000000000000, 0xfff60004aaaa0000, 0x08200010000006, x15, 2*XLEN/8, x17)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x10, rd==x28, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs2_h0_val == -2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -4097, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 2048, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs2_h3_val == -32768
// opcode: pmhaccsu.h ; op1:x28; op2:x10; dest:x28; op1val:0x100efff08000001;  op2val:0x800000050400fffe
TEST_RR_OP(pmhaccsu.h, x28, x28, x10, 0x0000000000000000, 0x100efff08000001, 0x800000050400fffe, x15, 3*XLEN/8, x17)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x23, rd==x5, rs1_h0_val == 32767, rs1_h1_val == -513, rs2_h2_val == 512, rs1_h2_val == 1, rs2_h0_val == -1, rs2_h3_val == -33
// opcode: pmhaccsu.h ; op1:x20; op2:x23; dest:x5; op1val:0x090001fdff7fff;  op2val:0xffdf02000006ffff
TEST_RR_OP(pmhaccsu.h, x5, x20, x23, 0x0000000000000000, 0x090001fdff7fff, 0xffdf02000006ffff, x15, 4*XLEN/8, x17)

inst_5:
// rs1==x23, rs2==x14, rd==x29, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -2, rs1_h1_val == 2, rs1_h3_val == -1025, rs2_h2_val == -129, rs2_h0_val == 16
// opcode: pmhaccsu.h ; op1:x23; op2:x14; dest:x29; op1val:0xfbfffffc00020002;  op2val:0xfffcff7ffffe0010
TEST_RR_OP(pmhaccsu.h, x29, x23, x14, 0x0000000000000000, 0xfbfffffc00020002, 0xfffcff7ffffe0010, x15, 5*XLEN/8, x17)

inst_6:
// rs1==x1, rs2==x0, rd==x20, rs1_h0_val == 4, rs2_h3_val == 32, rs1_h2_val == -8193, rs2_h0_val == -129, rs2_h1_val == -257, rs1_h3_val == 1, rs1_h1_val == -2
// opcode: pmhaccsu.h ; op1:x1; op2:x0; dest:x20; op1val:0x01dffffffe0004;  op2val:0x20fff6feffff7f
TEST_RR_OP(pmhaccsu.h, x20, x1, x0, 0x0000000000000000, 0x01dffffffe0004, 0x20fff6feffff7f, x15, 6*XLEN/8, x17)

inst_7:
// rs1==x9, rs2==x7, rd==x1, rs1_h0_val == 8, rs2_h2_val == -1, rs1_h3_val == -1, rs2_h3_val == -9, rs1_h1_val == -16385
// opcode: pmhaccsu.h ; op1:x9; op2:x7; dest:x1; op1val:0xffff0007bfff0008;  op2val:0xfff7fffffff8fffe
TEST_RR_OP(pmhaccsu.h, x1, x9, x7, 0x0000000000000000, 0xffff0007bfff0008, 0xfff7fffffff8fffe, x15, 7*XLEN/8, x17)

inst_8:
// rs1==x13, rs2==x22, rd==x6, rs1_h0_val == 16, rs2_h1_val == 256, rs2_h3_val == 512, rs2_h0_val == 0, rs1_h2_val == 2
// opcode: pmhaccsu.h ; op1:x13; op2:x22; dest:x6; op1val:0x030002fffc0010;  op2val:0x200000501000000
TEST_RR_OP(pmhaccsu.h, x6, x13, x22, 0x0000000000000000, 0x030002fffc0010, 0x200000501000000, x15, 8*XLEN/8, x17)

inst_9:
// rs1==x16, rs2==x8, rd==x12, rs1_h0_val == 32, rs1_h2_val == 21845, rs2_h3_val == -5, rs1_h1_val == 4096, rs1_h3_val == 512, rs2_h0_val == 2048
// opcode: pmhaccsu.h ; op1:x16; op2:x8; dest:x12; op1val:0x200555510000020;  op2val:0xfffb0007dfff0800
TEST_RR_OP(pmhaccsu.h, x12, x16, x8, 0x0000000000000000, 0x200555510000020, 0xfffb0007dfff0800, x15, 9*XLEN/8, x17)

inst_10:
// rs1==x18, rs2==x1, rd==x24, rs1_h0_val == 64, rs2_h2_val == 32, rs1_h2_val == -513, rs1_h1_val == 1024, rs1_h3_val == 64, rs2_h3_val == 1
// opcode: pmhaccsu.h ; op1:x18; op2:x1; dest:x24; op1val:0x40fdff04000040;  op2val:0x010020fff80000
TEST_RR_OP(pmhaccsu.h, x24, x18, x1, 0x0000000000000000, 0x40fdff04000040, 0x010020fff80000, x15, 10*XLEN/8, x17)

inst_11:
// rs1==x4, rs2==x13, rd==x11, rs1_h0_val == 128, rs1_h3_val == 0, rs1_h1_val == 8, rs2_h3_val == -65, rs1_h2_val == -9
// opcode: pmhaccsu.h ; op1:x4; op2:x13; dest:x11; op1val:0x00fff700080080;  op2val:0xffbf0005fff90009
TEST_RR_OP(pmhaccsu.h, x11, x4, x13, 0x0000000000000000, 0x00fff700080080, 0xffbf0005fff90009, x15, 11*XLEN/8, x17)

inst_12:
// rs1==x3, rs2==x24, rd==x18, rs1_h0_val == 256, rs2_h3_val == 2, rs2_h2_val == 128, rs1_h3_val == -33, rs1_h2_val == 0, rs2_h0_val == -4097, rs1_h1_val == -129
// opcode: pmhaccsu.h ; op1:x3; op2:x24; dest:x18; op1val:0xffdf0000ff7f0100;  op2val:0x020080dfffefff
TEST_RR_OP(pmhaccsu.h, x18, x3, x24, 0x0000000000000000, 0xffdf0000ff7f0100, 0x020080dfffefff, x15, 12*XLEN/8, x17)

inst_13:
// rs1==x25, rs2==x5, rd==x27, rs1_h0_val == 512, rs1_h2_val == -257, rs2_h2_val == 2048, rs2_h1_val == -129, rs2_h0_val == 32767, rs1_h1_val == -33, rs2_h3_val == -16385
// opcode: pmhaccsu.h ; op1:x25; op2:x5; dest:x27; op1val:0xfffffeffffdf0200;  op2val:0xbfff0800ff7f7fff
TEST_RR_OP(pmhaccsu.h, x27, x25, x5, 0x0000000000000000, 0xfffffeffffdf0200, 0xbfff0800ff7f7fff, x15, 13*XLEN/8, x17)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x31, rs2==x16, rd==x23, rs1_h0_val == 1024, rs2_h2_val == 4, rs1_h3_val == 2048, rs1_h2_val == -1025, rs2_h0_val == 4
// opcode: pmhaccsu.h ; op1:x31; op2:x16; dest:x23; op1val:0x800fbff00030400;  op2val:0x020004fff90004
TEST_RR_OP(pmhaccsu.h, x23, x31, x16, 0x0000000000000000, 0x800fbff00030400, 0x020004fff90004, x1, 0*XLEN/8, x2)

inst_15:
// rs1==x24, rs2==x26, rd==x3, rs1_h0_val == 2048, rs2_h1_val == -5, rs1_h1_val == rs2_h1_val, rs2_h2_val == -2, rs1_h2_val == 512, rs2_h0_val == 2, rs2_h3_val == -129, rs1_h1_val == -5
// opcode: pmhaccsu.h ; op1:x24; op2:x26; dest:x3; op1val:0x090200fffb0800;  op2val:0xff7ffffefffb0002
TEST_RR_OP(pmhaccsu.h, x3, x24, x26, 0x0000000000000000, 0x090200fffb0800, 0xff7ffffefffb0002, x1, 1*XLEN/8, x2)

inst_16:
// rs1==x12, rs2==x25, rd==x14, rs1_h0_val == 4096, rs1_h1_val == 32767, rs1_h2_val == -21846, rs2_h1_val == 2048
// opcode: pmhaccsu.h ; op1:x12; op2:x25; dest:x14; op1val:0x3fffaaaa7fff1000;  op2val:0x08000508003fff
TEST_RR_OP(pmhaccsu.h, x14, x12, x25, 0x0000000000000000, 0x3fffaaaa7fff1000, 0x08000508003fff, x1, 2*XLEN/8, x2)

inst_17:
// rs1==x15, rs2==x19, rd==x17, rs1_h0_val == 8192, rs2_h3_val == 1024
// opcode: pmhaccsu.h ; op1:x15; op2:x19; dest:x17; op1val:0xfff8aaaa10002000;  op2val:0x4000800fff90009
TEST_RR_OP(pmhaccsu.h, x17, x15, x19, 0x0000000000000000, 0xfff8aaaa10002000, 0x4000800fff90009, x1, 3*XLEN/8, x2)

inst_18:
// rs1==x17, rs2==x21, rd==x0, rs1_h0_val == 16384, rs2_h1_val == 32767, rs2_h3_val == -1025, rs2_h0_val == 21845, rs2_h2_val == -1025
// opcode: pmhaccsu.h ; op1:x17; op2:x21; dest:x0; op1val:0x033fffbfff4000;  op2val:0xfbfffbff7fff5555
TEST_RR_OP(pmhaccsu.h, x0, x17, x21, 0x0000000000000000, 0x033fffbfff4000, 0xfbfffbff7fff5555, x1, 4*XLEN/8, x2)

inst_19:
// rs1==x8, rs2==x3, rd==x10, rs1_h0_val == -2, rs2_h2_val == 0, rs1_h1_val == -17, rs2_h3_val == 128
// opcode: pmhaccsu.h ; op1:x8; op2:x3; dest:x10; op1val:0xfff80002ffeffffe;  op2val:0x800000dfff0002
TEST_RR_OP(pmhaccsu.h, x10, x8, x3, 0x0000000000000000, 0xfff80002ffeffffe, 0x800000dfff0002, x1, 5*XLEN/8, x2)

inst_20:
// rs1==x5, rs2==x12, rd==x13, rs1_h0_val == -3, rs1_h3_val == -8193, rs2_h2_val == -9, rs2_h3_val == 16384, rs2_h1_val == -1, rs1_h1_val == -3
// opcode: pmhaccsu.h ; op1:x5; op2:x12; dest:x13; op1val:0xdfff0009fffdfffd;  op2val:0x4000fff7ffff0000
TEST_RR_OP(pmhaccsu.h, x13, x5, x12, 0x0000000000000000, 0xdfff0009fffdfffd, 0x4000fff7ffff0000, x1, 6*XLEN/8, x2)

inst_21:
// rs1==x11, rs2==x4, rd==x9, rs1_h0_val == -5, rs2_h3_val == -3, rs2_h1_val == 2, rs1_h3_val == -17
// opcode: pmhaccsu.h ; op1:x11; op2:x4; dest:x9; op1val:0xffef00020400fffb;  op2val:0xfffdff7f0002fff9
TEST_RR_OP(pmhaccsu.h, x9, x11, x4, 0x0000000000000000, 0xffef00020400fffb, 0xfffdff7f0002fff9, x1, 7*XLEN/8, x2)

inst_22:
// rs1==x26, rs2==x9, rd==x4, rs1_h0_val == -9, rs1_h2_val == 32, rs1_h1_val == -1025
// opcode: pmhaccsu.h ; op1:x26; op2:x9; dest:x4; op1val:0x3fff0020fbfffff7;  op2val:0x4000fff7c000ffff
TEST_RR_OP(pmhaccsu.h, x4, x26, x9, 0x0000000000000000, 0x3fff0020fbfffff7, 0x4000fff7c000ffff, x1, 8*XLEN/8, x2)

inst_23:
// rs1==x10, rs2==x18, rd==x19, rs1_h0_val == -17, rs2_h3_val == 8192, rs1_h1_val == -4097, rs1_h3_val == -16385, rs1_h2_val == 2048
// opcode: pmhaccsu.h ; op1:x10; op2:x18; dest:x19; op1val:0xbfff0800efffffef;  op2val:0x2000200000030007
TEST_RR_OP(pmhaccsu.h, x19, x10, x18, 0x0000000000000000, 0xbfff0800efffffef, 0x2000200000030007, x1, 9*XLEN/8, x2)

inst_24:
// rs1==x29, rs2==x30, rd==x26, rs1_h0_val == -33, rs2_h3_val == 32767, rs2_h1_val == 512, rs1_h1_val == -2049, rs1_h2_val == -1, rs1_h3_val == 32
// opcode: pmhaccsu.h ; op1:x29; op2:x30; dest:x26; op1val:0x20fffff7ffffdf;  op2val:0x7ffffff90200fffa
TEST_RR_OP(pmhaccsu.h, x26, x29, x30, 0x0000000000000000, 0x20fffff7ffffdf, 0x7ffffff90200fffa, x1, 10*XLEN/8, x2)

inst_25:
// rs1==x14, rs2==x17, rd==x15, rs1_h0_val == -65, rs1_h2_val == 64
// opcode: pmhaccsu.h ; op1:x14; op2:x17; dest:x15; op1val:0xdfff00400007ffbf;  op2val:0x09fff6fff9ffff
TEST_RR_OP(pmhaccsu.h, x15, x14, x17, 0x0000000000000000, 0xdfff00400007ffbf, 0x09fff6fff9ffff, x1, 11*XLEN/8, x2)

inst_26:
// rs1==x0, rs2==x11, rd==x8, rs1_h0_val == -129, rs2_h3_val == -513, rs2_h1_val == -9, rs2_h2_val == 16384, rs1_h1_val == 64, rs1_h2_val == 4096
// opcode: pmhaccsu.h ; op1:x0; op2:x11; dest:x8; op1val:0x0010000040ff7f;  op2val:0xfdff4000fff70002
TEST_RR_OP(pmhaccsu.h, x8, x0, x11, 0x0000000000000000, 0x0010000040ff7f, 0xfdff4000fff70002, x1, 12*XLEN/8, x2)

inst_27:
// rs1==x19, rs2==x15, rd==x30, rs1_h0_val == -257, rs2_h1_val == -32768, rs1_h1_val == 8192, rs1_h3_val == rs2_h3_val
// opcode: pmhaccsu.h ; op1:x19; op2:x15; dest:x30; op1val:0xfffcfeff2000feff;  op2val:0xfffc000580000007
TEST_RR_OP(pmhaccsu.h, x30, x19, x15, 0x0000000000000000, 0xfffcfeff2000feff, 0xfffc000580000007, x1, 13*XLEN/8, x2)

inst_28:
// rs1==x30, rs2==x20, rd==x16, rs1_h0_val == -513, rs2_h1_val == 16, rs2_h0_val == 1024
// opcode: pmhaccsu.h ; op1:x30; op2:x20; dest:x16; op1val:0x7ffffffcf7fffdff;  op2val:0x3fff000500100400
TEST_RR_OP(pmhaccsu.h, x16, x30, x20, 0x0000000000000000, 0x7ffffffcf7fffdff, 0x3fff000500100400, x1, 14*XLEN/8, x2)

inst_29:
// rs1==x22, rs2==x29, rd==x7, rs1_h0_val == -1025, rs1_h3_val == -129, rs1_h1_val == 128, rs2_h2_val == -257, rs2_h1_val == 21845, rs2_h0_val == 64
// opcode: pmhaccsu.h ; op1:x22; op2:x29; dest:x7; op1val:0xff7f10000080fbff;  op2val:0x06feff55550040
TEST_RR_OP(pmhaccsu.h, x7, x22, x29, 0x0000000000000000, 0xff7f10000080fbff, 0x06feff55550040, x1, 15*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30:
// rs1==x21, rs2==x27, rd==x25, rs1_h0_val == -2049, rs1_h3_val == -513, rs2_h3_val == 2048, rs1_h1_val == 21845
// opcode: pmhaccsu.h ; op1:x21; op2:x27; dest:x25; op1val:0xfdff00015555f7ff;  op2val:0x800fbff0005fff8
TEST_RR_OP(pmhaccsu.h, x25, x21, x27, 0x0000000000000000, 0xfdff00015555f7ff, 0x800fbff0005fff8, x1, 0*XLEN/8, x2)

inst_31:
// rs1==x27, rs2==x28, rd==x22, rs1_h0_val == -4097, rs1_h2_val == 1024, rs2_h2_val == -2049
// opcode: pmhaccsu.h ; op1:x27; op2:x28; dest:x22; op1val:0xbfff0400fff6efff;  op2val:0xc000f7ff0002ff7f
TEST_RR_OP(pmhaccsu.h, x22, x27, x28, 0x0000000000000000, 0xbfff0400fff6efff, 0xc000f7ff0002ff7f, x1, 1*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs1_h3_val == -65, rs1_h1_val == 0, rs2_h1_val == -17, rs1_h2_val == -3, rs2_h2_val == 2
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffd0000dfff;  op2val:0x3fff0002ffef5555
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xffbffffd0000dfff, 0x3fff0002ffef5555, x1, 2*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffff7fffbfff;  op2val:0x07000680005555
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xc000ffff7fffbfff, 0x07000680005555, x1, 3*XLEN/8, x2)

inst_34:
// rs2_h3_val == 4, rs2_h2_val == -513, rs2_h1_val == 32
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x07fdfffffe0010;  op2val:0x04fdff0020fff9
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x07fdfffffe0010, 0x04fdff0020fff9, x1, 4*XLEN/8, x2)

inst_35:
// rs2_h3_val == 16, rs2_h0_val == 128, rs2_h2_val == 1, rs1_h3_val == 21845, rs1_h2_val == -17
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffef00080002;  op2val:0x10000110000080
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x5555ffef00080002, 0x10000110000080, x1, 5*XLEN/8, x2)

inst_36:
// rs2_h3_val == 64, rs2_h1_val == -3, rs2_h2_val == 8
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00090003f7ff;  op2val:0x400008fffd0007
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xdfff00090003f7ff, 0x400008fffd0007, x1, 6*XLEN/8, x2)

inst_37:
// rs2_h3_val == 256, rs2_h0_val == -16385, rs1_h2_val == -129, rs1_h1_val == 16384
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7f40001000;  op2val:0x100fefffffbbfff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xdfffff7f40001000, 0x100fefffffbbfff, x1, 7*XLEN/8, x2)

inst_38:
// rs2_h3_val == 4096, rs2_h0_val == -65, rs2_h1_val == 8192
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc00055550040ffdf;  op2val:0x100000032000ffbf
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xc00055550040ffdf, 0x100000032000ffbf, x1, 8*XLEN/8, x2)

inst_39:
// rs2_h3_val == -2, rs1_h3_val == 2, rs2_h2_val == -3
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x02c00000051000;  op2val:0xfffefffdfff90002
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x02c00000051000, 0xfffefffdfff90002, x1, 9*XLEN/8, x2)

inst_40:
// rs2_h3_val == -17, rs2_h2_val == -16385, rs2_h1_val == -21846, rs1_h1_val == 16, rs1_h3_val == 128
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80efff00100800;  op2val:0xffefbfffaaaa7fff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x80efff00100800, 0xffefbfffaaaa7fff, x1, 10*XLEN/8, x2)

inst_41:
// rs2_h3_val == -2049, rs1_h0_val == 21845, rs2_h0_val == -513, rs1_h1_val == 32
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f00205555;  op2val:0xf7ff0000c000fdff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xff7fff7f00205555, 0xf7ff0000c000fdff, x1, 11*XLEN/8, x2)

inst_42:
// rs2_h3_val == -4097, rs1_h1_val == -32768, rs2_h1_val == 0
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00098000fffc;  op2val:0xeffffff600000006
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfdff00098000fffc, 0xeffffff600000006, x1, 12*XLEN/8, x2)

inst_43:
// rs2_h3_val == -8193, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200ffefbfff0100;  op2val:0xdfff3fffff7f5555
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x200ffefbfff0100, 0xdfff3fffff7f5555, x1, 13*XLEN/8, x2)

inst_44:
// rs2_h3_val == 21845, rs2_h0_val == -1025
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff700038000;  op2val:0x5555fffdfff6fbff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xdffffff700038000, 0x5555fffdfff6fbff, x1, 14*XLEN/8, x2)

inst_45:
// rs2_h3_val == -21846, rs1_h1_val == 256
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00400100ffdf;  op2val:0xaaaa0800fffb0006
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffa00400100ffdf, 0xaaaa0800fffb0006, x1, 15*XLEN/8, x2)

inst_46:
// rs1_h0_val == -21846, rs1_h2_val == -32768
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x098000fffcaaaa;  op2val:0xf7ff4000dfff0009
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x098000fffcaaaa, 0xf7ff4000dfff0009, x1, 16*XLEN/8, x2)

inst_47:
// rs1_h0_val == rs2_h0_val, rs1_h3_val == 16
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10fdff00103fff;  op2val:0xeffffdfffffa3fff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x10fdff00103fff, 0xeffffdfffffa3fff, x1, 17*XLEN/8, x2)

inst_48:
// rs1_h1_val == -1, rs1_h3_val == -257
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffdfffffff8;  op2val:0xfff6080000000000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfefffffdfffffff8, 0xfff6080000000000, x1, 18*XLEN/8, x2)

inst_49:
// rs1_h1_val == 1, rs2_h0_val == 8192, rs1_h2_val == -2049
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20f7ff00010004;  op2val:0x10000080fffc2000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x20f7ff00010004, 0x10000080fffc2000, x1, 19*XLEN/8, x2)

inst_50:
// rs1_h1_val == 4, rs2_h1_val == 4, rs2_h0_val == -3
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000c00000040006;  op2val:0x023fff0004fffd
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xc000c00000040006, 0x023fff0004fffd, x1, 20*XLEN/8, x2)

inst_51:
// rs1_h1_val == 512, rs1_h3_val == -4097
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7ff02002000;  op2val:0xffdffefffffcfffd
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xeffff7ff02002000, 0xffdffefffffcfffd, x1, 21*XLEN/8, x2)

inst_52:
// rs1_h1_val == -9, rs2_h0_val == -32768, rs2_h2_val == -5
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80fff7fff7ffef;  op2val:0xc000fffb3fff8000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x80fff7fff7ffef, 0xc000fffb3fff8000, x1, 22*XLEN/8, x2)

inst_53:
// rs1_h1_val == -65, rs2_h0_val == -8193, rs2_h2_val == 32767
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffefffbf0000;  op2val:0x067fff0200dfff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x06ffefffbf0000, 0x067fff0200dfff, x1, 23*XLEN/8, x2)

inst_54:
// rs1_h1_val == -257, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffffeffc000;  op2val:0xfffafff6bffffff8
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff6fffffeffc000, 0xfffafff6bffffff8, x1, 24*XLEN/8, x2)

inst_55:
// rs1_h1_val == -8193, rs1_h2_val == 16384, rs2_h2_val == 21845
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff94000dffffffd;  op2val:0xdfff55550003fbff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff94000dffffffd, 0xdfff55550003fbff, x1, 25*XLEN/8, x2)

inst_56:
// rs1_h3_val == -5, rs1_h2_val == 32767
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7ffffeffffef;  op2val:0xffbf0200fffc8000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffb7ffffeffffef, 0xffbf0200fffc8000, x1, 26*XLEN/8, x2)

inst_57:
// rs1_h3_val == -9, rs1_h2_val == 128
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70080fff6f7ff;  op2val:0xf7fffbffc000dfff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff70080fff6f7ff, 0xf7fffbffc000dfff, x1, 27*XLEN/8, x2)

inst_58:
// rs1_h3_val == -2049, rs2_h1_val == -2049, rs2_h0_val == -21846, rs2_h3_val == -1, rs2_h2_val == -17
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080bffffffe;  op2val:0xffffffeff7ffaaaa
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0080bffffffe, 0xffffffeff7ffaaaa, x1, 28*XLEN/8, x2)

inst_59:
// rs1_h3_val == -21846, rs2_h2_val == -21846
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa8000ff7f;  op2val:0x01aaaa00098000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa8000ff7f, 0x01aaaa00098000, x1, 29*XLEN/8, x2)

inst_60:
// rs2_h0_val == 1, rs1_h3_val == -32768
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7ff0008fff8;  op2val:0xefff7fff00020001
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x8000f7ff0008fff8, 0xefff7fff00020001, x1, 30*XLEN/8, x2)

inst_61:
// rs2_h0_val == 8, rs1_h2_val == 8192
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff2000fff80006;  op2val:0x04fff810000008
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfeff2000fff80006, 0x04fff810000008, x1, 31*XLEN/8, x2)

inst_62:
// rs2_h0_val == 32, rs1_h2_val == 16
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40001010000100;  op2val:0x80fff980000020
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x40001010000100, 0x80fff980000020, x1, 32*XLEN/8, x2)

inst_63:
// rs2_h0_val == 256, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff0006feff;  op2val:0x2000000302000100
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfeffffff0006feff, 0x2000000302000100, x1, 33*XLEN/8, x2)

inst_64:
// rs2_h0_val == 512, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf8000fff61000;  op2val:0xfffd0006ffef0200
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xffbf8000fff61000, 0xfffd0006ffef0200, x1, 34*XLEN/8, x2)

inst_65:
// rs2_h0_val == 4096, rs2_h1_val == 8
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x005555dfffff7f;  op2val:0x08ffff00081000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x005555dfffff7f, 0x08ffff00081000, x1, 35*XLEN/8, x2)

inst_66:
// rs2_h0_val == 16384, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09f7ffffeff7ff;  op2val:0xffeff7fffff74000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x09f7ffffeff7ff, 0xffeff7fffff74000, x1, 36*XLEN/8, x2)

inst_67:
// rs2_h0_val == -5, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaafefffffc;  op2val:0xffdf00040009fffb
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x06aaaafefffffc, 0xffdf00040009fffb, x1, 37*XLEN/8, x2)

inst_68:
// rs2_h0_val == -9, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0002c000fff9;  op2val:0x4000800fffdfff7
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffa0002c000fff9, 0x4000800fffdfff7, x1, 38*XLEN/8, x2)

inst_69:
// rs2_h0_val == -17, rs1_h2_val == -5, rs2_h1_val == 128
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb01002000;  op2val:0x2000feff0080ffef
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffffffb01002000, 0x2000feff0080ffef, x1, 39*XLEN/8, x2)

inst_70:
// rs2_h0_val == -33, rs1_h3_val == 1024
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffe8000;  op2val:0xfffa0009fff9ffdf
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x4000007fffe8000, 0xfffa0009fff9ffdf, x1, 40*XLEN/8, x2)

inst_71:
// rs2_h0_val == -257, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffe0400;  op2val:0xaaaafffb0002feff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x000020fffe0400, 0xaaaafffb0002feff, x1, 41*XLEN/8, x2)

inst_72:
// rs2_h1_val == 16384, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffc08000080;  op2val:0x555540004000fffc
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffafffc08000080, 0x555540004000fffc, x1, 42*XLEN/8, x2)

inst_73:
// rs2_h1_val == -33, rs2_h2_val == 4096
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffa00011000;  op2val:0xfff81000ffdfffef
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffbfffa00011000, 0xfff81000ffdfffef, x1, 43*XLEN/8, x2)

inst_74:
// rs2_h1_val == -65, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200f7ff01003fff;  op2val:0xfbffdfffffbffffc
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x200f7ff01003fff, 0xfbffdfffffbffffc, x1, 44*XLEN/8, x2)

inst_75:
// rs1_h2_val == 8, rs2_h1_val == 1
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000800090003;  op2val:0xfbff55550001ffbf
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff7000800090003, 0xfbff55550001ffbf, x1, 45*XLEN/8, x2)

inst_76:
// rs2_h1_val == -513, rs2_h2_val == -33, rs1_h2_val == 256
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x020100fffebfff;  op2val:0x01ffdffdfffeff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x020100fffebfff, 0x01ffdffdfffeff, x1, 46*XLEN/8, x2)

inst_77:
// rs2_h1_val == -1025, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ff0004fbff;  op2val:0xfeffaaaafbff0009
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xffdff7ff0004fbff, 0xfeffaaaafbff0009, x1, 47*XLEN/8, x2)

inst_78:
// rs2_h1_val == -4097, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80c0000006dfff;  op2val:0x040800effffbff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x80c0000006dfff, 0x040800effffbff, x1, 48*XLEN/8, x2)

inst_79:
// rs2_h2_val == -32768, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x020100fff8ffbf;  op2val:0x8008000fbff0100
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x020100fff8ffbf, 0x8008000fbff0100, x1, 49*XLEN/8, x2)

inst_80:
// rs2_h3_val == 0, rs2_h2_val == 64
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbff00200003;  op2val:0x0000400007c000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xffdffbff00200003, 0x0000400007c000, x1, 50*XLEN/8, x2)

inst_81:
// rs1_h2_val == -2, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffefffe0000;  op2val:0x80000053fff8000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffcfffefffe0000, 0x80000053fff8000, x1, 51*XLEN/8, x2)

inst_82:
// rs1_h2_val == -33, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdf0008ff7f;  op2val:0x101000fff70004
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xff7fffdf0008ff7f, 0x101000fff70004, x1, 52*XLEN/8, x2)

inst_83:
// rs2_h2_val == 16, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaa10000003;  op2val:0xdfff0010f7ff1000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x80aaaa10000003, 0xdfff0010f7ff1000, x1, 53*XLEN/8, x2)

inst_84:
// rs1_h2_val == -65, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffbf0010ff7f;  op2val:0x7fffff7ffffb0400
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x3fffffbf0010ff7f, 0x7fffff7ffffb0400, x1, 54*XLEN/8, x2)

inst_85:
// rs2_h2_val == 256, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60000fffdfff8;  op2val:0x200100ff7f5555
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff60000fffdfff8, 0x200100ff7f5555, x1, 55*XLEN/8, x2)

inst_86:
// rs2_h2_val == 1024, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff83fff3ffffdff;  op2val:0xffdf04000800dfff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff83fff3ffffdff, 0xffdf04000800dfff, x1, 56*XLEN/8, x2)

inst_87:
// rs1_h2_val == -16385, rs1_h3_val == -2
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff0004aaaa;  op2val:0x3ffffffd0200feff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffebfff0004aaaa, 0x3ffffffd0200feff, x1, 57*XLEN/8, x2)

inst_88:
// rs2_h0_val == -2049, rs1_h3_val == 16384
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffefaaaa0020;  op2val:0xfff900050400f7ff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x4000ffefaaaa0020, 0xfff900050400f7ff, x1, 58*XLEN/8, x2)

inst_89:
// rs2_h1_val == 64, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff0002ffef7fff;  op2val:0xfeff001000404000
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xffff0002ffef7fff, 0xfeff001000404000, x1, 59*XLEN/8, x2)

inst_90:
// rs2_h2_val == -65, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffddfff7ffff7ff;  op2val:0x01ffbfefffefff
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffddfff7ffff7ff, 0x01ffbfefffefff, x1, 60*XLEN/8, x2)

inst_91:
// rs1_h3_val == 4, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x041000c0002000;  op2val:0x20fffe0007fff6
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x041000c0002000, 0x20fffe0007fff6, x1, 61*XLEN/8, x2)

inst_92:
// rs1_h3_val == 8, rs2_h2_val == -4097
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x088000fdff0100;  op2val:0x7fffefff00400020
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x088000fdff0100, 0x7fffefff00400020, x1, 62*XLEN/8, x2)

inst_93:
// rs1_h3_val == 4096, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbf00050005;  op2val:0x40f7ff2000fff7
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x1000ffbf00050005, 0x40f7ff2000fff7, x1, 63*XLEN/8, x2)

inst_94:
// rs1_h3_val == 8192, 
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200055550004ffef;  op2val:0xffbf010000060020
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x200055550004ffef, 0xffbf010000060020, x1, 64*XLEN/8, x2)

inst_95:
// rs1_h0_val == -1, rs1_h3_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val == rs2_h2_val, rs2_h1_val == -8193, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -257
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000fffcffff;  op2val:0xfeffc000dffffffc
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffdc000fffcffff, 0xfeffc000dffffffc, x1, 65*XLEN/8, x2)

inst_96:
// rs1_h0_val == 0, rs2_h3_val == 8, rs2_h1_val == 4096, rs1_h1_val == -21846, rs2_h2_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 4, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60004aaaa0000;  op2val:0x08200010000006
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff60004aaaa0000, 0x08200010000006, x1, 66*XLEN/8, x2)

inst_97:
// rs1_h0_val == 4, rs2_h3_val == 32, rs1_h2_val == -8193, rs2_h0_val == -129, rs2_h1_val == -257, rs1_h3_val == 1, rs1_h1_val == -2
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x01dffffffe0004;  op2val:0x20fff6feffff7f
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x01dffffffe0004, 0x20fff6feffff7f, x1, 67*XLEN/8, x2)

inst_98:
// rs1_h0_val == 16384, rs2_h1_val == 32767, rs2_h3_val == -1025, rs2_h0_val == 21845, rs2_h2_val == -1025
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x033fffbfff4000;  op2val:0xfbfffbff7fff5555
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x033fffbfff4000, 0xfbfffbff7fff5555, x1, 68*XLEN/8, x2)

inst_99:
// rs1_h0_val == -129, rs2_h3_val == -513, rs2_h1_val == -9, rs2_h2_val == 16384, rs1_h1_val == 64, rs1_h2_val == 4096
// opcode: pmhaccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0010000040ff7f;  op2val:0xfdff4000fff70002
TEST_RR_OP(pmhaccsu.h, x31, x30, x29, 0x0000000000000000, 0x0010000040ff7f, 0xfdff4000fff70002, x1, 69*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x15_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x15_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 70*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
