
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec  8 04:22:25 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srx instruction of the RISC-V RV64PZicsr extension for the srx covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srx)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_w0_val == -2147483648, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -2, rs2_w0_val == 268435456, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs2_w1_val == 512, rs1_w1_val != rs2_w1_val
// opcode: srx ; op1:x0; op2:x0; dest:x0; op1val:0xfffffffe80000000;  op2val:0x00020010000000
TEST_RR_OP(srx, x0, x0, x0, 0x0000000000000000, 0xfffffffe80000000, 0x00020010000000, x2, 0*XLEN/8, x5)

inst_1:
// rs1 == rd != rs2, rs1==x30, rs2==x25, rd==x30, rs1_w0_val == -1, rs1_w1_val == -1025, rs2_w0_val == 2147483647
// opcode: srx ; op1:x30; op2:x25; dest:x30; op1val:0xfffffbffffffffff;  op2val:0x0000097fffffff
TEST_RR_OP(srx, x30, x30, x25, 0x0000000000000000, 0xfffffbffffffffff, 0x0000097fffffff, x2, 1*XLEN/8, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x31, rs1_w0_val == 0, rs2_w0_val == -262145, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 8388608
// opcode: srx ; op1:x10; op2:x10; dest:x31; op1val:0x80000000000000;  op2val:0x000003fffbffff
TEST_RR_OP(srx, x31, x10, x10, 0x0000000000000000, 0x80000000000000, 0x000003fffbffff, x2, 2*XLEN/8, x5)

inst_3:
// rs2 == rd != rs1, rs1==x14, rs2==x3, rd==x3, rs1_w0_val == 1, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: srx ; op1:x14; op2:x3; dest:x3; op1val:0xc000000000000001;  op2val:0x000005fffffffc
TEST_RR_OP(srx, x3, x14, x3, 0x0000000000000000, 0xc000000000000001, 0x000005fffffffc, x2, 3*XLEN/8, x5)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x30, rd==x4, rs1_w0_val == 2147483647, rs2_w0_val == -8388609, rs2_w1_val == -268435457, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 128
// opcode: srx ; op1:x9; op2:x30; dest:x4; op1val:0x0000807fffffff;  op2val:0xefffffffff7fffff
TEST_RR_OP(srx, x4, x9, x30, 0x0000000000000000, 0x0000807fffffff, 0xefffffffff7fffff, x2, 4*XLEN/8, x5)

inst_5:
// rs1==x22, rs2==x13, rd==x18, rs1_w0_val == 2, rs1_w1_val == 512, rs2_w0_val == -1431655766, rs2_w1_val == 524288
// opcode: srx ; op1:x22; op2:x13; dest:x18; op1val:0x00020000000002;  op2val:0x080000aaaaaaaa
TEST_RR_OP(srx, x18, x22, x13, 0x0000000000000000, 0x00020000000002, 0x080000aaaaaaaa, x2, 5*XLEN/8, x5)

inst_6:
// rs1==x21, rs2==x22, rd==x6, rs1_w0_val == 4, rs1_w1_val == 0, rs2_w0_val == 4, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == rs2_w0_val, rs2_w1_val == 64
// opcode: srx ; op1:x21; op2:x22; dest:x6; op1val:0x00000000000004;  op2val:0x00004000000004
TEST_RR_OP(srx, x6, x21, x22, 0x0000000000000000, 0x00000000000004, 0x00004000000004, x2, 6*XLEN/8, x5)

inst_7:
// rs1==x18, rs2==x26, rd==x24, rs1_w0_val == 8, rs2_w1_val == -67108865
// opcode: srx ; op1:x18; op2:x26; dest:x24; op1val:0x00000300000008;  op2val:0xfbfffffffffbffff
TEST_RR_OP(srx, x24, x18, x26, 0x0000000000000000, 0x00000300000008, 0xfbfffffffffbffff, x2, 7*XLEN/8, x5)

inst_8:
// rs1==x7, rs2==x11, rd==x23, rs1_w0_val == 16, rs2_w0_val == 32, rs1_w1_val == 524288
// opcode: srx ; op1:x7; op2:x11; dest:x23; op1val:0x08000000000010;  op2val:0x00020000000020
TEST_RR_OP(srx, x23, x7, x11, 0x0000000000000000, 0x08000000000010, 0x00020000000020, x2, 8*XLEN/8, x5)

inst_9:
// rs1==x12, rs2==x19, rd==x11, rs1_w0_val == 32, rs2_w0_val == -65537, rs1_w1_val == 1431655765
// opcode: srx ; op1:x12; op2:x19; dest:x11; op1val:0x5555555500000020;  op2val:0x000007fffeffff
TEST_RR_OP(srx, x11, x12, x19, 0x0000000000000000, 0x5555555500000020, 0x000007fffeffff, x2, 9*XLEN/8, x5)

inst_10:
// rs1==x4, rs2==x8, rd==x16, rs1_w0_val == 64, rs2_w0_val == 16
// opcode: srx ; op1:x4; op2:x8; dest:x16; op1val:0x3fffffff00000040;  op2val:0xfffffff600000010
TEST_RR_OP(srx, x16, x4, x8, 0x0000000000000000, 0x3fffffff00000040, 0xfffffff600000010, x2, 10*XLEN/8, x5)

inst_11:
// rs1==x1, rs2==x14, rd==x7, rs1_w0_val == 128, rs2_w1_val == 16, rs2_w0_val == -524289
// opcode: srx ; op1:x1; op2:x14; dest:x7; op1val:0xfffffff900000080;  op2val:0x000010fff7ffff
TEST_RR_OP(srx, x7, x1, x14, 0x0000000000000000, 0xfffffff900000080, 0x000010fff7ffff, x2, 11*XLEN/8, x5)

inst_12:
// rs1==x24, rs2==x31, rd==x22, rs1_w0_val == 256, rs1_w1_val == -8193, rs2_w0_val == -5
// opcode: srx ; op1:x24; op2:x31; dest:x22; op1val:0xffffdfff00000100;  op2val:0x000006fffffffb
TEST_RR_OP(srx, x22, x24, x31, 0x0000000000000000, 0xffffdfff00000100, 0x000006fffffffb, x2, 12*XLEN/8, x5)

inst_13:
// rs1==x31, rs2==x12, rd==x25, rs1_w0_val == 512, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -1431655766
// opcode: srx ; op1:x31; op2:x12; dest:x25; op1val:0xfffffff900000200;  op2val:0xaaaaaaaafffffffb
TEST_RR_OP(srx, x25, x31, x12, 0x0000000000000000, 0xfffffff900000200, 0xaaaaaaaafffffffb, x2, 13*XLEN/8, x5)

inst_14:
// rs1==x20, rs2==x21, rd==x10, rs1_w0_val == 1024, rs2_w0_val == 262144, rs1_w1_val == 16384, rs2_w1_val == 1431655765
// opcode: srx ; op1:x20; op2:x21; dest:x10; op1val:0x00400000000400;  op2val:0x5555555500040000
TEST_RR_OP(srx, x10, x20, x21, 0x0000000000000000, 0x00400000000400, 0x5555555500040000, x2, 14*XLEN/8, x5)

inst_15:
// rs1==x25, rs2==x20, rd==x9, rs1_w0_val == 2048, rs2_w0_val == -129, rs1_w1_val == 16, rs2_w1_val == -2097153
// opcode: srx ; op1:x25; op2:x20; dest:x9; op1val:0x00001000000800;  op2val:0xffdfffffffffff7f
TEST_RR_OP(srx, x9, x25, x20, 0x0000000000000000, 0x00001000000800, 0xffdfffffffffff7f, x2, 15*XLEN/8, x5)

inst_16:
// rs1==x13, rs2==x27, rd==x1, rs1_w0_val == 4096, 
// opcode: srx ; op1:x13; op2:x27; dest:x1; op1val:0x5555555500001000;  op2val:0x00000710000000
TEST_RR_OP(srx, x1, x13, x27, 0x0000000000000000, 0x5555555500001000, 0x00000710000000, x2, 16*XLEN/8, x5)

inst_17:
// rs1==x17, rs2==x6, rd==x20, rs1_w0_val == 8192, rs1_w1_val == -33554433, rs2_w0_val == 131072
// opcode: srx ; op1:x17; op2:x6; dest:x20; op1val:0xfdffffff00002000;  op2val:0xfffffff900020000
TEST_RR_OP(srx, x20, x17, x6, 0x0000000000000000, 0xfdffffff00002000, 0xfffffff900020000, x2, 17*XLEN/8, x22)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_18:
// rs1==x3, rs2==x4, rd==x27, rs1_w0_val == 16384, rs2_w1_val == -4097, rs2_w0_val == -33554433, rs1_w1_val == 64
// opcode: srx ; op1:x3; op2:x4; dest:x27; op1val:0x00004000004000;  op2val:0xffffeffffdffffff
TEST_RR_OP(srx, x27, x3, x4, 0x0000000000000000, 0x00004000004000, 0xffffeffffdffffff, x10, 0*XLEN/8, x22)

inst_19:
// rs1==x5, rs2==x17, rd==x2, rs1_w0_val == 32768, rs1_w1_val == 4096, rs2_w0_val == -2049
// opcode: srx ; op1:x5; op2:x17; dest:x2; op1val:0x00100000008000;  op2val:0xffffeffffffff7ff
TEST_RR_OP(srx, x2, x5, x17, 0x0000000000000000, 0x00100000008000, 0xffffeffffffff7ff, x10, 1*XLEN/8, x22)

inst_20:
// rs1==x23, rs2==x7, rd==x15, rs1_w0_val == 65536, rs1_w1_val == -67108865, rs2_w1_val == -524289
// opcode: srx ; op1:x23; op2:x7; dest:x15; op1val:0xfbffffff00010000;  op2val:0xfff7fffffffbffff
TEST_RR_OP(srx, x15, x23, x7, 0x0000000000000000, 0xfbffffff00010000, 0xfff7fffffffbffff, x10, 2*XLEN/8, x22)

inst_21:
// rs1==x8, rs2==x1, rd==x28, rs1_w0_val == 131072, rs2_w1_val == -17, rs1_w1_val == -32769
// opcode: srx ; op1:x8; op2:x1; dest:x28; op1val:0xffff7fff00020000;  op2val:0xffffffeffffffffc
TEST_RR_OP(srx, x28, x8, x1, 0x0000000000000000, 0xffff7fff00020000, 0xffffffeffffffffc, x10, 3*XLEN/8, x22)

inst_22:
// rs1==x28, rs2==x23, rd==x13, rs1_w0_val == 262144, rs2_w0_val == 1073741824, rs1_w1_val == -268435457, rs2_w1_val == 8192
// opcode: srx ; op1:x28; op2:x23; dest:x13; op1val:0xefffffff00040000;  op2val:0x00200040000000
TEST_RR_OP(srx, x13, x28, x23, 0x0000000000000000, 0xefffffff00040000, 0x00200040000000, x10, 4*XLEN/8, x22)

inst_23:
// rs1==x19, rs2==x16, rd==x8, rs1_w0_val == 524288, rs2_w0_val == -65, rs2_w1_val == 67108864
// opcode: srx ; op1:x19; op2:x16; dest:x8; op1val:0xffff7fff00080000;  op2val:0x4000000ffffffbf
TEST_RR_OP(srx, x8, x19, x16, 0x0000000000000000, 0xffff7fff00080000, 0x4000000ffffffbf, x10, 5*XLEN/8, x22)

inst_24:
// rs1==x29, rs2==x18, rd==x12, rs1_w0_val == 1048576, rs2_w1_val == 536870912
// opcode: srx ; op1:x29; op2:x18; dest:x12; op1val:0x00000000100000;  op2val:0x2000000000000009
TEST_RR_OP(srx, x12, x29, x18, 0x0000000000000000, 0x00000000100000, 0x2000000000000009, x10, 6*XLEN/8, x22)

inst_25:
// rs1==x2, rs2==x15, rd==x19, rs1_w0_val == 2097152, rs2_w1_val == -32769, rs2_w0_val == 2048
// opcode: srx ; op1:x2; op2:x15; dest:x19; op1val:0x00000500200000;  op2val:0xffff7fff00000800
TEST_RR_OP(srx, x19, x2, x15, 0x0000000000000000, 0x00000500200000, 0xffff7fff00000800, x10, 7*XLEN/8, x22)

inst_26:
// rs1==x26, rs2==x5, rd==x29, rs1_w0_val == 4194304, rs2_w1_val == -131073, rs2_w0_val == -32769
// opcode: srx ; op1:x26; op2:x5; dest:x29; op1val:0x08000000400000;  op2val:0xfffdffffffff7fff
TEST_RR_OP(srx, x29, x26, x5, 0x0000000000000000, 0x08000000400000, 0xfffdffffffff7fff, x10, 8*XLEN/8, x22)

inst_27:
// rs1==x6, rs2==x29, rd==x17, rs1_w0_val == 8388608, rs2_w1_val == 262144
// opcode: srx ; op1:x6; op2:x29; dest:x17; op1val:0xfffffffc00800000;  op2val:0x0400003fffffff
TEST_RR_OP(srx, x17, x6, x29, 0x0000000000000000, 0xfffffffc00800000, 0x0400003fffffff, x10, 9*XLEN/8, x22)

inst_28:
// rs1==x15, rs2==x24, rd==x26, rs1_w0_val == 16777216, rs2_w0_val == -513
// opcode: srx ; op1:x15; op2:x24; dest:x26; op1val:0xefffffff01000000;  op2val:0xaaaaaaaafffffdff
TEST_RR_OP(srx, x26, x15, x24, 0x0000000000000000, 0xefffffff01000000, 0xaaaaaaaafffffdff, x10, 10*XLEN/8, x22)

inst_29:
// rs1==x27, rs2==x28, rd==x5, rs1_w0_val == 33554432, rs1_w1_val == -17, rs2_w1_val == -129
// opcode: srx ; op1:x27; op2:x28; dest:x5; op1val:0xffffffef02000000;  op2val:0xffffff7fffffffbf
TEST_RR_OP(srx, x5, x27, x28, 0x0000000000000000, 0xffffffef02000000, 0xffffff7fffffffbf, x10, 11*XLEN/8, x22)

inst_30:
// rs1==x16, rs2==x2, rd==x21, rs1_w0_val == 67108864, rs1_w1_val == 131072, rs2_w1_val == -4194305
// opcode: srx ; op1:x16; op2:x2; dest:x21; op1val:0x02000004000000;  op2val:0xffbfffff00000009
TEST_RR_OP(srx, x21, x16, x2, 0x0000000000000000, 0x02000004000000, 0xffbfffff00000009, x10, 12*XLEN/8, x22)

inst_31:
// rs1==x11, rs2==x9, rd==x14, rs1_w0_val == 134217728, rs1_w1_val == 33554432, rs2_w0_val == 524288
// opcode: srx ; op1:x11; op2:x9; dest:x14; op1val:0x200000008000000;  op2val:0x00001000080000
TEST_RR_OP(srx, x14, x11, x9, 0x0000000000000000, 0x200000008000000, 0x00001000080000, x10, 13*XLEN/8, x22)

inst_32:
// rs1_w0_val == 268435456, rs1_w1_val == 134217728, rs2_w1_val == 4194304
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x800000010000000;  op2val:0x400000fffffffb
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x800000010000000, 0x400000fffffffb, x10, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_w0_val == 536870912, rs1_w1_val == -3, rs2_w1_val == -33, rs2_w0_val == -2097153
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd20000000;  op2val:0xffffffdfffdfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffd20000000, 0xffffffdfffdfffff, x1, 0*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs2_w0_val == 1024
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff40000000;  op2val:0xfffffff800000400
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xefffffff40000000, 0xfffffff800000400, x1, 1*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs2_w1_val == 2147483647, rs2_w0_val == -4194305, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffffe;  op2val:0x7fffffffffbfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffffe, 0x7fffffffffbfffff, x1, 2*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == -1025, rs2_w0_val == 64
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffd;  op2val:0xfffffbff00000040
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffffd, 0xfffffbff00000040, x1, 3*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == -16385
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffb;  op2val:0x0000403fffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffb, 0x0000403fffffff, x1, 4*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w0_val == -8193, rs1_w1_val == 32768
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffff7;  op2val:0xfffffffcffffdfff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x008000fffffff7, 0xfffffffcffffdfff, x1, 5*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs1_w1_val == 1048576, rs2_w0_val == -17
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffffef;  op2val:0xffffff7fffffffef
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x100000ffffffef, 0xffffff7fffffffef, x1, 6*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs2_w1_val == -3, rs2_w0_val == -268435457
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffdf;  op2val:0xfffffffdefffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffdf, 0xfffffffdefffffff, x1, 7*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs2_w0_val == -257
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffffbf;  op2val:0x000200fffffeff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffffbf, 0x000200fffffeff, x1, 8*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs2_w0_val == -1073741825, rs2_w1_val == 33554432
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffff7f;  op2val:0x2000000bfffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffff7f, 0x2000000bfffffff, x1, 9*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffeff;  op2val:0x400000fffeffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0x400000fffeffff, x1, 10*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs1_w1_val == -524289
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffdff;  op2val:0x4000000ffffffef
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffdff, 0x4000000ffffffef, x1, 11*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs1_w1_val == 268435456, rs2_w1_val == -1073741825
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffbff;  op2val:0xbfffffff3fffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x10000000fffffbff, 0xbfffffff3fffffff, x1, 12*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffff7ff;  op2val:0x000040ffffff7f
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffff7ff, 0x000040ffffff7f, x1, 13*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs1_w1_val == 2147483647, rs2_w0_val == -16777217, rs2_w1_val == 16384
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffefff;  op2val:0x004000feffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffefff, 0x004000feffffff, x1, 14*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs1_w1_val == 4
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffdfff;  op2val:0xffffefff00000004
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000004ffffdfff, 0xffffefff00000004, x1, 15*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, rs2_w0_val == -9
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffbfff;  op2val:0xffffff7ffffffff7
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffbfff, 0xffffff7ffffffff7, x1, 16*XLEN/8, x2)

inst_50:
// rs1_w0_val == -32769, rs2_w0_val == -4097
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0xc0000000ffffefff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0xc0000000ffffefff, x1, 17*XLEN/8, x2)

inst_51:
// rs1_w0_val == -65537, rs1_w1_val == -1073741825, rs2_w0_val == 134217728
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffeffff;  op2val:0x08000008000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xbffffffffffeffff, 0x08000008000000, x1, 18*XLEN/8, x2)

inst_52:
// rs1_w0_val == -131073, rs2_w0_val == -536870913, rs1_w1_val == rs2_w1_val
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffdffff;  op2val:0xfbffffffdfffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffdffff, 0xfbffffffdfffffff, x1, 19*XLEN/8, x2)

inst_53:
// rs2_w1_val == -262145, rs1_w1_val == 2097152
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000040;  op2val:0xfffbffff00000009
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x20000000000040, 0xfffbffff00000009, x1, 20*XLEN/8, x2)

inst_54:
// rs2_w1_val == -1048577, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00008000001000;  op2val:0xffeffffffffffff6
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00008000001000, 0xffeffffffffffff6, x1, 21*XLEN/8, x2)

inst_55:
// rs2_w1_val == -8388609, rs2_w0_val == 256
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffe;  op2val:0xff7fffff00000100
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x800000fffffffe, 0xff7fffff00000100, x1, 22*XLEN/8, x2)

inst_56:
// rs2_w1_val == -16777217, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800400000;  op2val:0xfeffffff00080000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff800400000, 0xfeffffff00080000, x1, 23*XLEN/8, x2)

inst_57:
// rs2_w1_val == -33554433, rs1_w1_val == 65536, rs1_w0_val == -1073741825
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x010000bfffffff;  op2val:0xfdffffff40000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x010000bfffffff, 0xfdffffff40000000, x1, 24*XLEN/8, x2)

inst_58:
// rs2_w1_val == -134217729, rs1_w1_val == -536870913
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000040;  op2val:0xf7ffffff00000400
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000040, 0xf7ffffff00000400, x1, 25*XLEN/8, x2)

inst_59:
// rs2_w1_val == -536870913, rs1_w0_val == -2097153
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffdfffff;  op2val:0xdfffffff00020000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x100000ffdfffff, 0xdfffffff00020000, x1, 26*XLEN/8, x2)

inst_60:
// rs1_w0_val == -262145, rs2_w0_val == 128
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffbffff;  op2val:0xfffffff900000080
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffbffff, 0xfffffff900000080, x1, 27*XLEN/8, x2)

inst_61:
// rs1_w0_val == -524289, rs1_w1_val == -257
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffff7ffff;  op2val:0xffff7fff00080000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffefffff7ffff, 0xffff7fff00080000, x1, 28*XLEN/8, x2)

inst_62:
// rs1_w0_val == -1048577, rs2_w1_val == 1073741824
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffefffff;  op2val:0x40000000fffffff7
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffeffffefffff, 0x40000000fffffff7, x1, 29*XLEN/8, x2)

inst_63:
// rs1_w0_val == -4194305, rs2_w0_val == 1048576, rs1_w1_val == -4194305
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffbfffff;  op2val:0x4000000000100000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0x4000000000100000, x1, 30*XLEN/8, x2)

inst_64:
// rs1_w0_val == -8388609, rs2_w1_val == 8, rs1_w1_val == -1
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:0x000008ffdfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, 0x000008ffdfffff, x1, 31*XLEN/8, x2)

inst_65:
// rs1_w0_val == -16777217, rs2_w0_val == 67108864
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffeffffff;  op2val:0x3fffffff04000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xdffffffffeffffff, 0x3fffffff04000000, x1, 32*XLEN/8, x2)

inst_66:
// rs1_w0_val == -33554433, rs2_w0_val == -2147483648
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000200fdffffff;  op2val:0x00000780000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000200fdffffff, 0x00000780000000, x1, 33*XLEN/8, x2)

inst_67:
// rs1_w0_val == -67108865, rs1_w1_val == 8192, rs2_w0_val == -1048577
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x002000fbffffff;  op2val:0x400000ffefffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x002000fbffffff, 0x400000ffefffff, x1, 34*XLEN/8, x2)

inst_68:
// rs1_w0_val == -134217729, rs2_w1_val == -65
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000040f7ffffff;  op2val:0xffffffbffffffff6
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000040f7ffffff, 0xffffffbffffffff6, x1, 35*XLEN/8, x2)

inst_69:
// rs1_w0_val == -268435457, rs2_w1_val == 268435456
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000080efffffff;  op2val:0x1000000000080000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000080efffffff, 0x1000000000080000, x1, 36*XLEN/8, x2)

inst_70:
// rs1_w0_val == -536870913, rs2_w1_val == 0
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcdfffffff;  op2val:0x000000fffffff8
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffcdfffffff, 0x000000fffffff8, x1, 37*XLEN/8, x2)

inst_71:
// rs1_w0_val == 1431655765, rs1_w1_val == -5
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb55555555;  op2val:0xfffffff8dfffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffb55555555, 0xfffffff8dfffffff, x1, 38*XLEN/8, x2)

inst_72:
// rs1_w0_val == -1431655766, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x020000aaaaaaaa;  op2val:0xffffffbffffffdff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x020000aaaaaaaa, 0xffffffbffffffdff, x1, 39*XLEN/8, x2)

inst_73:
// rs1_w1_val == -2147483648, rs2_w0_val == 2097152
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x80000000bfffffff;  op2val:0xff7fffff00200000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x80000000bfffffff, 0xff7fffff00200000, x1, 40*XLEN/8, x2)

inst_74:
// rs1_w1_val == 1, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00000100008000;  op2val:0x000006ffff7fff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00000100008000, 0x000006ffff7fff, x1, 41*XLEN/8, x2)

inst_75:
// rs1_w1_val == 2, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000080;  op2val:0xfeffffffffdfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00000200000080, 0xfeffffffffdfffff, x1, 42*XLEN/8, x2)

inst_76:
// rs1_w1_val == 8, rs2_w1_val == 2
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffdfffff;  op2val:0x00000200000009
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000008ffdfffff, 0x00000200000009, x1, 43*XLEN/8, x2)

inst_77:
// rs1_w1_val == 32, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000005;  op2val:0xffffffdfbfffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00002000000005, 0xffffffdfbfffffff, x1, 44*XLEN/8, x2)

inst_78:
// rs1_w1_val == 256, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000100dfffffff;  op2val:0xffffff7fc0000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000100dfffffff, 0xffffff7fc0000000, x1, 45*XLEN/8, x2)

inst_79:
// rs1_w1_val == 1024, rs2_w0_val == 1
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000007;  op2val:0xfffffffa00000001
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00040000000007, 0xfffffffa00000001, x1, 46*XLEN/8, x2)

inst_80:
// rs1_w1_val == 2048, rs2_w1_val == 32
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffbfffff;  op2val:0x00002000080000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0x00002000080000, x1, 47*XLEN/8, x2)

inst_81:
// rs1_w1_val == 262144, rs2_w1_val == -2147483648
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000400;  op2val:0x8000000004000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x04000000000400, 0x8000000004000000, x1, 48*XLEN/8, x2)

inst_82:
// rs1_w1_val == 4194304, rs2_w1_val == 2048, rs2_w0_val == -134217729
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffefffff;  op2val:0x000800f7ffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x400000ffefffff, 0x000800f7ffffff, x1, 49*XLEN/8, x2)

inst_83:
// rs1_w1_val == 16777216, rs2_w1_val == 4096
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffdfff;  op2val:0x00100008000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x1000000ffffdfff, 0x00100008000000, x1, 50*XLEN/8, x2)

inst_84:
// rs1_w1_val == 67108864, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000004;  op2val:0x04000000000003
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x400000000000004, 0x04000000000003, x1, 51*XLEN/8, x2)

inst_85:
// rs1_w1_val == 536870912, rs2_w1_val == -65537
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x2000000008000000;  op2val:0xfffeffffefffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x2000000008000000, 0xfffeffffefffffff, x1, 52*XLEN/8, x2)

inst_86:
// rs1_w1_val == -134217729, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffdff;  op2val:0x000009ffdfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffdff, 0x000009ffdfffff, x1, 53*XLEN/8, x2)

inst_87:
// rs1_w1_val == -1431655766, rs2_w1_val == 16777216, rs2_w0_val == -3
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafbffffff;  op2val:0x1000000fffffffd
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0x1000000fffffffd, x1, 54*XLEN/8, x2)

inst_88:
// rs2_w0_val == -1, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00020000;  op2val:0xffefffffffffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffbfffff00020000, 0xffefffffffffffff, x1, 55*XLEN/8, x2)

inst_89:
// rs2_w0_val == 0, rs1_w1_val == -131073
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffeff;  op2val:0xf7ffffff00000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffeff, 0xf7ffffff00000000, x1, 56*XLEN/8, x2)

inst_90:
// rs2_w0_val == 2, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffff6;  op2val:0x2000000000000002
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffff6, 0x2000000000000002, x1, 57*XLEN/8, x2)

inst_91:
// rs2_w0_val == 8, rs2_w1_val == 131072
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffc;  op2val:0x02000000000008
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x800000fffffffc, 0x02000000000008, x1, 58*XLEN/8, x2)

inst_92:
// rs2_w0_val == 512, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00000100800000;  op2val:0x5555555500000200
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00000100800000, 0x5555555500000200, x1, 59*XLEN/8, x2)

inst_93:
// rs2_w0_val == 4096, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00020020000000;  op2val:0x00100000001000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00020020000000, 0x00100000001000, x1, 60*XLEN/8, x2)

inst_94:
// rs2_w0_val == 8192, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0x02000000002000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0x02000000002000, x1, 61*XLEN/8, x2)

inst_95:
// rs2_w0_val == 16384, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffffe;  op2val:0x00000900004000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffe, 0x00000900004000, x1, 62*XLEN/8, x2)

inst_96:
// rs2_w0_val == 32768, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffbfffff;  op2val:0xfff7ffff00008000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000005ffbfffff, 0xfff7ffff00008000, x1, 63*XLEN/8, x2)

inst_97:
// rs2_w0_val == 65536, rs2_w1_val == -9
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffff;  op2val:0xfffffff700010000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x008000ffffffff, 0xfffffff700010000, x1, 64*XLEN/8, x2)

inst_98:
// rs2_w0_val == 4194304, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffefff;  op2val:0x00000700400000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x001000ffffefff, 0x00000700400000, x1, 65*XLEN/8, x2)

inst_99:
// rs2_w0_val == 8388608, rs1_w1_val == -16777217
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00040000;  op2val:0xfffffff600800000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfeffffff00040000, 0xfffffff600800000, x1, 66*XLEN/8, x2)

inst_100:
// rs2_w0_val == 16777216, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000200;  op2val:0xffff7fff01000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000200, 0xffff7fff01000000, x1, 67*XLEN/8, x2)

inst_101:
// rs2_w0_val == 33554432, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffff;  op2val:0x00000602000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x001000ffffffff, 0x00000602000000, x1, 68*XLEN/8, x2)

inst_102:
// rs2_w0_val == 536870912, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000040;  op2val:0xefffffff20000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00002000000040, 0xefffffff20000000, x1, 69*XLEN/8, x2)

inst_103:
// rs2_w0_val == -2, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00400000200000;  op2val:0xffff7ffffffffffe
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00400000200000, 0xffff7ffffffffffe, x1, 70*XLEN/8, x2)

inst_104:
// rs2_w0_val == -33, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000800;  op2val:0x000007ffffffdf
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x400000000000800, 0x000007ffffffdf, x1, 71*XLEN/8, x2)

inst_105:
// rs2_w0_val == -1025, rs2_w1_val == -8193
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000100;  op2val:0xffffdffffffffbff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00001000000100, 0xffffdffffffffbff, x1, 72*XLEN/8, x2)

inst_106:
// rs2_w0_val == -16385, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffdfff;  op2val:0x55555555ffffbfff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000005ffffdfff, 0x55555555ffffbfff, x1, 73*XLEN/8, x2)

inst_107:
// rs2_w0_val == -131073, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x01000000004000;  op2val:0xfffbfffffffdffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x01000000004000, 0xfffbfffffffdffff, x1, 74*XLEN/8, x2)

inst_108:
// rs2_w0_val == -67108865, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffb;  op2val:0x10000000fbffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffb, 0x10000000fbffffff, x1, 75*XLEN/8, x2)

inst_109:
// rs2_w0_val == 1431655765, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000040;  op2val:0x00000555555555
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00004000000040, 0x00000555555555, x1, 76*XLEN/8, x2)

inst_110:
// rs2_w1_val == -1, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffc;  op2val:0xffffffff00001000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffc, 0xffffffff00001000, x1, 77*XLEN/8, x2)

inst_111:
// rs2_w1_val == 1, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000040;  op2val:0x000001ffffffbf
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xc000000000000040, 0x000001ffffffbf, x1, 78*XLEN/8, x2)

inst_112:
// rs2_w1_val == 4, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffdfffff;  op2val:0x000004fffffffc
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffdfffff, 0x000004fffffffc, x1, 79*XLEN/8, x2)

inst_113:
// rs2_w1_val == 128, rs1_w1_val == -2097153
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffff7fff;  op2val:0x000080fffffbff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffdfffffffff7fff, 0x000080fffffbff, x1, 80*XLEN/8, x2)

inst_114:
// rs2_w1_val == 256, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000200;  op2val:0x000100fffdffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00400000000200, 0x000100fffdffff, x1, 81*XLEN/8, x2)

inst_115:
// rs1_w1_val == -65537, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00200000;  op2val:0x80000000ffffffef
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffeffff00200000, 0x80000000ffffffef, x1, 82*XLEN/8, x2)

inst_116:
// rs2_w1_val == 1024, rs1_w1_val == -65
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffefff;  op2val:0x00040000000200
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffefff, 0x00040000000200, x1, 83*XLEN/8, x2)

inst_117:
// rs2_w1_val == 32768, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000020;  op2val:0x00800004000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x00000100000020, 0x00800004000000, x1, 84*XLEN/8, x2)

inst_118:
// rs2_w1_val == 65536, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000009;  op2val:0x010000fffffffb
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000009, 0x010000fffffffb, x1, 85*XLEN/8, x2)

inst_119:
// rs2_w1_val == 1048576, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffff7fff;  op2val:0x100000efffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x002000ffff7fff, 0x100000efffffff, x1, 86*XLEN/8, x2)

inst_120:
// rs2_w1_val == 2097152, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00040000;  op2val:0x200000fff7ffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffdfff00040000, 0x200000fff7ffff, x1, 87*XLEN/8, x2)

inst_121:
// rs1_w1_val == 1073741824, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000010;  op2val:0xfffdffff55555555
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x4000000000000010, 0xfffdffff55555555, x1, 88*XLEN/8, x2)

inst_122:
// rs2_w1_val == 8388608, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffbff;  op2val:0x80000000000100
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0x000006fffffbff, 0x80000000000100, x1, 89*XLEN/8, x2)

inst_123:
// rs1_w1_val == -9, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000004;  op2val:0x20000000f7ffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff700000004, 0x20000000f7ffffff, x1, 90*XLEN/8, x2)

inst_124:
// rs2_w1_val == 134217728, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800001000;  op2val:0x800000000008000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff800001000, 0x800000000008000, x1, 91*XLEN/8, x2)

inst_125:
// rs1_w1_val == -33, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000001;  op2val:0x0002007fffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000001, 0x0002007fffffff, x1, 92*XLEN/8, x2)

inst_126:
// rs1_w1_val == -129, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00008000;  op2val:0x200000000040000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffff7f00008000, 0x200000000040000, x1, 93*XLEN/8, x2)

inst_127:
// rs2_w1_val == -2, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffbfff;  op2val:0xfffffffefbffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffbfff, 0xfffffffefbffffff, x1, 94*XLEN/8, x2)

inst_128:
// rs1_w1_val == -513, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffbff;  op2val:0xefffffff00000009
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffbff, 0xefffffff00000009, x1, 95*XLEN/8, x2)

inst_129:
// rs2_w1_val == -5, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff804000000;  op2val:0xfffffffb00000005
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffff804000000, 0xfffffffb00000005, x1, 96*XLEN/8, x2)

inst_130:
// rs1_w1_val == -2049, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000002;  op2val:0x008000fbffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000002, 0x008000fbffffff, x1, 97*XLEN/8, x2)

inst_131:
// rs1_w1_val == -4097, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00100000;  op2val:0x00400000010000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffffefff00100000, 0x00400000010000, x1, 98*XLEN/8, x2)

inst_132:
// rs2_w1_val == -257, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000006;  op2val:0xfffffeff00000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xefffffff00000006, 0xfffffeff00000000, x1, 99*XLEN/8, x2)

inst_133:
// rs2_w1_val == -513, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000004;  op2val:0xfffffdff08000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000004, 0xfffffdff08000000, x1, 100*XLEN/8, x2)

inst_134:
// rs1_w1_val == -262145, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00004000;  op2val:0x000004fffffffd
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffbffff00004000, 0x000004fffffffd, x1, 101*XLEN/8, x2)

inst_135:
// rs2_w1_val == -2049, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0xfffff7fffbffffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfdfffffffeffffff, 0xfffff7fffbffffff, x1, 102*XLEN/8, x2)

inst_136:
// rs1_w1_val == -1048577, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffeffff;  op2val:0x100000004000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xffeffffffffeffff, 0x100000004000000, x1, 103*XLEN/8, x2)

inst_137:
// rs2_w1_val == -16385, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaf7ffffff;  op2val:0xffffbfffffbfffff
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaf7ffffff, 0xffffbfffffbfffff, x1, 104*XLEN/8, x2)

inst_138:
// rs1_w1_val == -8388609, 
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff7fffffff;  op2val:0x080000ffffffdf
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xff7fffff7fffffff, 0x080000ffffffdf, x1, 105*XLEN/8, x2)

inst_139:
// rs1_w0_val == -2147483648, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -2, rs2_w0_val == 268435456, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs2_w1_val == 512, rs1_w1_val != rs2_w1_val
// opcode: srx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe80000000;  op2val:0x00020010000000
TEST_RR_OP(srx, x31, x30, x29, 0x0000000000000000, 0xfffffffe80000000, 0x00020010000000, x1, 106*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 18*((XLEN/8)/4),4,0xdeadbeef


signature_x10_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 107*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
