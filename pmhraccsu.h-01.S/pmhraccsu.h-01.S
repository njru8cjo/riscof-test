
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhraccsu.h instruction of the RISC-V RV64PZicsr extension for the pmhraccsu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhraccsu.h)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x25, rs2==x0, rd==x0, rs1_h0_val == -32768, rs1_h2_val == -65, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h3_val != rs2_h3_val, rs2_h3_val == -1
// opcode: pmhraccsu.h ; op1:x25; op2:x0; dest:x0; op1val:0x04ffbffff68000;  op2val:0xffff2000dfff0009
TEST_RR_OP(pmhraccsu.h, x0, x25, x0, 0x0000000000000000, 0x04ffbffff68000, 0xffff2000dfff0009, x4, 0*XLEN/8, x2)

inst_1:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x5, rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == 0, rs2_h3_val == -33, rs1_h2_val == 1024, rs1_h1_val == -17, rs2_h1_val == 128
// opcode: pmhraccsu.h ; op1:x15; op2:x15; dest:x5; op1val:0x3fff0400ffefffff;  op2val:0xffdffffa00800000
TEST_RR_OP(pmhraccsu.h, x5, x15, x15, 0x0000000000000000, 0x3fff0400ffefffff, 0xffdffffa00800000, x4, 1*XLEN/8, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h0_val == 0, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 2048, rs1_h1_val == 2, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 128, rs1_h3_val == 16384
// opcode: pmhraccsu.h ; op1:x22; op2:x22; dest:x22; op1val:0x4000008000020000;  op2val:0x3fff080000800000
TEST_RR_OP(pmhraccsu.h, x22, x22, x22, 0x0000000000000000, 0x4000008000020000, 0x3fff080000800000, x4, 2*XLEN/8, x2)

inst_3:
// rs1 == rd != rs2, rs1==x7, rs2==x21, rd==x7, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -9, rs2_h1_val == 16384, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val == rs2_h2_val, rs1_h1_val == 1024, rs1_h3_val < 0 and rs2_h3_val < 0
// opcode: pmhraccsu.h ; op1:x7; op2:x21; dest:x7; op1val:0xfff7fff604000001;  op2val:0xfff8fff640000003
TEST_RR_OP(pmhraccsu.h, x7, x7, x21, 0x0000000000000000, 0xfff7fff604000001, 0xfff8fff640000003, x4, 3*XLEN/8, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x18, rd==x15, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -16385, rs1_h2_val == -21846, rs1_h3_val == 128, rs2_h2_val == -32768
// opcode: pmhraccsu.h ; op1:x5; op2:x18; dest:x15; op1val:0x80aaaabfff7fff;  op2val:0xfff88000fff6fffc
TEST_RR_OP(pmhraccsu.h, x15, x5, x18, 0x0000000000000000, 0x80aaaabfff7fff, 0xfff88000fff6fffc, x4, 4*XLEN/8, x2)

inst_5:
// rs1==x17, rs2==x30, rd==x12, rs1_h0_val == 2, rs2_h2_val == 128, rs2_h3_val == 64, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 256, rs1_h2_val == 16, rs2_h1_val == -513, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pmhraccsu.h ; op1:x17; op2:x30; dest:x12; op1val:0xc000001001000002;  op2val:0x400080fdffc000
TEST_RR_OP(pmhraccsu.h, x12, x17, x30, 0x0000000000000000, 0xc000001001000002, 0x400080fdffc000, x4, 5*XLEN/8, x2)

inst_6:
// rs1==x27, rs2==x3, rd==x10, rs1_h0_val == 4, rs1_h2_val == -129, rs2_h0_val == -33, rs1_h3_val == -8193, rs1_h1_val == -3, rs2_h3_val == -1025
// opcode: pmhraccsu.h ; op1:x27; op2:x3; dest:x10; op1val:0xdfffff7ffffd0004;  op2val:0xfbffc0000007ffdf
TEST_RR_OP(pmhraccsu.h, x10, x27, x3, 0x0000000000000000, 0xdfffff7ffffd0004, 0xfbffc0000007ffdf, x4, 6*XLEN/8, x2)

inst_7:
// rs1==x23, rs2==x5, rd==x13, rs1_h0_val == 8, rs2_h2_val == -5, rs2_h3_val == 16384, rs2_h0_val == -8193, rs1_h3_val == 256, rs1_h1_val == -65
// opcode: pmhraccsu.h ; op1:x23; op2:x5; dest:x13; op1val:0x100fff9ffbf0008;  op2val:0x4000fffb0005dfff
TEST_RR_OP(pmhraccsu.h, x13, x23, x5, 0x0000000000000000, 0x100fff9ffbf0008, 0x4000fffb0005dfff, x4, 7*XLEN/8, x2)

inst_8:
// rs1==x10, rs2==x25, rd==x27, rs1_h0_val == 16, rs2_h1_val == -2049, rs1_h2_val == 2048, rs1_h1_val == -5, rs2_h0_val == 128, rs2_h3_val == 0, rs1_h3_val == -2
// opcode: pmhraccsu.h ; op1:x10; op2:x25; dest:x27; op1val:0xfffe0800fffb0010;  op2val:0x000080f7ff0080
TEST_RR_OP(pmhraccsu.h, x27, x10, x25, 0x0000000000000000, 0xfffe0800fffb0010, 0x000080f7ff0080, x4, 8*XLEN/8, x2)

inst_9:
// rs1==x1, rs2==x17, rd==x31, rs1_h0_val == 32, rs1_h2_val == -33, rs2_h1_val == -257, rs1_h3_val == -21846, rs2_h2_val == -8193, rs2_h3_val == -2049
// opcode: pmhraccsu.h ; op1:x1; op2:x17; dest:x31; op1val:0xaaaaffdf00060020;  op2val:0xf7ffdffffefffffc
TEST_RR_OP(pmhraccsu.h, x31, x1, x17, 0x0000000000000000, 0xaaaaffdf00060020, 0xf7ffdffffefffffc, x4, 9*XLEN/8, x2)

inst_10:
// rs1==x28, rs2==x19, rd==x21, rs1_h0_val == 64, rs1_h3_val == -5, rs1_h2_val == -32768, rs2_h1_val == -3, rs1_h1_val == 4, rs2_h0_val == 256, rs2_h2_val == 2
// opcode: pmhraccsu.h ; op1:x28; op2:x19; dest:x21; op1val:0xfffb800000040040;  op2val:0x050002fffd0100
TEST_RR_OP(pmhraccsu.h, x21, x28, x19, 0x0000000000000000, 0xfffb800000040040, 0x050002fffd0100, x4, 10*XLEN/8, x2)

inst_11:
// rs1==x16, rs2==x26, rd==x9, rs1_h0_val == 128, rs1_h2_val == -8193, rs2_h1_val == -1, rs2_h0_val == 4, rs2_h2_val == -4097, rs2_h3_val == -129, rs1_h3_val == 4096
// opcode: pmhraccsu.h ; op1:x16; op2:x26; dest:x9; op1val:0x1000dffffffb0080;  op2val:0xff7fefffffff0004
TEST_RR_OP(pmhraccsu.h, x9, x16, x26, 0x0000000000000000, 0x1000dffffffb0080, 0xff7fefffffff0004, x4, 11*XLEN/8, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x11, rs1_h0_val == 256, rs2_h0_val == -2, rs1_h1_val == 32767, rs1_h2_val == 4, rs1_h3_val == 1, rs1_h3_val == rs2_h3_val, rs2_h2_val == -16385, rs2_h3_val == 1
// opcode: pmhraccsu.h ; op1:x18; op2:x20; dest:x11; op1val:0x0100047fff0100;  op2val:0x01bffffff9fffe
TEST_RR_OP(pmhraccsu.h, x11, x18, x20, 0x0000000000000000, 0x0100047fff0100, 0x01bffffff9fffe, x4, 12*XLEN/8, x2)

inst_13:
// rs1==x14, rs2==x1, rd==x23, rs1_h0_val == 512, rs2_h3_val == 8, rs1_h2_val == -257, rs2_h2_val == -129, rs1_h3_val == 32, rs2_h1_val == 1
// opcode: pmhraccsu.h ; op1:x14; op2:x1; dest:x23; op1val:0x20feff00060200;  op2val:0x08ff7f00010000
TEST_RR_OP(pmhraccsu.h, x23, x14, x1, 0x0000000000000000, 0x20feff00060200, 0x08ff7f00010000, x4, 13*XLEN/8, x2)

inst_14:
// rs1==x13, rs2==x7, rd==x30, rs1_h0_val == 1024, rs1_h3_val == 32767, rs1_h2_val == 21845, rs2_h1_val == -32768, rs2_h3_val == 32
// opcode: pmhraccsu.h ; op1:x13; op2:x7; dest:x30; op1val:0x7fff5555fffa0400;  op2val:0x203fff8000ffdf
TEST_RR_OP(pmhraccsu.h, x30, x13, x7, 0x0000000000000000, 0x7fff5555fffa0400, 0x203fff8000ffdf, x4, 14*XLEN/8, x15)

inst_15:
// rs1==x2, rs2==x29, rd==x20, rs1_h0_val == 2048, rs1_h2_val == 32, rs2_h0_val == 8192, rs1_h1_val == 32, rs1_h3_val == -129
// opcode: pmhraccsu.h ; op1:x2; op2:x29; dest:x20; op1val:0xff7f002000200800;  op2val:0xffffdfffdfff2000
TEST_RR_OP(pmhraccsu.h, x20, x2, x29, 0x0000000000000000, 0xff7f002000200800, 0xffffdfffdfff2000, x4, 15*XLEN/8, x15)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x4, rs2==x11, rd==x8, rs1_h0_val == 4096, rs1_h3_val == 1024, rs2_h3_val == -32768, rs1_h1_val == -129
// opcode: pmhraccsu.h ; op1:x4; op2:x11; dest:x8; op1val:0x400ffbfff7f1000;  op2val:0x8000fff90003fff6
TEST_RR_OP(pmhraccsu.h, x8, x4, x11, 0x0000000000000000, 0x400ffbfff7f1000, 0x8000fff90003fff6, x5, 0*XLEN/8, x15)

inst_17:
// rs1==x3, rs2==x12, rd==x19, rs1_h0_val == 8192, rs2_h0_val == -16385, rs2_h2_val == 256, rs1_h1_val == 64
// opcode: pmhraccsu.h ; op1:x3; op2:x12; dest:x19; op1val:0xfffbfffc00402000;  op2val:0xff7f01000009bfff
TEST_RR_OP(pmhraccsu.h, x19, x3, x12, 0x0000000000000000, 0xfffbfffc00402000, 0xff7f01000009bfff, x5, 1*XLEN/8, x15)

inst_18:
// rs1==x24, rs2==x13, rd==x17, rs1_h0_val == 16384, rs2_h1_val == 4, rs1_h1_val == -33, rs2_h0_val == -2049, rs1_h2_val == 8
// opcode: pmhraccsu.h ; op1:x24; op2:x13; dest:x17; op1val:0x1000008ffdf4000;  op2val:0xffdfff7f0004f7ff
TEST_RR_OP(pmhraccsu.h, x17, x24, x13, 0x0000000000000000, 0x1000008ffdf4000, 0xffdfff7f0004f7ff, x5, 2*XLEN/8, x15)

inst_19:
// rs1==x26, rs2==x2, rd==x28, rs1_h0_val == -2, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 8192, rs1_h3_val == 64, rs1_h1_val == 16384, rs2_h1_val == 32
// opcode: pmhraccsu.h ; op1:x26; op2:x2; dest:x28; op1val:0x40ff7f4000fffe;  op2val:0x200000020020fffa
TEST_RR_OP(pmhraccsu.h, x28, x26, x2, 0x0000000000000000, 0x40ff7f4000fffe, 0x200000020020fffa, x5, 3*XLEN/8, x15)

inst_20:
// rs1==x21, rs2==x28, rd==x25, rs1_h0_val == -3, rs2_h3_val == -5, rs2_h2_val == -9
// opcode: pmhraccsu.h ; op1:x21; op2:x28; dest:x25; op1val:0xff7ffffafffcfffd;  op2val:0xfffbfff700030006
TEST_RR_OP(pmhraccsu.h, x25, x21, x28, 0x0000000000000000, 0xff7ffffafffcfffd, 0xfffbfff700030006, x5, 4*XLEN/8, x15)

inst_21:
// rs1==x6, rs2==x24, rd==x26, rs1_h0_val == -5, rs1_h3_val == -65, rs2_h0_val == 8
// opcode: pmhraccsu.h ; op1:x6; op2:x24; dest:x26; op1val:0xffbf04000007fffb;  op2val:0x400003fff60008
TEST_RR_OP(pmhraccsu.h, x26, x6, x24, 0x0000000000000000, 0xffbf04000007fffb, 0x400003fff60008, x5, 5*XLEN/8, x15)

inst_22:
// rs1==x11, rs2==x10, rd==x6, rs1_h0_val == -9, rs1_h2_val == 4096, rs2_h1_val == 256, rs1_h1_val == -21846
// opcode: pmhraccsu.h ; op1:x11; op2:x10; dest:x6; op1val:0x091000aaaafff7;  op2val:0x0600800100fff9
TEST_RR_OP(pmhraccsu.h, x6, x11, x10, 0x0000000000000000, 0x091000aaaafff7, 0x0600800100fff9, x5, 6*XLEN/8, x15)

inst_23:
// rs1==x0, rs2==x8, rd==x29, rs1_h0_val == -17, rs2_h0_val == 16384, rs2_h1_val == -2, rs2_h3_val == 4096, rs1_h2_val == 64, rs1_h3_val == 8192
// opcode: pmhraccsu.h ; op1:x0; op2:x8; dest:x29; op1val:0x200000400400ffef;  op2val:0x10000009fffe4000
TEST_RR_OP(pmhraccsu.h, x29, x0, x8, 0x0000000000000000, 0x200000400400ffef, 0x10000009fffe4000, x5, 7*XLEN/8, x15)

inst_24:
// rs1==x30, rs2==x9, rd==x24, rs1_h0_val == -33, rs2_h3_val == -65, rs2_h2_val == 1024
// opcode: pmhraccsu.h ; op1:x30; op2:x9; dest:x24; op1val:0xfffbffdffff6ffdf;  op2val:0xffbf0400fffcfffc
TEST_RR_OP(pmhraccsu.h, x24, x30, x9, 0x0000000000000000, 0xfffbffdffff6ffdf, 0xffbf0400fffcfffc, x5, 8*XLEN/8, x15)

inst_25:
// rs1==x20, rs2==x27, rd==x1, rs1_h0_val == -65, rs2_h3_val == 2, rs1_h1_val == -9, rs2_h0_val == -513, rs2_h2_val == -513
// opcode: pmhraccsu.h ; op1:x20; op2:x27; dest:x1; op1val:0xfff90080fff7ffbf;  op2val:0x02fdff0009fdff
TEST_RR_OP(pmhraccsu.h, x1, x20, x27, 0x0000000000000000, 0xfff90080fff7ffbf, 0x02fdff0009fdff, x5, 9*XLEN/8, x15)

inst_26:
// rs1==x29, rs2==x6, rd==x2, rs1_h0_val == -129, rs2_h0_val == -65, rs2_h3_val == 2048, rs2_h1_val == -33, rs2_h2_val == 8
// opcode: pmhraccsu.h ; op1:x29; op2:x6; dest:x2; op1val:0xff7f0040c000ff7f;  op2val:0x8000008ffdfffbf
TEST_RR_OP(pmhraccsu.h, x2, x29, x6, 0x0000000000000000, 0xff7f0040c000ff7f, 0x8000008ffdfffbf, x5, 10*XLEN/8, x15)

inst_27:
// rs1==x12, rs2==x31, rd==x14, rs1_h0_val == -257, rs2_h1_val == 1024, rs1_h1_val == 0, rs1_h3_val == -1, rs2_h0_val == 16, rs2_h3_val == -4097
// opcode: pmhraccsu.h ; op1:x12; op2:x31; dest:x14; op1val:0xffffc0000000feff;  op2val:0xefff800004000010
TEST_RR_OP(pmhraccsu.h, x14, x12, x31, 0x0000000000000000, 0xffffc0000000feff, 0xefff800004000010, x5, 11*XLEN/8, x15)

inst_28:
// rs1==x19, rs2==x4, rd==x16, rs1_h0_val == -513, rs1_h3_val == -4097
// opcode: pmhraccsu.h ; op1:x19; op2:x4; dest:x16; op1val:0xefff0010bffffdff;  op2val:0x2000efff00070000
TEST_RR_OP(pmhraccsu.h, x16, x19, x4, 0x0000000000000000, 0xefff0010bffffdff, 0x2000efff00070000, x5, 12*XLEN/8, x2)

inst_29:
// rs1==x8, rs2==x14, rd==x4, rs1_h0_val == -1025, 
// opcode: pmhraccsu.h ; op1:x8; op2:x14; dest:x4; op1val:0xfff7c000fff9fbff;  op2val:0x20dffffffc0004
TEST_RR_OP(pmhraccsu.h, x4, x8, x14, 0x0000000000000000, 0xfff7c000fff9fbff, 0x20dffffffc0004, x5, 13*XLEN/8, x2)

inst_30:
// rs1==x31, rs2==x23, rd==x3, rs1_h0_val == -2049, rs2_h3_val == 16
// opcode: pmhraccsu.h ; op1:x31; op2:x23; dest:x3; op1val:0xefff0007fffdf7ff;  op2val:0x10000700060005
TEST_RR_OP(pmhraccsu.h, x3, x31, x23, 0x0000000000000000, 0xefff0007fffdf7ff, 0x10000700060005, x5, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x9, rs2==x16, rd==x18, rs1_h0_val == -4097, rs1_h1_val == -32768, rs2_h1_val == 21845
// opcode: pmhraccsu.h ; op1:x9; op2:x16; dest:x18; op1val:0xfff7fff88000efff;  op2val:0x1000bfff55554000
TEST_RR_OP(pmhraccsu.h, x18, x9, x16, 0x0000000000000000, 0xfff7fff88000efff, 0x1000bfff55554000, x1, 0*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs2_h2_val == 21845, rs2_h0_val == -17
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0006fffddfff;  op2val:0x100055550020ffef
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xdfff0006fffddfff, 0x100055550020ffef, x1, 1*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs1_h3_val == -513, rs1_h2_val == -9, rs1_h1_val == 1
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff70001bfff;  op2val:0xfff80007fffc2000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfdfffff70001bfff, 0xfff80007fffc2000, x1, 2*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs2_h0_val == -257, rs1_h3_val == 16
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000500065555;  op2val:0xfff62000dffffeff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x10000500065555, 0xfff62000dffffeff, x1, 3*XLEN/8, x2)

inst_35:
// rs2_h3_val == 32767, rs1_h3_val == -1025, rs2_h0_val == -3, rs1_h1_val == -257
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7ffeffff7f;  op2val:0x7fffdfff8000fffd
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfbffff7ffeffff7f, 0x7fffdfff8000fffd, x1, 4*XLEN/8, x2)

inst_36:
// rs2_h3_val == 4, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09c000fff8f7ff;  op2val:0x043fffffdf0000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x09c000fff8f7ff, 0x043fffffdf0000, x1, 5*XLEN/8, x2)

inst_37:
// rs2_h3_val == 128, rs1_h2_val == -1, rs1_h3_val == 8
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08ffff00040100;  op2val:0x80c00000034000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x08ffff00040100, 0x80c00000034000, x1, 6*XLEN/8, x2)

inst_38:
// rs2_h3_val == 256, rs2_h0_val == 21845, rs1_h1_val == -2
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400005fffe0080;  op2val:0x100010004005555
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x400005fffe0080, 0x100010004005555, x1, 7*XLEN/8, x2)

inst_39:
// rs2_h3_val == 512, rs1_h1_val == -1025, rs2_h1_val == -16385, rs1_h3_val == 0
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaafbff0400;  op2val:0x2005555bfff0008
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x00aaaafbff0400, 0x2005555bfff0008, x1, 8*XLEN/8, x2)

inst_40:
// rs2_h3_val == 1024, rs2_h1_val == 512
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100100000200009;  op2val:0x400dfff0200c000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x100100000200009, 0x400dfff0200c000, x1, 9*XLEN/8, x2)

inst_41:
// rs2_h3_val == -2, rs1_h1_val == 2048
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff808000005;  op2val:0xfffe00800009fffa
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff8fff808000005, 0xfffe00800009fffa, x1, 10*XLEN/8, x2)

inst_42:
// rs2_h3_val == -3, rs1_h2_val == 256
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100fff9fff8;  op2val:0xfffddffffff8fff6
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xefff0100fff9fff8, 0xfffddffffff8fff6, x1, 11*XLEN/8, x2)

inst_43:
// rs2_h3_val == -9, rs1_h1_val == -2049, rs2_h1_val == -5, rs1_h3_val == 512, rs1_h2_val == 16384, rs2_h2_val == 4
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2004000f7ff0001;  op2val:0xfff70004fffb2000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x2004000f7ff0001, 0xfff70004fffb2000, x1, 12*XLEN/8, x2)

inst_44:
// rs2_h3_val == -17, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff900400040;  op2val:0xffef00030006dfff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xffbffff900400040, 0xffef00030006dfff, x1, 13*XLEN/8, x2)

inst_45:
// rs2_h3_val == -257, rs1_h3_val == -33
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040bfffffef;  op2val:0xfeff20000080c000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xffdf0040bfffffef, 0xfeff20000080c000, x1, 14*XLEN/8, x2)

inst_46:
// rs2_h3_val == -513, rs1_h2_val == 8192, rs2_h0_val == 1
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x402000fff71000;  op2val:0xfdff000700040001
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x402000fff71000, 0xfdff000700040001, x1, 15*XLEN/8, x2)

inst_47:
// rs2_h3_val == -8193, rs1_h2_val == -2, rs2_h1_val == 64
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffe0020fff8;  op2val:0xdfff04000040fff8
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff6fffe0020fff8, 0xdfff04000040fff8, x1, 16*XLEN/8, x2)

inst_48:
// rs2_h3_val == -16385, rs2_h0_val == 2048
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c000ffbfc000;  op2val:0xbfffeffffff60800
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff9c000ffbfc000, 0xbfffeffffff60800, x1, 17*XLEN/8, x2)

inst_49:
// rs2_h3_val == 21845, rs2_h0_val == 32, rs1_h2_val == -2049, rs2_h2_val == -2049
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f7ff0006ff7f;  op2val:0x5555f7fffeff0020
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff6f7ff0006ff7f, 0x5555f7fffeff0020, x1, 18*XLEN/8, x2)

inst_50:
// rs2_h3_val == -21846, rs2_h2_val == -21846, rs1_h1_val == 8192, rs2_h0_val == 512
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x05feff2000feff;  op2val:0xaaaaaaaafdff0200
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x05feff2000feff, 0xaaaaaaaafdff0200, x1, 19*XLEN/8, x2)

inst_51:
// rs1_h0_val == -21846, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080fff6aaaa;  op2val:0xfff6008000400800
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xefff0080fff6aaaa, 0xfff6008000400800, x1, 20*XLEN/8, x2)

inst_52:
// rs1_h1_val == -1, rs2_h1_val == -1025
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0080ffffaaaa;  op2val:0x3ffffff7fbff2000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffc0080ffffaaaa, 0x3ffffff7fbff2000, x1, 21*XLEN/8, x2)

inst_53:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == -9, rs1_h2_val == 512, rs2_h0_val == -5
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x080200fff70040;  op2val:0x3fff0005fff7fffb
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x080200fff70040, 0x3fff0005fff7fffb, x1, 22*XLEN/8, x2)

inst_54:
// rs1_h1_val == 8, rs2_h0_val == 64
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6feff00080006;  op2val:0xfdfffffbfffe0040
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff6feff00080006, 0xfdfffffbfffe0040, x1, 23*XLEN/8, x2)

inst_55:
// rs1_h1_val == 16, rs1_h3_val == 2, rs2_h0_val == -1025
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0200100010fff8;  op2val:0xfff7ff7ffff6fbff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x0200100010fff8, 0xfff7ff7ffff6fbff, x1, 24*XLEN/8, x2)

inst_56:
// rs1_h1_val == 128, rs2_h1_val == 2, rs1_h3_val == 21845
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555008000800001;  op2val:0xfdff000600020003
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x5555008000800001, 0xfdff000600020003, x1, 25*XLEN/8, x2)

inst_57:
// rs1_h1_val == 512, rs1_h3_val == -3
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f0200aaaa;  op2val:0x7ffffffafff80008
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffdff7f0200aaaa, 0x7ffffffafff80008, x1, 26*XLEN/8, x2)

inst_58:
// rs1_h3_val == -17, rs2_h2_val == 16384, rs1_h2_val == 0, rs2_h1_val == -17
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef0000fff9ffdf;  op2val:0xfffc4000ffeffffb
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xffef0000fff9ffdf, 0xfffc4000ffeffffb, x1, 27*XLEN/8, x2)

inst_59:
// rs1_h3_val == -257, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc000ffff0080;  op2val:0xfffbbffffffdf7ff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfeffc000ffff0080, 0xfffbbffffffdf7ff, x1, 28*XLEN/8, x2)

inst_60:
// rs1_h3_val == -2049, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0400fff80000;  op2val:0xc000aaaa00010007
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0400fff80000, 0xc000aaaa00010007, x1, 29*XLEN/8, x2)

inst_61:
// rs1_h3_val == -16385, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0009c0008000;  op2val:0xffdffdfffffa0004
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xbfff0009c0008000, 0xffdffdfffffa0004, x1, 30*XLEN/8, x2)

inst_62:
// rs2_h0_val == -32768, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffaaaac000;  op2val:0xff7ffff7c0008000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffbffffaaaac000, 0xff7ffff7c0008000, x1, 31*XLEN/8, x2)

inst_63:
// rs2_h0_val == -1, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc0001000fffaaaaa;  op2val:0xfeff00048000ffff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xc0001000fffaaaaa, 0xfeff00048000ffff, x1, 32*XLEN/8, x2)

inst_64:
// rs2_h0_val == 32767, rs2_h2_val == -33, rs2_h1_val == -129
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffdffff9f7ff;  op2val:0xff7fffdfff7f7fff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffbffdffff9f7ff, 0xff7fffdfff7f7fff, x1, 33*XLEN/8, x2)

inst_65:
// rs2_h0_val == 2, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf001000040006;  op2val:0xfffcff7f02000002
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xffbf001000040006, 0xfffcff7f02000002, x1, 34*XLEN/8, x2)

inst_66:
// rs2_h0_val == 1024, rs1_h2_val == -1025
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fbff0020fff6;  op2val:0xfeffffdffbff0400
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff6fbff0020fff6, 0xfeffffdffbff0400, x1, 35*XLEN/8, x2)

inst_67:
// rs2_h0_val == 4096, rs1_h2_val == 32767
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2007fff00090005;  op2val:0x7fff8000fffd1000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x2007fff00090005, 0x7fff8000fffd1000, x1, 36*XLEN/8, x2)

inst_68:
// rs2_h0_val == -9, rs2_h2_val == 32767
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0100fbff0040;  op2val:0xdfff7fffffdffff7
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfeff0100fbff0040, 0xdfff7fffffdffff7, x1, 37*XLEN/8, x2)

inst_69:
// rs2_h0_val == -129, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf400002000040;  op2val:0xffdf0800feffff7f
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xffbf400002000040, 0xffdf0800feffff7f, x1, 38*XLEN/8, x2)

inst_70:
// rs2_h0_val == -4097, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff080000067fff;  op2val:0x7fff0003fff8efff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xbfff080000067fff, 0x7fff0003fff8efff, x1, 39*XLEN/8, x2)

inst_71:
// rs2_h0_val == -21846, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe00805555;  op2val:0x40ffdffffdaaaa
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x20fffe00805555, 0x40ffdffffdaaaa, x1, 40*XLEN/8, x2)

inst_72:
// rs1_h1_val == 4096, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x05fffe1000aaaa;  op2val:0xffff0008fff60008
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x05fffe1000aaaa, 0xffff0008fff60008, x1, 41*XLEN/8, x2)

inst_73:
// rs2_h1_val == 0, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe3fff0006fff6;  op2val:0x20fff600000100
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffe3fff0006fff6, 0x20fff600000100, x1, 42*XLEN/8, x2)

inst_74:
// rs2_h1_val == 32767, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1007fffffff0100;  op2val:0x400ff7f7fff0000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x1007fffffff0100, 0x400ff7f7fff0000, x1, 43*XLEN/8, x2)

inst_75:
// rs2_h1_val == 8, rs1_h1_val == -4097
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffaefffdfff;  op2val:0xfdfffffc00080007
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffafffaefffdfff, 0xfdfffffc00080007, x1, 44*XLEN/8, x2)

inst_76:
// rs2_h1_val == 16, rs2_h2_val == -1025
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000006ffff0080;  op2val:0x06fbff0010fffe
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x40000006ffff0080, 0x06fbff0010fffe, x1, 45*XLEN/8, x2)

inst_77:
// rs1_h1_val == -513, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7ffffdff0400;  op2val:0x08fffafbff4000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffb7ffffdff0400, 0x08fffafbff4000, x1, 46*XLEN/8, x2)

inst_78:
// rs2_h1_val == 2048, rs2_h2_val == -1
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x555500807fff0200;  op2val:0x20ffff08000003
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x555500807fff0200, 0x20ffff08000003, x1, 47*XLEN/8, x2)

inst_79:
// rs1_h1_val == -8193, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff4000dfff0100;  op2val:0xbfff0080fff60003
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xdfff4000dfff0100, 0xbfff0080fff60003, x1, 48*XLEN/8, x2)

inst_80:
// rs2_h1_val == 4096, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10fff61000aaaa;  op2val:0x7fff00031000feff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x10fff61000aaaa, 0x7fff00031000feff, x1, 49*XLEN/8, x2)

inst_81:
// rs2_h1_val == 8192, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x050200fffeffff;  op2val:0x00fff720000001
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x050200fffeffff, 0x00fff720000001, x1, 50*XLEN/8, x2)

inst_82:
// rs1_h1_val == 21845, rs1_h2_val == -5
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb55550008;  op2val:0xfffcfff97ffffff6
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x5555fffb55550008, 0xfffcfff97ffffff6, x1, 51*XLEN/8, x2)

inst_83:
// rs1_h2_val == 1, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000000100030200;  op2val:0xfff60003ffeffeff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x2000000100030200, 0xfff60003ffeffeff, x1, 52*XLEN/8, x2)

inst_84:
// rs1_h2_val == 2, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0100020010ffff;  op2val:0xdfffbffff7ffffbf
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x0100020010ffff, 0xdfffbffff7ffffbf, x1, 53*XLEN/8, x2)

inst_85:
// rs2_h1_val == -65, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0007fff60004;  op2val:0x070007ffbf0009
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0007fff60004, 0x070007ffbf0009, x1, 54*XLEN/8, x2)

inst_86:
// rs2_h1_val == -4097, rs1_h2_val == -4097
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff0040dfff;  op2val:0xfdffff7fefff0006
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff7efff0040dfff, 0xfdffff7fefff0006, x1, 55*XLEN/8, x2)

inst_87:
// rs2_h1_val == -21846, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0502000007fffc;  op2val:0x01fffaaaaa3fff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x0502000007fffc, 0x01fffaaaaa3fff, x1, 56*XLEN/8, x2)

inst_88:
// rs2_h2_val == 0, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x55550080fff7c000;  op2val:0xfff60000feffc000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x55550080fff7c000, 0xfff60000feffc000, x1, 57*XLEN/8, x2)

inst_89:
// rs2_h2_val == 1, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff700070080ff7f;  op2val:0xffbf00010200ffef
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff700070080ff7f, 0xffbf00010200ffef, x1, 58*XLEN/8, x2)

inst_90:
// rs1_h2_val == -3, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd0010dfff;  op2val:0x80000001fff80005
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xff7ffffd0010dfff, 0x80000001fff80005, x1, 59*XLEN/8, x2)

inst_91:
// rs2_h2_val == 16, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa010000400004;  op2val:0xfff900100009fffa
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xaaaa010000400004, 0xfff900100009fffa, x1, 60*XLEN/8, x2)

inst_92:
// rs2_h2_val == 32, rs1_h2_val == -513
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10fdffffbfffef;  op2val:0xffbf0020fff60008
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x10fdffffbfffef, 0xffbf0020fff60008, x1, 61*XLEN/8, x2)

inst_93:
// rs2_h2_val == 64, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00103fff0006;  op2val:0x40000040fffcfdff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfdff00103fff0006, 0x40000040fffcfdff, x1, 62*XLEN/8, x2)

inst_94:
// rs2_h2_val == 512, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffe00070007;  op2val:0xfff90200fff92000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffbfffe00070007, 0xfff90200fff92000, x1, 63*XLEN/8, x2)

inst_95:
// rs2_h2_val == 4096, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fff80400;  op2val:0x100100000040006
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffffff9fff80400, 0x100100000040006, x1, 64*XLEN/8, x2)

inst_96:
// rs1_h2_val == -16385, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x07bfffff7f0080;  op2val:0x3fff7fff00800003
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x07bfffff7f0080, 0x3fff7fff00800003, x1, 65*XLEN/8, x2)

inst_97:
// rs2_h2_val == -2, rs1_h3_val == -32768
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff90001fffa;  op2val:0xaaaafffe0040fff6
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x8000fff90001fffa, 0xaaaafffe0040fff6, x1, 66*XLEN/8, x2)

inst_98:
// rs2_h2_val == -3, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20002008008000;  op2val:0x00fffdff7f0006
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x20002008008000, 0x00fffdff7f0006, x1, 67*XLEN/8, x2)

inst_99:
// rs2_h2_val == -65, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70003fffe0002;  op2val:0x100ffbf0040dfff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfff70003fffe0002, 0x100ffbf0040dfff, x1, 68*XLEN/8, x2)

inst_100:
// rs1_h3_val == 2048, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800effffbffffdf;  op2val:0xfff85555fff70006
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x800effffbffffdf, 0xfff85555fff70006, x1, 69*XLEN/8, x2)

inst_101:
// rs2_h2_val == -257, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fefffffe0007;  op2val:0xfff6feff0005fffc
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x8000fefffffe0007, 0xfff6feff0005fffc, x1, 70*XLEN/8, x2)

inst_102:
// rs2_h2_val == -17, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555080020000009;  op2val:0x5555ffef00207fff
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x5555080020000009, 0x5555ffef00207fff, x1, 71*XLEN/8, x2)

inst_103:
// rs1_h2_val == -17, 
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffefffbffffa;  op2val:0x8000fffbefff5555
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0xfffcffefffbffffa, 0x8000fffbefff5555, x1, 72*XLEN/8, x2)

inst_104:
// rs1_h0_val == -32768, rs1_h2_val == -65, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h3_val != rs2_h3_val, rs2_h3_val == -1
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbffff68000;  op2val:0xffff2000dfff0009
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x04ffbffff68000, 0xffff2000dfff0009, x1, 73*XLEN/8, x2)

inst_105:
// rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == 0, rs2_h3_val == -33, rs1_h2_val == 1024, rs1_h1_val == -17, rs2_h1_val == 128
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400ffefffff;  op2val:0xffdffffa00800000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x3fff0400ffefffff, 0xffdffffa00800000, x1, 74*XLEN/8, x2)

inst_106:
// rs1_h0_val == 0, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 2048, rs1_h1_val == 2, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 128, rs1_h3_val == 16384
// opcode: pmhraccsu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000008000020000;  op2val:0x3fff080000800000
TEST_RR_OP(pmhraccsu.h, x31, x30, x29, 0x0000000000000000, 0x4000008000020000, 0x3fff080000800000, x1, 75*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 76*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
