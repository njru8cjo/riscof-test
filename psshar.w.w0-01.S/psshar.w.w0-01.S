
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:47:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p8.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psshar.w.w0 instruction of the RISC-V RV64PZicsr extension for the psshar.w.w0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psshar.w.w0)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs2 == rd != rs1, rs1==x26, rs2==x25, rd==x25, rs1_w0_val == -2147483648, rs2_w0_val == 4, rs1_w1_val == 512, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 1024, rs1_w1_val != rs2_w1_val
// opcode: psshar.w.w0 ; op1:x26; op2:x25; dest:x25; op1val:0x00020080000000;  op2val:0x00040000000004
TEST_RR_OP(psshar.w.w0, x25, x26, x25, 0x0000000000000000, 0x00020080000000, 0x00040000000004, x3, 0*XLEN/8, x4)

inst_1:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_w0_val == -1, rs1_w1_val == -2147483648, rs2_w1_val == 33554432, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -262145
// opcode: psshar.w.w0 ; op1:x11; op2:x11; dest:x11; op1val:0x80000000ffffffff;  op2val:0x2000000fffbffff
TEST_RR_OP(psshar.w.w0, x11, x11, x11, 0x0000000000000000, 0x80000000ffffffff, 0x2000000fffbffff, x3, 1*XLEN/8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x14, rs1_w0_val == 0, rs2_w1_val == 2147483647, rs2_w0_val == -32769, rs1_w1_val == -65
// opcode: psshar.w.w0 ; op1:x29; op2:x29; dest:x14; op1val:0xffffffbf00000000;  op2val:0x7fffffffffff7fff
TEST_RR_OP(psshar.w.w0, x14, x29, x29, 0x0000000000000000, 0xffffffbf00000000, 0x7fffffffffff7fff, x3, 2*XLEN/8, x4)

inst_3:
// rs1 == rd != rs2, rs1==x2, rs2==x19, rd==x2, rs1_w0_val == 1, rs2_w1_val == -67108865, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 512, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -8388609
// opcode: psshar.w.w0 ; op1:x2; op2:x19; dest:x2; op1val:0xff7fffff00000001;  op2val:0xfbffffff00000200
TEST_RR_OP(psshar.w.w0, x2, x2, x19, 0x0000000000000000, 0xff7fffff00000001, 0xfbffffff00000200, x3, 3*XLEN/8, x4)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x22, rd==x18, rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 32768, rs2_w0_val == -1048577
// opcode: psshar.w.w0 ; op1:x27; op2:x22; dest:x18; op1val:0x0000037fffffff;  op2val:0x008000ffefffff
TEST_RR_OP(psshar.w.w0, x18, x27, x22, 0x0000000000000000, 0x0000037fffffff, 0x008000ffefffff, x3, 4*XLEN/8, x4)

inst_5:
// rs1==x8, rs2==x24, rd==x23, rs1_w0_val == 2, rs1_w1_val == 2147483647, rs1_w1_val == rs2_w1_val
// opcode: psshar.w.w0 ; op1:x8; op2:x24; dest:x23; op1val:0x7fffffff00000002;  op2val:0x7fffffff00000004
TEST_RR_OP(psshar.w.w0, x23, x8, x24, 0x0000000000000000, 0x7fffffff00000002, 0x7fffffff00000004, x3, 5*XLEN/8, x4)

inst_6:
// rs1==x24, rs2==x6, rd==x13, rs1_w0_val == 4, rs1_w1_val == -4097, rs2_w0_val == -257
// opcode: psshar.w.w0 ; op1:x24; op2:x6; dest:x13; op1val:0xffffefff00000004;  op2val:0xfffffff9fffffeff
TEST_RR_OP(psshar.w.w0, x13, x24, x6, 0x0000000000000000, 0xffffefff00000004, 0xfffffff9fffffeff, x3, 6*XLEN/8, x4)

inst_7:
// rs1==x17, rs2==x2, rd==x29, rs1_w0_val == 8, rs2_w1_val == 512, rs2_w0_val == -4097
// opcode: psshar.w.w0 ; op1:x17; op2:x2; dest:x29; op1val:0x00000600000008;  op2val:0x000200ffffefff
TEST_RR_OP(psshar.w.w0, x29, x17, x2, 0x0000000000000000, 0x00000600000008, 0x000200ffffefff, x3, 7*XLEN/8, x4)

inst_8:
// rs1==x18, rs2==x0, rd==x9, rs1_w0_val == 16, rs2_w0_val == -1073741825, rs2_w1_val == 131072
// opcode: psshar.w.w0 ; op1:x18; op2:x0; dest:x9; op1val:0x00000600000010;  op2val:0x020000bfffffff
TEST_RR_OP(psshar.w.w0, x9, x18, x0, 0x0000000000000000, 0x00000600000010, 0x020000bfffffff, x3, 8*XLEN/8, x4)

inst_9:
// rs1==x20, rs2==x18, rd==x24, rs1_w0_val == 32, rs2_w1_val == -33554433, rs1_w1_val == 262144, rs2_w0_val == 2147483647, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: psshar.w.w0 ; op1:x20; op2:x18; dest:x24; op1val:0x04000000000020;  op2val:0xfdffffff7fffffff
TEST_RR_OP(psshar.w.w0, x24, x20, x18, 0x0000000000000000, 0x04000000000020, 0xfdffffff7fffffff, x3, 9*XLEN/8, x4)

inst_10:
// rs1==x13, rs2==x31, rd==x28, rs1_w0_val == 64, rs1_w1_val == -5, rs2_w1_val == -2147483648, rs2_w0_val == 33554432
// opcode: psshar.w.w0 ; op1:x13; op2:x31; dest:x28; op1val:0xfffffffb00000040;  op2val:0x8000000002000000
TEST_RR_OP(psshar.w.w0, x28, x13, x31, 0x0000000000000000, 0xfffffffb00000040, 0x8000000002000000, x3, 10*XLEN/8, x4)

inst_11:
// rs1==x31, rs2==x26, rd==x5, rs1_w0_val == 128, rs2_w1_val == -268435457, rs2_w0_val == -129, rs1_w1_val == 524288
// opcode: psshar.w.w0 ; op1:x31; op2:x26; dest:x5; op1val:0x08000000000080;  op2val:0xefffffffffffff7f
TEST_RR_OP(psshar.w.w0, x5, x31, x26, 0x0000000000000000, 0x08000000000080, 0xefffffffffffff7f, x3, 11*XLEN/8, x4)

inst_12:
// rs1==x19, rs2==x28, rd==x8, rs1_w0_val == 256, rs1_w1_val == 536870912
// opcode: psshar.w.w0 ; op1:x19; op2:x28; dest:x8; op1val:0x2000000000000100;  op2val:0x000005fffffeff
TEST_RR_OP(psshar.w.w0, x8, x19, x28, 0x0000000000000000, 0x2000000000000100, 0x000005fffffeff, x3, 12*XLEN/8, x4)

inst_13:
// rs1==x1, rs2==x9, rd==x6, rs1_w0_val == 512, rs1_w1_val == 67108864, rs2_w0_val == -131073
// opcode: psshar.w.w0 ; op1:x1; op2:x9; dest:x6; op1val:0x400000000000200;  op2val:0xfffffff9fffdffff
TEST_RR_OP(psshar.w.w0, x6, x1, x9, 0x0000000000000000, 0x400000000000200, 0xfffffff9fffdffff, x3, 13*XLEN/8, x4)

inst_14:
// rs1==x23, rs2==x8, rd==x16, rs1_w0_val == 1024, rs2_w0_val == 1048576
// opcode: psshar.w.w0 ; op1:x23; op2:x8; dest:x16; op1val:0x00020000000400;  op2val:0xfffffffc00100000
TEST_RR_OP(psshar.w.w0, x16, x23, x8, 0x0000000000000000, 0x00020000000400, 0xfffffffc00100000, x3, 14*XLEN/8, x4)

inst_15:
// rs1==x7, rs2==x15, rd==x31, rs1_w0_val == 2048, rs2_w1_val == 32, rs2_w0_val == -134217729
// opcode: psshar.w.w0 ; op1:x7; op2:x15; dest:x31; op1val:0xfffffffb00000800;  op2val:0x000020f7ffffff
TEST_RR_OP(psshar.w.w0, x31, x7, x15, 0x0000000000000000, 0xfffffffb00000800, 0x000020f7ffffff, x3, 15*XLEN/8, x4)

inst_16:
// rs1==x4, rs2==x14, rd==x30, rs1_w0_val == 4096, rs2_w1_val == -5, rs2_w0_val == 131072, rs1_w1_val == 1073741824
// opcode: psshar.w.w0 ; op1:x4; op2:x14; dest:x30; op1val:0x4000000000001000;  op2val:0xfffffffb00020000
TEST_RR_OP(psshar.w.w0, x30, x4, x14, 0x0000000000000000, 0x4000000000001000, 0xfffffffb00020000, x3, 16*XLEN/8, x8)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x9, rs2==x13, rd==x19, rs1_w0_val == 8192, rs2_w1_val == -4194305, rs1_w1_val == -129
// opcode: psshar.w.w0 ; op1:x9; op2:x13; dest:x19; op1val:0xffffff7f00002000;  op2val:0xffbffffffffffff8
TEST_RR_OP(psshar.w.w0, x19, x9, x13, 0x0000000000000000, 0xffffff7f00002000, 0xffbffffffffffff8, x2, 0*XLEN/8, x8)

inst_18:
// rs1==x10, rs2==x12, rd==x21, rs1_w0_val == 16384, rs2_w0_val == 268435456, rs1_w1_val == 2048, rs2_w1_val == -65
// opcode: psshar.w.w0 ; op1:x10; op2:x12; dest:x21; op1val:0x00080000004000;  op2val:0xffffffbf10000000
TEST_RR_OP(psshar.w.w0, x21, x10, x12, 0x0000000000000000, 0x00080000004000, 0xffffffbf10000000, x2, 1*XLEN/8, x8)

inst_19:
// rs1==x22, rs2==x27, rd==x0, rs1_w0_val == 32768, rs2_w0_val == 64, rs2_w1_val == 1048576
// opcode: psshar.w.w0 ; op1:x22; op2:x27; dest:x0; op1val:0xfffffff900008000;  op2val:0x10000000000040
TEST_RR_OP(psshar.w.w0, x0, x22, x27, 0x0000000000000000, 0xfffffff900008000, 0x10000000000040, x2, 2*XLEN/8, x8)

inst_20:
// rs1==x5, rs2==x3, rd==x1, rs1_w0_val == 65536, rs1_w1_val == 1048576
// opcode: psshar.w.w0 ; op1:x5; op2:x3; dest:x1; op1val:0x10000000010000;  op2val:0x000200fffffff6
TEST_RR_OP(psshar.w.w0, x1, x5, x3, 0x0000000000000000, 0x10000000010000, 0x000200fffffff6, x2, 3*XLEN/8, x8)

inst_21:
// rs1==x28, rs2==x21, rd==x3, rs1_w0_val == 131072, rs1_w1_val == -3, rs2_w1_val == 1431655765
// opcode: psshar.w.w0 ; op1:x28; op2:x21; dest:x3; op1val:0xfffffffd00020000;  op2val:0x55555555fffffeff
TEST_RR_OP(psshar.w.w0, x3, x28, x21, 0x0000000000000000, 0xfffffffd00020000, 0x55555555fffffeff, x2, 4*XLEN/8, x8)

inst_22:
// rs1==x16, rs2==x20, rd==x7, rs1_w0_val == 262144, rs1_w1_val == -1025, rs2_w1_val == -1025
// opcode: psshar.w.w0 ; op1:x16; op2:x20; dest:x7; op1val:0xfffffbff00040000;  op2val:0xfffffbff00000004
TEST_RR_OP(psshar.w.w0, x7, x16, x20, 0x0000000000000000, 0xfffffbff00040000, 0xfffffbff00000004, x2, 5*XLEN/8, x8)

inst_23:
// rs1==x25, rs2==x5, rd==x15, rs1_w0_val == 524288, rs1_w1_val == -262145, rs2_w1_val == -1
// opcode: psshar.w.w0 ; op1:x25; op2:x5; dest:x15; op1val:0xfffbffff00080000;  op2val:0xfffffffffffffff6
TEST_RR_OP(psshar.w.w0, x15, x25, x5, 0x0000000000000000, 0xfffbffff00080000, 0xfffffffffffffff6, x2, 6*XLEN/8, x8)

inst_24:
// rs1==x3, rs2==x10, rd==x17, rs1_w0_val == 1048576, rs1_w1_val == 1024, rs2_w0_val == 2
// opcode: psshar.w.w0 ; op1:x3; op2:x10; dest:x17; op1val:0x00040000100000;  op2val:0x00020000000002
TEST_RR_OP(psshar.w.w0, x17, x3, x10, 0x0000000000000000, 0x00040000100000, 0x00020000000002, x2, 7*XLEN/8, x8)

inst_25:
// rs1==x15, rs2==x23, rd==x20, rs1_w0_val == 2097152, rs2_w0_val == -4194305
// opcode: psshar.w.w0 ; op1:x15; op2:x23; dest:x20; op1val:0x00020000200000;  op2val:0x000007ffbfffff
TEST_RR_OP(psshar.w.w0, x20, x15, x23, 0x0000000000000000, 0x00020000200000, 0x000007ffbfffff, x2, 8*XLEN/8, x8)

inst_26:
// rs1==x12, rs2==x16, rd==x27, rs1_w0_val == 4194304, rs2_w0_val == 32768, rs2_w1_val == 64
// opcode: psshar.w.w0 ; op1:x12; op2:x16; dest:x27; op1val:0xffffffbf00400000;  op2val:0x00004000008000
TEST_RR_OP(psshar.w.w0, x27, x12, x16, 0x0000000000000000, 0xffffffbf00400000, 0x00004000008000, x2, 9*XLEN/8, x8)

inst_27:
// rs1==x21, rs2==x17, rd==x12, rs1_w0_val == 8388608, rs1_w1_val == -8193, rs2_w1_val == -32769, rs2_w0_val == 134217728
// opcode: psshar.w.w0 ; op1:x21; op2:x17; dest:x12; op1val:0xffffdfff00800000;  op2val:0xffff7fff08000000
TEST_RR_OP(psshar.w.w0, x12, x21, x17, 0x0000000000000000, 0xffffdfff00800000, 0xffff7fff08000000, x2, 10*XLEN/8, x8)

inst_28:
// rs1==x14, rs2==x4, rd==x22, rs1_w0_val == 16777216, rs1_w1_val == 4, rs2_w0_val == 1, rs2_w1_val == 8388608
// opcode: psshar.w.w0 ; op1:x14; op2:x4; dest:x22; op1val:0x00000401000000;  op2val:0x80000000000001
TEST_RR_OP(psshar.w.w0, x22, x14, x4, 0x0000000000000000, 0x00000401000000, 0x80000000000001, x2, 11*XLEN/8, x8)

inst_29:
// rs1==x30, rs2==x7, rd==x26, rs1_w0_val == 33554432, rs1_w1_val == 16384
// opcode: psshar.w.w0 ; op1:x30; op2:x7; dest:x26; op1val:0x00400002000000;  op2val:0x000009ffbfffff
TEST_RR_OP(psshar.w.w0, x26, x30, x7, 0x0000000000000000, 0x00400002000000, 0x000009ffbfffff, x2, 12*XLEN/8, x8)

inst_30:
// rs1==x6, rs2==x1, rd==x4, rs1_w0_val == 67108864, rs2_w1_val == 536870912, rs1_w1_val == 8192
// opcode: psshar.w.w0 ; op1:x6; op2:x1; dest:x4; op1val:0x00200004000000;  op2val:0x20000000ffffff7f
TEST_RR_OP(psshar.w.w0, x4, x6, x1, 0x0000000000000000, 0x00200004000000, 0x20000000ffffff7f, x2, 13*XLEN/8, x8)

inst_31:
// rs1==x0, rs2==x30, rd==x10, rs1_w0_val == 134217728, rs1_w1_val == -17, rs2_w0_val == -513
// opcode: psshar.w.w0 ; op1:x0; op2:x30; dest:x10; op1val:0xffffffef08000000;  op2val:0xfffffbfffffffdff
TEST_RR_OP(psshar.w.w0, x10, x0, x30, 0x0000000000000000, 0xffffffef08000000, 0xfffffbfffffffdff, x2, 14*XLEN/8, x8)

inst_32:
// rs1_w0_val == 268435456, rs2_w1_val == 2097152, rs1_w1_val == 128
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00008010000000;  op2val:0x200000ffffff7f
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00008010000000, 0x200000ffffff7f, x2, 15*XLEN/8, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff20000000;  op2val:0x80000000ffff7fff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffefff20000000, 0x80000000ffff7fff, x1, 0*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs1_w1_val == -1048577
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff40000000;  op2val:0xffffffbfffbfffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffefffff40000000, 0xffffffbfffbfffff, x1, 1*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w1_val == 134217728, rs2_w1_val == 4096
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffe;  op2val:0x001000ffff7fff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffe, 0x001000ffff7fff, x1, 2*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w0_val == 16
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffd;  op2val:0xfffffffb00000010
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffd, 0xfffffffb00000010, x1, 3*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == -33554433
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffb;  op2val:0x20000000000007
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffb, 0x20000000000007, x1, 4*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w1_val == -262145, rs1_w1_val == -268435457
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffff7;  op2val:0xfffbfffffffffdff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffff7, 0xfffbfffffffffdff, x1, 5*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs2_w1_val == 2048
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffef;  op2val:0x000800fffffff6
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffef, 0x000800fffffff6, x1, 6*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs1_w1_val == -131073, rs2_w0_val == 4194304
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffdf;  op2val:0x00000700400000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffdf, 0x00000700400000, x1, 7*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs2_w1_val == 16
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffbf;  op2val:0x000010fffffff9
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffbf, 0x000010fffffff9, x1, 8*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs2_w0_val == 536870912
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffff7f;  op2val:0x00000920000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000003ffffff7f, 0x00000920000000, x1, 9*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs2_w0_val == 16384
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffeff;  op2val:0xffbfffff00004000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffeff, 0xffbfffff00004000, x1, 10*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs2_w1_val == 262144, rs2_w0_val == -65537
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffdff;  op2val:0x040000fffeffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffdff, 0x040000fffeffff, x1, 11*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs2_w0_val == 1431655765
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffbff;  op2val:0x00040055555555
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffbff, 0x00040055555555, x1, 12*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs2_w1_val == -513, rs2_w0_val == -1431655766
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffff7ff;  op2val:0xfffffdffaaaaaaaa
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffff7ff, 0xfffffdffaaaaaaaa, x1, 13*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs1_w1_val == 2097152
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffefff;  op2val:0xfffffdffc0000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x200000ffffefff, 0xfffffdffc0000000, x1, 14*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs1_w1_val == 8
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffdfff;  op2val:0x020000ffbfffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000008ffffdfff, 0x020000ffbfffff, x1, 15*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, rs2_w0_val == 2048
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffbfff;  op2val:0x00080000000800
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffbfff, 0x00080000000800, x1, 16*XLEN/8, x2)

inst_50:
// rs1_w0_val == -32769, rs2_w1_val == -4097, rs2_w0_val == 1024
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffff7fff;  op2val:0xffffefff00000400
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffefffff7fff, 0xffffefff00000400, x1, 17*XLEN/8, x2)

inst_51:
// rs1_w0_val == -65537, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffeffff;  op2val:0xfffbfffffffffeff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xeffffffffffeffff, 0xfffbfffffffffeff, x1, 18*XLEN/8, x2)

inst_52:
// rs2_w1_val == -131073, rs2_w0_val == -2049
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffffffbf;  op2val:0xfffdfffffffff7ff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x002000ffffffbf, 0xfffdfffffffff7ff, x1, 19*XLEN/8, x2)

inst_53:
// rs2_w1_val == -524289, rs2_w0_val == 0, rs1_w1_val == -1073741825
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000800;  op2val:0xfff7ffff00000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000800, 0xfff7ffff00000000, x1, 20*XLEN/8, x2)

inst_54:
// rs2_w1_val == -1048577, rs2_w0_val == 8192
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef08000000;  op2val:0xffefffff00002000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffef08000000, 0xffefffff00002000, x1, 21*XLEN/8, x2)

inst_55:
// rs2_w1_val == -2097153, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffff6;  op2val:0xffdfffff00000007
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff6, 0xffdfffff00000007, x1, 22*XLEN/8, x2)

inst_56:
// rs2_w1_val == -8388609, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffdfff;  op2val:0xff7fffff3fffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffdfff, 0xff7fffff3fffffff, x1, 23*XLEN/8, x2)

inst_57:
// rs2_w1_val == -16777217, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000400;  op2val:0xfefffffffffffffc
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xc000000000000400, 0xfefffffffffffffc, x1, 24*XLEN/8, x2)

inst_58:
// rs2_w1_val == -134217729, rs1_w1_val == -16385
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff02000000;  op2val:0xf7ffffff00000200
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffbfff02000000, 0xf7ffffff00000200, x1, 25*XLEN/8, x2)

inst_59:
// rs2_w1_val == -536870913, rs1_w1_val == 4096, rs2_w0_val == -5
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff8;  op2val:0xdffffffffffffffb
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x001000fffffff8, 0xdffffffffffffffb, x1, 26*XLEN/8, x2)

inst_60:
// rs2_w1_val == -1073741825, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x04000004000000;  op2val:0xbfffffff00000010
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x04000004000000, 0xbfffffff00000010, x1, 27*XLEN/8, x2)

inst_61:
// rs2_w1_val == -1431655766, rs2_w0_val == 2097152, rs1_w1_val == 32
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff8;  op2val:0xaaaaaaaa00200000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000020fffffff8, 0xaaaaaaaa00200000, x1, 28*XLEN/8, x2)

inst_62:
// rs1_w0_val == rs2_w0_val, rs2_w0_val == -1025, rs2_w1_val == -2
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffbff;  op2val:0xfffffffefffffbff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffbff, 0xfffffffefffffbff, x1, 29*XLEN/8, x2)

inst_63:
// rs1_w0_val == -131073, rs2_w1_val == -3, rs1_w1_val == 8388608
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffdffff;  op2val:0xfffffffdfffffeff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x800000fffdffff, 0xfffffffdfffffeff, x1, 30*XLEN/8, x2)

inst_64:
// rs1_w0_val == -262145, rs2_w0_val == -33, rs2_w1_val == -8193
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffbffff;  op2val:0xffffdfffffffffdf
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x080000fffbffff, 0xffffdfffffffffdf, x1, 31*XLEN/8, x2)

inst_65:
// rs1_w0_val == -524289, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffff7ffff;  op2val:0xf7ffffff20000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffff7ffff7ffff, 0xf7ffffff20000000, x1, 32*XLEN/8, x2)

inst_66:
// rs1_w0_val == -1048577, rs2_w0_val == -8388609, rs2_w1_val == 524288
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffefffff;  op2val:0x080000ff7fffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffaffefffff, 0x080000ff7fffff, x1, 33*XLEN/8, x2)

inst_67:
// rs1_w0_val == -2097153, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ffdfffff;  op2val:0xfffffff6fffffffc
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xc0000000ffdfffff, 0xfffffff6fffffffc, x1, 34*XLEN/8, x2)

inst_68:
// rs1_w0_val == -4194305, rs2_w0_val == -524289, rs1_w1_val == 32768
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffbfffff;  op2val:0x008000fff7ffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x008000ffbfffff, 0x008000fff7ffff, x1, 35*XLEN/8, x2)

inst_69:
// rs1_w0_val == -8388609, rs2_w1_val == 16777216, rs2_w0_val == 67108864, rs1_w1_val == -2
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeff7fffff;  op2val:0x100000004000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffeff7fffff, 0x100000004000000, x1, 36*XLEN/8, x2)

inst_70:
// rs1_w0_val == -16777217, rs1_w1_val == -134217729, rs2_w0_val == 128, rs2_w1_val == 1073741824
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffeffffff;  op2val:0x4000000000000080
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xf7fffffffeffffff, 0x4000000000000080, x1, 37*XLEN/8, x2)

inst_71:
// rs1_w0_val == -33554433, rs2_w0_val == 256, rs1_w1_val == 1431655765
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fdffffff;  op2val:0x00100000000100
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x55555555fdffffff, 0x00100000000100, x1, 38*XLEN/8, x2)

inst_72:
// rs1_w0_val == -67108865, rs2_w1_val == -17
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fbffffff;  op2val:0xffffffefffffefff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000020fbffffff, 0xffffffefffffefff, x1, 39*XLEN/8, x2)

inst_73:
// rs1_w0_val == -134217729, rs2_w0_val == -33554433
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaf7ffffff;  op2val:0xaaaaaaaafdffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffaf7ffffff, 0xaaaaaaaafdffffff, x1, 40*XLEN/8, x2)

inst_74:
// rs1_w0_val == -268435457, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000003efffffff;  op2val:0xfffffffafffffff9
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000003efffffff, 0xfffffffafffffff9, x1, 41*XLEN/8, x2)

inst_75:
// rs1_w0_val == -536870913, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffdfffffff;  op2val:0xfffffff600000003
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xefffffffdfffffff, 0xfffffff600000003, x1, 42*XLEN/8, x2)

inst_76:
// rs1_w0_val == -1073741825, rs1_w1_val == 2
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000002bfffffff;  op2val:0xfffffbfffffffffb
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000002bfffffff, 0xfffffbfffffffffb, x1, 43*XLEN/8, x2)

inst_77:
// rs1_w0_val == 1431655765, rs2_w1_val == 8192
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000855555555;  op2val:0x00200002000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000855555555, 0x00200002000000, x1, 44*XLEN/8, x2)

inst_78:
// rs1_w0_val == -1431655766, rs1_w1_val == 65536, rs2_w1_val == 1
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x010000aaaaaaaa;  op2val:0x00000100400000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x010000aaaaaaaa, 0x00000100400000, x1, 45*XLEN/8, x2)

inst_79:
// rs1_w1_val == -1, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0x00002000004000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0x00002000004000, x1, 46*XLEN/8, x2)

inst_80:
// rs1_w1_val == 0, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000000f7ffffff;  op2val:0x100000000004000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000000f7ffffff, 0x100000000004000, x1, 47*XLEN/8, x2)

inst_81:
// rs1_w1_val == 1, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000002;  op2val:0x00002000000800
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000100000002, 0x00002000000800, x1, 48*XLEN/8, x2)

inst_82:
// rs1_w1_val == 16, rs2_w0_val == 16777216
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffbffff;  op2val:0x2000000001000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000010fffbffff, 0x2000000001000000, x1, 49*XLEN/8, x2)

inst_83:
// rs1_w1_val == -67108865, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff55555555;  op2val:0x200000fffeffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfbffffff55555555, 0x200000fffeffff, x1, 50*XLEN/8, x2)

inst_84:
// rs1_w1_val == -536870913, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff9;  op2val:0x2000000fffbffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff9, 0x2000000fffbffff, x1, 51*XLEN/8, x2)

inst_85:
// rs2_w1_val == -65537, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000006;  op2val:0xfffeffff00020000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x8000000000000006, 0xfffeffff00020000, x1, 52*XLEN/8, x2)

inst_86:
// rs1_w1_val == -1431655766, rs2_w0_val == -2
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x000020fffffffe
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x000020fffffffe, x1, 53*XLEN/8, x2)

inst_87:
// rs2_w0_val == -2147483648, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000008;  op2val:0x4000000080000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x80000000000008, 0x4000000080000000, x1, 54*XLEN/8, x2)

inst_88:
// rs2_w0_val == -1, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000100;  op2val:0xfeffffffffffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00040000000100, 0xfeffffffffffffff, x1, 55*XLEN/8, x2)

inst_89:
// rs2_w0_val == 8, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffef;  op2val:0x00001000000008
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffef, 0x00001000000008, x1, 56*XLEN/8, x2)

inst_90:
// rs2_w0_val == 32, rs1_w1_val == -65537
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00004000;  op2val:0xffdfffff00000020
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffeffff00004000, 0xffdfffff00000020, x1, 57*XLEN/8, x2)

inst_91:
// rs2_w0_val == 4096, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000007;  op2val:0x5555555500001000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffef00000007, 0x5555555500001000, x1, 58*XLEN/8, x2)

inst_92:
// rs2_w0_val == 65536, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00010000;  op2val:0xaaaaaaaa00010000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffeffff00010000, 0xaaaaaaaa00010000, x1, 59*XLEN/8, x2)

inst_93:
// rs2_w0_val == 262144, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffff7ff;  op2val:0xdfffffff00040000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000001fffff7ff, 0xdfffffff00040000, x1, 60*XLEN/8, x2)

inst_94:
// rs2_w0_val == 524288, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffa;  op2val:0xf7ffffff00080000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffa, 0xf7ffffff00080000, x1, 61*XLEN/8, x2)

inst_95:
// rs2_w0_val == 8388608, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffdff;  op2val:0x80000000800000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffdff, 0x80000000800000, x1, 62*XLEN/8, x2)

inst_96:
// rs2_w0_val == 1073741824, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffff7ff;  op2val:0xffdfffff40000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xeffffffffffff7ff, 0xffdfffff40000000, x1, 63*XLEN/8, x2)

inst_97:
// rs2_w0_val == -3, rs1_w1_val == -513
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff40000000;  op2val:0xfffbfffffffffffd
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffdff40000000, 0xfffbfffffffffffd, x1, 64*XLEN/8, x2)

inst_98:
// rs2_w0_val == -9, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00008000;  op2val:0x200000fffffff7
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffefffff00008000, 0x200000fffffff7, x1, 65*XLEN/8, x2)

inst_99:
// rs2_w0_val == -17, rs1_w1_val == 33554432
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000009;  op2val:0x200000ffffffef
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x200000000000009, 0x200000ffffffef, x1, 66*XLEN/8, x2)

inst_100:
// rs2_w0_val == -65, rs1_w1_val == 131072, rs2_w1_val == 2
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffff7ff;  op2val:0x000002ffffffbf
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x020000fffff7ff, 0x000002ffffffbf, x1, 67*XLEN/8, x2)

inst_101:
// rs2_w0_val == -8193, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffdffffff;  op2val:0x000003ffffdfff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xbffffffffdffffff, 0x000003ffffdfff, x1, 68*XLEN/8, x2)

inst_102:
// rs2_w0_val == -16385, rs2_w1_val == 256
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000010;  op2val:0x000100ffffbfff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffff00000010, 0x000100ffffbfff, x1, 69*XLEN/8, x2)

inst_103:
// rs2_w0_val == -2097153, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000810000000;  op2val:0xfffffdffffdfffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000810000000, 0xfffffdffffdfffff, x1, 70*XLEN/8, x2)

inst_104:
// rs2_w0_val == -16777217, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500200000;  op2val:0x008000feffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000500200000, 0x008000feffffff, x1, 71*XLEN/8, x2)

inst_105:
// rs2_w0_val == -67108865, rs2_w1_val == 67108864
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000003;  op2val:0x4000000fbffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000003, 0x4000000fbffffff, x1, 72*XLEN/8, x2)

inst_106:
// rs2_w0_val == -268435457, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00040000;  op2val:0xffdfffffefffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffff7f00040000, 0xffdfffffefffffff, x1, 73*XLEN/8, x2)

inst_107:
// rs2_w0_val == -536870913, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fbffffff;  op2val:0x020000dfffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xc0000000fbffffff, 0x020000dfffffff, x1, 74*XLEN/8, x2)

inst_108:
// rs1_w1_val == 64, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffffb;  op2val:0x00002000000040
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x000040fffffffb, 0x00002000000040, x1, 75*XLEN/8, x2)

inst_109:
// rs2_w1_val == 0, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000010;  op2val:0x000000ffffdfff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x02000000000010, 0x000000ffffdfff, x1, 76*XLEN/8, x2)

inst_110:
// rs1_w1_val == 256, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00010040000000;  op2val:0x000200efffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00010040000000, 0x000200efffffff, x1, 77*XLEN/8, x2)

inst_111:
// rs2_w1_val == 4, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000080000;  op2val:0x00000404000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00010000080000, 0x00000404000000, x1, 78*XLEN/8, x2)

inst_112:
// rs2_w1_val == 8, rs1_w1_val == -2049
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00080000;  op2val:0x000008ffffefff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00080000, 0x000008ffffefff, x1, 79*XLEN/8, x2)

inst_113:
// rs2_w1_val == 128, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x20000040000000;  op2val:0x0000807fffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x20000040000000, 0x0000807fffffff, x1, 80*XLEN/8, x2)

inst_114:
// rs1_w1_val == 4194304, rs2_w1_val == -2049
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x400000f7ffffff;  op2val:0xfffff7fffffffff8
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x400000f7ffffff, 0xfffff7fffffffff8, x1, 81*XLEN/8, x2)

inst_115:
// rs2_w1_val == 16384, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000040;  op2val:0x004000ffffffef
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000100000040, 0x004000ffffffef, x1, 82*XLEN/8, x2)

inst_116:
// rs1_w1_val == 16777216, rs2_w1_val == -129
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x100000055555555;  op2val:0xffffff7f00002000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x100000055555555, 0xffffff7f00002000, x1, 83*XLEN/8, x2)

inst_117:
// rs2_w1_val == 65536, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffdfffff;  op2val:0x010000fffeffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x004000ffdfffff, 0x010000fffeffff, x1, 84*XLEN/8, x2)

inst_118:
// rs1_w1_val == 268435456, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000001000000;  op2val:0x04000000000004
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x1000000001000000, 0x04000000000004, x1, 85*XLEN/8, x2)

inst_119:
// rs2_w1_val == 4194304, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000100000;  op2val:0x40000000002000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x400000000100000, 0x40000000002000, x1, 86*XLEN/8, x2)

inst_120:
// rs1_w1_val == -9, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7efffffff;  op2val:0xfffeffffffffbfff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff7efffffff, 0xfffeffffffffbfff, x1, 87*XLEN/8, x2)

inst_121:
// rs2_w1_val == 134217728, rs1_w1_val == -32769
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000000;  op2val:0x8000000dfffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000000, 0x8000000dfffffff, x1, 88*XLEN/8, x2)

inst_122:
// rs1_w1_val == -33, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf3fffffff;  op2val:0xc0000000ffffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffdf3fffffff, 0xc0000000ffffffff, x1, 89*XLEN/8, x2)

inst_123:
// rs2_w1_val == 268435456, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000020;  op2val:0x10000000ffdfffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000020, 0x10000000ffdfffff, x1, 90*XLEN/8, x2)

inst_124:
// rs1_w1_val == -257, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000005;  op2val:0xfffffffd00000040
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000005, 0xfffffffd00000040, x1, 91*XLEN/8, x2)

inst_125:
// rs2_w1_val == -9, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000004000;  op2val:0xfffffff700000040
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00100000004000, 0xfffffff700000040, x1, 92*XLEN/8, x2)

inst_126:
// rs2_w1_val == -33, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000009;  op2val:0xffffffdf00004000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffefffff00000009, 0xffffffdf00004000, x1, 93*XLEN/8, x2)

inst_127:
// rs2_w1_val == -257, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ffefffff;  op2val:0xfffffeff01000000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xc0000000ffefffff, 0xfffffeff01000000, x1, 94*XLEN/8, x2)

inst_128:
// rs1_w1_val == -4194305, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffbf;  op2val:0xffffffbffffffff6
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffbf, 0xffffffbffffffff6, x1, 95*XLEN/8, x2)

inst_129:
// rs1_w1_val == -524289, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000800;  op2val:0xfffffefffffffdff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000800, 0xfffffefffffffdff, x1, 96*XLEN/8, x2)

inst_130:
// rs1_w1_val == -2097153, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffff7fff;  op2val:0x00000900000009
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xffdfffffffff7fff, 0x00000900000009, x1, 97*XLEN/8, x2)

inst_131:
// rs2_w1_val == -16385, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ff7fffff;  op2val:0xffffbfffffff7fff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x20000000ff7fffff, 0xffffbfffffff7fff, x1, 98*XLEN/8, x2)

inst_132:
// rs1_w1_val == -16777217, 
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff20000000;  op2val:0x4000000000080000
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfeffffff20000000, 0x4000000000080000, x1, 99*XLEN/8, x2)

inst_133:
// rs1_w0_val == -1, rs1_w1_val == -2147483648, rs2_w1_val == 33554432, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -262145
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffffff;  op2val:0x2000000fffbffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x80000000ffffffff, 0x2000000fffbffff, x1, 100*XLEN/8, x2)

inst_134:
// rs1_w0_val == 16, rs2_w0_val == -1073741825, rs2_w1_val == 131072
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000010;  op2val:0x020000bfffffff
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000600000010, 0x020000bfffffff, x1, 101*XLEN/8, x2)

inst_135:
// rs1_w0_val == 32768, rs2_w0_val == 64, rs2_w1_val == 1048576
// opcode: psshar.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900008000;  op2val:0x10000000000040
TEST_RR_OP(psshar.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff900008000, 0x10000000000040, x1, 102*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 103*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
