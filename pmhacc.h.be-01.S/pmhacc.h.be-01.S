
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhacc.h.be instruction of the RISC-V RV64PZicsr extension for the pmhacc.h.be covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhacc.h.be)

RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x2, rd==x2, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == 4096, rs1_h1_val != rs2_h1_val, rs1_h1_val == 64, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -1025, rs1_h2_val != rs2_h2_val, rs2_h3_val == -33, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val != rs2_h3_val, rs1_h2_val == -9
// opcode: pmhacc.h.be ; op1:x30; op2:x2; dest:x2; op1val:0xfffafff700408000;  op2val:0xffdf1000fbfffff7
TEST_RR_OP(pmhacc.h.be, x2, x30, x2, 0x0000000000000000, 0xfffafff700408000, 0xffdf1000fbfffff7, x6, 0*XLEN/8, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x27, rs1_h0_val == -1, rs2_h2_val == 128, rs2_h3_val == 8, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == -65, rs2_h0_val == 8, rs2_h1_val == 16, rs1_h2_val == -5, rs1_h3_val == 16384
// opcode: pmhacc.h.be ; op1:x8; op2:x8; dest:x27; op1val:0x4000fffbffbfffff;  op2val:0x08008000100008
TEST_RR_OP(pmhacc.h.be, x27, x8, x8, 0x0000000000000000, 0x4000fffbffbfffff, 0x08008000100008, x6, 1*XLEN/8, x12)

inst_2:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_h0_val == 0, rs1_h3_val == -5, rs2_h2_val == 512, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 128, rs2_h1_val == 128
// opcode: pmhacc.h.be ; op1:x29; op2:x29; dest:x29; op1val:0xfffb0003fff80000;  op2val:0x06020000800080
TEST_RR_OP(pmhacc.h.be, x29, x29, x29, 0x0000000000000000, 0xfffb0003fff80000, 0x06020000800080, x6, 2*XLEN/8, x12)

inst_3:
// rs1 == rd != rs2, rs1==x20, rs2==x24, rd==x20, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -65, rs2_h2_val == 8, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == 8, rs2_h0_val == 2, rs2_h3_val == 1
// opcode: pmhacc.h.be ; op1:x20; op2:x24; dest:x20; op1val:0x08ffbf00050001;  op2val:0x01000800070002
TEST_RR_OP(pmhacc.h.be, x20, x20, x24, 0x0000000000000000, 0x08ffbf00050001, 0x01000800070002, x6, 3*XLEN/8, x12)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x31, rd==x5, rs1_h0_val == 32767, rs1_h1_val == 21845, rs1_h2_val == 0, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -129, rs2_h0_val == 1024
// opcode: pmhacc.h.be ; op1:x17; op2:x31; dest:x5; op1val:0x06000055557fff;  op2val:0xff7f0080fff80400
TEST_RR_OP(pmhacc.h.be, x5, x17, x31, 0x0000000000000000, 0x06000055557fff, 0xff7f0080fff80400, x6, 4*XLEN/8, x12)

inst_5:
// rs1==x1, rs2==x13, rd==x9, rs1_h0_val == 2, rs1_h2_val == 21845, rs2_h3_val == 4096, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -9, rs2_h0_val == 0, rs2_h1_val == -4097, rs1_h3_val == 16
// opcode: pmhacc.h.be ; op1:x1; op2:x13; dest:x9; op1val:0x10555500060002;  op2val:0x1000fff7efff0000
TEST_RR_OP(pmhacc.h.be, x9, x1, x13, 0x0000000000000000, 0x10555500060002, 0x1000fff7efff0000, x6, 5*XLEN/8, x12)

inst_6:
// rs1==x10, rs2==x15, rd==x11, rs1_h0_val == 4, rs1_h2_val == rs2_h2_val, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val < 0 and rs2_h2_val < 0
// opcode: pmhacc.h.be ; op1:x10; op2:x15; dest:x11; op1val:0x08fff6fff80004;  op2val:0x3ffffff63ffffffc
TEST_RR_OP(pmhacc.h.be, x11, x10, x15, 0x0000000000000000, 0x08fff6fff80004, 0x3ffffff63ffffffc, x6, 6*XLEN/8, x12)

inst_7:
// rs1==x31, rs2==x26, rd==x4, rs1_h0_val == 8, rs2_h0_val == -2049, rs1_h1_val == 1024, rs2_h3_val == -17, rs2_h1_val == 2, rs1_h3_val == 8192, rs2_h2_val == 4
// opcode: pmhacc.h.be ; op1:x31; op2:x26; dest:x4; op1val:0x2000fffa04000008;  op2val:0xffef00040002f7ff
TEST_RR_OP(pmhacc.h.be, x4, x31, x26, 0x0000000000000000, 0x2000fffa04000008, 0xffef00040002f7ff, x6, 7*XLEN/8, x12)

inst_8:
// rs1==x15, rs2==x3, rd==x23, rs1_h0_val == 16, rs2_h0_val == -65, rs1_h3_val == -9, rs2_h2_val == 8192, rs2_h1_val == 1
// opcode: pmhacc.h.be ; op1:x15; op2:x3; dest:x23; op1val:0xfff7fffb00070010;  op2val:0x0620000001ffbf
TEST_RR_OP(pmhacc.h.be, x23, x15, x3, 0x0000000000000000, 0xfff7fffb00070010, 0x0620000001ffbf, x6, 8*XLEN/8, x12)

inst_9:
// rs1==x28, rs2==x20, rd==x22, rs1_h0_val == 32, rs1_h3_val == -129, rs2_h3_val == 128, rs2_h0_val == -129, rs2_h1_val == -1, rs2_h2_val == -2049
// opcode: pmhacc.h.be ; op1:x28; op2:x20; dest:x22; op1val:0xff7f555500090020;  op2val:0x80f7ffffffff7f
TEST_RR_OP(pmhacc.h.be, x22, x28, x20, 0x0000000000000000, 0xff7f555500090020, 0x80f7ffffffff7f, x6, 9*XLEN/8, x12)

inst_10:
// rs1==x2, rs2==x22, rd==x21, rs1_h0_val == 64, rs2_h3_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -21846, rs1_h3_val == -8193, rs2_h2_val == -3
// opcode: pmhacc.h.be ; op1:x2; op2:x22; dest:x21; op1val:0xdfffaaaafffa0040;  op2val:0x7ffffffdeffffff8
TEST_RR_OP(pmhacc.h.be, x21, x2, x22, 0x0000000000000000, 0xdfffaaaafffa0040, 0x7ffffffdeffffff8, x6, 10*XLEN/8, x12)

inst_11:
// rs1==x7, rs2==x25, rd==x30, rs1_h0_val == 128, rs1_h1_val == -4097, rs1_h2_val == -32768, rs2_h3_val == -1025, rs2_h1_val == 8, rs1_h3_val == -2
// opcode: pmhacc.h.be ; op1:x7; op2:x25; dest:x30; op1val:0xfffe8000efff0080;  op2val:0xfbfffff900080003
TEST_RR_OP(pmhacc.h.be, x30, x7, x25, 0x0000000000000000, 0xfffe8000efff0080, 0xfbfffff900080003, x6, 11*XLEN/8, x12)

inst_12:
// rs1==x23, rs2==x21, rd==x31, rs1_h0_val == 256, rs2_h2_val == 64, rs2_h3_val == 64, rs2_h1_val == -32768, rs1_h1_val == -2, rs1_h3_val == 4096
// opcode: pmhacc.h.be ; op1:x23; op2:x21; dest:x31; op1val:0x10005555fffe0100;  op2val:0x40004080003fff
TEST_RR_OP(pmhacc.h.be, x31, x23, x21, 0x0000000000000000, 0x10005555fffe0100, 0x40004080003fff, x6, 12*XLEN/8, x8)

inst_13:
// rs1==x26, rs2==x14, rd==x28, rs1_h0_val == 512, rs1_h1_val == -32768, rs1_h2_val == 32767, rs1_h3_val == 21845, rs2_h0_val == -8193, rs2_h1_val == 32767, rs2_h3_val == -2049
// opcode: pmhacc.h.be ; op1:x26; op2:x14; dest:x28; op1val:0x55557fff80000200;  op2val:0xf7fffff67fffdfff
TEST_RR_OP(pmhacc.h.be, x28, x26, x14, 0x0000000000000000, 0x55557fff80000200, 0xf7fffff67fffdfff, x6, 13*XLEN/8, x8)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_14:
// rs1==x9, rs2==x17, rd==x18, rs1_h0_val == 1024, rs1_h2_val == 8192, rs1_h1_val == 2048, rs2_h0_val == -5, rs2_h1_val == -21846
// opcode: pmhacc.h.be ; op1:x9; op2:x17; dest:x18; op1val:0xfffb200008000400;  op2val:0x03f7ffaaaafffb
TEST_RR_OP(pmhacc.h.be, x18, x9, x17, 0x0000000000000000, 0xfffb200008000400, 0x03f7ffaaaafffb, x2, 0*XLEN/8, x8)

inst_15:
// rs1==x0, rs2==x7, rd==x16, rs1_h0_val == 2048, rs1_h3_val == 256, rs1_h2_val == 64, rs2_h0_val == -17
// opcode: pmhacc.h.be ; op1:x0; op2:x7; dest:x16; op1val:0x1000040fffa0800;  op2val:0xffeff7ff0010ffef
TEST_RR_OP(pmhacc.h.be, x16, x0, x7, 0x0000000000000000, 0x1000040fffa0800, 0xffeff7ff0010ffef, x2, 1*XLEN/8, x8)

inst_16:
// rs1==x25, rs2==x27, rd==x6, rs1_h0_val == 4096, rs2_h0_val == -3, rs2_h1_val == -17, rs1_h1_val == 128, rs1_h3_val == 64, rs1_h2_val == 16384, rs2_h2_val == -21846
// opcode: pmhacc.h.be ; op1:x25; op2:x27; dest:x6; op1val:0x40400000801000;  op2val:0x3fffaaaaffeffffd
TEST_RR_OP(pmhacc.h.be, x6, x25, x27, 0x0000000000000000, 0x40400000801000, 0x3fffaaaaffeffffd, x2, 2*XLEN/8, x8)

inst_17:
// rs1==x6, rs2==x9, rd==x15, rs1_h0_val == 8192, rs2_h2_val == 2048, rs1_h3_val == -33, rs1_h2_val == 2048
// opcode: pmhacc.h.be ; op1:x6; op2:x9; dest:x15; op1val:0xffdf0800fffe2000;  op2val:0x0908000005fff9
TEST_RR_OP(pmhacc.h.be, x15, x6, x9, 0x0000000000000000, 0xffdf0800fffe2000, 0x0908000005fff9, x2, 3*XLEN/8, x8)

inst_18:
// rs1==x12, rs2==x16, rd==x24, rs1_h0_val == 16384, rs2_h3_val == -3, rs2_h0_val == 21845, rs2_h1_val == 16384, rs1_h2_val == 4
// opcode: pmhacc.h.be ; op1:x12; op2:x16; dest:x24; op1val:0xfffc000400804000;  op2val:0xfffd000340005555
TEST_RR_OP(pmhacc.h.be, x24, x12, x16, 0x0000000000000000, 0xfffc000400804000, 0xfffd000340005555, x2, 4*XLEN/8, x8)

inst_19:
// rs1==x3, rs2==x6, rd==x13, rs1_h0_val == -2, rs2_h1_val == -513, rs1_h3_val == -4097, rs2_h0_val == -21846
// opcode: pmhacc.h.be ; op1:x3; op2:x6; dest:x13; op1val:0xeffffff7ffbffffe;  op2val:0x400004fdffaaaa
TEST_RR_OP(pmhacc.h.be, x13, x3, x6, 0x0000000000000000, 0xeffffff7ffbffffe, 0x400004fdffaaaa, x2, 5*XLEN/8, x8)

inst_20:
// rs1==x18, rs2==x5, rd==x26, rs1_h0_val == -3, rs1_h3_val == -513
// opcode: pmhacc.h.be ; op1:x18; op2:x5; dest:x26; op1val:0xfdff00090003fffd;  op2val:0x09fff90005fff6
TEST_RR_OP(pmhacc.h.be, x26, x18, x5, 0x0000000000000000, 0xfdff00090003fffd, 0x09fff90005fff6, x2, 6*XLEN/8, x8)

inst_21:
// rs1==x27, rs2==x10, rd==x7, rs1_h0_val == -5, rs1_h3_val == -257
// opcode: pmhacc.h.be ; op1:x27; op2:x10; dest:x7; op1val:0xfeff0003fff8fffb;  op2val:0xfffafffafffc0080
TEST_RR_OP(pmhacc.h.be, x7, x27, x10, 0x0000000000000000, 0xfeff0003fff8fffb, 0xfffafffafffc0080, x2, 7*XLEN/8, x8)

inst_22:
// rs1==x22, rs2==x4, rd==x0, rs1_h0_val == -9, rs2_h3_val == 32, rs1_h2_val == -1, rs1_h3_val == -21846, rs2_h1_val == -8193, rs2_h0_val == 16, rs1_h1_val == -129
// opcode: pmhacc.h.be ; op1:x22; op2:x4; dest:x0; op1val:0xaaaaffffff7ffff7;  op2val:0x203fffdfff0010
TEST_RR_OP(pmhacc.h.be, x0, x22, x4, 0x0000000000000000, 0xaaaaffffff7ffff7, 0x203fffdfff0010, x2, 8*XLEN/8, x8)

inst_23:
// rs1==x19, rs2==x0, rd==x25, rs1_h0_val == -17, rs2_h0_val == -16385, rs2_h3_val == -8193, rs1_h3_val == 0
// opcode: pmhacc.h.be ; op1:x19; op2:x0; dest:x25; op1val:0x00fffbff7fffef;  op2val:0xdfff20003fffbfff
TEST_RR_OP(pmhacc.h.be, x25, x19, x0, 0x0000000000000000, 0x00fffbff7fffef, 0xdfff20003fffbfff, x2, 9*XLEN/8, x8)

inst_24:
// rs1==x4, rs2==x23, rd==x19, rs1_h0_val == -33, rs2_h0_val == -32768, rs1_h1_val == 512, rs2_h2_val == 0, rs2_h3_val == 0
// opcode: pmhacc.h.be ; op1:x4; op2:x23; dest:x19; op1val:0x09fff90200ffdf;  op2val:0x00000080008000
TEST_RR_OP(pmhacc.h.be, x19, x4, x23, 0x0000000000000000, 0x09fff90200ffdf, 0x00000080008000, x2, 10*XLEN/8, x8)

inst_25:
// rs1==x13, rs2==x19, rd==x1, rs1_h0_val == -65, rs2_h0_val == 1
// opcode: pmhacc.h.be ; op1:x13; op2:x19; dest:x1; op1val:0xdfff20000040ffbf;  op2val:0x010040c0000001
TEST_RR_OP(pmhacc.h.be, x1, x13, x19, 0x0000000000000000, 0xdfff20000040ffbf, 0x010040c0000001, x2, 11*XLEN/8, x8)

inst_26:
// rs1==x14, rs2==x11, rd==x12, rs1_h0_val == -129, rs2_h3_val == 2, rs1_h3_val == -32768, rs2_h1_val == -65, rs1_h1_val == 0
// opcode: pmhacc.h.be ; op1:x14; op2:x11; dest:x12; op1val:0x800080000000ff7f;  op2val:0x020008ffbfffef
TEST_RR_OP(pmhacc.h.be, x12, x14, x11, 0x0000000000000000, 0x800080000000ff7f, 0x020008ffbfffef, x2, 12*XLEN/8, x4)

inst_27:
// rs1==x5, rs2==x30, rd==x3, rs1_h0_val == -257, rs2_h2_val == -32768, rs1_h1_val == -9, rs2_h1_val == -33, rs1_h3_val == 32
// opcode: pmhacc.h.be ; op1:x5; op2:x30; dest:x3; op1val:0x20fffbfff7feff;  op2val:0xfffa8000ffdfbfff
TEST_RR_OP(pmhacc.h.be, x3, x5, x30, 0x0000000000000000, 0x20fffbfff7feff, 0xfffa8000ffdfbfff, x2, 13*XLEN/8, x4)

inst_28:
// rs1==x11, rs2==x28, rd==x8, rs1_h0_val == -513, rs1_h1_val == 2, rs2_h0_val == 16384, rs2_h3_val == -32768, rs2_h1_val == -2049
// opcode: pmhacc.h.be ; op1:x11; op2:x28; dest:x8; op1val:0xff7f00040002fdff;  op2val:0x8000fff8f7ff4000
TEST_RR_OP(pmhacc.h.be, x8, x11, x28, 0x0000000000000000, 0xff7f00040002fdff, 0x8000fff8f7ff4000, x2, 14*XLEN/8, x4)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_29:
// rs1==x24, rs2==x1, rd==x17, rs1_h0_val == -1025, rs1_h2_val == -8193
// opcode: pmhacc.h.be ; op1:x24; op2:x1; dest:x17; op1val:0x1000dfff5555fbff;  op2val:0xfffafffd00030006
TEST_RR_OP(pmhacc.h.be, x17, x24, x1, 0x0000000000000000, 0x1000dfff5555fbff, 0xfffafffd00030006, x2, 0*XLEN/8, x4)

inst_30:
// rs1==x16, rs2==x12, rd==x14, rs1_h0_val == -2049, rs1_h3_val == -16385, rs1_h2_val == -2049
// opcode: pmhacc.h.be ; op1:x16; op2:x12; dest:x14; op1val:0xbffff7ff0007f7ff;  op2val:0xffef00080009fff8
TEST_RR_OP(pmhacc.h.be, x14, x16, x12, 0x0000000000000000, 0xbffff7ff0007f7ff, 0xffef00080009fff8, x2, 1*XLEN/8, x4)

inst_31:
// rs1==x21, rs2==x18, rd==x10, rs1_h0_val == -4097, rs2_h1_val == 21845
// opcode: pmhacc.h.be ; op1:x21; op2:x18; dest:x10; op1val:0x0300060006efff;  op2val:0xfffc000855550008
TEST_RR_OP(pmhacc.h.be, x10, x21, x18, 0x0000000000000000, 0x0300060006efff, 0xfffc000855550008, x2, 2*XLEN/8, x4)

inst_32:
// rs1_h0_val == -8193, rs2_h2_val == 2, rs1_h1_val == 4, rs2_h1_val == 32, rs1_h3_val == rs2_h3_val
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x003fff0004dfff;  op2val:0x00000200203fff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x003fff0004dfff, 0x00000200203fff, x2, 3*XLEN/8, x4)

inst_33:
// rs1_h0_val == -16385, rs2_h2_val == 32767, rs1_h2_val == -17
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffefefffbfff;  op2val:0xfbff7ffffffadfff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xdfffffefefffbfff, 0xfbff7ffffffadfff, x2, 4*XLEN/8, x4)

inst_34:
// rs1_h0_val == 21845, rs2_h0_val == 8192, rs2_h3_val == 4, rs1_h3_val == 32767, rs1_h2_val == 128, rs1_h1_val == -17
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0080ffef5555;  op2val:0x04aaaafffa2000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff0080ffef5555, 0x04aaaafffa2000, x2, 5*XLEN/8, x4)

inst_35:
// rs1_h0_val == -21846, rs2_h3_val == -16385, rs1_h2_val == 8
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000080007aaaa;  op2val:0xbfff0800ffbf0400
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x10000080007aaaa, 0xbfff0800ffbf0400, x2, 6*XLEN/8, x4)

inst_36:
// rs2_h3_val == 16, rs2_h0_val == -2, rs1_h1_val == 4096
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000610000800;  op2val:0x100008f7fffffe
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xff7f000610000800, 0x100008f7fffffe, x2, 7*XLEN/8, x4)

inst_37:
// rs2_h3_val == 256, rs2_h0_val == -1025
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000080fffa1000;  op2val:0x1000006ffdffbff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x10000080fffa1000, 0x1000006ffdffbff, x2, 8*XLEN/8, x4)

inst_38:
// rs2_h3_val == 512, rs1_h1_val == -513, rs1_h2_val == -33, rs2_h1_val == -9, rs1_h3_val == -2049, rs2_h2_val == -5, rs2_h0_val == 2048
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdffdffdfff;  op2val:0x200fffbfff70800
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xf7ffffdffdffdfff, 0x200fffbfff70800, x2, 9*XLEN/8, x4)

inst_39:
// rs2_h3_val == 1024, rs2_h0_val == -257, rs1_h2_val == 2
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x030002c000fdff;  op2val:0x400fffd0009feff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x030002c000fdff, 0x400fffd0009feff, x2, 10*XLEN/8, x4)

inst_40:
// rs2_h3_val == 2048, rs1_h1_val == -1025, rs2_h2_val == 32
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200000fbff8000;  op2val:0x8000020ffdffffc
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x200000fbff8000, 0x8000020ffdffffc, x2, 11*XLEN/8, x4)

inst_41:
// rs2_h3_val == 8192, rs1_h3_val == 512, rs2_h1_val == -129
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200c0000005f7ff;  op2val:0x20008000ff7ffffa
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x200c0000005f7ff, 0x20008000ff7ffffa, x2, 12*XLEN/8, x4)

inst_42:
// rs2_h3_val == 16384, rs2_h2_val == -65
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200040003fffffef;  op2val:0x4000ffbf00100002
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x200040003fffffef, 0x4000ffbf00100002, x2, 13*XLEN/8, x4)

inst_43:
// rs2_h3_val == -2, rs1_h1_val == -5, rs1_h2_val == -2
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100fffefffbfff6;  op2val:0xfffe000600200002
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x100fffefffbfff6, 0xfffe000600200002, x2, 14*XLEN/8, x4)

inst_44:
// rs2_h3_val == -5, rs1_h2_val == -16385, rs1_h1_val == 16, rs2_h0_val == -4097
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7fbfff00100008;  op2val:0xfffb0005fbffefff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xff7fbfff00100008, 0xfffb0005fbffefff, x2, 15*XLEN/8, x4)

inst_45:
// rs2_h3_val == -9, rs1_h3_val == -1025, rs2_h2_val == 1024
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000400100100;  op2val:0xfff704000003ffbf
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfbff000400100100, 0xfff704000003ffbf, x2, 16*XLEN/8, x4)

inst_46:
// rs2_h3_val == -65, rs2_h1_val == 0
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x000040efff4000;  op2val:0xffbf00400000fbff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x000040efff4000, 0xffbf00400000fbff, x2, 17*XLEN/8, x4)

inst_47:
// rs2_h3_val == -257, rs2_h1_val == -257
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c0005555ffdf;  op2val:0xfeff0002fefffffc
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfff9c0005555ffdf, 0xfeff0002fefffffc, x2, 18*XLEN/8, x4)

inst_48:
// rs2_h3_val == -513, rs1_h2_val == 32, rs2_h2_val == -16385, rs2_h0_val == 4
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x3fff002000030007;  op2val:0xfdffbfff00080004
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x3fff002000030007, 0xfdffbfff00080004, x2, 19*XLEN/8, x4)

inst_49:
// rs2_h3_val == -4097, rs2_h1_val == 1024, rs2_h0_val == 64
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000007fff6f7ff;  op2val:0xefffbfff04000040
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x10000007fff6f7ff, 0xefffbfff04000040, x2, 20*XLEN/8, x4)

inst_50:
// rs2_h3_val == 21845, rs1_h1_val == -1
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0003ffff0100;  op2val:0x55550040fff7aaaa
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa0003ffff0100, 0x55550040fff7aaaa, x2, 21*XLEN/8, x4)

inst_51:
// rs2_h3_val == -21846, rs1_h1_val == 32767, rs2_h2_val == -129, rs1_h2_val == -1025
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbff7fffefff;  op2val:0xaaaaff7ff7ff0080
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xc000fbff7fffefff, 0xaaaaff7ff7ff0080, x2, 22*XLEN/8, x4)

inst_52:
// rs1_h0_val == rs2_h0_val, rs1_h2_val == -257
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05fefffffe0080;  op2val:0x050020feff0080
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x05fefffffe0080, 0x050020feff0080, x2, 23*XLEN/8, x4)

inst_53:
// rs1_h1_val == 1, rs1_h2_val == -4097
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffdfefff00010003;  op2val:0x1007fffeffffffb
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xffdfefff00010003, 0x1007fffeffffffb, x2, 24*XLEN/8, x4)

inst_54:
// rs1_h1_val == rs2_h1_val, rs1_h1_val == 16384
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000040008000;  op2val:0xff7f040040004000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfffb000040008000, 0xff7f040040004000, x2, 25*XLEN/8, x4)

inst_55:
// rs1_h1_val == 8, rs1_h3_val == 2, rs2_h1_val == 64
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf00080200;  op2val:0x20f7ff0040fff9
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x02ffdf00080200, 0x20f7ff0040fff9, x2, 26*XLEN/8, x4)

inst_56:
// rs1_h3_val == -3, rs1_h2_val == 4096
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000fffc0003;  op2val:0x070000aaaa0400
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfffd1000fffc0003, 0x070000aaaa0400, x2, 27*XLEN/8, x4)

inst_57:
// rs1_h3_val == -17, rs2_h2_val == -17
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffefc000c0000004;  op2val:0x40ffef00038000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xffefc000c0000004, 0x40ffef00038000, x2, 28*XLEN/8, x4)

inst_58:
// rs1_h3_val == -65, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbffeff0006ffff;  op2val:0xdfff7fff00090000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xffbffeff0006ffff, 0xdfff7fff00090000, x2, 29*XLEN/8, x4)

inst_59:
// rs2_h0_val == -1, rs1_h3_val == 4, rs2_h2_val == -2
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0400053fff2000;  op2val:0xfdfffffe0000ffff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x0400053fff2000, 0xfdfffffe0000ffff, x2, 30*XLEN/8, x4)

inst_60:
// rs2_h0_val == 32767, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x080008ffbfff7f;  op2val:0xfffd100080007fff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x080008ffbfff7f, 0xfffd100080007fff, x2, 31*XLEN/8, x4)

inst_61:
// rs2_h0_val == 32, rs2_h2_val == -257, rs2_h3_val == -1
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x55553fff00074000;  op2val:0xfffffefffdff0020
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x55553fff00074000, 0xfffffefffdff0020, x2, 32*XLEN/8, x4)

inst_62:
// rs2_h0_val == 256, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffefffc4000;  op2val:0xfffcfeffefff0100
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xdffffffefffc4000, 0xfffcfeffefff0100, x2, 33*XLEN/8, x4)

inst_63:
// rs2_h0_val == 512, rs2_h2_val == -1
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400040fff60008;  op2val:0x100fffff7ff0200
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x400040fff60008, 0x100fffff7ff0200, x2, 34*XLEN/8, x4)

inst_64:
// rs2_h0_val == 4096, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff9ffefff7f;  op2val:0xfefffffd00001000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfff9fff9ffefff7f, 0xfefffffd00001000, x2, 35*XLEN/8, x4)

inst_65:
// rs2_h0_val == -33, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05000900400009;  op2val:0xfdffff7fffdfffdf
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x05000900400009, 0xfdffff7fffdfffdf, x2, 36*XLEN/8, x4)

inst_66:
// rs2_h0_val == -513, rs1_h1_val == -8193, rs2_h2_val == 256
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffdfff0000;  op2val:0xffef01000080fdff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfbffffffdfff0000, 0xffef01000080fdff, x2, 37*XLEN/8, x4)

inst_67:
// rs1_h1_val == 32, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02aaaa00202000;  op2val:0xbfff000600800003
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x02aaaa00202000, 0xbfff000600800003, x2, 38*XLEN/8, x4)

inst_68:
// rs1_h1_val == 256, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x5555555501000040;  op2val:0xfffafffedffffff9
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x5555555501000040, 0xfffafffedffffff9, x2, 39*XLEN/8, x4)

inst_69:
// rs1_h1_val == 8192, rs2_h1_val == -2
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0355552000fff9;  op2val:0x000008fffefffe
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x0355552000fff9, 0x000008fffefffe, x2, 40*XLEN/8, x4)

inst_70:
// rs1_h1_val == -3, rs2_h1_val == 4
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x050006fffdfff9;  op2val:0x80ffff0004dfff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x050006fffdfff9, 0x80ffff0004dfff, x2, 41*XLEN/8, x4)

inst_71:
// rs1_h1_val == -33, rs2_h2_val == -33, rs1_h3_val == 128
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x801000ffdf7fff;  op2val:0x06ffdf0400feff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x801000ffdf7fff, 0x06ffdf0400feff, x2, 42*XLEN/8, x4)

inst_72:
// rs1_h1_val == -257, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc0007ffffeff5555;  op2val:0x09ffdffbfffffc
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xc0007ffffeff5555, 0x09ffdffbfffffc, x2, 43*XLEN/8, x4)

inst_73:
// rs2_h1_val == 256, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0007dfff0007;  op2val:0xfff9ffdf0100fff7
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff0007dfff0007, 0xfff9ffdf0100fff7, x2, 44*XLEN/8, x4)

inst_74:
// rs2_h1_val == 512, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40000020fff60001;  op2val:0x2001000200fffd
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x40000020fff60001, 0x2001000200fffd, x2, 45*XLEN/8, x4)

inst_75:
// rs1_h1_val == -2049, rs2_h1_val == -3
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0020f7ff0001;  op2val:0x800009fffd0002
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfdff0020f7ff0001, 0x800009fffd0002, x2, 46*XLEN/8, x4)

inst_76:
// rs2_h1_val == 2048, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff7c0001000;  op2val:0x03000308000006
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xc000fff7c0001000, 0x03000308000006, x2, 47*XLEN/8, x4)

inst_77:
// rs2_h1_val == 4096, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff7ffdfffbf;  op2val:0xfdffffdf1000ffef
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xffbffff7ffdfffbf, 0xfdffffdf1000ffef, x2, 48*XLEN/8, x4)

inst_78:
// rs1_h1_val == -16385, rs2_h2_val == -513
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaabfff0400;  op2val:0xffdffdff00030007
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x80aaaabfff0400, 0xffdffdff00030007, x2, 49*XLEN/8, x4)

inst_79:
// rs2_h1_val == 8192, rs1_h2_val == -3
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x09fffdfff90005;  op2val:0x7ffffffe20001000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x09fffdfff90005, 0x7ffffffe20001000, x2, 50*XLEN/8, x4)

inst_80:
// rs1_h1_val == -21846, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffcaaaafff8;  op2val:0xfffcbfffffff0080
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x3ffffffcaaaafff8, 0xfffcbfffffff0080, x2, 51*XLEN/8, x4)

inst_81:
// rs2_h1_val == -5, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40000800fff73fff;  op2val:0xfffb0007fffbffef
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x40000800fff73fff, 0xfffb0007fffbffef, x2, 52*XLEN/8, x4)

inst_82:
// rs1_h2_val == 1, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x03000100000006;  op2val:0xfffbfeffffef0006
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x03000100000006, 0xfffbfeffffef0006, x2, 53*XLEN/8, x4)

inst_83:
// rs1_h2_val == 16, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xbfff001001000200;  op2val:0x5555bfff00080006
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xbfff001001000200, 0x5555bfff00080006, x2, 54*XLEN/8, x4)

inst_84:
// rs1_h2_val == 256, rs1_h3_val == -1
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffff01004000c000;  op2val:0xfff80800f7ff0200
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xffff01004000c000, 0xfff80800f7ff0200, x2, 55*XLEN/8, x4)

inst_85:
// rs1_h2_val == 512, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0200c0000001;  op2val:0xfbfffffafffbfffa
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfdff0200c0000001, 0xfbfffffafffbfffa, x2, 56*XLEN/8, x4)

inst_86:
// rs2_h2_val == 16, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffbdffffffe;  op2val:0xffdf0010c000dfff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x1000fffbdffffffe, 0xffdf0010c000dfff, x2, 57*XLEN/8, x4)

inst_87:
// rs2_h2_val == -8193, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffef00070000;  op2val:0x20dffffffefbff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x5555ffef00070000, 0x20dffffffefbff, x2, 58*XLEN/8, x4)

inst_88:
// rs1_h2_val == -129, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7ffffaff7f;  op2val:0x5555c00008000007
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x20ff7ffffaff7f, 0x5555c00008000007, x2, 59*XLEN/8, x4)

inst_89:
// rs1_h2_val == -513, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80fdff00090400;  op2val:0xfeff000800101000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x80fdff00090400, 0xfeff000800101000, x2, 60*XLEN/8, x4)

inst_90:
// rs2_h2_val == 16384, rs1_h2_val == 1024
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc00004000004fbff;  op2val:0x074000fdff0000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xc00004000004fbff, 0x074000fdff0000, x2, 61*XLEN/8, x4)

inst_91:
// rs1_h3_val == 1024, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400fffdfff90005;  op2val:0xdfff0020aaaafffc
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x400fffdfff90005, 0xdfff0020aaaafffc, x2, 62*XLEN/8, x4)

inst_92:
// rs2_h1_val == -16385, rs1_h3_val == 1
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x010200fffd0040;  op2val:0x060000bfff1000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x010200fffd0040, 0x060000bfff1000, x2, 63*XLEN/8, x4)

inst_93:
// rs2_h2_val == 1, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x55550100ffefff7f;  op2val:0x0900017ffffffa
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x55550100ffefff7f, 0x0900017ffffffa, x2, 64*XLEN/8, x4)

inst_94:
// rs2_h2_val == 21845, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffeff7f0004;  op2val:0xfff755554000aaaa
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xff7ffffeff7f0004, 0xfff755554000aaaa, x2, 65*XLEN/8, x4)

inst_95:
// rs1_h3_val == 2048, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff0000c000;  op2val:0xbfffaaaa55554000
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x8007fff0000c000, 0xbfffaaaa55554000, x2, 66*XLEN/8, x4)

inst_96:
// rs2_h2_val == -1025, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x005555fff80100;  op2val:0x04fbffbffffbff
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x005555fff80100, 0x04fbffbffffbff, x2, 67*XLEN/8, x4)

inst_97:
// rs2_h2_val == -4097, 
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400800080000080;  op2val:0x7fffefff0001fff6
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x400800080000080, 0x7fffefff0001fff6, x2, 68*XLEN/8, x4)

inst_98:
// rs1_h0_val == -1, rs2_h2_val == 128, rs2_h3_val == 8, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == -65, rs2_h0_val == 8, rs2_h1_val == 16, rs1_h2_val == -5, rs1_h3_val == 16384
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffbffbfffff;  op2val:0x08008000100008
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0x4000fffbffbfffff, 0x08008000100008, x2, 69*XLEN/8, x4)

inst_99:
// rs1_h0_val == 0, rs1_h3_val == -5, rs2_h2_val == 512, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 128, rs2_h1_val == 128
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0003fff80000;  op2val:0x06020000800080
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xfffb0003fff80000, 0x06020000800080, x2, 70*XLEN/8, x4)

inst_100:
// rs1_h0_val == -9, rs2_h3_val == 32, rs1_h2_val == -1, rs1_h3_val == -21846, rs2_h1_val == -8193, rs2_h0_val == 16, rs1_h1_val == -129
// opcode: pmhacc.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffffff7ffff7;  op2val:0x203fffdfff0010
TEST_RR_OP(pmhacc.h.be, x31, x30, x29, 0x0000000000000000, 0xaaaaffffff7ffff7, 0x203fffdfff0010, x2, 71*XLEN/8, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x6_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x6_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 72*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
