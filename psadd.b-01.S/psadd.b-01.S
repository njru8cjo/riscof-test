
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psadd.b instruction of the RISC-V RV64PZicsr extension for the psadd.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psadd.b)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x2, rd==x14, rs1_b0_val == -128, rs2_b6_val == 0, rs1_b7_val == -65, rs1_b1_val == 32, rs1_b2_val == 64, rs2_b7_val == 8, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b1_val != rs2_b1_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val != rs2_b2_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b2_val == -33, rs1_b4_val != rs2_b4_val, rs1_b5_val != rs2_b5_val, rs1_b5_val == 0, rs1_b6_val != rs2_b6_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b7_val != rs2_b7_val, rs2_b4_val == 127
// opcode: psadd.b ; op1:x23; op2:x2; dest:x14; op1val:0xbffc0003fa402080;  op2val:0x800c07f05dff906
TEST_RR_OP(psadd.b, x14, x23, x2, 0x0000000000000000, 0xbffc0003fa402080, 0x800c07f05dff906, x7, 0*XLEN/8, x8)

inst_1:// rs2 == rd != rs1, rs1==x9, rs2==x6, rd==x6, rs1_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b6_val == 85, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b0_val == -3, rs2_b2_val == 2, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b7_val == 1, rs1_b4_val == 4, rs2_b4_val == -9, rs2_b7_val == -5, rs1_b3_val == -128, rs2_b3_val == 0
// opcode: psadd.b ; op1:x9; op2:x6; dest:x6; op1val:0x1553f04800506ff;  op2val:0xfbfa03f70002fafd
TEST_RR_OP(psadd.b, x6, x9, x6, 0x0000000000000000, 0x1553f04800506ff, 0xfbfa03f70002fafd, x7, 1*XLEN/8, x8)

inst_2:// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x0, rs1_b0_val == 0, rs2_b0_val == 0, rs1_b0_val == rs2_b0_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b6_val == -65, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b5_val == 16, rs1_b2_val == 16, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: psadd.b ; op1:x1; op2:x1; dest:x0; op1val:0xfcf810f88010f900;  op2val:0x9bff8c003c00500
TEST_RR_OP(psadd.b, x0, x1, x1, 0x0000000000000000, 0xfcf810f88010f900, 0x9bff8c003c00500, x7, 2*XLEN/8, x8)

inst_3:// rs1 == rd != rs2, rs1==x30, rs2==x10, rd==x30, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b4_val == -86, rs1_b6_val == -9, rs1_b2_val == -1, rs2_b3_val == -9, rs2_b2_val == 1, rs2_b5_val == 8, rs2_b7_val == -1, rs1_b5_val == 64, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b4_val == -5, rs1_b3_val == 0, rs1_b1_val == -2
// opcode: psadd.b ; op1:x30; op2:x10; dest:x30; op1val:0x7f740aa00fffe01;  op2val:0xfff608fbf70106f6
TEST_RR_OP(psadd.b, x30, x30, x10, 0x0000000000000000, 0x7f740aa00fffe01, 0xfff608fbf70106f6, x7, 3*XLEN/8, x8)

inst_4:// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_b0_val == 127, rs2_b1_val == -3, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b3_val == -65, rs2_b7_val == -17, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b0_val == -86, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b5_val == -65, rs2_b2_val == -17, rs1_b4_val == -2
// opcode: psadd.b ; op1:x17; op2:x17; dest:x17; op1val:0xfa3ff8febf05fc7f;  op2val:0xef03bf7fc0effdaa
TEST_RR_OP(psadd.b, x17, x17, x17, 0x0000000000000000, 0xfa3ff8febf05fc7f, 0xef03bf7fc0effdaa, x7, 4*XLEN/8, x8)

inst_5:// rs1==x20, rs2==x13, rd==x24, rs1_b0_val == 2, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 4, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b5_val == 4, rs2_b6_val == -86, rs1_b2_val == 127, rs2_b7_val == 2, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b4_val == 1
// opcode: psadd.b ; op1:x20; op2:x13; dest:x24; op1val:0xfc3f04f6037f3f02;  op2val:0x2aaf90104fa0507
TEST_RR_OP(psadd.b, x24, x20, x13, 0x0000000000000000, 0xfc3f04f6037f3f02, 0x2aaf90104fa0507, x7, 5*XLEN/8, x8)

inst_6:// rs1==x25, rs2==x31, rd==x22, rs1_b0_val == 4, rs2_b6_val == -9, rs1_b1_val == -86, rs1_b3_val == -5, rs2_b3_val == -5, rs2_b7_val == 4, rs2_b1_val == -1, rs1_b3_val == rs2_b3_val, rs1_b6_val == -128, rs1_b4_val == -5
// opcode: psadd.b ; op1:x25; op2:x31; dest:x22; op1val:0xf98004fbfb40aa04;  op2val:0x4f7faf6fb3ffffd
TEST_RR_OP(psadd.b, x22, x25, x31, 0x0000000000000000, 0xf98004fbfb40aa04, 0x4f7faf6fb3ffffd, x7, 6*XLEN/8, x8)

inst_7:// rs1==x5, rs2==x27, rd==x15, rs1_b0_val == 8, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b6_val == -65, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b5_val == -2, rs1_b3_val == -1, rs1_b4_val == 64, rs2_b6_val == 2
// opcode: psadd.b ; op1:x5; op2:x27; dest:x15; op1val:0x3bf0440ffc00508;  op2val:0xf902fe07f6f9f905
TEST_RR_OP(psadd.b, x15, x5, x27, 0x0000000000000000, 0x3bf0440ffc00508, 0xf902fe07f6f9f905, x7, 7*XLEN/8, x8)

inst_8:// rs1==x6, rs2==x23, rd==x29, rs1_b0_val == 16, rs1_b3_val == 127, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b2_val == 127, rs2_b7_val == 1
// opcode: psadd.b ; op1:x6; op2:x23; dest:x29; op1val:0x9f906fe7f3ffc10;  op2val:0x1f60701057ff905
TEST_RR_OP(psadd.b, x29, x6, x23, 0x0000000000000000, 0x9f906fe7f3ffc10, 0x1f60701057ff905, x7, 8*XLEN/8, x8)

inst_9:// rs1==x11, rs2==x9, rd==x16, rs1_b0_val == 32, rs2_b0_val == -128, rs2_b1_val == -5, rs1_b6_val == -3, rs2_b4_val == 64, rs1_b5_val == 8, rs1_b7_val == 0, rs1_b2_val == -33, rs1_b1_val == 4, rs2_b2_val == -86, rs2_b7_val == -33, rs2_b3_val == -1, rs1_b4_val == -17
// opcode: psadd.b ; op1:x11; op2:x9; dest:x16; op1val:0xfd08effcdf0420;  op2val:0xdf060940ffaafb80
TEST_RR_OP(psadd.b, x16, x11, x9, 0x0000000000000000, 0xfd08effcdf0420, 0xdf060940ffaafb80, x7, 9*XLEN/8, x8)

inst_10:// rs1==x15, rs2==x28, rd==x19, rs1_b0_val == 64, rs1_b6_val == 32, rs2_b5_val == -128, rs2_b0_val == -2, rs1_b7_val == -1, rs2_b2_val == -9, rs1_b4_val == rs2_b4_val
// opcode: psadd.b ; op1:x15; op2:x28; dest:x19; op1val:0xff2005fa007f0940;  op2val:0x6c080fa05f7fdfe
TEST_RR_OP(psadd.b, x19, x15, x28, 0x0000000000000000, 0xff2005fa007f0940, 0x6c080fa05f7fdfe, x7, 10*XLEN/8, x8)

inst_11:// rs1==x3, rs2==x22, rd==x4, rs1_b0_val == -2, rs1_b3_val == -2, rs2_b5_val == 85, rs1_b7_val == -2, rs2_b7_val == -3, rs2_b2_val == -65, rs1_b2_val == -86, rs2_b3_val == -128
// opcode: psadd.b ; op1:x3; op2:x22; dest:x4; op1val:0xfe0300fafeaa3ffe;  op2val:0xfdfa550380bffbfe
TEST_RR_OP(psadd.b, x4, x3, x22, 0x0000000000000000, 0xfe0300fafeaa3ffe, 0xfdfa550380bffbfe, x7, 11*XLEN/8, x8)

inst_12:// rs1==x31, rs2==x3, rd==x18, rs1_b0_val == -3, rs2_b4_val == -33, rs1_b5_val < 0 and rs2_b5_val > 0, rs2_b5_val == 127, rs1_b2_val == 1, rs2_b7_val == -128, rs1_b7_val == 32, rs2_b6_val == 8
// opcode: psadd.b ; op1:x31; op2:x3; dest:x18; op1val:0x20c0f9aa0601fafd;  op2val:0x80087fdf05f7f6fa
TEST_RR_OP(psadd.b, x18, x31, x3, 0x0000000000000000, 0x20c0f9aa0601fafd, 0x80087fdf05f7f6fa, x7, 12*XLEN/8, x2)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_13:// rs1==x27, rs2==x7, rd==x26, rs1_b0_val == -5, rs1_b6_val == 16, rs1_b3_val == -3, rs2_b0_val == 32, rs2_b6_val == -33, rs1_b4_val == -128, rs2_b4_val == -3, rs1_b7_val == 85, rs2_b1_val == -2
// opcode: psadd.b ; op1:x27; op2:x7; dest:x26; op1val:0x55100380fd06f9fb;  op2val:0xc0dff8fd06fcfe20
TEST_RR_OP(psadd.b, x26, x27, x7, 0x0000000000000000, 0x55100380fd06f9fb, 0xc0dff8fd06fcfe20, x6, 0*XLEN/8, x2)

inst_14:// rs1==x22, rs2==x26, rd==x1, rs1_b0_val == -9, rs2_b4_val == 85, rs2_b1_val == -65, rs1_b6_val == -17, rs2_b3_val == -17, rs2_b5_val == -9, rs1_b4_val == 1, rs1_b7_val == 64, rs2_b7_val == 85
// opcode: psadd.b ; op1:x22; op2:x26; dest:x1; op1val:0x40ef0501fb3fc0f7;  op2val:0x5505f755efdfbffd
TEST_RR_OP(psadd.b, x1, x22, x26, 0x0000000000000000, 0x40ef0501fb3fc0f7, 0x5505f755efdfbffd, x6, 1*XLEN/8, x2)

inst_15:// rs1==x16, rs2==x15, rd==x5, rs1_b0_val == -17, rs2_b6_val == 16, rs2_b2_val == -2, rs2_b0_val == 8
// opcode: psadd.b ; op1:x16; op2:x15; dest:x5; op1val:0x3fa05aafdc005ef;  op2val:0xfb10fcc0f7fefc08
TEST_RR_OP(psadd.b, x5, x16, x15, 0x0000000000000000, 0x3fa05aafdc005ef, 0xfb10fcc0f7fefc08, x6, 2*XLEN/8, x2)

inst_16:// rs1==x13, rs2==x21, rd==x7, rs1_b0_val == -33, rs1_b3_val == 4, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == -9
// opcode: psadd.b ; op1:x13; op2:x21; dest:x7; op1val:0x55f9f9fc04f73fdf;  op2val:0xff03fe03f809fcfc
TEST_RR_OP(psadd.b, x7, x13, x21, 0x0000000000000000, 0x55f9f9fc04f73fdf, 0xff03fe03f809fcfc, x6, 3*XLEN/8, x2)

inst_17:// rs1==x19, rs2==x4, rd==x23, rs1_b0_val == -65, rs2_b0_val == -9
// opcode: psadd.b ; op1:x19; op2:x4; dest:x23; op1val:0xf6ef40f9fb05febf;  op2val:0xfaf807fbfafa09f7
TEST_RR_OP(psadd.b, x23, x19, x4, 0x0000000000000000, 0xf6ef40f9fb05febf, 0xfaf807fbfafa09f7, x6, 4*XLEN/8, x2)

inst_18:// rs1==x14, rs2==x5, rd==x31, rs1_b0_val == 85, rs2_b5_val == 64, rs1_b5_val == -17, rs1_b4_val == 2, rs2_b7_val == -2, rs2_b6_val == -1, rs1_b7_val == -33
// opcode: psadd.b ; op1:x14; op2:x5; dest:x31; op1val:0xdf05ef02f6fc0355;  op2val:0xfeff40fa0002f6fa
TEST_RR_OP(psadd.b, x31, x14, x5, 0x0000000000000000, 0xdf05ef02f6fc0355, 0xfeff40fa0002f6fa, x6, 5*XLEN/8, x2)

inst_19:// rs1==x21, rs2==x8, rd==x27, rs1_b0_val == -86, rs2_b4_val == -65, rs2_b0_val == 2, rs1_b5_val == 32, rs2_b2_val == 64, rs2_b1_val == 127, rs1_b6_val == 127
// opcode: psadd.b ; op1:x21; op2:x8; dest:x27; op1val:0xfc7f200703c0fcaa;  op2val:0x6063fbffc407f02
TEST_RR_OP(psadd.b, x27, x21, x8, 0x0000000000000000, 0xfc7f200703c0fcaa, 0x6063fbffc407f02, x6, 6*XLEN/8, x2)

inst_20:// rs1==x10, rs2==x12, rd==x9, rs1_b1_val == -128, rs1_b3_val == -33, rs2_b3_val == -86, rs2_b0_val == -33, rs2_b2_val == 32, rs1_b4_val == 0, rs2_b1_val == 4
// opcode: psadd.b ; op1:x10; op2:x12; dest:x9; op1val:0xf8fc00dff680fa;  op2val:0x1f9807faa2004df
TEST_RR_OP(psadd.b, x9, x10, x12, 0x0000000000000000, 0xf8fc00dff680fa, 0x1f9807faa2004df, x6, 7*XLEN/8, x2)

inst_21:// rs1==x28, rs2==x24, rd==x12, rs1_b1_val == -1, rs2_b3_val == 2, rs2_b6_val == -5, rs2_b2_val == -128, rs2_b7_val == -9, rs2_b4_val == -2
// opcode: psadd.b ; op1:x28; op2:x24; dest:x12; op1val:0xdf80fafe7f06ff04;  op2val:0xf7fbfcfe028007fa
TEST_RR_OP(psadd.b, x12, x28, x24, 0x0000000000000000, 0xdf80fafe7f06ff04, 0xf7fbfcfe028007fa, x6, 8*XLEN/8, x2)

inst_22:// rs1==x29, rs2==x19, rd==x3, rs1_b1_val == 0, rs1_b7_val == -9, rs2_b5_val == 32, rs2_b4_val == 4, rs1_b4_val == 8, rs2_b2_val == 85, rs2_b6_val == 4
// opcode: psadd.b ; op1:x29; op2:x19; dest:x3; op1val:0xf7f80608fbf60003;  op2val:0x30420048055fb80
TEST_RR_OP(psadd.b, x3, x29, x19, 0x0000000000000000, 0xf7f80608fbf60003, 0x30420048055fb80, x6, 9*XLEN/8, x2)

inst_23:// rs1==x12, rs2==x30, rd==x13, rs1_b1_val == 1, rs2_b4_val == -1, rs2_b2_val == -3, rs1_b5_val == 1
// opcode: psadd.b ; op1:x12; op2:x30; dest:x13; op1val:0x3fef01f6f84001fa;  op2val:0xdffbf8ff09fdfc06
TEST_RR_OP(psadd.b, x13, x12, x30, 0x0000000000000000, 0x3fef01f6f84001fa, 0xdffbf8ff09fdfc06, x6, 10*XLEN/8, x2)

inst_24:// rs1==x26, rs2==x18, rd==x28, rs1_b1_val == 127, rs1_b4_val == -33, rs2_b4_val == -86, rs1_b6_val == -86, rs2_b7_val == 64, rs1_b2_val == -65
// opcode: psadd.b ; op1:x26; op2:x18; dest:x28; op1val:0x20aac0dffebf7ff9;  op2val:0x40df7faa80053ff8
TEST_RR_OP(psadd.b, x28, x26, x18, 0x0000000000000000, 0x20aac0dffebf7ff9, 0x40df7faa80053ff8, x6, 11*XLEN/8, x3)

inst_25:// rs1==x8, rs2==x25, rd==x2, rs1_b1_val == 2, rs1_b7_val == 2, rs2_b0_val == 64, rs1_b3_val == -17, rs1_b2_val == -5
// opcode: psadd.b ; op1:x8; op2:x25; dest:x2; op1val:0x2f7f840effb02f9;  op2val:0x81055aa3fdf0940
TEST_RR_OP(psadd.b, x2, x8, x25, 0x0000000000000000, 0x2f7f840effb02f9, 0x81055aa3fdf0940, x6, 12*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:// rs1==x4, rs2==x0, rd==x25, rs1_b1_val == 8, rs1_b2_val == -128, rs2_b0_val == -5
// opcode: psadd.b ; op1:x4; op2:x0; dest:x25; op1val:0xc01010aa0480083f;  op2val:0xdfaa06c0aa7ff9fb
TEST_RR_OP(psadd.b, x25, x4, x0, 0x0000000000000000, 0xc01010aa0480083f, 0xdfaa06c0aa7ff9fb, x1, 0*XLEN/8, x3)

inst_27:// rs1==x18, rs2==x11, rd==x21, rs1_b1_val == 16, rs1_b6_val == 0, rs2_b4_val == 8, rs2_b6_val == -17, rs2_b1_val == -86
// opcode: psadd.b ; op1:x18; op2:x11; dest:x21; op1val:0xf60006067f0910fc;  op2val:0xf8ef07083f80aafb
TEST_RR_OP(psadd.b, x21, x18, x11, 0x0000000000000000, 0xf60006067f0910fc, 0xf8ef07083f80aafb, x1, 1*XLEN/8, x3)

inst_28:// rs1==x7, rs2==x29, rd==x20, rs1_b1_val == 64, rs2_b0_val == -65
// opcode: psadd.b ; op1:x7; op2:x29; dest:x20; op1val:0xfffd2006f60640fe;  op2val:0x3ef06fd0480f8bf
TEST_RR_OP(psadd.b, x20, x7, x29, 0x0000000000000000, 0xfffd2006f60640fe, 0x3ef06fd0480f8bf, x1, 2*XLEN/8, x3)

inst_29:// rs1==x2, rs2==x16, rd==x10, rs1_b1_val == -3, rs1_b4_val == 32, rs1_b7_val == -5, rs2_b3_val == 64
// opcode: psadd.b ; op1:x2; op2:x16; dest:x10; op1val:0xfb0340200710fd01;  op2val:0x55f908bf400504c0
TEST_RR_OP(psadd.b, x10, x2, x16, 0x0000000000000000, 0xfb0340200710fd01, 0x55f908bf400504c0, x1, 3*XLEN/8, x3)

inst_30:// rs1==x0, rs2==x14, rd==x11, rs1_b1_val == -5, rs2_b0_val == 127, rs1_b3_val == 32, rs2_b5_val == 1, rs1_b5_val == -2, rs2_b4_val == 0, rs1_b7_val == -3
// opcode: psadd.b ; op1:x0; op2:x14; dest:x11; op1val:0xfd06fefa20dffbfc;  op2val:0xfa3f0100f7bf057f
TEST_RR_OP(psadd.b, x11, x0, x14, 0x0000000000000000, 0xfd06fefa20dffbfc, 0xfa3f0100f7bf057f, x1, 4*XLEN/8, x3)

inst_31:// rs1==x24, rs2==x20, rd==x8, rs1_b1_val == -9, rs2_b1_val == -9, rs1_b1_val == rs2_b1_val, rs1_b7_val == 4, rs2_b5_val == -33, rs1_b6_val == -1
// opcode: psadd.b ; op1:x24; op2:x20; dest:x8; op1val:0x4fffefafcf6f701;  op2val:0x200dfdff720f740
TEST_RR_OP(psadd.b, x8, x24, x20, 0x0000000000000000, 0x4fffefafcf6f701, 0x200dfdff720f740, x1, 5*XLEN/8, x3)

inst_32:// rs2_b5_val == -1, rs2_b0_val == 85
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xdffc0440bfbf7f04;  op2val:0x302fffef8f9bf55
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xdffc0440bfbf7f04, 0x302fffef8f9bf55, x1, 6*XLEN/8, x3)

inst_33:// rs2_b5_val == 0, rs2_b3_val == -33, rs1_b2_val == -17
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xf78005c0efeff9fa;  op2val:0xfd070006df090720
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xf78005c0efeff9fa, 0xfd070006df090720, x1, 7*XLEN/8, x3)

inst_34:// rs2_b5_val == 2, rs2_b6_val == 85
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x6f6f980c080faf6;  op2val:0xff550255fb0904f7
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x6f6f980c080faf6, 0xff550255fb0904f7, x1, 8*XLEN/8, x3)

inst_35:// rs2_b5_val == 4, rs2_b1_val == 85, rs1_b6_val == -5, rs2_b0_val == 4
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x7fb01010906f9aa;  op2val:0x8060408effc5504
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x7fb01010906f9aa, 0x8060408effc5504, x1, 9*XLEN/8, x3)

inst_36:// rs2_b5_val == 16, rs2_b3_val == 127, rs1_b4_val == 127, rs2_b2_val == -5
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf80f87ffafcc000;  op2val:0x40210f87ffbfac0
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xdf80f87ffafcc000, 0x40210f87ffbfac0, x1, 10*XLEN/8, x3)

inst_37:// rs2_b5_val == -3, rs2_b6_val == -2, rs1_b5_val == -65, rs1_b7_val == rs2_b7_val
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbf6bffa8007f9f9;  op2val:0xfbfefd048003f73f
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfbf6bffa8007f9f9, 0xfbfefd048003f73f, x1, 11*XLEN/8, x3)

inst_38:// rs2_b5_val == -5, rs2_b3_val == -3, rs1_b7_val == 127, rs2_b2_val == 16, rs1_b5_val == -33, rs2_b7_val == 32, rs2_b1_val == 1
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f06df0203800608;  op2val:0x2055fb7ffd100180
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x7f06df0203800608, 0x2055fb7ffd100180, x1, 12*XLEN/8, x3)

inst_39:// rs2_b5_val == -17, rs2_b2_val == -1, rs2_b3_val == 16
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x3fdf8c0fdfa04fa;  op2val:0x8055ef0910fffbf7
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x3fdf8c0fdfa04fa, 0x8055ef0910fffbf7, x1, 13*XLEN/8, x3)

inst_40:// rs2_b5_val == -86, rs2_b1_val == 32, rs1_b5_val == 85
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6fa5505ef0705df;  op2val:0xf602aa04c0fa20f7
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xf6fa5505ef0705df, 0xf602aa04c0fa20f7, x1, 14*XLEN/8, x3)

inst_41:// rs2_b6_val == -128, rs1_b1_val == -17, rs2_b7_val == -65
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb06f67ffdc0ef06;  op2val:0xbf80207ff7dfc0fc
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfb06f67ffdc0ef06, 0xbf80207ff7dfc0fc, x1, 15*XLEN/8, x3)

inst_42:// rs2_b6_val == 1, rs2_b3_val == 8, rs1_b3_val == 64, rs2_b2_val == 8
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x20fa40804006fa02;  op2val:0xfc010005080803aa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x20fa40804006fa02, 0xfc010005080803aa, x1, 16*XLEN/8, x3)

inst_43:// rs2_b6_val == 127, rs1_b2_val == 85, rs1_b6_val == 2, rs1_b5_val == rs2_b5_val
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa02fadf2055fd00;  op2val:0x87ffac0aafcc0fa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfa02fadf2055fd00, 0x87ffac0aafcc0fa, x1, 17*XLEN/8, x3)

inst_44:// rs2_b6_val == 32, rs2_b4_val == 2, rs1_b1_val == 85
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f000720fa015502;  op2val:0x2203f02fffd7f02
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x7f000720fa015502, 0x2203f02fffd7f02, x1, 18*XLEN/8, x3)

inst_45:// rs2_b6_val == 64, rs1_b2_val == 2
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x40fffa070902ef10;  op2val:0xbf40fa3ff709fa55
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x40fffa070902ef10, 0xbf40fa3ff709fa55, x1, 19*XLEN/8, x3)

inst_46:// rs1_b1_val == -33, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb0720df3fdffb;  op2val:0x802ef55fb035500
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfb0720df3fdffb, 0x802ef55fb035500, x1, 20*XLEN/8, x3)

inst_47:// rs2_b6_val == -3, rs2_b2_val == 0, rs2_b0_val == 1, rs2_b3_val == 85, rs1_b6_val == 8
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f08064009f8f707;  op2val:0xf8fdf83f55000901
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x7f08064009f8f707, 0xf8fdf83f55000901, x1, 21*XLEN/8, x3)

inst_48:// rs1_b1_val == -65, rs2_b7_val == 127, rs1_b2_val == -2
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb10fc3ffafebf20;  op2val:0x7f08f63f10df0106
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfb10fc3ffafebf20, 0x7f08f63f10df0106, x1, 22*XLEN/8, x3)

inst_49:// rs1_b6_val == 64, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xff40fc40f9bfdff6;  op2val:0xf80310faeffafe80
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xff40fc40f9bfdff6, 0xf80310faeffafe80, x1, 23*XLEN/8, x3)

inst_50:// rs1_b6_val == -2, rs1_b3_val == 1
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xdffec03f017ffc01;  op2val:0x7f070701fa200307
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xdffec03f017ffc01, 0x7f070701fa200307, x1, 24*XLEN/8, x3)

inst_51:// rs1_b6_val == -33, rs2_b0_val == -1
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x6dffef8fe405509;  op2val:0x3f20ef55eff755ff
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x6dffef8fe405509, 0x3f20ef55eff755ff, x1, 25*XLEN/8, x3)

inst_52:// rs1_b7_val == -128, rs1_b3_val == 2, rs1_b6_val == 1, rs2_b1_val == -33
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x80015501023f08fd;  op2val:0xf94008fddf40df02
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x80015501023f08fd, 0xf94008fddf40df02, x1, 26*XLEN/8, x3)

inst_53:// rs1_b7_val == 8, rs1_b5_val == -3
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x87ffd07ef02fdf9;  op2val:0xfaff40bf403ffb09
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x87ffd07ef02fdf9, 0xfaff40bf403ffb09, x1, 27*XLEN/8, x3)

inst_54:// rs1_b7_val == 16, rs1_b5_val == 2, rs2_b7_val == 16, rs1_b3_val == 85
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x107f02df55bf02fb;  op2val:0x10fe08bf40fb04df
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x107f02df55bf02fb, 0x10fe08bf40fb04df, x1, 28*XLEN/8, x3)

inst_55:// rs1_b7_val == -17, rs2_b7_val == -86
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xeffafdefbf0706fb;  op2val:0xaaaa09feef0155fb
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xeffafdefbf0706fb, 0xaaaa09feef0155fb, x1, 29*XLEN/8, x3)

inst_56:// rs1_b7_val == -86, rs2_b4_val == 32
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa80faf93f05efbf;  op2val:0x5f8fa2005000455
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xaa80faf93f05efbf, 0x5f8fa2005000455, x1, 30*XLEN/8, x3)

inst_57:// rs2_b0_val == 16, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf0906f9fd100708;  op2val:0x7c0f8f840090910
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xbf0906f9fd100708, 0x7c0f8f840090910, x1, 31*XLEN/8, x3)

inst_58:// rs1_b2_val == 0, rs2_b1_val == -128
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xbffaef7f40000220;  op2val:0xf608c008fd0580f6
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xbffaef7f40000220, 0xf608c008fd0580f6, x1, 32*XLEN/8, x3)

inst_59:// rs1_b2_val == 4, rs1_b3_val == 16
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f07fa01100403fc;  op2val:0xbf04fff707fbf807
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x3f07fa01100403fc, 0xbf04fff707fbf807, x1, 33*XLEN/8, x3)

inst_60:// rs2_b7_val == 0, rs2_b4_val == -128
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xc00720fc01fbff3f;  op2val:0x00c08004fefb00
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xc00720fc01fbff3f, 0x00c08004fefb00, x1, 34*XLEN/8, x3)

inst_61:// rs1_b2_val == 8, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x440027f0308fafa;  op2val:0x558040ff80fe80fd
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x440027f0308fafa, 0x558040ff80fe80fd, x1, 35*XLEN/8, x3)

inst_62:// rs2_b0_val == -17, rs1_b4_val == -1, rs1_b5_val == -1
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xff08ffff0304003f;  op2val:0x6eff9f940207fef
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xff08ffff0304003f, 0x6eff9f940207fef, x1, 36*XLEN/8, x3)

inst_63:// rs1_b2_val == 32, rs2_b3_val == -2
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8c0efaa0620bf40;  op2val:0xbf05fc02fe807ff8
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xf8c0efaa0620bf40, 0xbf05fc02fe807ff8, x1, 37*XLEN/8, x3)

inst_64:// rs1_b3_val == 8, rs2_b3_val == 32
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9c0f6c0087ffe03;  op2val:0xaaeff6bf20f604f9
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xf9c0f6c0087ffe03, 0xaaeff6bf20f604f9, x1, 38*XLEN/8, x3)

inst_65:// rs2_b1_val == -17, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdf0408dfdfbf;  op2val:0x9090802f620ef02
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xffdfdf0408dfdfbf, 0x9090802f620ef02, x1, 39*XLEN/8, x3)

inst_66:// rs1_b3_val == -9, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa200704f7ff3f3f;  op2val:0x1001fa09097ff9fe
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfa200704f7ff3f3f, 0x1001fa09097ff9fe, x1, 40*XLEN/8, x3)

inst_67:// rs2_b2_val == 4, rs1_b2_val == -3
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf0609f6fbfdfbdf;  op2val:0xff8004f620040101
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xbf0609f6fbfdfbdf, 0xff8004f620040101, x1, 41*XLEN/8, x3)

inst_68:// rs1_b3_val == -86, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f87faa40faff;  op2val:0x3fbff94006fdaafa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x3f03f87faa40faff, 0x3fbff94006fdaafa, x1, 42*XLEN/8, x3)

inst_69:// rs1_b2_val == rs2_b2_val, rs1_b4_val == -65, rs2_b1_val == 8
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x4010fdbf0607fbf6;  op2val:0xff0903007f0708fe
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x4010fdbf0607fbf6, 0xff0903007f0708fe, x1, 43*XLEN/8, x3)

inst_70:// rs1_b4_val == 16, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbf901100505bf3f;  op2val:0x40202feaa000655
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfbf901100505bf3f, 0x40202feaa000655, x1, 44*XLEN/8, x3)

inst_71:// rs1_b4_val == -3, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x702fffdfcc07ffd;  op2val:0x55f740f8eff8fec0
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x702fffdfcc07ffd, 0x55f740f8eff8fec0, x1, 45*XLEN/8, x3)

inst_72:// rs1_b4_val == -9, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xef7f3ff706dff800;  op2val:0x3fef900f8bff6c0
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xef7f3ff706dff800, 0x3fef900f8bff6c0, x1, 46*XLEN/8, x3)

inst_73:// rs2_b3_val == 1, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xf80805fd8005fe55;  op2val:0xf8aa002001f7fbfe
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xf80805fd8005fe55, 0xf8aa002001f7fbfe, x1, 47*XLEN/8, x3)

inst_74:// rs1_b4_val == 85, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x20fffd55ff030907;  op2val:0x200801fbf7c0df20
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x20fffd55ff030907, 0x200801fbf7c0df20, x1, 48*XLEN/8, x3)

inst_75:// rs1_b5_val == -128, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x4078006bf80fddf;  op2val:0x540fb0001f8fbfb
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x4078006bf80fddf, 0x540fb0001f8fbfb, x1, 49*XLEN/8, x3)

inst_76:// rs1_b5_val == 127, rs2_b3_val == -65
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb077ffdf7aa5580;  op2val:0xbfff0480bf0607f8
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfb077ffdf7aa5580, 0xbfff0480bf0607f8, x1, 50*XLEN/8, x3)

inst_77:// rs1_b6_val == rs2_b6_val, rs2_b1_val == 64
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcbf03200206fbbf;  op2val:0xaabfbf80f92040ef
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfcbf03200206fbbf, 0xaabfbf80f92040ef, x1, 51*XLEN/8, x3)

inst_78:// rs1_b5_val == -5, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x1aafb800704073f;  op2val:0x207df80f8fdfa04
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x1aafb800704073f, 0x207df80f8fdfa04, x1, 52*XLEN/8, x3)

inst_79:// rs1_b5_val == -9, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x5fdf755f6f6fafc;  op2val:0xfcaa06fffe0540f8
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x5fdf755f6f6fafc, 0xfcaa06fffe0540f8, x1, 53*XLEN/8, x3)

inst_80:// rs2_b1_val == 0, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfefa3ffa55087f10;  op2val:0x4fd057f404000c0
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfefa3ffa55087f10, 0x4fd057f404000c0, x1, 54*XLEN/8, x3)

inst_81:// rs1_b5_val == -86, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x540aafc00f85504;  op2val:0x60009fb09efaaaa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x540aafc00f85504, 0x60009fb09efaaaa, x1, 55*XLEN/8, x3)

inst_82:// rs2_b4_val == 16, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0f6c040fe3f0340;  op2val:0xef080310067ffbf7
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xc0f6c040fe3f0340, 0xef080310067ffbf7, x1, 56*XLEN/8, x3)

inst_83:// rs2_b1_val == 2, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x1001effafefc403f;  op2val:0x037ffe3f02023f
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x1001effafefc403f, 0x037ffe3f02023f, x1, 57*XLEN/8, x3)

inst_84:// rs2_b1_val == 16, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x107fefdf00200103;  op2val:0xfefc80c0fedf1008
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x107fefdf00200103, 0xfefc80c0fedf1008, x1, 58*XLEN/8, x3)

inst_85:// rs1_b6_val == 4, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0x804fd0406f80108;  op2val:0xfc5504550206ffc0
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0x804fd0406f80108, 0xfc5504550206ffc0, x1, 59*XLEN/8, x3)

inst_86:// rs2_b4_val == -17, 
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf0580ef06f7fa55;  op2val:0x94010eff740f8fa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xdf0580ef06f7fa55, 0x94010eff740f8fa, x1, 60*XLEN/8, x3)

inst_87:// rs1_b0_val == 0, rs2_b0_val == 0, rs1_b0_val == rs2_b0_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b6_val == -65, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b5_val == 16, rs1_b2_val == 16, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcf810f88010f900;  op2val:0x9bff8c003c00500
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfcf810f88010f900, 0x9bff8c003c00500, x1, 61*XLEN/8, x3)

inst_88:// rs1_b0_val == 127, rs2_b1_val == -3, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b3_val == -65, rs2_b7_val == -17, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b0_val == -86, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b5_val == -65, rs2_b2_val == -17, rs1_b4_val == -2
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa3ff8febf05fc7f;  op2val:0xef03bf7fc0effdaa
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfa3ff8febf05fc7f, 0xef03bf7fc0effdaa, x1, 62*XLEN/8, x3)

inst_89:// rs1_b1_val == -5, rs2_b0_val == 127, rs1_b3_val == 32, rs2_b5_val == 1, rs1_b5_val == -2, rs2_b4_val == 0, rs1_b7_val == -3
// opcode: psadd.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd06fefa20dffbfc;  op2val:0xfa3f0100f7bf057f
TEST_RR_OP(psadd.b, x31, x30, x29, 0x0000000000000000, 0xfd06fefa20dffbfc, 0xfa3f0100f7bf057f, x1, 63*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 64*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
