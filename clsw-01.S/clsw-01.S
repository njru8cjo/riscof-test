
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 03:47:09 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p4-5.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clsw instruction of the RISC-V RV64PZicsr extension for the clsw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clsw)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1==x5, rd==x24, rs1_w0_val == -2147483648, rs1_w1_val == -268435457
// opcode: clsw ; op1:x5; dest:x24; op1val:0xefffffff80000000;
TEST_RD_OP( clsw, x24, x5, 0x0000000000000000, 0xefffffff80000000, x4, 0*XLEN/8, x2)

inst_1:
// rs1==x13, rd==x27, rs1_w0_val == -1, rs1_w1_val == 16777216
// opcode: clsw ; op1:x13; dest:x27; op1val:0x1000000ffffffff;
TEST_RD_OP( clsw, x27, x13, 0x0000000000000000, 0x1000000ffffffff, x4, 2*XLEN/8, x2)

inst_2:
// rs1==x23, rd==x1, rs1_w0_val == 0, rs1_w1_val == 16
// opcode: clsw ; op1:x23; dest:x1; op1val:0x00001000000000;
TEST_RD_OP( clsw, x1, x23, 0x0000000000000000, 0x00001000000000, x4, 4*XLEN/8, x2)

inst_3:
// rs1==x0, rd==x26, rs1_w0_val == 1, 
// opcode: clsw ; op1:x0; dest:x26; op1val:0xfffffffa00000001;
TEST_RD_OP( clsw, x26, x0, 0x0000000000000000, 0xfffffffa00000001, x4, 6*XLEN/8, x2)

inst_4:
// rs1==x21, rd==x15, rs1_w0_val == 2147483647, rs1_w1_val == 8388608
// opcode: clsw ; op1:x21; dest:x15; op1val:0x8000007fffffff;
TEST_RD_OP( clsw, x15, x21, 0x0000000000000000, 0x8000007fffffff, x4, 8*XLEN/8, x2)

inst_5:
// rs1==x7, rd==x19, rs1_w0_val == 2, rs1_w1_val == -1
// opcode: clsw ; op1:x7; dest:x19; op1val:0xffffffff00000002;
TEST_RD_OP( clsw, x19, x7, 0x0000000000000000, 0xffffffff00000002, x4, 10*XLEN/8, x2)

inst_6:
// rs1==x25, rd==x20, rs1_w0_val == 4, rs1_w1_val == -65537
// opcode: clsw ; op1:x25; dest:x20; op1val:0xfffeffff00000004;
TEST_RD_OP( clsw, x20, x25, 0x0000000000000000, 0xfffeffff00000004, x4, 12*XLEN/8, x2)

inst_7:
// rs1==x10, rd==x11, rs1_w0_val == 8, rs1_w1_val == -16385
// opcode: clsw ; op1:x10; dest:x11; op1val:0xffffbfff00000008;
TEST_RD_OP( clsw, x11, x10, 0x0000000000000000, 0xffffbfff00000008, x4, 14*XLEN/8, x2)

inst_8:
// rs1==x16, rd==x9, rs1_w0_val == 16, rs1_w1_val == 4096
// opcode: clsw ; op1:x16; dest:x9; op1val:0x00100000000010;
TEST_RD_OP( clsw, x9, x16, 0x0000000000000000, 0x00100000000010, x4, 16*XLEN/8, x2)

inst_9:
// rs1==x12, rd==x16, rs1_w0_val == 32, rs1_w1_val == 8
// opcode: clsw ; op1:x12; dest:x16; op1val:0x00000800000020;
TEST_RD_OP( clsw, x16, x12, 0x0000000000000000, 0x00000800000020, x4, 18*XLEN/8, x2)

inst_10:
// rs1==x22, rd==x18, rs1_w0_val == 64, rs1_w1_val == -262145
// opcode: clsw ; op1:x22; dest:x18; op1val:0xfffbffff00000040;
TEST_RD_OP( clsw, x18, x22, 0x0000000000000000, 0xfffbffff00000040, x4, 20*XLEN/8, x2)

inst_11:
// rs1==x9, rd==x0, rs1_w0_val == 128, rs1_w1_val == -513
// opcode: clsw ; op1:x9; dest:x0; op1val:0xfffffdff00000080;
TEST_RD_OP( clsw, x0, x9, 0x0000000000000000, 0xfffffdff00000080, x4, 22*XLEN/8, x2)

inst_12:
// rs1==x18, rd==x30, rs1_w0_val == 256, rs1_w1_val == 2147483647
// opcode: clsw ; op1:x18; dest:x30; op1val:0x7fffffff00000100;
TEST_RD_OP( clsw, x30, x18, 0x0000000000000000, 0x7fffffff00000100, x4, 24*XLEN/8, x2)

inst_13:
// rs1==x3, rd==x5, rs1_w0_val == 512, rs1_w1_val == 1431655765
// opcode: clsw ; op1:x3; dest:x5; op1val:0x5555555500000200;
TEST_RD_OP( clsw, x5, x3, 0x0000000000000000, 0x5555555500000200, x4, 26*XLEN/8, x2)

inst_14:
// rs1==x6, rd==x31, rs1_w0_val == 1024, rs1_w1_val == -3
// opcode: clsw ; op1:x6; dest:x31; op1val:0xfffffffd00000400;
TEST_RD_OP( clsw, x31, x6, 0x0000000000000000, 0xfffffffd00000400, x4, 28*XLEN/8, x2)

inst_15:
// rs1==x28, rd==x13, rs1_w0_val == 2048, 
// opcode: clsw ; op1:x28; dest:x13; op1val:0xffffffff00000800;
TEST_RD_OP( clsw, x13, x28, 0x0000000000000000, 0xffffffff00000800, x4, 30*XLEN/8, x2)

inst_16:
// rs1==x27, rd==x23, rs1_w0_val == 4096, rs1_w1_val == -33554433
// opcode: clsw ; op1:x27; dest:x23; op1val:0xfdffffff00001000;
TEST_RD_OP( clsw, x23, x27, 0x0000000000000000, 0xfdffffff00001000, x4, 32*XLEN/8, x2)

inst_17:
// rs1==x11, rd==x8, rs1_w0_val == 8192, 
// opcode: clsw ; op1:x11; dest:x8; op1val:0xfffffffa00002000;
TEST_RD_OP( clsw, x8, x11, 0x0000000000000000, 0xfffffffa00002000, x4, 34*XLEN/8, x2)

inst_18:
// rs1==x8, rd==x28, rs1_w0_val == 16384, rs1_w1_val == -1048577
// opcode: clsw ; op1:x8; dest:x28; op1val:0xffefffff00004000;
TEST_RD_OP( clsw, x28, x8, 0x0000000000000000, 0xffefffff00004000, x4, 36*XLEN/8, x9)

inst_19:
// rs1==x19, rd==x2, rs1_w0_val == 32768, rs1_w1_val == -8388609
// opcode: clsw ; op1:x19; dest:x2; op1val:0xff7fffff00008000;
TEST_RD_OP( clsw, x2, x19, 0x0000000000000000, 0xff7fffff00008000, x4, 38*XLEN/8, x9)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_20:
// rs1==x29, rd==x7, rs1_w0_val == 65536, 
// opcode: clsw ; op1:x29; dest:x7; op1val:0x5555555500010000;
TEST_RD_OP( clsw, x7, x29, 0x0000000000000000, 0x5555555500010000, x5, 0*XLEN/8, x9)

inst_21:
// rs1==x2, rd==x6, rs1_w0_val == 131072, rs1_w1_val == -2
// opcode: clsw ; op1:x2; dest:x6; op1val:0xfffffffe00020000;
TEST_RD_OP( clsw, x6, x2, 0x0000000000000000, 0xfffffffe00020000, x5, 2*XLEN/8, x9)

inst_22:
// rs1==x20, rd==x3, rs1_w0_val == 262144, 
// opcode: clsw ; op1:x20; dest:x3; op1val:0xfffffffc00040000;
TEST_RD_OP( clsw, x3, x20, 0x0000000000000000, 0xfffffffc00040000, x5, 4*XLEN/8, x9)

inst_23:
// rs1==x26, rd==x12, rs1_w0_val == 524288, rs1_w1_val == 8192
// opcode: clsw ; op1:x26; dest:x12; op1val:0x00200000080000;
TEST_RD_OP( clsw, x12, x26, 0x0000000000000000, 0x00200000080000, x5, 6*XLEN/8, x9)

inst_24:
// rs1==x30, rd==x25, rs1_w0_val == 1048576, rs1_w1_val == -17
// opcode: clsw ; op1:x30; dest:x25; op1val:0xffffffef00100000;
TEST_RD_OP( clsw, x25, x30, 0x0000000000000000, 0xffffffef00100000, x5, 8*XLEN/8, x9)

inst_25:
// rs1==x1, rd==x14, rs1_w0_val == 2097152, rs1_w1_val == 2
// opcode: clsw ; op1:x1; dest:x14; op1val:0x00000200200000;
TEST_RD_OP( clsw, x14, x1, 0x0000000000000000, 0x00000200200000, x5, 10*XLEN/8, x9)

inst_26:
// rs1==x4, rd==x21, rs1_w0_val == 4194304, rs1_w1_val == 536870912
// opcode: clsw ; op1:x4; dest:x21; op1val:0x2000000000400000;
TEST_RD_OP( clsw, x21, x4, 0x0000000000000000, 0x2000000000400000, x5, 12*XLEN/8, x9)

inst_27:
// rs1==x15, rd==x17, rs1_w0_val == 8388608, rs1_w1_val == -8193
// opcode: clsw ; op1:x15; dest:x17; op1val:0xffffdfff00800000;
TEST_RD_OP( clsw, x17, x15, 0x0000000000000000, 0xffffdfff00800000, x5, 14*XLEN/8, x9)

inst_28:
// rs1==x31, rd==x10, rs1_w0_val == 16777216, 
// opcode: clsw ; op1:x31; dest:x10; op1val:0x00000701000000;
TEST_RD_OP( clsw, x10, x31, 0x0000000000000000, 0x00000701000000, x5, 16*XLEN/8, x9)

inst_29:
// rs1==x14, rd==x22, rs1_w0_val == 33554432, 
// opcode: clsw ; op1:x14; dest:x22; op1val:0xfffffdff02000000;
TEST_RD_OP( clsw, x22, x14, 0x0000000000000000, 0xfffffdff02000000, x5, 18*XLEN/8, x9)

inst_30:
// rs1==x17, rd==x4, rs1_w0_val == 67108864, 
// opcode: clsw ; op1:x17; dest:x4; op1val:0xffffffef04000000;
TEST_RD_OP( clsw, x4, x17, 0x0000000000000000, 0xffffffef04000000, x5, 20*XLEN/8, x9)

inst_31:
// rs1==x24, rd==x29, rs1_w0_val == 134217728, 
// opcode: clsw ; op1:x24; dest:x29; op1val:0x00100008000000;
TEST_RD_OP( clsw, x29, x24, 0x0000000000000000, 0x00100008000000, x5, 22*XLEN/8, x9)

inst_32:
// rs1_w0_val == 268435456, rs1_w1_val == 4
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00000410000000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00000410000000, x5, 24*XLEN/8, x9)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00200020000000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00200020000000, x5, 26*XLEN/8, x9)

inst_34:
// rs1_w0_val == 1073741824, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00000440000000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00000440000000, x5, 28*XLEN/8, x9)

inst_35:
// rs1_w0_val == -2, rs1_w1_val == 256
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000100fffffffe;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000100fffffffe, x5, 30*XLEN/8, x9)

inst_36:
// rs1_w0_val == -3, rs1_w1_val == -2049
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffff7fffffffffd;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffff7fffffffffd, x5, 32*XLEN/8, x9)

inst_37:
// rs1_w0_val == -5, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000100fffffffb;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000100fffffffb, x5, 34*XLEN/8, x9)

inst_38:
// rs1_w0_val == -9, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x7ffffffffffffff7;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x7ffffffffffffff7, x5, 36*XLEN/8, x9)

inst_39:
// rs1_w0_val == -17, rs1_w1_val == 65536
// opcode: clsw ; op1:x30; dest:x31; op1val:0x010000ffffffef;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x010000ffffffef, x5, 38*XLEN/8, x9)

inst_40:
// rs1_w0_val == -33, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000004ffffffdf;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000004ffffffdf, x5, 40*XLEN/8, x9)

inst_41:
// rs1_w0_val == -65, rs1_w1_val == 2048
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000800ffffffbf;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000800ffffffbf, x5, 42*XLEN/8, x9)

inst_42:
// rs1_w0_val == -129, rs1_w1_val == -5
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffffbffffff7f;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffffbffffff7f, x5, 44*XLEN/8, x9)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == 67108864
// opcode: clsw ; op1:x30; dest:x31; op1val:0x4000000fffffeff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x4000000fffffeff, x5, 46*XLEN/8, x9)

inst_44:
// rs1_w1_val == -67108865, rs1_w0_val == -4097
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfbffffffffffefff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfbffffffffffefff, x5, 48*XLEN/8, x9)

inst_45:
// rs1_w1_val == -134217729, rs1_w0_val == -1073741825
// opcode: clsw ; op1:x30; dest:x31; op1val:0xf7ffffffbfffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xf7ffffffbfffffff, x5, 50*XLEN/8, x9)

inst_46:
// rs1_w1_val == -536870913, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xdfffffffffffffdf;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xdfffffffffffffdf, x5, 52*XLEN/8, x9)

inst_47:
// rs1_w1_val == -1073741825, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xbffffffffffffffe;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xbffffffffffffffe, x5, 54*XLEN/8, x9)

inst_48:
// rs1_w1_val == -1431655766, rs1_w0_val == -513
// opcode: clsw ; op1:x30; dest:x31; op1val:0xaaaaaaaafffffdff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xaaaaaaaafffffdff, x5, 56*XLEN/8, x9)

inst_49:
// rs1_w0_val == -1025, rs1_w1_val == 512
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000200fffffbff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000200fffffbff, x5, 58*XLEN/8, x9)

inst_50:
// rs1_w0_val == -2049, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000008fffff7ff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000008fffff7ff, x5, 60*XLEN/8, x9)

inst_51:
// rs1_w0_val == -8193, rs1_w1_val == -2147483648
// opcode: clsw ; op1:x30; dest:x31; op1val:0x80000000ffffdfff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x80000000ffffdfff, x5, 62*XLEN/8, x9)

inst_52:
// rs1_w0_val == -16385, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffdffffffbfff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffdffffffbfff, x5, 64*XLEN/8, x9)

inst_53:
// rs1_w0_val == -32769, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000003ffff7fff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000003ffff7fff, x5, 66*XLEN/8, x9)

inst_54:
// rs1_w0_val == -65537, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xeffffffffffeffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xeffffffffffeffff, x5, 68*XLEN/8, x9)

inst_55:
// rs1_w0_val == -131073, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfdfffffffffdffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfdfffffffffdffff, x5, 70*XLEN/8, x9)

inst_56:
// rs1_w0_val == -262145, rs1_w1_val == -2097153
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffdffffffffbffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffdffffffffbffff, x5, 72*XLEN/8, x9)

inst_57:
// rs1_w0_val == -524289, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffdffffffff7ffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffdffffffff7ffff, x5, 74*XLEN/8, x9)

inst_58:
// rs1_w0_val == -1048577, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffff6ffefffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffff6ffefffff, x5, 76*XLEN/8, x9)

inst_59:
// rs1_w0_val == -2097153, rs1_w1_val == 262144
// opcode: clsw ; op1:x30; dest:x31; op1val:0x040000ffdfffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x040000ffdfffff, x5, 78*XLEN/8, x9)

inst_60:
// rs1_w0_val == -4194305, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x800000ffbfffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x800000ffbfffff, x5, 80*XLEN/8, x9)

inst_61:
// rs1_w0_val == -8388609, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x3fffffffff7fffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x3fffffffff7fffff, x5, 82*XLEN/8, x9)

inst_62:
// rs1_w0_val == -16777217, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000006feffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000006feffffff, x5, 84*XLEN/8, x9)

inst_63:
// rs1_w0_val == -33554433, rs1_w1_val == 4194304
// opcode: clsw ; op1:x30; dest:x31; op1val:0x400000fdffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x400000fdffffff, x5, 86*XLEN/8, x9)

inst_64:
// rs1_w0_val == -67108865, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xbffffffffbffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xbffffffffbffffff, x5, 88*XLEN/8, x9)

inst_65:
// rs1_w0_val == -134217729, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000010f7ffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000010f7ffffff, x5, 90*XLEN/8, x9)

inst_66:
// rs1_w0_val == -268435457, rs1_w1_val == -16777217
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfeffffffefffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfeffffffefffffff, x5, 92*XLEN/8, x9)

inst_67:
// rs1_w0_val == -536870913, rs1_w1_val == 1048576
// opcode: clsw ; op1:x30; dest:x31; op1val:0x100000dfffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x100000dfffffff, x5, 94*XLEN/8, x9)

inst_68:
// rs1_w0_val == 1431655765, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x100000055555555;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x100000055555555, x5, 96*XLEN/8, x9)

inst_69:
// rs1_w0_val == -1431655766, rs1_w1_val == -129
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffffff7faaaaaaaa;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffffff7faaaaaaaa, x5, 98*XLEN/8, x9)

inst_70:
// rs1_w1_val == 0, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000000bfffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000000bfffffff, x5, 100*XLEN/8, x9)

inst_71:
// rs1_w1_val == 1, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00000100000009;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00000100000009, x5, 102*XLEN/8, x9)

inst_72:
// rs1_w1_val == 32, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000020ffefffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000020ffefffff, x5, 104*XLEN/8, x9)

inst_73:
// rs1_w1_val == 64, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00004000004000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00004000004000, x5, 106*XLEN/8, x9)

inst_74:
// rs1_w1_val == 128, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00008000000006;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00008000000006, x5, 108*XLEN/8, x9)

inst_75:
// rs1_w1_val == 1024, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x000400ffefffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x000400ffefffff, x5, 110*XLEN/8, x9)

inst_76:
// rs1_w1_val == 16384, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x004000fffffeff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x004000fffffeff, x5, 112*XLEN/8, x9)

inst_77:
// rs1_w1_val == 32768, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x00800000020000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x00800000020000, x5, 114*XLEN/8, x9)

inst_78:
// rs1_w1_val == 131072, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x020000feffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x020000feffffff, x5, 116*XLEN/8, x9)

inst_79:
// rs1_w1_val == 524288, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x08000000000400;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x08000000000400, x5, 118*XLEN/8, x9)

inst_80:
// rs1_w1_val == 33554432, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x2000000dfffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x2000000dfffffff, x5, 120*XLEN/8, x9)

inst_81:
// rs1_w1_val == 134217728, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x800000000000001;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x800000000000001, x5, 122*XLEN/8, x9)

inst_82:
// rs1_w1_val == 268435456, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x10000000fffffff9;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x10000000fffffff9, x5, 124*XLEN/8, x9)

inst_83:
// rs1_w1_val == 1073741824, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x4000000000000008;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x4000000000000008, x5, 126*XLEN/8, x9)

inst_84:
// rs1_w1_val == -9, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffff7aaaaaaaa;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffff7aaaaaaaa, x5, 128*XLEN/8, x9)

inst_85:
// rs1_w1_val == -33, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffffffdffeffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffffffdffeffffff, x5, 130*XLEN/8, x9)

inst_86:
// rs1_w1_val == -65, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffffffbfffffbfff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffffffbfffffbfff, x5, 132*XLEN/8, x9)

inst_87:
// rs1_w1_val == -257, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffeff00000080;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffeff00000080, x5, 134*XLEN/8, x9)

inst_88:
// rs1_w1_val == -1025, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffffbff00000007;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffffbff00000007, x5, 136*XLEN/8, x9)

inst_89:
// rs1_w1_val == -4097, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffffeffffffffff8;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffffeffffffffff8, x5, 138*XLEN/8, x9)

inst_90:
// rs1_w1_val == -4194305, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffbffffffffffff6;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffbffffffffffff6, x5, 140*XLEN/8, x9)

inst_91:
// rs1_w1_val == -131073, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfffdffff00000100;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfffdffff00000100, x5, 142*XLEN/8, x9)

inst_92:
// rs1_w1_val == -524289, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xfff7ffff00002000;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xfff7ffff00002000, x5, 144*XLEN/8, x9)

inst_93:
// rs1_w1_val == 2097152, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0x200000fdffffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0x200000fdffffff, x5, 146*XLEN/8, x9)

inst_94:
// rs1_w1_val == -32769, 
// opcode: clsw ; op1:x30; dest:x31; op1val:0xffff7ffffffdffff;
TEST_RD_OP( clsw, x31, x30, 0x0000000000000000, 0xffff7ffffffdffff, x5, 148*XLEN/8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 40*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 150*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
