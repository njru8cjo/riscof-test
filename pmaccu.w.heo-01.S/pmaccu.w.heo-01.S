
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Mar 14 02:36:27 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmaccu.w.heo instruction of the RISC-V RV64PZicsr extension for the pmaccu.w.heo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmaccu.w.heo)

RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==x22, rs2==x20, rd==x20, rd_w0_val == -2147483648, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val != rs2_w1_val, rd_w1_val == 268435456, rs2_w0_val == 16777216, rs1_w0_val == 128, rs2_w1_val == -1431655766, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val == -65537
// opcode: pmaccu.w.heo ; op1:x22; op2:x20; dest:x20; op1val:0xfffeffff00000080;  op2val:0xaaaaaaaa01000000
TEST_RD_RR_OP(pmaccu.w.heo, x20, x22, x20, 0x0000000000000000, 0x1000000080000000, 0xfffeffff00000080, 0xaaaaaaaa01000000, x15, 0*XLEN/8, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x10, rd==x2, rd_w0_val == -1, rs2_w1_val == 16777216, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -134217729, rs2_w0_val == 131072
// opcode: pmaccu.w.heo ; op1:x14; op2:x10; dest:x2; op1val:0xf7ffffff3fffffff;  op2val:0x100000000020000
TEST_RD_RR_OP(pmaccu.w.heo, x2, x14, x10, 0x0000000000000000, 0x10000000ffffffff, 0xf7ffffff3fffffff, 0x100000000020000, x15, 1*XLEN/8, x16)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x18, rd==x7, rd_w0_val == 0, rs2_w1_val == 1431655765, rs1_w1_val == -4097, rd_w1_val == -536870913, rs1_w0_val == 1024
// opcode: pmaccu.w.heo ; op1:x7; op2:x18; dest:x7; op1val:0xffffefff00000400;  op2val:0x5555555501000000
TEST_RD_RR_OP(pmaccu.w.heo, x7, x7, x18, 0x0000000000000000, 0xdfffffff00000000, 0xffffefff00000400, 0x5555555501000000, x15, 2*XLEN/8, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rd_w0_val == 1, rs2_w0_val == 268435456, rs1_w1_val == 1073741824, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmaccu.w.heo ; op1:x31; op2:x31; dest:x31; op1val:0x4000000000000006;  op2val:0xfffffffa10000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x31, x31, 0x0000000000000000, 0x00000500000001, 0x4000000000000006, 0xfffffffa10000000, x15, 3*XLEN/8, x16)

inst_4:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x8, rd_w0_val == 2147483647, rs2_w1_val == 2048, rs2_w0_val == 524288, rd_w1_val == 2147483647, rs1_w0_val == 1, rs1_w1_val == 1, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pmaccu.w.heo ; op1:x17; op2:x17; dest:x8; op1val:0x00000100000001;  op2val:0x00080000080000
TEST_RD_RR_OP(pmaccu.w.heo, x8, x17, x17, 0x0000000000000000, 0x7fffffff7fffffff, 0x00000100000001, 0x00080000080000, x15, 4*XLEN/8, x16)

inst_5:
// rs1==x0, rs2==x19, rd==x26, rd_w0_val == 2, rs2_w0_val == -131073, rs1_w1_val == -2147483648, rd_w1_val == 131072, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -131073, rs2_w1_val == -65, rs1_w0_val == rs2_w0_val
// opcode: pmaccu.w.heo ; op1:x0; op2:x19; dest:x26; op1val:0x80000000fffdffff;  op2val:0xffffffbffffdffff
TEST_RD_RR_OP(pmaccu.w.heo, x26, x0, x19, 0x0000000000000000, 0x02000000000002, 0x80000000fffdffff, 0xffffffbffffdffff, x15, 5*XLEN/8, x16)

inst_6:
// rs1==x2, rs2==x3, rd==x29, rd_w0_val == 4, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 4, rd_w1_val == 4096, rs2_w1_val == -2, rs2_w0_val == -65
// opcode: pmaccu.w.heo ; op1:x2; op2:x3; dest:x29; op1val:0x3fffffff00000004;  op2val:0xfffffffeffffffbf
TEST_RD_RR_OP(pmaccu.w.heo, x29, x2, x3, 0x0000000000000000, 0x00100000000004, 0x3fffffff00000004, 0xfffffffeffffffbf, x15, 6*XLEN/8, x16)

inst_7:
// rs1==x19, rs2==x28, rd==x13, rd_w0_val == 8, rs2_w0_val == 16, rs2_w1_val == -134217729, rd_w1_val == 2048, rs1_w1_val == 32
// opcode: pmaccu.w.heo ; op1:x19; op2:x28; dest:x13; op1val:0x0000203fffffff;  op2val:0xf7ffffff00000010
TEST_RD_RR_OP(pmaccu.w.heo, x13, x19, x28, 0x0000000000000000, 0x00080000000008, 0x0000203fffffff, 0xf7ffffff00000010, x15, 7*XLEN/8, x16)

inst_8:
// rs1==x28, rs2==x29, rd==x4, rd_w0_val == 16, rs2_w1_val == -65537, rd_w1_val == 2, rs1_w1_val == 268435456, rs2_w0_val == 134217728, rs1_w0_val == 512
// opcode: pmaccu.w.heo ; op1:x28; op2:x29; dest:x4; op1val:0x1000000000000200;  op2val:0xfffeffff08000000
TEST_RD_RR_OP(pmaccu.w.heo, x4, x28, x29, 0x0000000000000000, 0x00000200000010, 0x1000000000000200, 0xfffeffff08000000, x15, 8*XLEN/8, x16)

inst_9:
// rs1==x30, rs2==x9, rd==x5, rd_w0_val == 32, rd_w1_val == -268435457, rs1_w0_val == -2147483648, rs1_w1_val == -536870913, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -17
// opcode: pmaccu.w.heo ; op1:x30; op2:x9; dest:x5; op1val:0xdfffffff80000000;  op2val:0xffffffef00000006
TEST_RD_RR_OP(pmaccu.w.heo, x5, x30, x9, 0x0000000000000000, 0xefffffff00000020, 0xdfffffff80000000, 0xffffffef00000006, x15, 9*XLEN/8, x16)

inst_10:
// rs1==x6, rs2==x1, rd==x9, rd_w0_val == 64, rs2_w1_val == 134217728, rs2_w0_val == 32768, rs1_w0_val == -1431655766, rd_w1_val == -1
// opcode: pmaccu.w.heo ; op1:x6; op2:x1; dest:x9; op1val:0xfffffffaaaaaaaaa;  op2val:0x800000000008000
TEST_RD_RR_OP(pmaccu.w.heo, x9, x6, x1, 0x0000000000000000, 0xffffffff00000040, 0xfffffffaaaaaaaaa, 0x800000000008000, x15, 10*XLEN/8, x16)

inst_11:
// rs1==x11, rs2==x22, rd==x6, rd_w0_val == 128, rs2_w0_val == 262144, rs1_w0_val == 67108864, rd_w1_val == -2, rs2_w1_val == -2147483648, rs1_w1_val == 1024
// opcode: pmaccu.w.heo ; op1:x11; op2:x22; dest:x6; op1val:0x00040004000000;  op2val:0x8000000000040000
TEST_RD_RR_OP(pmaccu.w.heo, x6, x11, x22, 0x0000000000000000, 0xfffffffe00000080, 0x00040004000000, 0x8000000000040000, x15, 11*XLEN/8, x16)

inst_12:
// rs1==x25, rs2==x5, rd==x10, rd_w0_val == 256, rs1_w0_val == -33, rd_w1_val == -5, rs1_w1_val == 524288, rs2_w0_val == -2049
// opcode: pmaccu.w.heo ; op1:x25; op2:x5; dest:x10; op1val:0x080000ffffffdf;  op2val:0xaaaaaaaafffff7ff
TEST_RD_RR_OP(pmaccu.w.heo, x10, x25, x5, 0x0000000000000000, 0xfffffffb00000100, 0x080000ffffffdf, 0xaaaaaaaafffff7ff, x15, 12*XLEN/8, x16)

inst_13:
// rs1==x23, rs2==x13, rd==x12, rd_w0_val == 512, rs1_w0_val == 268435456, rs2_w1_val == 64, rs1_w1_val == -129
// opcode: pmaccu.w.heo ; op1:x23; op2:x13; dest:x12; op1val:0xffffff7f10000000;  op2val:0x00004001000000
TEST_RD_RR_OP(pmaccu.w.heo, x12, x23, x13, 0x0000000000000000, 0x00000500000200, 0xffffff7f10000000, 0x00004001000000, x15, 13*XLEN/8, x16)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_14:
// rs1==x18, rs2==x14, rd==x0, rd_w0_val == 1024, rs2_w1_val == 536870912, rs1_w0_val == 131072, rs1_w1_val == 0, rs2_w0_val == -4097
// opcode: pmaccu.w.heo ; op1:x18; op2:x14; dest:x0; op1val:0x00000000020000;  op2val:0x20000000ffffefff
TEST_RD_RR_OP(pmaccu.w.heo, x0, x18, x14, 0x0000000000000000, 0x3fffffff00000400, 0x00000000020000, 0x20000000ffffefff, x6, 0*XLEN/8, x9)

inst_15:
// rs1==x26, rs2==x25, rd==x28, rd_w0_val == 2048, rs1_w1_val == -16385, rs2_w0_val == -32769, rs1_w0_val == -262145, rs2_w1_val == 33554432
// opcode: pmaccu.w.heo ; op1:x26; op2:x25; dest:x28; op1val:0xffffbffffffbffff;  op2val:0x2000000ffff7fff
TEST_RD_RR_OP(pmaccu.w.heo, x28, x26, x25, 0x0000000000000000, 0x02000000000800, 0xffffbffffffbffff, 0x2000000ffff7fff, x6, 1*XLEN/8, x9)

inst_16:
// rs1==x12, rs2==x4, rd==x18, rd_w0_val == 4096, rd_w1_val == -134217729, rs2_w0_val == 4194304, rs1_w0_val == 65536, rs2_w1_val == 67108864, rs1_w1_val == 4096
// opcode: pmaccu.w.heo ; op1:x12; op2:x4; dest:x18; op1val:0x00100000010000;  op2val:0x400000000400000
TEST_RD_RR_OP(pmaccu.w.heo, x18, x12, x4, 0x0000000000000000, 0xf7ffffff00001000, 0x00100000010000, 0x400000000400000, x6, 2*XLEN/8, x9)

inst_17:
// rs1==x27, rs2==x21, rd==x15, rd_w0_val == 8192, rs1_w0_val == -4097, rs1_w1_val == -1431655766, rs2_w0_val == 8, rd_w1_val == 32768
// opcode: pmaccu.w.heo ; op1:x27; op2:x21; dest:x15; op1val:0xaaaaaaaaffffefff;  op2val:0xfffeffff00000008
TEST_RD_RR_OP(pmaccu.w.heo, x15, x27, x21, 0x0000000000000000, 0x00800000002000, 0xaaaaaaaaffffefff, 0xfffeffff00000008, x6, 3*XLEN/8, x9)

inst_18:
// rs1==x15, rs2==x16, rd==x11, rd_w0_val == 16384, rs2_w0_val == -16777217, rs1_w0_val == 1431655765, rs1_w1_val == 8
// opcode: pmaccu.w.heo ; op1:x15; op2:x16; dest:x11; op1val:0x00000855555555;  op2val:0xffffffbffeffffff
TEST_RD_RR_OP(pmaccu.w.heo, x11, x15, x16, 0x0000000000000000, 0xfffffff900004000, 0x00000855555555, 0xffffffbffeffffff, x6, 4*XLEN/8, x9)

inst_19:
// rs1==x21, rs2==x27, rd==x19, rd_w0_val == 32768, rs2_w0_val == 1048576, rs2_w1_val == 2
// opcode: pmaccu.w.heo ; op1:x21; op2:x27; dest:x19; op1val:0xf7ffffff80000000;  op2val:0x00000200100000
TEST_RD_RR_OP(pmaccu.w.heo, x19, x21, x27, 0x0000000000000000, 0x00000700008000, 0xf7ffffff80000000, 0x00000200100000, x6, 5*XLEN/8, x9)

inst_20:
// rs1==x5, rs2==x11, rd==x25, rd_w0_val == 65536, rs1_w0_val == 8192, rs2_w1_val == -536870913, rd_w1_val == 1073741824, rs1_w1_val == 1431655765
// opcode: pmaccu.w.heo ; op1:x5; op2:x11; dest:x25; op1val:0x5555555500002000;  op2val:0xdfffffff00080000
TEST_RD_RR_OP(pmaccu.w.heo, x25, x5, x11, 0x0000000000000000, 0x4000000000010000, 0x5555555500002000, 0xdfffffff00080000, x6, 6*XLEN/8, x9)

inst_21:
// rs1==x8, rs2==x7, rd==x21, rd_w0_val == 131072, rd_w1_val == -3, rs1_w0_val == -1073741825, rs2_w1_val == -262145, rs1_w1_val == 512
// opcode: pmaccu.w.heo ; op1:x8; op2:x7; dest:x21; op1val:0x000200bfffffff;  op2val:0xfffbffffffffefff
TEST_RD_RR_OP(pmaccu.w.heo, x21, x8, x7, 0x0000000000000000, 0xfffffffd00020000, 0x000200bfffffff, 0xfffbffffffffefff, x6, 7*XLEN/8, x9)

inst_22:
// rs1==x1, rs2==x24, rd==x30, rd_w0_val == 262144, rs1_w1_val == 16777216, rd_w1_val == 512, rs1_w0_val == 0, rs2_w1_val == -268435457
// opcode: pmaccu.w.heo ; op1:x1; op2:x24; dest:x30; op1val:0x100000000000000;  op2val:0xeffffffffffffff6
TEST_RD_RR_OP(pmaccu.w.heo, x30, x1, x24, 0x0000000000000000, 0x00020000040000, 0x100000000000000, 0xeffffffffffffff6, x6, 8*XLEN/8, x9)

inst_23:
// rs1==x24, rs2==x0, rd==x1, rd_w0_val == 524288, rs2_w0_val == 8388608, rs1_w1_val == 16384, rs2_w1_val == 8388608
// opcode: pmaccu.w.heo ; op1:x24; op2:x0; dest:x1; op1val:0x004000ffffffdf;  op2val:0x80000000800000
TEST_RD_RR_OP(pmaccu.w.heo, x1, x24, x0, 0x0000000000000000, 0xfffffffc00080000, 0x004000ffffffdf, 0x80000000800000, x6, 9*XLEN/8, x9)

inst_24:
// rs1==x10, rs2==x2, rd==x3, rd_w0_val == 1048576, rs1_w0_val == -8193, rs2_w1_val == 131072, rd_w1_val == 8192
// opcode: pmaccu.w.heo ; op1:x10; op2:x2; dest:x3; op1val:0x000200ffffdfff;  op2val:0x02000000000005
TEST_RD_RR_OP(pmaccu.w.heo, x3, x10, x2, 0x0000000000000000, 0x00200000100000, 0x000200ffffdfff, 0x02000000000005, x6, 10*XLEN/8, x9)

inst_25:
// rs1==x4, rs2==x23, rd==x24, rd_w0_val == 2097152, rs1_w1_val == -3, rs2_w0_val == -2
// opcode: pmaccu.w.heo ; op1:x4; op2:x23; dest:x24; op1val:0xfffffffd00000200;  op2val:0xfffffff9fffffffe
TEST_RD_RR_OP(pmaccu.w.heo, x24, x4, x23, 0x0000000000000000, 0x00000700200000, 0xfffffffd00000200, 0xfffffff9fffffffe, x6, 11*XLEN/8, x9)

inst_26:
// rs1==x16, rs2==x12, rd==x17, rd_w0_val == 4194304, rs2_w1_val == -524289, rs1_w0_val == -513, rs1_w1_val == -32769, rd_w1_val == -257
// opcode: pmaccu.w.heo ; op1:x16; op2:x12; dest:x17; op1val:0xffff7ffffffffdff;  op2val:0xfff7ffff00020000
TEST_RD_RR_OP(pmaccu.w.heo, x17, x16, x12, 0x0000000000000000, 0xfffffeff00400000, 0xffff7ffffffffdff, 0xfff7ffff00020000, x6, 12*XLEN/8, x9)

inst_27:
// rs1==x29, rs2==x15, rd==x27, rd_w0_val == 8388608, rs2_w0_val == 1, rd_w1_val == 4194304, rs2_w1_val == -16777217
// opcode: pmaccu.w.heo ; op1:x29; op2:x15; dest:x27; op1val:0xfffffffcffffdfff;  op2val:0xfeffffff00000001
TEST_RD_RR_OP(pmaccu.w.heo, x27, x29, x15, 0x0000000000000000, 0x40000000800000, 0xfffffffcffffdfff, 0xfeffffff00000001, x6, 13*XLEN/8, x9)

inst_28:
// rs1==x20, rs2==x8, rd==x16, rd_w0_val == 16777216, rs2_w0_val == -65537, rd_w1_val == 16, rs2_w1_val == -1073741825, rs1_w0_val == -268435457
// opcode: pmaccu.w.heo ; op1:x20; op2:x8; dest:x16; op1val:0xf7ffffffefffffff;  op2val:0xbffffffffffeffff
TEST_RD_RR_OP(pmaccu.w.heo, x16, x20, x8, 0x0000000000000000, 0x00001001000000, 0xf7ffffffefffffff, 0xbffffffffffeffff, x6, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x9, rs2==x26, rd==x22, rd_w0_val == 33554432, rs2_w1_val == 1, rd_w1_val == 64, rs1_w0_val == 8
// opcode: pmaccu.w.heo ; op1:x9; op2:x26; dest:x22; op1val:0x00000900000008;  op2val:0x00000100400000
TEST_RD_RR_OP(pmaccu.w.heo, x22, x9, x26, 0x0000000000000000, 0x00004002000000, 0x00000900000008, 0x00000100400000, x1, 0*XLEN/8, x2)

inst_30:
// rs1==x3, rs2==x30, rd==x23, rd_w0_val == 67108864, 
// opcode: pmaccu.w.heo ; op1:x3; op2:x30; dest:x23; op1val:0x001000fffffffa;  op2val:0x00000100100000
TEST_RD_RR_OP(pmaccu.w.heo, x23, x3, x30, 0x0000000000000000, 0x7fffffff04000000, 0x001000fffffffa, 0x00000100100000, x1, 1*XLEN/8, x2)

inst_31:
// rs1==x13, rs2==x6, rd==x14, rd_w0_val == 134217728, rs1_w0_val == 2097152, rd_w1_val == 1024
// opcode: pmaccu.w.heo ; op1:x13; op2:x6; dest:x14; op1val:0x00000000200000;  op2val:0x000006fffffff9
TEST_RD_RR_OP(pmaccu.w.heo, x14, x13, x6, 0x0000000000000000, 0x00040008000000, 0x00000000200000, 0x000006fffffff9, x1, 2*XLEN/8, x2)

inst_32:
// rd_w0_val == 268435456, rs2_w1_val == 4194304, rd_w1_val == 1431655765
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00002000;  op2val:0x400000fffffff8
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x5555555510000000, 0xf7ffffff00002000, 0x400000fffffff8, x1, 3*XLEN/8, x2)

inst_33:
// rd_w0_val == 536870912, rs2_w0_val == 67108864, rs1_w1_val == -262145, rs2_w1_val == 32, rs1_w0_val == 262144
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00040000;  op2val:0x00002004000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00001020000000, 0xfffbffff00040000, 0x00002004000000, x1, 4*XLEN/8, x2)

inst_34:
// rd_w0_val == 1073741824, rs2_w0_val == -2097153, rs1_w0_val == -65, rd_w1_val == -32769
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffffbf;  op2val:0xdfffffffffdfffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7fff40000000, 0x000008ffffffbf, 0xdfffffffffdfffff, x1, 5*XLEN/8, x2)

inst_35:
// rd_w0_val == -2, rs1_w0_val == -536870913, rs2_w1_val == 2097152
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000dfffffff;  op2val:0x20000000000005
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006fffffffe, 0xc0000000dfffffff, 0x20000000000005, x1, 6*XLEN/8, x2)

inst_36:
// rd_w0_val == -3, rd_w1_val == 256
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000000;  op2val:0xfffffff900008000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000100fffffffd, 0xf7ffffff00000000, 0xfffffff900008000, x1, 7*XLEN/8, x2)

inst_37:
// rd_w0_val == -5, rd_w1_val == -513, rs2_w1_val == -513
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000001;  op2val:0xfffffdff00008000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffffb, 0x00000900000001, 0xfffffdff00008000, x1, 8*XLEN/8, x2)

inst_38:
// rd_w0_val == -9, rs2_w0_val == -536870913, rs1_w1_val == -268435457, rs2_w1_val == -33, rs1_w0_val == 134217728
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff08000000;  op2val:0xffffffdfdfffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0xefffffff08000000, 0xffffffdfdfffffff, x1, 9*XLEN/8, x2)

inst_39:
// rd_w0_val == -17, rs2_w1_val == -1048577, rs1_w0_val == 33554432, rs1_w1_val == 128
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00008002000000;  op2val:0xffefffffffff7fff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffef, 0x00008002000000, 0xffefffffffff7fff, x1, 10*XLEN/8, x2)

inst_40:
// rd_w0_val == -33, rs1_w0_val == 4096, rd_w1_val == -262145
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00400000001000;  op2val:0x2000000000020000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffdf, 0x00400000001000, 0x2000000000020000, x1, 11*XLEN/8, x2)

inst_41:
// rd_w0_val == -65, rs2_w1_val == -33554433, rs2_w0_val == 1431655765
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000200;  op2val:0xfdffffff55555555
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003ffffffbf, 0x100000000000200, 0xfdffffff55555555, x1, 12*XLEN/8, x2)

inst_42:
// rd_w0_val == -129, rs1_w0_val == -16385, rs2_w0_val == -8388609, rs2_w1_val == 1048576, rd_w1_val == -4194305
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffbfff;  op2val:0x100000ff7fffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffff7f, 0x000080ffffbfff, 0x100000ff7fffff, x1, 13*XLEN/8, x2)

inst_43:
// rd_w0_val == -257, rs2_w0_val == -33, rs2_w1_val == -5
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffefffffff;  op2val:0xfffffffbffffffdf
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x008000fffffeff, 0xffffbfffefffffff, 0xfffffffbffffffdf, x1, 14*XLEN/8, x2)

inst_44:
// rd_w0_val == -513, rs2_w0_val == -134217729, rs1_w0_val == -524289
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffff7ffff;  op2val:0x000009f7ffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x002000fffffdff, 0xffffff7ffff7ffff, 0x000009f7ffffff, x1, 15*XLEN/8, x2)

inst_45:
// rd_w0_val == -1025, rs1_w1_val == 1048576, rs2_w0_val == -17
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffbfff;  op2val:0xffffffbfffffffef
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040fffffbff, 0x100000ffffbfff, 0xffffffbfffffffef, x1, 16*XLEN/8, x2)

inst_46:
// rd_w0_val == -2049, rs2_w1_val == -4097
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffefff;  op2val:0xffffefff00000001
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x008000fffff7ff, 0xfffffff6ffffefff, 0xffffefff00000001, x1, 17*XLEN/8, x2)

inst_47:
// rd_w0_val == -4097, rs1_w0_val == -32769, rs2_w1_val == 16384
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffff7fff;  op2val:0x00400055555555
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffefff, 0x000005ffff7fff, 0x00400055555555, x1, 18*XLEN/8, x2)

inst_48:
// rd_w0_val == -8193, rs2_w0_val == -2147483648
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000002000;  op2val:0x2000000080000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffdfff, 0xc000000000002000, 0x2000000080000000, x1, 19*XLEN/8, x2)

inst_49:
// rd_w0_val == -16385, rd_w1_val == 33554432, rs2_w0_val == 256, rs1_w1_val == 536870912
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x2000000002000000;  op2val:0xfffffffe00000100
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000ffffbfff, 0x2000000002000000, 0xfffffffe00000100, x1, 20*XLEN/8, x2)

inst_50:
// rd_w0_val == -32769, rs1_w1_val == -8388609
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0xffffffbf04000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000ffff7fff, 0xff7fffffefffffff, 0xffffffbf04000000, x1, 21*XLEN/8, x2)

inst_51:
// rd_w0_val == -65537, rs1_w0_val == 1073741824, rd_w1_val == 8
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000640000000;  op2val:0xfffeffffffdfffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000008fffeffff, 0x00000640000000, 0xfffeffffffdfffff, x1, 22*XLEN/8, x2)

inst_52:
// rd_w0_val == -131073, rs2_w0_val == -1431655766, rs1_w1_val == 16, rs2_w1_val == 1073741824
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000001;  op2val:0x40000000aaaaaaaa
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffdffff, 0x00001000000001, 0x40000000aaaaaaaa, x1, 23*XLEN/8, x2)

inst_53:
// rd_w0_val == -262145, rs2_w1_val == 256, rs1_w1_val == 134217728, rs1_w0_val == -1048577
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffefffff;  op2val:0x000100ff7fffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffbffff, 0x8000000ffefffff, 0x000100ff7fffff, x1, 24*XLEN/8, x2)

inst_54:
// rd_w0_val == -524289, rs2_w1_val == 4
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000780000000;  op2val:0x000004f7ffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xdffffffffff7ffff, 0x00000780000000, 0x000004f7ffffff, x1, 25*XLEN/8, x2)

inst_55:
// rd_w0_val == -1048577, rs2_w0_val == -8193, rs2_w1_val == -3, rs1_w0_val == -67108865, rd_w1_val == 65536, rs1_w1_val == -2049
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffbffffff;  op2val:0xfffffffdffffdfff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x010000ffefffff, 0xfffff7fffbffffff, 0xfffffffdffffdfff, x1, 26*XLEN/8, x2)

inst_56:
// rd_w0_val == -2097153, rs2_w0_val == 0, rs1_w0_val == -2049
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffff7ff;  op2val:0xfffffdff00000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffdfffff, 0xfffffffdfffff7ff, 0xfffffdff00000000, x1, 27*XLEN/8, x2)

inst_57:
// rd_w0_val == -4194305, rs1_w1_val == -17, rs2_w0_val == 1024, rd_w1_val == 1
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000400;  op2val:0xfffffffe00000400
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000001ffbfffff, 0xffffffef00000400, 0xfffffffe00000400, x1, 28*XLEN/8, x2)

inst_58:
// rd_w0_val == -8388609, rs1_w1_val == 67108864
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffff8;  op2val:0x40000000800000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffeffff7fffff, 0x4000000fffffff8, 0x40000000800000, x1, 29*XLEN/8, x2)

inst_59:
// rd_w0_val == -16777217, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd08000000;  op2val:0x800000f7ffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffefffeffffff, 0xfffffffd08000000, 0x800000f7ffffff, x1, 30*XLEN/8, x2)

inst_60:
// rd_w0_val == -33554433, rs2_w1_val == 524288, rd_w1_val == 0
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000008;  op2val:0x08000000000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000fdffffff, 0xffffefff00000008, 0x08000000000000, x1, 31*XLEN/8, x2)

inst_61:
// rd_w0_val == -67108865, rs1_w0_val == 1048576, rs1_w1_val == 131072
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x02000000100000;  op2val:0xf7ffffff00000003
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffbfbffffff, 0x02000000100000, 0xf7ffffff00000003, x1, 32*XLEN/8, x2)

inst_62:
// rd_w0_val == -134217729, rs1_w0_val == 16, rs1_w1_val == rs2_w1_val, rd_w1_val == 32
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000010;  op2val:0x4000000fffffffe
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000020f7ffffff, 0x400000000000010, 0x4000000fffffffe, x1, 33*XLEN/8, x2)

inst_63:
// rd_w0_val == -268435457, rs1_w1_val == 2147483647, rd_w1_val == 2097152, rs2_w0_val == -524289, rs2_w1_val == -257
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00200000;  op2val:0xfffffefffff7ffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x200000efffffff, 0x7fffffff00200000, 0xfffffefffff7ffff, x1, 34*XLEN/8, x2)

inst_64:
// rd_w0_val == -536870913, rs2_w0_val == 2147483647, rs1_w1_val == -2
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffdffff;  op2val:0xfffffffe7fffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006dfffffff, 0xfffffffefffdffff, 0xfffffffe7fffffff, x1, 35*XLEN/8, x2)

inst_65:
// rd_w0_val == -1073741825, rs2_w1_val == -8193, rd_w1_val == -1073741825
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000080;  op2val:0xffffdffffffffffe
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xbfffffffbfffffff, 0x00000500000080, 0xffffdffffffffffe, x1, 36*XLEN/8, x2)

inst_66:
// rd_w0_val == 1431655765, rs1_w1_val == 262144, rs2_w0_val == -33554433
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000400;  op2val:0x3ffffffffdffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555555, 0x04000000000400, 0x3ffffffffdffffff, x1, 37*XLEN/8, x2)

inst_67:
// rd_w0_val == -1431655766, rd_w1_val == 134217728
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000006;  op2val:0x200000fff7ffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000aaaaaaaa, 0xfffffff600000006, 0x200000fff7ffff, x1, 38*XLEN/8, x2)

inst_68:
// rd_w1_val == -2147483648, rs1_w1_val == -131073
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x400000ffff7fff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000000010000, 0xfffdffffaaaaaaaa, 0x400000ffff7fff, x1, 39*XLEN/8, x2)

inst_69:
// rd_w1_val == 4, rs2_w1_val == -16385
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000001;  op2val:0xffffbfff00000006
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000400080000, 0x00100000000001, 0xffffbfff00000006, x1, 40*XLEN/8, x2)

inst_70:
// rd_w1_val == 128, rs2_w0_val == -16385, rs1_w0_val == -33554433
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffdffffff;  op2val:0xdfffffffffffbfff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00008000010000, 0x7ffffffffdffffff, 0xdfffffffffffbfff, x1, 41*XLEN/8, x2)

inst_71:
// rd_w1_val == 16384, rs1_w0_val == -2097153, rs1_w1_val == -67108865
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffdfffff;  op2val:0xffffffeffff7ffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00400000000400, 0xfbffffffffdfffff, 0xffffffeffff7ffff, x1, 42*XLEN/8, x2)

inst_72:
// rd_w1_val == 262144, rs1_w1_val == -1, rs2_w1_val == -32769
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000005;  op2val:0xffff7fff01000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000000100, 0xffffffff00000005, 0xffff7fff01000000, x1, 43*XLEN/8, x2)

inst_73:
// rd_w1_val == 524288, rs2_w0_val == 128
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006fff7ffff;  op2val:0xfdffffff00000080
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000ffffdfff, 0x000006fff7ffff, 0xfdffffff00000080, x1, 44*XLEN/8, x2)

inst_74:
// rd_w1_val == 1048576, rs1_w0_val == 2147483647, rs2_w0_val == 65536
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x0200007fffffff;  op2val:0x00000600010000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000020000, 0x0200007fffffff, 0x00000600010000, x1, 45*XLEN/8, x2)

inst_75:
// rd_w1_val == 8388608, rs1_w1_val == 65536, rs2_w1_val == 512
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff8;  op2val:0x0002007fffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000040000000, 0x010000fffffff8, 0x0002007fffffff, x1, 46*XLEN/8, x2)

inst_76:
// rs1_w1_val == -524289, rs1_w0_val == -1
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0x800000000010000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000010fffeffff, 0xfff7ffffffffffff, 0x800000000010000, x1, 47*XLEN/8, x2)

inst_77:
// rs1_w1_val == -1048577, rd_w1_val == -67108865, rs2_w0_val == -1048577
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000000;  op2val:0x40000000ffefffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0xffefffff00000000, 0x40000000ffefffff, x1, 48*XLEN/8, x2)

inst_78:
// rs1_w1_val == -2097153, rs2_w0_val == 2097152, rd_w1_val == -8193, rs2_w1_val == 0
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffffc;  op2val:0x00000000200000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000005, 0xffdffffffffffffc, 0x00000000200000, x1, 49*XLEN/8, x2)

inst_79:
// rs1_w1_val == -4194305, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffefffff;  op2val:0x000100fffffffa
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000100, 0xffbfffffffefffff, 0x000100fffffffa, x1, 50*XLEN/8, x2)

inst_80:
// rs1_w1_val == -16777217, rs2_w1_val == 1024, rs2_w0_val == -262145
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000080;  op2val:0x000400fffbffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000001000000, 0xfeffffff00000080, 0x000400fffbffff, x1, 51*XLEN/8, x2)

inst_81:
// rs1_w1_val == -33554433, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffdffff;  op2val:0x000002feffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffdff, 0xfdfffffffffdffff, 0x000002feffffff, x1, 52*XLEN/8, x2)

inst_82:
// rs1_w1_val == -1073741825, rs2_w1_val == -2049
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffa;  op2val:0xfffff7fffdffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00040000080000, 0xbffffffffffffffa, 0xfffff7fffdffffff, x1, 53*XLEN/8, x2)

inst_83:
// rs2_w0_val == -1, rs1_w0_val == -3
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffd;  op2val:0x080000ffffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000100ffffffdf, 0x080000fffffffd, 0x080000ffffffff, x1, 54*XLEN/8, x2)

inst_84:
// rs2_w0_val == 2, rd_w1_val == -1431655766
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000400;  op2val:0x80000000000002
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffeffff, 0xfffbffff00000400, 0x80000000000002, x1, 55*XLEN/8, x2)

inst_85:
// rs2_w0_val == 4, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefdffffff;  op2val:0xffffdfff00000004
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffff9, 0xfffffffefdffffff, 0xffffdfff00000004, x1, 56*XLEN/8, x2)

inst_86:
// rs2_w0_val == 32, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffff7ffff;  op2val:0x5555555500000020
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006ffff7fff, 0xffbffffffff7ffff, 0x5555555500000020, x1, 57*XLEN/8, x2)

inst_87:
// rs2_w0_val == 64, rs1_w1_val == -8193, rs2_w1_val == 8192
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffdf;  op2val:0x00200000000040
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004ffffff7f, 0xffffdfffffffffdf, 0x00200000000040, x1, 58*XLEN/8, x2)

inst_88:
// rs2_w0_val == 512, rd_w1_val == -2049, rs1_w0_val == -2
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffe;  op2val:0xbfffffff00000200
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffff7ff04000000, 0x20000000fffffffe, 0xbfffffff00000200, x1, 59*XLEN/8, x2)

inst_89:
// rs2_w0_val == 2048, rs1_w0_val == -129
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffff7f;  op2val:0x5555555500000800
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdff00010000, 0xfffffffaffffff7f, 0x5555555500000800, x1, 60*XLEN/8, x2)

inst_90:
// rs2_w0_val == 4096, rs1_w0_val == 32, rs2_w1_val == -2097153
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000020;  op2val:0xffdfffff00001000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00001000000007, 0xfdffffff00000020, 0xffdfffff00001000, x1, 61*XLEN/8, x2)

inst_91:
// rs2_w0_val == 8192, rd_w1_val == -1025
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffdfffff;  op2val:0x00000100002000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbff08000000, 0x080000ffdfffff, 0x00000100002000, x1, 62*XLEN/8, x2)

inst_92:
// rs2_w0_val == 16384, rs1_w1_val == 256, rd_w1_val == -1048577, rs1_w0_val == -134217729
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000100f7ffffff;  op2val:0xfffffffb00004000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffefffff00010000, 0x000100f7ffffff, 0xfffffffb00004000, x1, 63*XLEN/8, x2)

inst_93:
// rs2_w0_val == 33554432, rs1_w1_val == -1025, rs1_w0_val == -1025
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffbff;  op2val:0x00400002000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000fffdffff, 0xfffffbfffffffbff, 0x00400002000000, x1, 64*XLEN/8, x2)

inst_94:
// rs2_w0_val == 536870912, rs2_w1_val == -1025, rs1_w0_val == -8388609
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffff7fffff;  op2val:0xfffffbff20000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000400c0000000, 0x3fffffffff7fffff, 0xfffffbff20000000, x1, 65*XLEN/8, x2)

inst_95:
// rs2_w0_val == 1073741824, rs1_w0_val == -65537, rs2_w1_val == 32768
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffeffff;  op2val:0x00800040000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x800000fffffffb, 0x000003fffeffff, 0x00800040000000, x1, 66*XLEN/8, x2)

inst_96:
// rs2_w0_val == -3, rd_w1_val == -16385
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000005;  op2val:0x000000fffffffd
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000020, 0xfffeffff00000005, 0x000000fffffffd, x1, 67*XLEN/8, x2)

inst_97:
// rs2_w0_val == -5, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0x000009fffffffb
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffbffff, 0x8000000fbffffff, 0x000009fffffffb, x1, 68*XLEN/8, x2)

inst_98:
// rs2_w0_val == -9, rs1_w0_val == -17
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffffef;  op2val:0x2000000fffffff7
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7fffffbfffff, 0xfffffff9ffffffef, 0x2000000fffffff7, x1, 69*XLEN/8, x2)

inst_99:
// rs2_w0_val == -129, rd_w1_val == -4097
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00040000;  op2val:0x80000000ffffff7f
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffefff00020000, 0xfffffffe00040000, 0x80000000ffffff7f, x1, 70*XLEN/8, x2)

inst_100:
// rs2_w0_val == -257, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffdff;  op2val:0x000003fffffeff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000fffffeff, 0xffffeffffffffdff, 0x000003fffffeff, x1, 71*XLEN/8, x2)

inst_101:
// rs2_w0_val == -513, rd_w1_val == -524289, rs1_w0_val == -9, rs2_w1_val == 128
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffff7;  op2val:0x000080fffffdff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffc, 0x55555555fffffff7, 0x000080fffffdff, x1, 72*XLEN/8, x2)

inst_102:
// rs2_w0_val == -1025, rs1_w0_val == -4194305
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffbfffff;  op2val:0xdffffffffffffbff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000000020, 0xbfffffffffbfffff, 0xdffffffffffffbff, x1, 73*XLEN/8, x2)

inst_103:
// rd_w1_val == -33554433, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffffa;  op2val:0x008000dfffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfdffffffefffffff, 0x000200fffffffa, 0x008000dfffffff, x1, 74*XLEN/8, x2)

inst_104:
// rs2_w1_val == -131073, rd_w1_val == -129, rs1_w1_val == -257
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffdfff;  op2val:0xfffdfffffffffbff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffb, 0xfffffeffffffdfff, 0xfffdfffffffffbff, x1, 75*XLEN/8, x2)

inst_105:
// rs2_w1_val == -129, rs1_w0_val == 2
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000002;  op2val:0xffffff7ffffffff6
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000007ffbfffff, 0x00000000000002, 0xffffff7ffffffff6, x1, 76*XLEN/8, x2)

inst_106:
// rs2_w1_val == -4194305, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff40000000;  op2val:0xffbfffff00000200
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000708000000, 0xfffff7ff40000000, 0xffbfffff00000200, x1, 77*XLEN/8, x2)

inst_107:
// rs2_w1_val == -8388609, rs1_w1_val == 2048, rd_w1_val == -8388609
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffefff;  op2val:0xff7fffff00000800
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7ffffffdffffff, 0x000800ffffefff, 0xff7fffff00000800, x1, 78*XLEN/8, x2)

inst_108:
// rs2_w1_val == -67108865, rs1_w0_val == 32768
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00008000;  op2val:0xfbffffff00000080
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000fffffffe, 0xfffffffc00008000, 0xfbffffff00000080, x1, 79*XLEN/8, x2)

inst_109:
// rs1_w0_val == 64, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000040;  op2val:0x00000400400000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbfffffbffffff, 0xfffffeff00000040, 0x00000400400000, x1, 80*XLEN/8, x2)

inst_110:
// rs1_w0_val == 256, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000100;  op2val:0x000400ffffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000004, 0xfeffffff00000100, 0x000400ffffffff, x1, 81*XLEN/8, x2)

inst_111:
// rs1_w0_val == 2048, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000800;  op2val:0x000000dfffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000000000, 0xfffffffa00000800, 0x000000dfffffff, x1, 82*XLEN/8, x2)

inst_112:
// rs1_w0_val == 16384, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00004000;  op2val:0x0000057fffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000005fbffffff, 0xdfffffff00004000, 0x0000057fffffff, x1, 83*XLEN/8, x2)

inst_113:
// rs1_w0_val == 524288, rs1_w1_val == 33554432
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x200000000080000;  op2val:0xfbffffff00000400
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000200fffffbff, 0x200000000080000, 0xfbffffff00000400, x1, 84*XLEN/8, x2)

inst_114:
// rs1_w0_val == 4194304, rs2_w1_val == -9
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000300400000;  op2val:0xfffffff700004000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x001000ffbfffff, 0x00000300400000, 0xfffffff700004000, x1, 85*XLEN/8, x2)

inst_115:
// rs1_w0_val == 8388608, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000100800000;  op2val:0xffffff7f00008000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00010000000007, 0x00000100800000, 0xffffff7f00008000, x1, 86*XLEN/8, x2)

inst_116:
// rs1_w0_val == 16777216, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa01000000;  op2val:0xfffffffaffffbfff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000009dfffffff, 0xfffffffa01000000, 0xfffffffaffffbfff, x1, 87*XLEN/8, x2)

inst_117:
// rs1_w0_val == 536870912, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00400020000000;  op2val:0xfff7fffffffff7ff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000009fffffffc, 0x00400020000000, 0xfff7fffffffff7ff, x1, 88*XLEN/8, x2)

inst_118:
// rs1_w0_val == -5, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffb;  op2val:0x00080000080000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x02000000000020, 0xaaaaaaaafffffffb, 0x00080000080000, x1, 89*XLEN/8, x2)

inst_119:
// rs1_w0_val == -257, rs1_w1_val == 64
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffeff;  op2val:0xfffeffff00000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000ff7fffff, 0x000040fffffeff, 0xfffeffff00000000, x1, 90*XLEN/8, x2)

inst_120:
// rs1_w0_val == -16777217, rs2_w1_val == 16
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffeffffff;  op2val:0x00001000040000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000200040000, 0xfff7fffffeffffff, 0x00001000040000, x1, 91*XLEN/8, x2)

inst_121:
// rs2_w0_val == -4194305, rd_w1_val == -33
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffe;  op2val:0xffffbfffffbfffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffdffdffffff, 0x000003fffffffe, 0xffffbfffffbfffff, x1, 92*XLEN/8, x2)

inst_122:
// rs2_w0_val == -67108865, rs1_w1_val == 2
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000200400000;  op2val:0x000400fbffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000000001, 0x00000200400000, 0x000400fbffffff, x1, 93*XLEN/8, x2)

inst_123:
// rs2_w0_val == -268435457, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0x000001efffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000008f7ffffff, 0xffffffffffffffef, 0x000001efffffff, x1, 94*XLEN/8, x2)

inst_124:
// rs2_w0_val == -1073741825, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000200aaaaaaaa;  op2val:0x000100bfffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800ffffffff, 0x000200aaaaaaaa, 0x000100bfffffff, x1, 95*XLEN/8, x2)

inst_125:
// rs1_w1_val == 4, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffff7fff;  op2val:0x000800fff7ffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000000000400, 0x000004ffff7fff, 0x000800fff7ffff, x1, 96*XLEN/8, x2)

inst_126:
// rs2_w1_val == -1, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffff7;  op2val:0xfffffffffffffff7
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000001fffdffff, 0x000004fffffff7, 0xfffffffffffffff7, x1, 97*XLEN/8, x2)

inst_127:
// rs2_w1_val == 2147483647, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff7fffffff;  op2val:0x7ffffffffffffffd
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00040000, 0xfffeffff7fffffff, 0x7ffffffffffffffd, x1, 98*XLEN/8, x2)

inst_128:
// rs2_w1_val == 8, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000001;  op2val:0x00000800000004
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004fffffff8, 0x00000100000001, 0x00000800000004, x1, 99*XLEN/8, x2)

inst_129:
// rs1_w1_val == 8192, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000200;  op2val:0xfffffffaf7ffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00200000100000, 0x00200000000200, 0xfffffffaf7ffffff, x1, 100*XLEN/8, x2)

inst_130:
// rd_w1_val == -131073, rs2_w1_val == 262144
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000002c0000000;  op2val:0x040000bfffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffff6, 0x000002c0000000, 0x040000bfffffff, x1, 101*XLEN/8, x2)

inst_131:
// rs1_w1_val == 32768, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000010;  op2val:0x000040fffffffc
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000000800000, 0x00800000000010, 0x000040fffffffc, x1, 102*XLEN/8, x2)

inst_132:
// rd_w1_val == 16777216, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00008000800000;  op2val:0xfffffbff00001000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000000000080, 0x00008000800000, 0xfffffbff00001000, x1, 103*XLEN/8, x2)

inst_133:
// rd_w1_val == 67108864, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffbff;  op2val:0xffffffff00020000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000000000400, 0x55555555fffffbff, 0xffffffff00020000, x1, 104*XLEN/8, x2)

inst_134:
// rs2_w1_val == 4096, rd_w1_val == -16777217
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000040f7ffffff;  op2val:0x0010007fffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0x000040f7ffffff, 0x0010007fffffff, x1, 105*XLEN/8, x2)

inst_135:
// rd_w1_val == 536870912, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x55555555dfffffff;  op2val:0xfffffffcfeffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x20000000ffffff7f, 0x55555555dfffffff, 0xfffffffcfeffffff, x1, 106*XLEN/8, x2)

inst_136:
// rs1_w1_val == 2097152, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x20000020000000;  op2val:0x0000093fffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x01000000000009, 0x20000020000000, 0x0000093fffffff, x1, 107*XLEN/8, x2)

inst_137:
// rs1_w1_val == 4194304, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000040;  op2val:0x00080000200000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000800, 0x40000000000040, 0x00080000200000, x1, 108*XLEN/8, x2)

inst_138:
// rs1_w1_val == 8388608, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x800000fdffffff;  op2val:0xfffffffe00000001
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffbfff, 0x800000fdffffff, 0xfffffffe00000001, x1, 109*XLEN/8, x2)

inst_139:
// rs2_w1_val == 65536, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fff7ffff;  op2val:0x010000fbffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000009, 0xfffffff6fff7ffff, 0x010000fbffffff, x1, 110*XLEN/8, x2)

inst_140:
// rd_w1_val == -9, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcc0000000;  op2val:0x00000100000003
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffefff, 0xfffffffcc0000000, 0x00000100000003, x1, 111*XLEN/8, x2)

inst_141:
// rd_w1_val == -17, rs2_w1_val == 268435456
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffff7fff;  op2val:0x10000000fff7ffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffbf, 0xff7fffffffff7fff, 0x10000000fff7ffff, x1, 112*XLEN/8, x2)

inst_142:
// rd_w1_val == -65, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffbffff;  op2val:0x000006fffdffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffff7, 0xffbffffffffbffff, 0x000006fffdffff, x1, 113*XLEN/8, x2)

inst_143:
// rs1_w1_val == -5, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00100000;  op2val:0x00000800000080
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffbffff, 0xfffffffb00100000, 0x00000800000080, x1, 114*XLEN/8, x2)

inst_144:
// rs1_w1_val == -9, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000400;  op2val:0x100000f7ffffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xbfffffff00001000, 0xfffffff700000400, 0x100000f7ffffff, x1, 115*XLEN/8, x2)

inst_145:
// rs1_w1_val == -33, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffdffff;  op2val:0x00004000100000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000fffeffff, 0xffffffdffffdffff, 0x00004000100000, x1, 116*XLEN/8, x2)

inst_146:
// rs1_w1_val == -513, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffc0000000;  op2val:0xbfffffff00004000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000000000100, 0xfffffdffc0000000, 0xbfffffff00004000, x1, 117*XLEN/8, x2)

inst_147:
// rd_w1_val == -2097153, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000fdffffff;  op2val:0xfffffffafffbffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000080, 0x400000fdffffff, 0xfffffffafffbffff, x1, 118*XLEN/8, x2)

inst_148:
// rs1_w1_val == -65, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000010;  op2val:0x400000000040000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffff00040000, 0xffffffbf00000010, 0x400000000040000, x1, 119*XLEN/8, x2)

inst_149:
// rd_w1_val == -65537, 
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000001;  op2val:0xfffffdff00400000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffeffff01000000, 0x00800000000001, 0xfffffdff00400000, x1, 120*XLEN/8, x2)

inst_150:
// rd_w0_val == 1, rs2_w0_val == 268435456, rs1_w1_val == 1073741824, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000006;  op2val:0xfffffffa10000000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000500000001, 0x4000000000000006, 0xfffffffa10000000, x1, 121*XLEN/8, x2)

inst_151:
// rd_w0_val == 2147483647, rs2_w1_val == 2048, rs2_w0_val == 524288, rd_w1_val == 2147483647, rs1_w0_val == 1, rs1_w1_val == 1, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000001;  op2val:0x00080000080000
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x7fffffff7fffffff, 0x00000100000001, 0x00080000080000, x1, 122*XLEN/8, x2)

inst_152:
// rd_w0_val == 2, rs2_w0_val == -131073, rs1_w1_val == -2147483648, rd_w1_val == 131072, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -131073, rs2_w1_val == -65, rs1_w0_val == rs2_w0_val
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffdffff;  op2val:0xffffffbffffdffff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x02000000000002, 0x80000000fffdffff, 0xffffffbffffdffff, x1, 123*XLEN/8, x2)

inst_153:
// rd_w0_val == 1024, rs2_w1_val == 536870912, rs1_w0_val == 131072, rs1_w1_val == 0, rs2_w0_val == -4097
// opcode: pmaccu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000000020000;  op2val:0x20000000ffffefff
TEST_RD_RR_OP(pmaccu.w.heo, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000400, 0x00000000020000, 0x20000000ffffefff, x1, 124*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x15_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x15_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 125*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
