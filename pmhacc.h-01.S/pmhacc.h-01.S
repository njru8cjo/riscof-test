
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhacc.h instruction of the RISC-V RV64PZicsr extension for the pmhacc.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhacc.h)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x10, rs2==x9, rd==x9, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -8193, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -2049, rs2_h2_val == -2, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs2_h3_val == -33, rs1_h2_val == 512, rs2_h1_val == 21845, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val != rs2_h3_val
// opcode: pmhacc.h ; op1:x10; op2:x9; dest:x9; op1val:0xf7ff0200dfff8000;  op2val:0xffdffffe5555fffc
TEST_RR_OP(pmhacc.h, x9, x10, x9, 0x0000000000000000, 0xf7ff0200dfff8000, 0xffdffffe5555fffc, x1, 0*XLEN/8, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x14, rs1_h0_val == -1, rs1_h2_val == -65, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -1, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -32768, rs2_h1_val == 16
// opcode: pmhacc.h ; op1:x2; op2:x2; dest:x14; op1val:0x04ffbf0003ffff;  op2val:0x0680000010ffff
TEST_RR_OP(pmhacc.h, x14, x2, x2, 0x0000000000000000, 0x04ffbf0003ffff, 0x0680000010ffff, x1, 1*XLEN/8, x6)

inst_2:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h0_val == 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 16, rs2_h0_val == -4097, rs2_h2_val == -257, rs1_h3_val == 512
// opcode: pmhacc.h ; op1:x13; op2:x13; dest:x13; op1val:0x200000900100000;  op2val:0x05fefffffcefff
TEST_RR_OP(pmhacc.h, x13, x13, x13, 0x0000000000000000, 0x200000900100000, 0x05fefffffcefff, x1, 2*XLEN/8, x6)

inst_3:
// rs1 == rd != rs2, rs1==x26, rs2==x19, rd==x26, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -513, rs2_h0_val == -5, rs1_h1_val == 4, rs1_h3_val == -4097, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -32768, rs2_h2_val == 8
// opcode: pmhacc.h ; op1:x26; op2:x19; dest:x26; op1val:0xeffffdff00040001;  op2val:0xc00000088000fffb
TEST_RR_OP(pmhacc.h, x26, x26, x19, 0x0000000000000000, 0xeffffdff00040001, 0xc00000088000fffb, x1, 3*XLEN/8, x6)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x22, rd==x4, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 8, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h3_val == 64
// opcode: pmhacc.h ; op1:x15; op2:x22; dest:x4; op1val:0xfffafff600087fff;  op2val:0x400006fffc3fff
TEST_RR_OP(pmhacc.h, x4, x15, x22, 0x0000000000000000, 0xfffafff600087fff, 0x400006fffc3fff, x1, 4*XLEN/8, x6)

inst_5:
// rs1==x20, rs2==x16, rd==x12, rs1_h0_val == 2, rs2_h2_val == -129, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 2, rs1_h2_val == -4097
// opcode: pmhacc.h ; op1:x20; op2:x16; dest:x12; op1val:0x200efff00070002;  op2val:0xfff8ff7f55550002
TEST_RR_OP(pmhacc.h, x12, x20, x16, 0x0000000000000000, 0x200efff00070002, 0xfff8ff7f55550002, x1, 5*XLEN/8, x6)

inst_6:
// rs1==x23, rs2==x30, rd==x22, rs1_h0_val == 4, rs2_h1_val == -257, rs1_h3_val == 1, rs2_h2_val == -4097, rs2_h0_val == 64, rs2_h3_val == 21845
// opcode: pmhacc.h ; op1:x23; op2:x30; dest:x22; op1val:0x01020000050004;  op2val:0x5555effffeff0040
TEST_RR_OP(pmhacc.h, x22, x23, x30, 0x0000000000000000, 0x01020000050004, 0x5555effffeff0040, x1, 6*XLEN/8, x6)

inst_7:
// rs1==x7, rs2==x15, rd==x2, rs1_h0_val == 8, rs2_h1_val == 512, rs2_h0_val == -21846, rs1_h3_val == 32, rs2_h3_val == -1025
// opcode: pmhacc.h ; op1:x7; op2:x15; dest:x2; op1val:0x20fdfffffc0008;  op2val:0xfbfffeff0200aaaa
TEST_RR_OP(pmhacc.h, x2, x7, x15, 0x0000000000000000, 0x20fdfffffc0008, 0xfbfffeff0200aaaa, x1, 7*XLEN/8, x6)

inst_8:
// rs1==x14, rs2==x10, rd==x27, rs1_h0_val == 16, rs2_h2_val == -3
// opcode: pmhacc.h ; op1:x14; op2:x10; dest:x27; op1val:0x01fdff00040010;  op2val:0xffdffffd0007fff9
TEST_RR_OP(pmhacc.h, x27, x14, x10, 0x0000000000000000, 0x01fdff00040010, 0xffdffffd0007fff9, x1, 8*XLEN/8, x6)

inst_9:
// rs1==x11, rs2==x8, rd==x7, rs1_h0_val == 32, rs2_h2_val == 64, rs1_h1_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 4, rs2_h0_val == 4, rs2_h3_val == -1
// opcode: pmhacc.h ; op1:x11; op2:x8; dest:x7; op1val:0x06000455550020;  op2val:0xffff004000030004
TEST_RR_OP(pmhacc.h, x7, x11, x8, 0x0000000000000000, 0x06000455550020, 0xffff004000030004, x1, 9*XLEN/8, x6)

inst_10:
// rs1==x18, rs2==x7, rd==x3, rs1_h0_val == 64, rs2_h3_val == -3, rs1_h2_val == 16384, rs2_h0_val == -2, rs2_h1_val == 128
// opcode: pmhacc.h ; op1:x18; op2:x7; dest:x3; op1val:0x05400000050040;  op2val:0xfffdfff60080fffe
TEST_RR_OP(pmhacc.h, x3, x18, x7, 0x0000000000000000, 0x05400000050040, 0xfffdfff60080fffe, x1, 10*XLEN/8, x6)

inst_11:
// rs1==x17, rs2==x5, rd==x20, rs1_h0_val == 128, rs2_h0_val == 32, rs2_h2_val == -65, rs1_h1_val == -129
// opcode: pmhacc.h ; op1:x17; op2:x5; dest:x20; op1val:0x014000ff7f0080;  op2val:0x09ffbf3fff0020
TEST_RR_OP(pmhacc.h, x20, x17, x5, 0x0000000000000000, 0x014000ff7f0080, 0x09ffbf3fff0020, x1, 11*XLEN/8, x6)

inst_12:
// rs1==x31, rs2==x29, rd==x8, rs1_h0_val == 256, rs2_h2_val == 0, rs2_h1_val == 4, rs1_h3_val == 8, rs2_h0_val == -3
// opcode: pmhacc.h ; op1:x31; op2:x29; dest:x8; op1val:0x08400000070100;  op2val:0xfffc00000004fffd
TEST_RR_OP(pmhacc.h, x8, x31, x29, 0x0000000000000000, 0x08400000070100, 0xfffc00000004fffd, x1, 12*XLEN/8, x6)

inst_13:
// rs1==x3, rs2==x18, rd==x21, rs1_h0_val == 512, rs2_h0_val == 16384, rs1_h1_val == 2, rs1_h2_val == 0
// opcode: pmhacc.h ; op1:x3; op2:x18; dest:x21; op1val:0x03000000020200;  op2val:0xfffcefff00034000
TEST_RR_OP(pmhacc.h, x21, x3, x18, 0x0000000000000000, 0x03000000020200, 0xfffcefff00034000, x1, 13*XLEN/8, x7)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_14:
// rs1==x1, rs2==x6, rd==x31, rs1_h0_val == 1024, rs2_h2_val == 32, rs1_h2_val == -257, rs1_h1_val == 128, rs2_h3_val == -9, rs2_h0_val == 128
// opcode: pmhacc.h ; op1:x1; op2:x6; dest:x31; op1val:0x01feff00800400;  op2val:0xfff70020feff0080
TEST_RR_OP(pmhacc.h, x31, x1, x6, 0x0000000000000000, 0x01feff00800400, 0xfff70020feff0080, x2, 0*XLEN/8, x7)

inst_15:
// rs1==x4, rs2==x3, rd==x1, rs1_h0_val == 2048, rs2_h2_val == -2049, rs1_h1_val == -21846
// opcode: pmhacc.h ; op1:x4; op2:x3; dest:x1; op1val:0x070009aaaa0800;  op2val:0xfffaf7ff0009aaaa
TEST_RR_OP(pmhacc.h, x1, x4, x3, 0x0000000000000000, 0x070009aaaa0800, 0xfffaf7ff0009aaaa, x2, 1*XLEN/8, x7)

inst_16:
// rs1==x29, rs2==x25, rd==x10, rs1_h0_val == 4096, rs1_h3_val == -129, rs1_h1_val == 0, rs2_h2_val == -513, rs1_h2_val == 2048, rs2_h1_val == 32767
// opcode: pmhacc.h ; op1:x29; op2:x25; dest:x10; op1val:0xff7f080000001000;  op2val:0xfffcfdff7ffffffa
TEST_RR_OP(pmhacc.h, x10, x29, x25, 0x0000000000000000, 0xff7f080000001000, 0xfffcfdff7ffffffa, x2, 2*XLEN/8, x7)

inst_17:
// rs1==x16, rs2==x24, rd==x0, rs1_h0_val == 8192, rs2_h1_val == 1024, rs1_h3_val == -17, rs2_h2_val == 128, rs1_h1_val == -2
// opcode: pmhacc.h ; op1:x16; op2:x24; dest:x0; op1val:0xffeffffcfffe2000;  op2val:0x03008004000006
TEST_RR_OP(pmhacc.h, x0, x16, x24, 0x0000000000000000, 0xffeffffcfffe2000, 0x03008004000006, x2, 3*XLEN/8, x7)

inst_18:
// rs1==x22, rs2==x17, rd==x11, rs1_h0_val == 16384, rs2_h3_val == 256, rs1_h2_val == -2, rs2_h1_val == 64, rs1_h1_val == -257
// opcode: pmhacc.h ; op1:x22; op2:x17; dest:x11; op1val:0xf7fffffefeff4000;  op2val:0x1003fff0040efff
TEST_RR_OP(pmhacc.h, x11, x22, x17, 0x0000000000000000, 0xf7fffffefeff4000, 0x1003fff0040efff, x2, 4*XLEN/8, x7)

inst_19:
// rs1==x12, rs2==x21, rd==x17, rs1_h0_val == -2, rs2_h3_val == -5, rs1_h1_val == 64
// opcode: pmhacc.h ; op1:x12; op2:x21; dest:x17; op1val:0xff7fffbf0040fffe;  op2val:0xfffb00000006c000
TEST_RR_OP(pmhacc.h, x17, x12, x21, 0x0000000000000000, 0xff7fffbf0040fffe, 0xfffb00000006c000, x2, 5*XLEN/8, x7)

inst_20:
// rs1==x19, rs2==x1, rd==x25, rs1_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -3, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == -9, rs2_h0_val == 1, rs2_h3_val == -65, rs1_h3_val == -2
// opcode: pmhacc.h ; op1:x19; op2:x1; dest:x25; op1val:0xfffe0800fff8fffd;  op2val:0xffbffff7fffd0001
TEST_RR_OP(pmhacc.h, x25, x19, x1, 0x0000000000000000, 0xfffe0800fff8fffd, 0xffbffff7fffd0001, x2, 6*XLEN/8, x7)

inst_21:
// rs1==x8, rs2==x28, rd==x18, rs1_h0_val == -5, rs1_h2_val == 21845, rs2_h3_val == 16
// opcode: pmhacc.h ; op1:x8; op2:x28; dest:x18; op1val:0x0655553ffffffb;  op2val:0x10fffd80000004
TEST_RR_OP(pmhacc.h, x18, x8, x28, 0x0000000000000000, 0x0655553ffffffb, 0x10fffd80000004, x2, 7*XLEN/8, x7)

inst_22:
// rs1==x21, rs2==x0, rd==x24, rs1_h0_val == -9, rs2_h3_val == -17
// opcode: pmhacc.h ; op1:x21; op2:x0; dest:x24; op1val:0xfff90800ff7ffff7;  op2val:0xffef0006c000fffe
TEST_RR_OP(pmhacc.h, x24, x21, x0, 0x0000000000000000, 0xfff90800ff7ffff7, 0xffef0006c000fffe, x2, 8*XLEN/8, x7)

inst_23:
// rs1==x24, rs2==x20, rd==x16, rs1_h0_val == -17, rs2_h0_val == 4096, rs1_h1_val == -4097, rs1_h2_val == -1, rs2_h1_val == -33, rs1_h3_val == -1, rs2_h3_val == 8192
// opcode: pmhacc.h ; op1:x24; op2:x20; dest:x16; op1val:0xffffffffefffffef;  op2val:0x2000fffeffdf1000
TEST_RR_OP(pmhacc.h, x16, x24, x20, 0x0000000000000000, 0xffffffffefffffef, 0x2000fffeffdf1000, x2, 9*XLEN/8, x7)

inst_24:
// rs1==x9, rs2==x26, rd==x29, rs1_h0_val == -33, rs1_h1_val == -1025, rs2_h0_val == 21845, rs2_h1_val == -8193, rs1_h3_val == -21846
// opcode: pmhacc.h ; op1:x9; op2:x26; dest:x29; op1val:0xaaaa0003fbffffdf;  op2val:0x030020dfff5555
TEST_RR_OP(pmhacc.h, x29, x9, x26, 0x0000000000000000, 0xaaaa0003fbffffdf, 0x030020dfff5555, x2, 10*XLEN/8, x7)

inst_25:
// rs1==x28, rs2==x23, rd==x6, rs1_h0_val == -65, rs2_h3_val == -2, rs2_h1_val == -4097, rs1_h2_val == 1024, rs2_h2_val == -21846, rs1_h3_val == 8192, rs2_h0_val == 2048
// opcode: pmhacc.h ; op1:x28; op2:x23; dest:x6; op1val:0x20000400fff9ffbf;  op2val:0xfffeaaaaefff0800
TEST_RR_OP(pmhacc.h, x6, x28, x23, 0x0000000000000000, 0x20000400fff9ffbf, 0xfffeaaaaefff0800, x2, 11*XLEN/8, x7)

inst_26:
// rs1==x5, rs2==x11, rd==x19, rs1_h0_val == -129, rs2_h1_val == 8192, rs2_h0_val == -257, rs2_h2_val == -17, rs1_h2_val == 8192, rs2_h3_val == 1
// opcode: pmhacc.h ; op1:x5; op2:x11; dest:x19; op1val:0xfffa2000ff7fff7f;  op2val:0x01ffef2000feff
TEST_RR_OP(pmhacc.h, x19, x5, x11, 0x0000000000000000, 0xfffa2000ff7fff7f, 0x01ffef2000feff, x2, 12*XLEN/8, x7)

inst_27:
// rs1==x30, rs2==x14, rd==x15, rs1_h0_val == -257, rs2_h1_val == 2048, rs1_h2_val == 256, rs2_h3_val == -32768
// opcode: pmhacc.h ; op1:x30; op2:x14; dest:x15; op1val:0xf7ff0100fff8feff;  op2val:0x8000aaaa0800fffa
TEST_RR_OP(pmhacc.h, x15, x30, x14, 0x0000000000000000, 0xf7ff0100fff8feff, 0x8000aaaa0800fffa, x2, 13*XLEN/8, x7)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_28:
// rs1==x27, rs2==x12, rd==x28, rs1_h0_val == -513, rs2_h2_val == 2048, rs1_h3_val == -32768, rs1_h1_val == 8192, rs2_h3_val == -129, rs2_h1_val == -1
// opcode: pmhacc.h ; op1:x27; op2:x12; dest:x28; op1val:0x800000092000fdff;  op2val:0xff7f0800fffffffe
TEST_RR_OP(pmhacc.h, x28, x27, x12, 0x0000000000000000, 0x800000092000fdff, 0xff7f0800fffffffe, x1, 0*XLEN/8, x2)

inst_29:
// rs1==x6, rs2==x4, rd==x30, rs1_h0_val == -1025, rs1_h2_val == -8193, rs2_h2_val == 4096, rs1_h1_val == -33, rs2_h3_val == 512
// opcode: pmhacc.h ; op1:x6; op2:x4; dest:x30; op1val:0xffffdfffffdffbff;  op2val:0x200100000801000
TEST_RR_OP(pmhacc.h, x30, x6, x4, 0x0000000000000000, 0xffffdfffffdffbff, 0x200100000801000, x1, 1*XLEN/8, x2)

inst_30:
// rs1==x25, rs2==x31, rd==x23, rs1_h0_val == -2049, rs2_h0_val == -33, rs1_h3_val == -1025, rs1_h2_val == -5
// opcode: pmhacc.h ; op1:x25; op2:x31; dest:x23; op1val:0xfbfffffbfff6f7ff;  op2val:0x01fff8fffcffdf
TEST_RR_OP(pmhacc.h, x23, x25, x31, 0x0000000000000000, 0xfbfffffbfff6f7ff, 0x01fff8fffcffdf, x1, 2*XLEN/8, x2)

inst_31:
// rs1==x0, rs2==x27, rd==x5, rs1_h0_val == -4097, rs2_h2_val == 1, rs1_h1_val == -1
// opcode: pmhacc.h ; op1:x0; op2:x27; dest:x5; op1val:0x8000fffcffffefff;  op2val:0xfffb0001feff0800
TEST_RR_OP(pmhacc.h, x5, x0, x27, 0x0000000000000000, 0x8000fffcffffefff, 0xfffb0001feff0800, x1, 3*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs2_h3_val == 4, rs1_h2_val == 32767
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff67fff0004dfff;  op2val:0x040040ffff3fff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfff67fff0004dfff, 0x040040ffff3fff, x1, 4*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs1_h3_val == 2
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x0255550010bfff;  op2val:0xfff60020fffc0040
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x0255550010bfff, 0xfff60020fffc0040, x1, 5*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs2_h3_val == 32767, rs1_h3_val == -33, rs1_h1_val == -32768, rs2_h0_val == 32767, rs2_h1_val == 1, rs2_h2_val == -8193
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf040080005555;  op2val:0x7fffdfff00017fff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffdf040080005555, 0x7fffdfff00017fff, x1, 6*XLEN/8, x2)

inst_35:
// rs1_h0_val == -21846, rs1_h1_val == 4096
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff00041000aaaa;  op2val:0xff7f0000fffc0001
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffff00041000aaaa, 0xff7f0000fffc0001, x1, 7*XLEN/8, x2)

inst_36:
// rs2_h3_val == 2, rs2_h0_val == -17
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff95555fff8ffbf;  op2val:0x020800fffcffef
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfff95555fff8ffbf, 0x020800fffcffef, x1, 8*XLEN/8, x2)

inst_37:
// rs2_h3_val == 8, rs1_h2_val == -33, rs2_h1_val == 2, rs1_h3_val == 2048
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdfaaaa4000;  op2val:0x08ff7f00025555
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x800ffdfaaaa4000, 0x08ff7f00025555, x1, 9*XLEN/8, x2)

inst_38:
// rs2_h3_val == 32, rs1_h3_val == 1024, rs1_h1_val == -17, rs2_h2_val == 512
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000006ffeffff7;  op2val:0x20020000070020
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x4000006ffeffff7, 0x20020000070020, x1, 10*XLEN/8, x2)

inst_39:
// rs2_h3_val == 128, rs2_h0_val == -65, rs1_h2_val == 128, rs2_h1_val == -129
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xc0000080fff80020;  op2val:0x80ffefff7fffbf
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xc0000080fff80020, 0x80ffefff7fffbf, x1, 11*XLEN/8, x2)

inst_40:
// rs2_h3_val == 1024, rs2_h2_val == 4
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00060002f7ff;  op2val:0x4000004fff6fffc
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffa00060002f7ff, 0x4000004fff6fffc, x1, 12*XLEN/8, x2)

inst_41:
// rs2_h3_val == 2048, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x01feff00067fff;  op2val:0x800000402005555
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x01feff00067fff, 0x800000402005555, x1, 13*XLEN/8, x2)

inst_42:
// rs2_h3_val == 4096, rs1_h3_val == 256, rs1_h2_val == -129, rs2_h1_val == 16384
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7fc000aaaa;  op2val:0x1000aaaa40000009
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x100ff7fc000aaaa, 0x1000aaaa40000009, x1, 14*XLEN/8, x2)

inst_43:
// rs2_h3_val == 16384, rs1_h1_val == -5, rs1_h3_val == -5, rs2_h1_val == -21846
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb2000fffb0004;  op2val:0x40000008aaaafffe
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffb2000fffb0004, 0x40000008aaaafffe, x1, 15*XLEN/8, x2)

inst_44:
// rs2_h3_val == -257, rs2_h1_val == -1025, rs1_h1_val == 16384
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x053fff4000fff8;  op2val:0xfeff0000fbffc000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x053fff4000fff8, 0xfeff0000fbffc000, x1, 16*XLEN/8, x2)

inst_45:
// rs2_h3_val == -513, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffefffffaefff;  op2val:0xfdfffff7fff61000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xf7fffefffffaefff, 0xfdfffff7fff61000, x1, 17*XLEN/8, x2)

inst_46:
// rs2_h3_val == -2049, rs1_h3_val == -513, rs2_h0_val == -8193
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff8fefffeff;  op2val:0xf7ff00030002dfff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfdfffff8fefffeff, 0xf7ff00030002dfff, x1, 18*XLEN/8, x2)

inst_47:
// rs2_h3_val == -4097, rs1_h1_val == 1024, rs2_h0_val == 256, rs1_h2_val == 64
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff004004000020;  op2val:0xeffffff6c0000100
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfbff004004000020, 0xeffffff6c0000100, x1, 19*XLEN/8, x2)

inst_48:
// rs2_h3_val == -8193, rs2_h1_val == 32
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00060009dfff;  op2val:0xdffffff700200100
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x3fff00060009dfff, 0xdffffff700200100, x1, 20*XLEN/8, x2)

inst_49:
// rs2_h3_val == -16385, rs2_h0_val == -16385, rs1_h3_val == -9, rs1_h2_val == -17
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffeffbffaaaa;  op2val:0xbffffff90400bfff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfff7ffeffbffaaaa, 0xbffffff90400bfff, x1, 21*XLEN/8, x2)

inst_50:
// rs2_h3_val == -21846, rs2_h0_val == 0, rs2_h1_val == -16385
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffcfffb0005;  op2val:0xaaaafffebfff0000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffdffffcfffb0005, 0xaaaafffebfff0000, x1, 22*XLEN/8, x2)

inst_51:
// rs1_h1_val == 1, rs2_h2_val == -16385, rs1_h3_val == 16, rs2_h3_val == 0
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x10fff80001fff8;  op2val:0x00bfff00040009
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x10fff80001fff8, 0x00bfff00040009, x1, 23*XLEN/8, x2)

inst_52:
// rs1_h1_val == 32767, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x200055557ffffffe;  op2val:0xfff6fdffc000fff6
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x200055557ffffffe, 0xfff6fdffc000fff6, x1, 24*XLEN/8, x2)

inst_53:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == -1025
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000004fff90005;  op2val:0xefff0005fff9fbff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x4000004fff90005, 0xefff0005fff9fbff, x1, 25*XLEN/8, x2)

inst_54:
// rs1_h1_val == 32, rs1_h2_val == 4096
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x0610000020fbff;  op2val:0xfff8fdff0800c000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x0610000020fbff, 0xfff8fdff0800c000, x1, 26*XLEN/8, x2)

inst_55:
// rs1_h1_val == 256, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff90100dfff;  op2val:0xfffffdff2000efff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffefff90100dfff, 0xfffffdff2000efff, x1, 27*XLEN/8, x2)

inst_56:
// rs1_h2_val == rs2_h2_val, rs1_h3_val == 64
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x403fff00095555;  op2val:0x093fffff7ffff8
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x403fff00095555, 0x093fffff7ffff8, x1, 28*XLEN/8, x2)

inst_57:
// rs1_h1_val == 512, rs1_h3_val == -16385
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfffc0000200feff;  op2val:0x4000effffff9dfff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xbfffc0000200feff, 0x4000effffff9dfff, x1, 29*XLEN/8, x2)

inst_58:
// rs1_h1_val == 2048, rs2_h1_val == -17
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000feff08000008;  op2val:0xffdf0008ffef0005
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x8000feff08000008, 0xffdf0008ffef0005, x1, 30*XLEN/8, x2)

inst_59:
// rs1_h3_val == -3, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffe0010c000;  op2val:0x8000aaaaff7ffbff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffdfffe0010c000, 0x8000aaaaff7ffbff, x1, 31*XLEN/8, x2)

inst_60:
// rs1_h3_val == -65, rs1_h2_val == -32768, rs2_h2_val == 21845, rs2_h1_val == 8
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf8000fbff0400;  op2val:0xbfff55550008ffef
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffbf8000fbff0400, 0xbfff55550008ffef, x1, 32*XLEN/8, x2)

inst_61:
// rs1_h3_val == -257, rs1_h1_val == -3
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0009fffdfffb;  op2val:0xf7ff0005c000fffc
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfeff0009fffdfffb, 0xf7ff0005c000fffc, x1, 33*XLEN/8, x2)

inst_62:
// rs1_h3_val == -8193, rs2_h2_val == 32767
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff8000efff0007;  op2val:0x087fffffffffdf
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xdfff8000efff0007, 0x087fffffffffdf, x1, 34*XLEN/8, x2)

inst_63:
// rs1_h3_val == 21845, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x555500405555dfff;  op2val:0xf7ff0020fffd3fff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x555500405555dfff, 0xf7ff0020fffd3fff, x1, 35*XLEN/8, x2)

inst_64:
// rs2_h0_val == -32768, rs1_h3_val == 32767, rs1_h2_val == -2049
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffff7ff00060800;  op2val:0xdffffdff00018000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x7ffff7ff00060800, 0xdffffdff00018000, x1, 36*XLEN/8, x2)

inst_65:
// rs2_h0_val == 8, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000502000002;  op2val:0x037fff00080008
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffb000502000002, 0x037fff00080008, x1, 37*XLEN/8, x2)

inst_66:
// rs2_h0_val == 16, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffc1000f7ff;  op2val:0x7ffffffd00040010
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xf7fffffc1000f7ff, 0x7ffffffd00040010, x1, 38*XLEN/8, x2)

inst_67:
// rs2_h0_val == 512, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbdffffbfffbff;  op2val:0xfdff0006fff60200
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffbdffffbfffbff, 0xfdff0006fff60200, x1, 39*XLEN/8, x2)

inst_68:
// rs2_h0_val == 1024, rs2_h2_val == 256
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x094000fffe0800;  op2val:0xffff010000020400
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x094000fffe0800, 0xffff010000020400, x1, 40*XLEN/8, x2)

inst_69:
// rs2_h0_val == 8192, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff400000010003;  op2val:0xefff000520002000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xf7ff400000010003, 0xefff000520002000, x1, 41*XLEN/8, x2)

inst_70:
// rs2_h0_val == -9, rs2_h1_val == -9
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x03fdfffffb1000;  op2val:0x060200fff7fff7
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x03fdfffffb1000, 0x060200fff7fff7, x1, 42*XLEN/8, x2)

inst_71:
// rs2_h0_val == -129, rs1_h2_val == 32
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x0600200004ffff;  op2val:0x003fff0400ff7f
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x0600200004ffff, 0x003fff0400ff7f, x1, 43*XLEN/8, x2)

inst_72:
// rs2_h0_val == -513, rs1_h1_val == -16385
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x050800bfff0020;  op2val:0x8000dfff7ffffdff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x050800bfff0020, 0x8000dfff7ffffdff, x1, 44*XLEN/8, x2)

inst_73:
// rs2_h0_val == -2049, rs2_h1_val == 256, rs2_h2_val == 8192
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff00400040fffa;  op2val:0xfbff20000100f7ff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xefff00400040fffa, 0xfbff20000100f7ff, x1, 45*XLEN/8, x2)

inst_74:
// rs1_h3_val == rs2_h3_val, rs1_h2_val == -16385
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcbfff08000020;  op2val:0xfffc008000200080
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffcbfff08000020, 0xfffc008000200080, x1, 46*XLEN/8, x2)

inst_75:
// rs2_h1_val == 0, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x105555efff4000;  op2val:0x40020000000ffff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x105555efff4000, 0x40020000000ffff, x1, 47*XLEN/8, x2)

inst_76:
// rs1_h1_val == -513, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x090006fdffefff;  op2val:0xffffaaaafffc2000
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x090006fdffefff, 0xffffaaaafffc2000, x1, 48*XLEN/8, x2)

inst_77:
// rs1_h1_val == -2049, rs2_h2_val == -5
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa4000f7fffff9;  op2val:0x7ffffffb0003ffef
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffa4000f7fffff9, 0x7ffffffb0003ffef, x1, 49*XLEN/8, x2)

inst_78:
// rs2_h1_val == 4096, rs1_h2_val == 1
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef0001fff6ffbf;  op2val:0xefff02001000ffdf
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffef0001fff6ffbf, 0xefff02001000ffdf, x1, 50*XLEN/8, x2)

inst_79:
// rs2_h1_val == -2, rs1_h2_val == 8
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x200008ffefffdf;  op2val:0xffefdffffffe0009
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x200008ffefffdf, 0xffefdffffffe0009, x1, 51*XLEN/8, x2)

inst_80:
// rs2_h1_val == -5, rs2_h2_val == 2
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555efff5555;  op2val:0x80000002fffbdfff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xaaaa5555efff5555, 0x80000002fffbdfff, x1, 52*XLEN/8, x2)

inst_81:
// rs1_h2_val == 2, rs2_h2_val == -33
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x070002fdff3fff;  op2val:0xffefffdf00000007
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x070002fdff3fff, 0xffefffdf00000007, x1, 53*XLEN/8, x2)

inst_82:
// rs2_h1_val == -65, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00403fffbfff;  op2val:0xfffdfff8ffbffff9
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffe00403fffbfff, 0xfffdfff8ffbffff9, x1, 54*XLEN/8, x2)

inst_83:
// rs1_h2_val == 16, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000001055554000;  op2val:0x20007fff00093fff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xc000001055554000, 0x20007fff00093fff, x1, 55*XLEN/8, x2)

inst_84:
// rs2_h1_val == -513, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x017fff00040010;  op2val:0xffdf1000fdffffdf
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x017fff00040010, 0xffdf1000fdffffdf, x1, 56*XLEN/8, x2)

inst_85:
// rs2_h1_val == -2049, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff3fff00400009;  op2val:0x08fff9f7ffefff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfbff3fff00400009, 0x08fff9f7ffefff, x1, 57*XLEN/8, x2)

inst_86:
// rs2_h2_val == 16, rs1_h2_val == -9
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff7fffefdff;  op2val:0x20000010effffeff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x3ffffff7fffefdff, 0x20000010effffeff, x1, 58*XLEN/8, x2)

inst_87:
// rs1_h2_val == -1025, rs2_h2_val == -1025
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbfffeffffef;  op2val:0xdffffbffeffffff6
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xffbffbfffeffffef, 0xdffffbffeffffff6, x1, 59*XLEN/8, x2)

inst_88:
// rs2_h2_val == 1024, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffff7ffffffb;  op2val:0xfffd0400fff8fff7
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x8000ffff7ffffffb, 0xfffd0400fff8fff7, x1, 60*XLEN/8, x2)

inst_89:
// rs2_h2_val == 16384, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f0002feff;  op2val:0xffbf40000007fffd
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffdff7f0002feff, 0xffbf40000007fffd, x1, 61*XLEN/8, x2)

inst_90:
// rs1_h2_val == -21846, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x09aaaafffa4000;  op2val:0x08fffd0003fbff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x09aaaafffa4000, 0x08fffd0003fbff, x1, 62*XLEN/8, x2)

inst_91:
// rs1_h3_val == 0, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x0000031000ffdf;  op2val:0x087fffeffffffe
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x0000031000ffdf, 0x087fffeffffffe, x1, 63*XLEN/8, x2)

inst_92:
// rs1_h3_val == 4096, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000000200800006;  op2val:0xfff7fffc0800ff7f
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x1000000200800006, 0xfff7fffc0800ff7f, x1, 64*XLEN/8, x2)

inst_93:
// rs1_h3_val == 128, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000800008ffdf;  op2val:0xfff8bffffffe0007
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x8000800008ffdf, 0xfff8bffffffe0007, x1, 65*XLEN/8, x2)

inst_94:
// rs2_h2_val == -1, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x807fff3fff0010;  op2val:0x800ffffbffffffd
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x807fff3fff0010, 0x800ffffbffffffd, x1, 66*XLEN/8, x2)

inst_95:
// rs1_h1_val == -9, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60004fff70009;  op2val:0xaaaaffbf00020002
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfff60004fff70009, 0xaaaaffbf00020002, x1, 67*XLEN/8, x2)

inst_96:
// rs1_h2_val == -3, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fffdfff92000;  op2val:0xffdfeffffff6ffdf
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x09fffdfff92000, 0xffdfeffffff6ffdf, x1, 68*XLEN/8, x2)

inst_97:
// rs1_h1_val == -65, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001ffbf0000;  op2val:0xaaaa000800060003
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0xfffb0001ffbf0000, 0xaaaa000800060003, x1, 69*XLEN/8, x2)

inst_98:
// rs1_h3_val == 16384, 
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000aaaafff9bfff;  op2val:0xfffd0800fff6fbff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x4000aaaafff9bfff, 0xfffd0800fff6fbff, x1, 70*XLEN/8, x2)

inst_99:
// rs1_h0_val == -1, rs1_h2_val == -65, rs1_h0_val == rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -1, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -32768, rs2_h1_val == 16
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf0003ffff;  op2val:0x0680000010ffff
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x04ffbf0003ffff, 0x0680000010ffff, x1, 71*XLEN/8, x2)

inst_100:
// rs1_h0_val == -4097, rs2_h2_val == 1, rs1_h1_val == -1
// opcode: pmhacc.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffcffffefff;  op2val:0xfffb0001feff0800
TEST_RR_OP(pmhacc.h, x31, x30, x29, 0x0000000000000000, 0x8000fffcffffefff, 0xfffb0001feff0800, x1, 72*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 73*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
