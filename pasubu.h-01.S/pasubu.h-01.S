
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pasubu.h instruction of the RISC-V RV64PZicsr extension for the pasubu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pasubu.h)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x17, rd==x4, rs1_h0_val == -32768, rs2_h0_val == 16384, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 16, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == 1, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -1025, rs1_h2_val != rs2_h2_val, rs2_h2_val == -1025, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val
// opcode: pasubu.h ; op1:x27; op2:x17; dest:x4; op1val:0xfffc0001fff68000;  op2val:0x10fbfffbff4000
TEST_RR_OP(pasubu.h, x4, x27, x17, 0x0000000000000000, 0xfffc0001fff68000, 0x10fbfffbff4000, x1, 0*XLEN/8, x7)

inst_1:
// rs2 == rd != rs1, rs1==x21, rs2==x16, rd==x16, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 1024, rs2_h3_val == 128, rs1_h1_val == 32767, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -16385, rs1_h3_val == 8192
// opcode: pasubu.h ; op1:x21; op2:x16; dest:x16; op1val:0x200000067fffffff;  op2val:0x800400bffffff9
TEST_RR_OP(pasubu.h, x16, x21, x16, 0x0000000000000000, 0x200000067fffffff, 0x800400bffffff9, x1, 1*XLEN/8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x24, rs1_h0_val == 0, rs2_h1_val == 2048, rs1_h3_val == -129, rs1_h1_val == 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -8193
// opcode: pasubu.h ; op1:x26; op2:x26; dest:x24; op1val:0xff7ffffc00000000;  op2val:0xdffffff80800fff8
TEST_RR_OP(pasubu.h, x24, x26, x26, 0x0000000000000000, 0xff7ffffc00000000, 0xdffffff80800fff8, x1, 2*XLEN/8, x7)

inst_3:
// rs1 == rd != rs2, rs1==x3, rs2==x20, rd==x3, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 16384, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -17, rs1_h2_val == -5, rs2_h0_val == 1024
// opcode: pasubu.h ; op1:x3; op2:x20; dest:x3; op1val:0x2000fffbffef0001;  op2val:0xc000fbff40000400
TEST_RR_OP(pasubu.h, x3, x3, x20, 0x0000000000000000, 0x2000fffbffef0001, 0xc000fbff40000400, x1, 3*XLEN/8, x7)

inst_4:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_h0_val == 32767, rs1_h3_val == -9, rs2_h1_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 16384, rs2_h0_val == 1, rs2_h2_val == 21845
// opcode: pasubu.h ; op1:x30; op2:x30; dest:x30; op1val:0xfff7000100067fff;  op2val:0x4000555520000001
TEST_RR_OP(pasubu.h, x30, x30, x30, 0x0000000000000000, 0xfff7000100067fff, 0x4000555520000001, x1, 4*XLEN/8, x7)

inst_5:
// rs1==x8, rs2==x0, rd==x25, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 0, rs1_h2_val == 2, rs2_h0_val == -1, rs1_h1_val == -5, rs1_h3_val == 1024
// opcode: pasubu.h ; op1:x8; op2:x0; dest:x25; op1val:0x4000002fffb0002;  op2val:0xfff900000005ffff
TEST_RR_OP(pasubu.h, x25, x8, x0, 0x0000000000000000, 0x4000002fffb0002, 0xfff900000005ffff, x1, 5*XLEN/8, x7)

inst_6:
// rs1==x14, rs2==x2, rd==x27, rs1_h0_val == 4, rs2_h0_val == -65, rs2_h1_val == 512
// opcode: pasubu.h ; op1:x14; op2:x2; dest:x27; op1val:0x0900023fff0004;  op2val:0x0500070200ffbf
TEST_RR_OP(pasubu.h, x27, x14, x2, 0x0000000000000000, 0x0900023fff0004, 0x0500070200ffbf, x1, 6*XLEN/8, x7)

inst_7:
// rs1==x17, rs2==x18, rd==x21, rs1_h0_val == 8, rs2_h2_val == 32, rs1_h2_val == -129, rs2_h1_val == 4096, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 32, rs1_h1_val == -3, rs2_h0_val == 512
// opcode: pasubu.h ; op1:x17; op2:x18; dest:x21; op1val:0x20ff7ffffd0008;  op2val:0x07002010000200
TEST_RR_OP(pasubu.h, x21, x17, x18, 0x0000000000000000, 0x20ff7ffffd0008, 0x07002010000200, x1, 7*XLEN/8, x7)

inst_8:
// rs1==x13, rs2==x23, rd==x10, rs1_h0_val == 16, rs1_h3_val == -5, rs1_h2_val == -2
// opcode: pasubu.h ; op1:x13; op2:x23; dest:x10; op1val:0xfffbfffefffd0010;  op2val:0x05000040004000
TEST_RR_OP(pasubu.h, x10, x13, x23, 0x0000000000000000, 0xfffbfffefffd0010, 0x05000040004000, x1, 8*XLEN/8, x7)

inst_9:
// rs1==x23, rs2==x14, rd==x28, rs1_h0_val == 32, rs2_h2_val == -5, rs2_h0_val == -32768, rs1_h2_val == 4096, rs2_h1_val == 2, rs1_h1_val == -9
// opcode: pasubu.h ; op1:x23; op2:x14; dest:x28; op1val:0x071000fff70020;  op2val:0xdffffffb00028000
TEST_RR_OP(pasubu.h, x28, x23, x14, 0x0000000000000000, 0x071000fff70020, 0xdffffffb00028000, x1, 9*XLEN/8, x7)

inst_10:
// rs1==x6, rs2==x15, rd==x5, rs1_h0_val == 64, rs2_h3_val == -16385, rs1_h3_val == -4097, rs2_h1_val == -65, rs2_h2_val == -2
// opcode: pasubu.h ; op1:x6; op2:x15; dest:x5; op1val:0xefff000300070040;  op2val:0xbffffffeffbffffc
TEST_RR_OP(pasubu.h, x5, x6, x15, 0x0000000000000000, 0xefff000300070040, 0xbffffffeffbffffc, x1, 10*XLEN/8, x7)

inst_11:
// rs1==x22, rs2==x25, rd==x19, rs1_h0_val == 128, rs1_h3_val == 2, rs2_h1_val == -4097
// opcode: pasubu.h ; op1:x22; op2:x25; dest:x19; op1val:0x02fff6fffd0080;  op2val:0x40003fffefff3fff
TEST_RR_OP(pasubu.h, x19, x22, x25, 0x0000000000000000, 0x02fff6fffd0080, 0x40003fffefff3fff, x1, 11*XLEN/8, x7)

inst_12:
// rs1==x15, rs2==x24, rd==x9, rs1_h0_val == 256, rs2_h1_val == -17, rs2_h2_val == 256, rs2_h0_val == -9, rs1_h1_val == -21846
// opcode: pasubu.h ; op1:x15; op2:x24; dest:x9; op1val:0x07fff9aaaa0100;  op2val:0x060100ffeffff7
TEST_RR_OP(pasubu.h, x9, x15, x24, 0x0000000000000000, 0x07fff9aaaa0100, 0x060100ffeffff7, x1, 12*XLEN/8, x7)

inst_13:
// rs1==x29, rs2==x8, rd==x15, rs1_h0_val == 512, rs1_h1_val == 2, rs2_h3_val == 512, rs2_h2_val == -257, rs1_h3_val == 16, rs2_h0_val == 8
// opcode: pasubu.h ; op1:x29; op2:x8; dest:x15; op1val:0x10c00000020200;  op2val:0x200feffffef0008
TEST_RR_OP(pasubu.h, x15, x29, x8, 0x0000000000000000, 0x10c00000020200, 0x200feffffef0008, x1, 13*XLEN/8, x3)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x2, rs2==x6, rd==x0, rs1_h0_val == 1024, rs1_h3_val == -32768, rs2_h0_val == -2049, rs1_h1_val == 512, rs2_h3_val == -33, rs2_h1_val == 4
// opcode: pasubu.h ; op1:x2; op2:x6; dest:x0; op1val:0x80003fff02000400;  op2val:0xffdffff90004f7ff
TEST_RR_OP(pasubu.h, x0, x2, x6, 0x0000000000000000, 0x80003fff02000400, 0xffdffff90004f7ff, x4, 0*XLEN/8, x3)

inst_15:
// rs1==x9, rs2==x7, rd==x26, rs1_h0_val == 2048, rs2_h3_val == 1024, rs1_h2_val == 1024
// opcode: pasubu.h ; op1:x9; op2:x7; dest:x26; op1val:0xfffa040000030800;  op2val:0x40000070005fff6
TEST_RR_OP(pasubu.h, x26, x9, x7, 0x0000000000000000, 0xfffa040000030800, 0x40000070005fff6, x4, 1*XLEN/8, x3)

inst_16:
// rs1==x28, rs2==x29, rd==x22, rs1_h0_val == 4096, rs1_h3_val == 32767, rs2_h3_val == -3, rs2_h0_val == 128, rs1_h1_val == -8193
// opcode: pasubu.h ; op1:x28; op2:x29; dest:x22; op1val:0x7ffffff6dfff1000;  op2val:0xfffd3fffffef0080
TEST_RR_OP(pasubu.h, x22, x28, x29, 0x0000000000000000, 0x7ffffff6dfff1000, 0xfffd3fffffef0080, x4, 2*XLEN/8, x3)

inst_17:
// rs1==x11, rs2==x19, rd==x31, rs1_h0_val == 8192, rs2_h2_val == -16385, rs1_h2_val == 16384, rs2_h3_val == -2049, rs1_h1_val == -257
// opcode: pasubu.h ; op1:x11; op2:x19; dest:x31; op1val:0xfff74000feff2000;  op2val:0xf7ffbfff00020005
TEST_RR_OP(pasubu.h, x31, x11, x19, 0x0000000000000000, 0xfff74000feff2000, 0xf7ffbfff00020005, x4, 3*XLEN/8, x3)

inst_18:
// rs1==x19, rs2==x11, rd==x14, rs1_h0_val == 16384, rs1_h3_val == -513, rs1_h1_val == -32768, rs2_h3_val == -65
// opcode: pasubu.h ; op1:x19; op2:x11; dest:x14; op1val:0xfdff000980004000;  op2val:0xffbf3fff00020400
TEST_RR_OP(pasubu.h, x14, x19, x11, 0x0000000000000000, 0xfdff000980004000, 0xffbf3fff00020400, x4, 4*XLEN/8, x3)

inst_19:
// rs1==x12, rs2==x27, rd==x1, rs1_h0_val == -2, rs1_h2_val == -17
// opcode: pasubu.h ; op1:x12; op2:x27; dest:x1; op1val:0xefffffef0200fffe;  op2val:0x3fff3fff00020400
TEST_RR_OP(pasubu.h, x1, x12, x27, 0x0000000000000000, 0xefffffef0200fffe, 0x3fff3fff00020400, x4, 5*XLEN/8, x3)

inst_20:
// rs1==x0, rs2==x12, rd==x20, rs1_h0_val == -3, rs2_h3_val == 8, rs1_h3_val == 21845, rs1_h1_val == 21845, rs1_h2_val == 2048
// opcode: pasubu.h ; op1:x0; op2:x12; dest:x20; op1val:0x555508005555fffd;  op2val:0x08fffcefff0009
TEST_RR_OP(pasubu.h, x20, x0, x12, 0x0000000000000000, 0x555508005555fffd, 0x08fffcefff0009, x4, 6*XLEN/8, x3)

inst_21:
// rs1==x18, rs2==x22, rd==x8, rs1_h0_val == -5, rs2_h0_val == -129, rs1_h2_val == 16, rs2_h1_val == 0, rs2_h2_val == -4097, rs1_h3_val == 2048
// opcode: pasubu.h ; op1:x18; op2:x22; dest:x8; op1val:0x8000010ffeffffb;  op2val:0xbfffefff0000ff7f
TEST_RR_OP(pasubu.h, x8, x18, x22, 0x0000000000000000, 0x8000010ffeffffb, 0xbfffefff0000ff7f, x4, 7*XLEN/8, x3)

inst_22:
// rs1==x10, rs2==x31, rd==x2, rs1_h0_val == -9, rs1_h3_val == 256, rs2_h2_val == 4096, rs1_h2_val == 4, rs2_h3_val == -513
// opcode: pasubu.h ; op1:x10; op2:x31; dest:x2; op1val:0x1000004fffdfff7;  op2val:0xfdff100010000009
TEST_RR_OP(pasubu.h, x2, x10, x31, 0x0000000000000000, 0x1000004fffdfff7, 0xfdff100010000009, x4, 8*XLEN/8, x3)

inst_23:
// rs1==x31, rs2==x21, rd==x18, rs1_h0_val == -17, rs2_h2_val == -21846, rs1_h3_val == -8193, rs1_h3_val == rs2_h3_val, rs2_h0_val == -4097
// opcode: pasubu.h ; op1:x31; op2:x21; dest:x18; op1val:0xdfff4000fff7ffef;  op2val:0xdfffaaaafff8efff
TEST_RR_OP(pasubu.h, x18, x31, x21, 0x0000000000000000, 0xdfff4000fff7ffef, 0xdfffaaaafff8efff, x4, 9*XLEN/8, x3)

inst_24:
// rs1==x1, rs2==x13, rd==x11, rs1_h0_val == -33, rs1_h3_val == -2049, rs1_h1_val == 32
// opcode: pasubu.h ; op1:x1; op2:x13; dest:x11; op1val:0xf7ff00100020ffdf;  op2val:0x10100008000006
TEST_RR_OP(pasubu.h, x11, x1, x13, 0x0000000000000000, 0xf7ff00100020ffdf, 0x10100008000006, x4, 10*XLEN/8, x3)

inst_25:
// rs1==x25, rs2==x5, rd==x29, rs1_h0_val == -65, rs1_h1_val == 2048
// opcode: pasubu.h ; op1:x25; op2:x5; dest:x29; op1val:0xfdff00030800ffbf;  op2val:0x050000fbffff7f
TEST_RR_OP(pasubu.h, x29, x25, x5, 0x0000000000000000, 0xfdff00030800ffbf, 0x050000fbffff7f, x4, 11*XLEN/8, x3)

inst_26:
// rs1==x20, rs2==x1, rd==x23, rs1_h0_val == -129, rs1_h3_val == -65, rs1_h2_val == 0, rs2_h3_val == -2, rs2_h0_val == -21846, rs2_h2_val == 1
// opcode: pasubu.h ; op1:x20; op2:x1; dest:x23; op1val:0xffbf0000feffff7f;  op2val:0xfffe00010006aaaa
TEST_RR_OP(pasubu.h, x23, x20, x1, 0x0000000000000000, 0xffbf0000feffff7f, 0xfffe00010006aaaa, x4, 12*XLEN/8, x3)

inst_27:
// rs1==x16, rs2==x10, rd==x12, rs1_h0_val == -257, rs1_h2_val == -1, rs2_h1_val == -5, rs2_h0_val == -1025, rs1_h1_val == 16384, rs1_h3_val == 4096
// opcode: pasubu.h ; op1:x16; op2:x10; dest:x12; op1val:0x1000ffff4000feff;  op2val:0xf7ff0007fffbfbff
TEST_RR_OP(pasubu.h, x12, x16, x10, 0x0000000000000000, 0x1000ffff4000feff, 0xf7ff0007fffbfbff, x4, 13*XLEN/8, x2)

inst_28:
// rs1==x7, rs2==x3, rd==x6, rs1_h0_val == -513, rs2_h2_val == -8193, rs1_h1_val == -2049, rs1_h3_val == -1, rs1_h2_val == 64
// opcode: pasubu.h ; op1:x7; op2:x3; dest:x6; op1val:0xffff0040f7fffdff;  op2val:0xfffcdffffffb3fff
TEST_RR_OP(pasubu.h, x6, x7, x3, 0x0000000000000000, 0xffff0040f7fffdff, 0xfffcdffffffb3fff, x4, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_29:
// rs1==x4, rs2==x9, rd==x13, rs1_h0_val == -1025, rs1_h2_val == 8192, rs2_h2_val == 2048
// opcode: pasubu.h ; op1:x4; op2:x9; dest:x13; op1val:0x10002000fffbfbff;  op2val:0x200080000040001
TEST_RR_OP(pasubu.h, x13, x4, x9, 0x0000000000000000, 0x10002000fffbfbff, 0x200080000040001, x1, 0*XLEN/8, x2)

inst_30:
// rs1==x5, rs2==x4, rd==x7, rs1_h0_val == -2049, rs1_h3_val == -3, rs2_h1_val == 1024, rs2_h3_val == -9, rs1_h2_val == 8
// opcode: pasubu.h ; op1:x5; op2:x4; dest:x7; op1val:0xfffd00087ffff7ff;  op2val:0xfff7fffa0400ffbf
TEST_RR_OP(pasubu.h, x7, x5, x4, 0x0000000000000000, 0xfffd00087ffff7ff, 0xfff7fffa0400ffbf, x1, 1*XLEN/8, x2)

inst_31:
// rs1==x24, rs2==x28, rd==x17, rs1_h0_val == -4097, rs2_h0_val == 2048, rs2_h3_val == 256, rs2_h2_val == 4, rs1_h1_val == 128
// opcode: pasubu.h ; op1:x24; op2:x28; dest:x17; op1val:0x100ffff0080efff;  op2val:0x100000404000800
TEST_RR_OP(pasubu.h, x17, x24, x28, 0x0000000000000000, 0x100ffff0080efff, 0x100000404000800, x1, 2*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs1_h2_val == -65, rs1_h1_val == 8, rs1_h3_val == 16384, rs2_h3_val == 0
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffbf0008dfff;  op2val:0x00dffffffbffff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x4000ffbf0008dfff, 0x00dffffffbffff, x1, 3*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs2_h0_val == -5
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000800ffefbfff;  op2val:0xf7ff00034000fffb
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x40000800ffefbfff, 0xf7ff00034000fffb, x1, 4*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs2_h1_val == -9, rs1_h1_val == -33, rs2_h3_val == 64
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x070001ffdf5555;  op2val:0x40fefffff70008
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x070001ffdf5555, 0x40fefffff70008, x1, 5*XLEN/8, x2)

inst_35:
// rs1_h0_val == -21846, rs2_h1_val == -513, rs1_h2_val == 128
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80000803fffaaaa;  op2val:0xfff80005fdfffff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x80000803fffaaaa, 0xfff80005fdfffff6, x1, 6*XLEN/8, x2)

inst_36:
// rs2_h3_val == 32767, rs2_h1_val == 32767, rs2_h0_val == 32767, rs1_h2_val == -4097
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbeffffff80020;  op2val:0x7fff55557fff7fff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffbeffffff80020, 0x7fff55557fff7fff, x1, 7*XLEN/8, x2)

inst_37:
// rs2_h3_val == 2, rs1_h1_val == 256, rs1_h3_val == -21846
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb01000006;  op2val:0x020003effffff8
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xaaaafffb01000006, 0x020003effffff8, x1, 8*XLEN/8, x2)

inst_38:
// rs2_h3_val == 4, rs2_h2_val == -65
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80000004c0000020;  op2val:0x04ffbf00070800
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x80000004c0000020, 0x04ffbf00070800, x1, 9*XLEN/8, x2)

inst_39:
// rs2_h3_val == 32, rs2_h2_val == -33, rs2_h0_val == -2, rs2_h1_val == 8
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff200000020002;  op2val:0x20ffdf0008fffe
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffff200000020002, 0x20ffdf0008fffe, x1, 10*XLEN/8, x2)

inst_40:
// rs2_h3_val == 2048, rs2_h0_val == -33, rs1_h3_val == 64, rs2_h1_val == 256
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40ffeffffd5555;  op2val:0x800bfff0100ffdf
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x40ffeffffd5555, 0x800bfff0100ffdf, x1, 11*XLEN/8, x2)

inst_41:
// rs2_h3_val == 4096, rs2_h2_val == 16384
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffeffff90200;  op2val:0x10004000efff0001
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x3fffffeffff90200, 0x10004000efff0001, x1, 12*XLEN/8, x2)

inst_42:
// rs2_h3_val == 8192, rs1_h2_val == rs2_h2_val
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800080000090009;  op2val:0x2000080000040007
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x800080000090009, 0x2000080000040007, x1, 13*XLEN/8, x2)

inst_43:
// rs2_h3_val == -5, rs1_h2_val == 256, rs2_h0_val == -17
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff0100fff91000;  op2val:0xfffb00070003ffef
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffff0100fff91000, 0xfffb00070003ffef, x1, 14*XLEN/8, x2)

inst_44:
// rs2_h3_val == -17, rs1_h1_val == 8192
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff000820000020;  op2val:0xffef0001fff7ffdf
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xefff000820000020, 0xffef0001fff7ffdf, x1, 15*XLEN/8, x2)

inst_45:
// rs2_h3_val == -129, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x02fff900060040;  op2val:0xff7ffffbfff7c000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x02fff900060040, 0xff7ffffbfff7c000, x1, 16*XLEN/8, x2)

inst_46:
// rs2_h3_val == -257, rs2_h2_val == 8192
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x555500403fff8000;  op2val:0xfeff2000effffff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x555500403fff8000, 0xfeff2000effffff6, x1, 17*XLEN/8, x2)

inst_47:
// rs2_h3_val == -1025, rs2_h0_val == 2
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x03c00020000005;  op2val:0xfbff002000080002
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x03c00020000005, 0xfbff002000080002, x1, 18*XLEN/8, x2)

inst_48:
// rs2_h3_val == -4097, rs2_h1_val == -2049, rs1_h0_val == rs2_h0_val, rs2_h2_val == -2049
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000000800003;  op2val:0xeffff7fff7ff0003
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffbf000000800003, 0xeffff7fff7ff0003, x1, 19*XLEN/8, x2)

inst_49:
// rs2_h3_val == 21845, rs2_h1_val == -33
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb4000fffa0800;  op2val:0x5555fff8ffdfffff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffb4000fffa0800, 0x5555fff8ffdfffff, x1, 20*XLEN/8, x2)

inst_50:
// rs2_h3_val == -21846, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100000000062000;  op2val:0xaaaadffffff7f7ff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x100000000062000, 0xaaaadffffff7f7ff, x1, 21*XLEN/8, x2)

inst_51:
// rs1_h1_val == -1, rs2_h0_val == 4
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20002000fffffeff;  op2val:0x3fff400000020004
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x20002000fffffeff, 0x3fff400000020004, x1, 22*XLEN/8, x2)

inst_52:
// rs1_h1_val == 1, rs2_h0_val == 32, rs2_h2_val == -3
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc0001ffff;  op2val:0xc000fffdfffa0020
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x20fffc0001ffff, 0xc000fffdfffa0020, x1, 23*XLEN/8, x2)

inst_53:
// rs1_h1_val == 4, rs1_h2_val == 21845
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200055550004fff9;  op2val:0xfff6ffdff7fffff8
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x200055550004fff9, 0xfff6ffdff7fffff8, x1, 24*XLEN/8, x2)

inst_54:
// rs1_h1_val == rs2_h1_val, rs2_h2_val == -129, rs2_h3_val == 1
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fffefff90005;  op2val:0x01ff7ffff93fff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x100fffefff90005, 0x01ff7ffff93fff, x1, 25*XLEN/8, x2)

inst_55:
// rs1_h1_val == 16, rs1_h2_val == -3, rs2_h1_val == 1
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd0010fffd;  op2val:0x09ff7f0001ffff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x4000fffd0010fffd, 0x09ff7f0001ffff, x1, 26*XLEN/8, x2)

inst_56:
// rs1_h1_val == 64, rs2_h0_val == -257, rs2_h1_val == -1, rs1_h2_val == -2049
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffaf7ff00400001;  op2val:0xffef0009fffffeff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffaf7ff00400001, 0xffef0009fffffeff, x1, 27*XLEN/8, x2)

inst_57:
// rs1_h1_val == 1024, rs2_h0_val == -16385, rs1_h2_val == 32767, rs2_h2_val == 8
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fff04000800;  op2val:0x55550008ffdfbfff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xefff7fff04000800, 0x55550008ffdfbfff, x1, 28*XLEN/8, x2)

inst_58:
// rs1_h1_val == 4096, rs1_h3_val == -16385
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfffefff10000100;  op2val:0x04ff7f00060008
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xbfffefff10000100, 0x04ff7f00060008, x1, 29*XLEN/8, x2)

inst_59:
// rs1_h1_val == -2, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40f7fffffe4000;  op2val:0x2000ffbf00070400
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x40f7fffffe4000, 0x2000ffbf00070400, x1, 30*XLEN/8, x2)

inst_60:
// rs1_h3_val == -17, rs2_h3_val == -1
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff60009ffbf;  op2val:0xffff0100ffeff7ff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffeffff60009ffbf, 0xffff0100ffeff7ff, x1, 31*XLEN/8, x2)

inst_61:
// rs1_h3_val == -33, rs1_h2_val == -33
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdffffb2000;  op2val:0x0604002000fff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffdfffdffffb2000, 0x0604002000fff6, x1, 32*XLEN/8, x2)

inst_62:
// rs1_h3_val == -257, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff7fffffeffff8;  op2val:0xfffc000104000020
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfeff7fffffeffff8, 0xfffc000104000020, x1, 33*XLEN/8, x2)

inst_63:
// rs1_h3_val == -1025, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbf55550002;  op2val:0x07feffeffffffa
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfbffffbf55550002, 0x07feffeffffffa, x1, 34*XLEN/8, x2)

inst_64:
// rs2_h0_val == 0, rs2_h1_val == -3
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80000040040fff9;  op2val:0x2000004fffd0000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x80000040040fff9, 0x2000004fffd0000, x1, 35*XLEN/8, x2)

inst_65:
// rs2_h0_val == 16, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09ffbf40000009;  op2val:0xffbffbff3fff0010
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x09ffbf40000009, 0xffbffbff3fff0010, x1, 36*XLEN/8, x2)

inst_66:
// rs2_h0_val == 64, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fffdfff0010;  op2val:0xfdffff7fffef0040
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfff77fffdfff0010, 0xfdffff7fffef0040, x1, 37*XLEN/8, x2)

inst_67:
// rs2_h0_val == 256, rs2_h1_val == 32
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffdfffaaaaa;  op2val:0x7fff100000200100
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x8000fffdfffaaaaa, 0x7fff100000200100, x1, 38*XLEN/8, x2)

inst_68:
// rs2_h0_val == 4096, rs1_h2_val == -32768
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000800000100080;  op2val:0xfbff2000bfff1000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x1000800000100080, 0xfbff2000bfff1000, x1, 39*XLEN/8, x2)

inst_69:
// rs2_h0_val == 8192, rs2_h2_val == -9
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40001000dfff5555;  op2val:0xf7fffff73fff2000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x40001000dfff5555, 0xf7fffff73fff2000, x1, 40*XLEN/8, x2)

inst_70:
// rs2_h0_val == -3, rs2_h2_val == 2
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff000210008000;  op2val:0x040002c000fffd
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xefff000210008000, 0x040002c000fffd, x1, 41*XLEN/8, x2)

inst_71:
// rs2_h0_val == -513, rs1_h3_val == 8, rs2_h1_val == -257
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0800800100fdff;  op2val:0x1000005fefffdff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x0800800100fdff, 0x1000005fefffdff, x1, 42*XLEN/8, x2)

inst_72:
// rs2_h0_val == -8193, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0704000040ff7f;  op2val:0x07effffffadfff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x0704000040ff7f, 0x07effffffadfff, x1, 43*XLEN/8, x2)

inst_73:
// rs2_h0_val == 21845, rs2_h2_val == 16
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x03fffc00040002;  op2val:0xfffa0010fbff5555
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x03fffc00040002, 0xfffa0010fbff5555, x1, 44*XLEN/8, x2)

inst_74:
// rs2_h1_val == -32768, rs2_h2_val == -513
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400ffff04000001;  op2val:0xffdffdff8000ffef
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x400ffff04000001, 0xffdffdff8000ffef, x1, 45*XLEN/8, x2)

inst_75:
// rs2_h1_val == 16, rs1_h2_val == -513
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff00080020;  op2val:0xaaaafff600100000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x09fdff00080020, 0xaaaafff600100000, x1, 46*XLEN/8, x2)

inst_76:
// rs1_h1_val == -65, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0400ffbffdff;  op2val:0x2000fffbfffd0006
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffc0400ffbffdff, 0x2000fffbfffd0006, x1, 47*XLEN/8, x2)

inst_77:
// rs1_h1_val == -129, rs2_h1_val == -8193
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff6ff7ffeff;  op2val:0x030800dfff8000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfefffff6ff7ffeff, 0x030800dfff8000, x1, 48*XLEN/8, x2)

inst_78:
// rs2_h1_val == 64, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef000655550004;  op2val:0x05000600401000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffef000655550004, 0x05000600401000, x1, 49*XLEN/8, x2)

inst_79:
// rs1_h1_val == -513, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0006fdffc000;  op2val:0x09f7ff0400ff7f
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffdf0006fdffc000, 0x09f7ff0400ff7f, x1, 50*XLEN/8, x2)

inst_80:
// rs1_h1_val == -1025, rs1_h3_val == 1
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x01fffdfbff0080;  op2val:0xffbff7ffffdf0020
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x01fffdfbff0080, 0xffbff7ffffdf0020, x1, 51*XLEN/8, x2)

inst_81:
// rs1_h1_val == -4097, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ffefffffef;  op2val:0x06fffa0000efff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfff8f7ffefffffef, 0x06fffa0000efff, x1, 52*XLEN/8, x2)

inst_82:
// rs2_h1_val == 128, rs1_h2_val == -257
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeff00100040;  op2val:0x07efff0080fffd
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xff7ffeff00100040, 0x07efff0080fffd, x1, 53*XLEN/8, x2)

inst_83:
// rs1_h1_val == -16385, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7fbfff0100;  op2val:0x07000140000040
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xffdfff7fbfff0100, 0x07000140000040, x1, 54*XLEN/8, x2)

inst_84:
// rs2_h1_val == -2, rs1_h2_val == -9
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7fffdfdff;  op2val:0xfbff0400fffe0040
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfefffff7fffdfdff, 0xfbff0400fffe0040, x1, 55*XLEN/8, x2)

inst_85:
// rs2_h1_val == -129, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000efff0002fdff;  op2val:0xfff90004ff7fdfff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x8000efff0002fdff, 0xfff90004ff7fdfff, x1, 56*XLEN/8, x2)

inst_86:
// rs1_h2_val == 32, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0020fff9ffdf;  op2val:0xfff8ff7f0000fff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0020fff9ffdf, 0xfff8ff7f0000fff6, x1, 57*XLEN/8, x2)

inst_87:
// rs1_h2_val == 512, rs2_h2_val == 512
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0200fffff7ff;  op2val:0x04020000100004
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0200fffff7ff, 0x04020000100004, x1, 58*XLEN/8, x2)

inst_88:
// rs2_h1_val == 21845, rs2_h3_val == -32768, rs1_h3_val == 0
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fffeffef8000;  op2val:0x8000000255551000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x00fffeffef8000, 0x8000000255551000, x1, 59*XLEN/8, x2)

inst_89:
// rs2_h1_val == -21846, rs2_h2_val == 64
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff800030020c000;  op2val:0xfffe0040aaaa4000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfff800030020c000, 0xfffe0040aaaa4000, x1, 60*XLEN/8, x2)

inst_90:
// rs1_h3_val == 512, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000002fffa7fff;  op2val:0xfffdf7ff5555feff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x2000002fffa7fff, 0xfffdf7ff5555feff, x1, 61*XLEN/8, x2)

inst_91:
// rs2_h2_val == 128, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc800000100001;  op2val:0xfff700800010ffff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffc800000100001, 0xfff700800010ffff, x1, 62*XLEN/8, x2)

inst_92:
// rs1_h2_val == -1025, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbfffffd0001;  op2val:0x7fff400000800010
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfbfffbfffffd0001, 0x7fff400000800010, x1, 63*XLEN/8, x2)

inst_93:
// rs1_h2_val == -8193, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800dfff00060004;  op2val:0xf7ff00080002fff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x800dfff00060004, 0xf7ff00080002fff6, x1, 64*XLEN/8, x2)

inst_94:
// rs1_h2_val == -16385, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09bfff00055555;  op2val:0x09fffcbfff0004
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x09bfff00055555, 0x09fffcbfff0004, x1, 65*XLEN/8, x2)

inst_95:
// rs1_h2_val == -21846, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000aaaaffbffdff;  op2val:0x00000804000800
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x4000aaaaffbffdff, 0x00000804000800, x1, 66*XLEN/8, x2)

inst_96:
// rs1_h3_val == 4, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x04fefffff7fffc;  op2val:0x10ffdf00100004
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x04fefffff7fffc, 0x10ffdf00100004, x1, 67*XLEN/8, x2)

inst_97:
// rs2_h2_val == -17, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff7fff61000;  op2val:0x03ffeffffe4000
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfbfffff7fff61000, 0x03ffeffffe4000, x1, 68*XLEN/8, x2)

inst_98:
// rs1_h3_val == 128, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80bfff3fff0001;  op2val:0x400fffd00007fff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x80bfff3fff0001, 0x400fffd00007fff, x1, 69*XLEN/8, x2)

inst_99:
// rs2_h2_val == -32768, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000030003fffc;  op2val:0x8080000080ffbf
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x8000030003fffc, 0x8080000080ffbf, x1, 70*XLEN/8, x2)

inst_100:
// rs2_h2_val == -1, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa00040100;  op2val:0x4000fffffffefff6
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x08aaaa00040100, 0x4000fffffffefff6, x1, 71*XLEN/8, x2)

inst_101:
// rs2_h2_val == 32767, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0600030004fff8;  op2val:0x8007fff0001fbff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x0600030004fff8, 0x8007fff0001fbff, x1, 72*XLEN/8, x2)

inst_102:
// rs1_h3_val == -2, 
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe400000040008;  op2val:0x08ffef00020200
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xfffe400000040008, 0x08ffef00020200, x1, 73*XLEN/8, x2)

inst_103:
// rs1_h0_val == 0, rs2_h1_val == 2048, rs1_h3_val == -129, rs1_h1_val == 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -8193
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc00000000;  op2val:0xdffffff80800fff8
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0xff7ffffc00000000, 0xdffffff80800fff8, x1, 74*XLEN/8, x2)

inst_104:
// rs1_h0_val == 1024, rs1_h3_val == -32768, rs2_h0_val == -2049, rs1_h1_val == 512, rs2_h3_val == -33, rs2_h1_val == 4
// opcode: pasubu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80003fff02000400;  op2val:0xffdffff90004f7ff
TEST_RR_OP(pasubu.h, x31, x30, x29, 0x0000000000000000, 0x80003fff02000400, 0xffdffff90004f7ff, x1, 75*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 76*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
