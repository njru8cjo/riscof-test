
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:15:07 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p6-7.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psexth.w instruction of the RISC-V RV64PZicsr extension for the psexth.w covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psexth.w)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd, rs1==x20, rd==x20, rs1_w0_val == -2147483648, imm_val == 14
// opcode: psexth.w ; op1:x20; dest:x20; op1val:0x00000680000000;  immval:0xe
TEST_IMM_OP( psexth.w, x20, x20, 0x0000000000000000, 0x00000680000000, 0xe, x3, 0*XLEN/8, x11)

inst_1:
// rs1 != rd, rs1==x6, rd==x22, rs1_w0_val == -1, imm_val == 8, rs1_w1_val == -17
// opcode: psexth.w ; op1:x6; dest:x22; op1val:0xffffffefffffffff;  immval:0x8
TEST_IMM_OP( psexth.w, x22, x6, 0x0000000000000000, 0xffffffefffffffff, 0x8, x3, 1*XLEN/8, x11)

inst_2:
// rs1==x15, rd==x9, rs1_w0_val == 0, rs1_w1_val == -262145, imm_val == 2
// opcode: psexth.w ; op1:x15; dest:x9; op1val:0xfffbffff00000000;  immval:0x2
TEST_IMM_OP( psexth.w, x9, x15, 0x0000000000000000, 0xfffbffff00000000, 0x2, x3, 2*XLEN/8, x11)

inst_3:
// rs1==x7, rd==x1, rs1_w0_val == 1, rs1_w1_val == -5, imm_val == 29
// opcode: psexth.w ; op1:x7; dest:x1; op1val:0xfffffffb00000001;  immval:0x1d
TEST_IMM_OP( psexth.w, x1, x7, 0x0000000000000000, 0xfffffffb00000001, 0x1d, x3, 3*XLEN/8, x11)

inst_4:
// rs1==x22, rd==x12, rs1_w0_val == 2147483647, rs1_w1_val == -8193, imm_val == 5
// opcode: psexth.w ; op1:x22; dest:x12; op1val:0xffffdfff7fffffff;  immval:0x5
TEST_IMM_OP( psexth.w, x12, x22, 0x0000000000000000, 0xffffdfff7fffffff, 0x5, x3, 4*XLEN/8, x11)

inst_5:
// rs1==x1, rd==x29, rs1_w0_val == 2, imm_val == 9, rs1_w1_val == 134217728
// opcode: psexth.w ; op1:x1; dest:x29; op1val:0x800000000000002;  immval:0x9
TEST_IMM_OP( psexth.w, x29, x1, 0x0000000000000000, 0x800000000000002, 0x9, x3, 5*XLEN/8, x11)

inst_6:
// rs1==x14, rd==x27, rs1_w0_val == 4, rs1_w1_val == 32, imm_val == 23
// opcode: psexth.w ; op1:x14; dest:x27; op1val:0x00002000000004;  immval:0x17
TEST_IMM_OP( psexth.w, x27, x14, 0x0000000000000000, 0x00002000000004, 0x17, x3, 6*XLEN/8, x11)

inst_7:
// rs1==x24, rd==x16, rs1_w0_val == 8, imm_val == 18, rs1_w1_val == -1073741825
// opcode: psexth.w ; op1:x24; dest:x16; op1val:0xbfffffff00000008;  immval:0x12
TEST_IMM_OP( psexth.w, x16, x24, 0x0000000000000000, 0xbfffffff00000008, 0x12, x3, 7*XLEN/8, x11)

inst_8:
// rs1==x10, rd==x14, rs1_w0_val == 16, imm_val == 0, rs1_w1_val == 4096
// opcode: psexth.w ; op1:x10; dest:x14; op1val:0x00100000000010;  immval:0x0
TEST_IMM_OP( psexth.w, x14, x10, 0x0000000000000000, 0x00100000000010, 0x0, x3, 8*XLEN/8, x11)

inst_9:
// rs1==x8, rd==x31, rs1_w0_val == 32, imm_val == 16
// opcode: psexth.w ; op1:x8; dest:x31; op1val:0x3fffffff00000020;  immval:0x10
TEST_IMM_OP( psexth.w, x31, x8, 0x0000000000000000, 0x3fffffff00000020, 0x10, x3, 9*XLEN/8, x11)

inst_10:
// rs1==x5, rd==x0, rs1_w0_val == 64, imm_val == 1, rs1_w1_val == -1048577
// opcode: psexth.w ; op1:x5; dest:x0; op1val:0xffefffff00000040;  immval:0x1
TEST_IMM_OP( psexth.w, x0, x5, 0x0000000000000000, 0xffefffff00000040, 0x1, x3, 10*XLEN/8, x11)

inst_11:
// rs1==x16, rd==x4, rs1_w0_val == 128, rs1_w1_val == -3
// opcode: psexth.w ; op1:x16; dest:x4; op1val:0xfffffffd00000080;  immval:0x8
TEST_IMM_OP( psexth.w, x4, x16, 0x0000000000000000, 0xfffffffd00000080, 0x8, x3, 11*XLEN/8, x11)

inst_12:
// rs1==x17, rd==x28, rs1_w0_val == 256, rs1_w1_val == -9, imm_val == 22
// opcode: psexth.w ; op1:x17; dest:x28; op1val:0xfffffff700000100;  immval:0x16
TEST_IMM_OP( psexth.w, x28, x17, 0x0000000000000000, 0xfffffff700000100, 0x16, x3, 12*XLEN/8, x11)

inst_13:
// rs1==x0, rd==x6, rs1_w0_val == 512, rs1_w1_val == -2097153, imm_val == 7
// opcode: psexth.w ; op1:x0; dest:x6; op1val:0xffdfffff00000200;  immval:0x7
TEST_IMM_OP( psexth.w, x6, x0, 0x0000000000000000, 0xffdfffff00000200, 0x7, x3, 13*XLEN/8, x11)

inst_14:
// rs1==x21, rd==x13, rs1_w0_val == 1024, imm_val == 20, rs1_w1_val == 16
// opcode: psexth.w ; op1:x21; dest:x13; op1val:0x00001000000400;  immval:0x14
TEST_IMM_OP( psexth.w, x13, x21, 0x0000000000000000, 0x00001000000400, 0x14, x3, 14*XLEN/8, x11)

inst_15:
// rs1==x26, rd==x8, rs1_w0_val == 2048, imm_val == 24, rs1_w1_val == -129
// opcode: psexth.w ; op1:x26; dest:x8; op1val:0xffffff7f00000800;  immval:0x18
TEST_IMM_OP( psexth.w, x8, x26, 0x0000000000000000, 0xffffff7f00000800, 0x18, x3, 15*XLEN/8, x11)

inst_16:
// rs1==x18, rd==x21, rs1_w0_val == 4096, imm_val == 26, rs1_w1_val == 536870912
// opcode: psexth.w ; op1:x18; dest:x21; op1val:0x2000000000001000;  immval:0x1a
TEST_IMM_OP( psexth.w, x21, x18, 0x0000000000000000, 0x2000000000001000, 0x1a, x3, 16*XLEN/8, x11)

inst_17:
// rs1==x13, rd==x7, rs1_w0_val == 8192, imm_val == 6
// opcode: psexth.w ; op1:x13; dest:x7; op1val:0x00000300002000;  immval:0x6
TEST_IMM_OP( psexth.w, x7, x13, 0x0000000000000000, 0x00000300002000, 0x6, x3, 17*XLEN/8, x11)

inst_18:
// rs1==x19, rd==x2, rs1_w0_val == 16384, rs1_w1_val == 33554432, imm_val == 11
// opcode: psexth.w ; op1:x19; dest:x2; op1val:0x200000000004000;  immval:0xb
TEST_IMM_OP( psexth.w, x2, x19, 0x0000000000000000, 0x200000000004000, 0xb, x3, 18*XLEN/8, x11)

inst_19:
// rs1==x4, rd==x5, rs1_w0_val == 32768, rs1_w1_val == 67108864, imm_val == 30
// opcode: psexth.w ; op1:x4; dest:x5; op1val:0x400000000008000;  immval:0x1e
TEST_IMM_OP( psexth.w, x5, x4, 0x0000000000000000, 0x400000000008000, 0x1e, x3, 19*XLEN/8, x6)

inst_20:
// rs1==x12, rd==x24, rs1_w0_val == 65536, rs1_w1_val == -131073
// opcode: psexth.w ; op1:x12; dest:x24; op1val:0xfffdffff00010000;  immval:0x1a
TEST_IMM_OP( psexth.w, x24, x12, 0x0000000000000000, 0xfffdffff00010000, 0x1a, x3, 20*XLEN/8, x6)

inst_21:
// rs1==x2, rd==x30, rs1_w0_val == 131072, rs1_w1_val == 2048, imm_val == 28
// opcode: psexth.w ; op1:x2; dest:x30; op1val:0x00080000020000;  immval:0x1c
TEST_IMM_OP( psexth.w, x30, x2, 0x0000000000000000, 0x00080000020000, 0x1c, x3, 21*XLEN/8, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x9, rd==x25, rs1_w0_val == 262144, rs1_w1_val == -1025
// opcode: psexth.w ; op1:x9; dest:x25; op1val:0xfffffbff00040000;  immval:0x6
TEST_IMM_OP( psexth.w, x25, x9, 0x0000000000000000, 0xfffffbff00040000, 0x6, x1, 0*XLEN/8, x6)

inst_23:
// rs1==x11, rd==x17, rs1_w0_val == 524288, rs1_w1_val == -134217729
// opcode: psexth.w ; op1:x11; dest:x17; op1val:0xf7ffffff00080000;  immval:0x9
TEST_IMM_OP( psexth.w, x17, x11, 0x0000000000000000, 0xf7ffffff00080000, 0x9, x1, 1*XLEN/8, x6)

inst_24:
// rs1==x27, rd==x26, rs1_w0_val == 1048576, 
// opcode: psexth.w ; op1:x27; dest:x26; op1val:0x00002000100000;  immval:0x17
TEST_IMM_OP( psexth.w, x26, x27, 0x0000000000000000, 0x00002000100000, 0x17, x1, 2*XLEN/8, x6)

inst_25:
// rs1==x31, rd==x19, rs1_w0_val == 2097152, rs1_w1_val == 128
// opcode: psexth.w ; op1:x31; dest:x19; op1val:0x00008000200000;  immval:0x1d
TEST_IMM_OP( psexth.w, x19, x31, 0x0000000000000000, 0x00008000200000, 0x1d, x1, 3*XLEN/8, x6)

inst_26:
// rs1==x23, rd==x3, rs1_w0_val == 4194304, rs1_w1_val == 16777216
// opcode: psexth.w ; op1:x23; dest:x3; op1val:0x100000000400000;  immval:0x2
TEST_IMM_OP( psexth.w, x3, x23, 0x0000000000000000, 0x100000000400000, 0x2, x1, 4*XLEN/8, x6)

inst_27:
// rs1==x29, rd==x15, rs1_w0_val == 8388608, imm_val == 4
// opcode: psexth.w ; op1:x29; dest:x15; op1val:0xffffffef00800000;  immval:0x4
TEST_IMM_OP( psexth.w, x15, x29, 0x0000000000000000, 0xffffffef00800000, 0x4, x1, 5*XLEN/8, x6)

inst_28:
// rs1==x3, rd==x11, rs1_w0_val == 16777216, rs1_w1_val == -33554433
// opcode: psexth.w ; op1:x3; dest:x11; op1val:0xfdffffff01000000;  immval:0x0
TEST_IMM_OP( psexth.w, x11, x3, 0x0000000000000000, 0xfdffffff01000000, 0x0, x1, 6*XLEN/8, x6)

inst_29:
// rs1==x28, rd==x23, rs1_w0_val == 33554432, rs1_w1_val == -65537
// opcode: psexth.w ; op1:x28; dest:x23; op1val:0xfffeffff02000000;  immval:0x7
TEST_IMM_OP( psexth.w, x23, x28, 0x0000000000000000, 0xfffeffff02000000, 0x7, x1, 7*XLEN/8, x6)

inst_30:
// rs1==x25, rd==x18, rs1_w0_val == 67108864, 
// opcode: psexth.w ; op1:x25; dest:x18; op1val:0xfffffff704000000;  immval:0x1d
TEST_IMM_OP( psexth.w, x18, x25, 0x0000000000000000, 0xfffffff704000000, 0x1d, x1, 8*XLEN/8, x6)

inst_31:
// rs1==x30, rd==x10, rs1_w0_val == 134217728, rs1_w1_val == 32768
// opcode: psexth.w ; op1:x30; dest:x10; op1val:0x00800008000000;  immval:0x10
TEST_IMM_OP( psexth.w, x10, x30, 0x0000000000000000, 0x00800008000000, 0x10, x1, 9*XLEN/8, x6)

inst_32:
// rs1_w0_val == 268435456, imm_val == 13
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffff610000000;  immval:0xd
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffff610000000, 0xd, x1, 10*XLEN/8, x6)

inst_33:
// rs1_w0_val == 536870912, rs1_w1_val == -16385
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffbfff20000000;  immval:0x2
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffbfff20000000, 0x2, x1, 11*XLEN/8, x6)

inst_34:
// rs1_w0_val == 1073741824, imm_val == 25
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffefffff40000000;  immval:0x19
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffefffff40000000, 0x19, x1, 12*XLEN/8, x6)

inst_35:
// rs1_w0_val == -2, imm_val == 10
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000800fffffffe;  immval:0xa
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000800fffffffe, 0xa, x1, 13*XLEN/8, x6)

inst_36:
// rs1_w0_val == -3, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000800fffffffd;  immval:0x2
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000800fffffffd, 0x2, x1, 14*XLEN/8, x6)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == 1048576
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x100000fffffffb;  immval:0x1a
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x100000fffffffb, 0x1a, x1, 15*XLEN/8, x6)

inst_38:
// rs1_w0_val == -9, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000800fffffff7;  immval:0x4
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000800fffffff7, 0x4, x1, 16*XLEN/8, x6)

inst_39:
// rs1_w0_val == -17, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x100000ffffffef;  immval:0x1c
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x100000ffffffef, 0x1c, x1, 17*XLEN/8, x6)

inst_40:
// rs1_w0_val == -33, imm_val == 31
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffdfffffffffffdf;  immval:0x1f
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffdfffffffffffdf, 0x1f, x1, 18*XLEN/8, x6)

inst_41:
// rs1_w0_val == -65, imm_val == 3, rs1_w1_val == -536870913
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xdfffffffffffffbf;  immval:0x3
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xdfffffffffffffbf, 0x3, x1, 19*XLEN/8, x6)

inst_42:
// rs1_w0_val == -129, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xbfffffffffffff7f;  immval:0x5
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xbfffffffffffff7f, 0x5, x1, 20*XLEN/8, x6)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == -67108865
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfbfffffffffffeff;  immval:0x10
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfbfffffffffffeff, 0x10, x1, 21*XLEN/8, x6)

inst_44:
// rs1_w0_val == -513, rs1_w1_val == 1073741824
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x40000000fffffdff;  immval:0x3
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x40000000fffffdff, 0x3, x1, 22*XLEN/8, x6)

inst_45:
// rs1_w0_val == -1025, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffff6fffffbff;  immval:0x1
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffff6fffffbff, 0x1, x1, 23*XLEN/8, x6)

inst_46:
// rs1_w0_val == -2049, rs1_w1_val == 65536
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x010000fffff7ff;  immval:0x1c
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x010000fffff7ff, 0x1c, x1, 24*XLEN/8, x6)

inst_47:
// rs1_w0_val == -4097, rs1_w1_val == -4194305
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffbfffffffffefff;  immval:0xa
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffbfffffffffefff, 0xa, x1, 25*XLEN/8, x6)

inst_48:
// rs1_w1_val == -268435457, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xefffffff00800000;  immval:0xa
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xefffffff00800000, 0xa, x1, 26*XLEN/8, x6)

inst_49:
// rs1_w1_val == 1431655765, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x5555555502000000;  immval:0xd
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x5555555502000000, 0xd, x1, 27*XLEN/8, x6)

inst_50:
// rs1_w1_val == -1431655766, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000020;  immval:0x17
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000020, 0x17, x1, 28*XLEN/8, x6)

inst_51:
// imm_val == 12, rs1_w0_val == -134217729
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000006f7ffffff;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000006f7ffffff, 0xc, x1, 29*XLEN/8, x6)

inst_52:
// imm_val == 15, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfdffffff00000000;  immval:0xf
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfdffffff00000000, 0xf, x1, 30*XLEN/8, x6)

inst_53:
// imm_val == 17, rs1_w1_val == -2147483648
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x8000000000000002;  immval:0x11
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x8000000000000002, 0x11, x1, 31*XLEN/8, x6)

inst_54:
// imm_val == 19, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffffeffffffeff;  immval:0x13
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffffeffffffeff, 0x13, x1, 32*XLEN/8, x6)

inst_55:
// imm_val == 21, rs1_w1_val == -33
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffffdf80000000;  immval:0x15
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffffdf80000000, 0x15, x1, 33*XLEN/8, x6)

inst_56:
// imm_val == 27, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00080000000008;  immval:0x1b
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00080000000008, 0x1b, x1, 34*XLEN/8, x6)

inst_57:
// rs1_w0_val == -8193, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x8000000ffffdfff;  immval:0x17
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x8000000ffffdfff, 0x17, x1, 35*XLEN/8, x6)

inst_58:
// rs1_w0_val == -16385, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x2000000ffffbfff;  immval:0x18
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x2000000ffffbfff, 0x18, x1, 36*XLEN/8, x6)

inst_59:
// rs1_w0_val == -32769, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffdffffffff7fff;  immval:0xb
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffdffffffff7fff, 0xb, x1, 37*XLEN/8, x6)

inst_60:
// rs1_w0_val == -65537, rs1_w1_val == 131072
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x020000fffeffff;  immval:0xe
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x020000fffeffff, 0xe, x1, 38*XLEN/8, x6)

inst_61:
// rs1_w0_val == -131073, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xeffffffffffdffff;  immval:0x6
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xeffffffffffdffff, 0x6, x1, 39*XLEN/8, x6)

inst_62:
// rs1_w0_val == -262145, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x4000000fffbffff;  immval:0xa
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x4000000fffbffff, 0xa, x1, 40*XLEN/8, x6)

inst_63:
// rs1_w0_val == -524289, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffffcfff7ffff;  immval:0x4
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffffcfff7ffff, 0x4, x1, 41*XLEN/8, x6)

inst_64:
// rs1_w0_val == -1048577, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffffbffefffff;  immval:0x0
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffffbffefffff, 0x0, x1, 42*XLEN/8, x6)

inst_65:
// rs1_w0_val == -2097153, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xf7ffffffffdfffff;  immval:0x9
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xf7ffffffffdfffff, 0x9, x1, 43*XLEN/8, x6)

inst_66:
// rs1_w0_val == -4194305, rs1_w1_val == -8388609
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xff7fffffffbfffff;  immval:0x3
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xff7fffffffbfffff, 0x3, x1, 44*XLEN/8, x6)

inst_67:
// rs1_w0_val == -8388609, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfbffffffff7fffff;  immval:0x6
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfbffffffff7fffff, 0x6, x1, 45*XLEN/8, x6)

inst_68:
// rs1_w0_val == -16777217, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffffdfeffffff;  immval:0xb
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffffdfeffffff, 0xb, x1, 46*XLEN/8, x6)

inst_69:
// rs1_w0_val == -33554433, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffdffffdffffff;  immval:0xf
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffdffffdffffff, 0xf, x1, 47*XLEN/8, x6)

inst_70:
// rs1_w0_val == -67108865, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffff7fbffffff;  immval:0x13
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffff7fbffffff, 0x13, x1, 48*XLEN/8, x6)

inst_71:
// rs1_w0_val == -268435457, rs1_w1_val == 268435456
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x10000000efffffff;  immval:0x1d
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x10000000efffffff, 0x1d, x1, 49*XLEN/8, x6)

inst_72:
// rs1_w0_val == -536870913, rs1_w1_val == 256
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000100dfffffff;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000100dfffffff, 0xc, x1, 50*XLEN/8, x6)

inst_73:
// rs1_w0_val == -1073741825, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x4000000bfffffff;  immval:0x11
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x4000000bfffffff, 0x11, x1, 51*XLEN/8, x6)

inst_74:
// rs1_w0_val == 1431655765, rs1_w1_val == 524288
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x08000055555555;  immval:0x18
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x08000055555555, 0x18, x1, 52*XLEN/8, x6)

inst_75:
// rs1_w0_val == -1431655766, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000007aaaaaaaa;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000007aaaaaaaa, 0xc, x1, 53*XLEN/8, x6)

inst_76:
// rs1_w1_val == -1, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffffff02000000;  immval:0x1a
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffffff02000000, 0x1a, x1, 54*XLEN/8, x6)

inst_77:
// rs1_w1_val == 0, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00000000800000;  immval:0x1f
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00000000800000, 0x1f, x1, 55*XLEN/8, x6)

inst_78:
// rs1_w1_val == 1, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000001fffffbff;  immval:0x15
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000001fffffbff, 0x15, x1, 56*XLEN/8, x6)

inst_79:
// rs1_w1_val == 2147483647, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x7fffffff7fffffff;  immval:0x10
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x7fffffff7fffffff, 0x10, x1, 57*XLEN/8, x6)

inst_80:
// rs1_w1_val == 2, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000002fffffbff;  immval:0x1b
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000002fffffbff, 0x1b, x1, 58*XLEN/8, x6)

inst_81:
// rs1_w1_val == 4, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00000400000400;  immval:0x1e
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00000400000400, 0x1e, x1, 59*XLEN/8, x6)

inst_82:
// rs1_w1_val == 8, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00000800002000;  immval:0x5
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00000800002000, 0x5, x1, 60*XLEN/8, x6)

inst_83:
// rs1_w1_val == 64, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x000040ffffffef;  immval:0xd
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x000040ffffffef, 0xd, x1, 61*XLEN/8, x6)

inst_84:
// rs1_w1_val == 512, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00020000000010;  immval:0x6
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00020000000010, 0x6, x1, 62*XLEN/8, x6)

inst_85:
// rs1_w1_val == 1024, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x00040000020000;  immval:0x5
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x00040000020000, 0x5, x1, 63*XLEN/8, x6)

inst_86:
// rs1_w1_val == -524289, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfff7ffffffffff7f;  immval:0x11
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfff7ffffffffff7f, 0x11, x1, 64*XLEN/8, x6)

inst_87:
// rs1_w1_val == -2, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffffeffdfffff;  immval:0x14
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffffeffdfffff, 0x14, x1, 65*XLEN/8, x6)

inst_88:
// rs1_w1_val == -65, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffffbf00000009;  immval:0x11
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffffbf00000009, 0x11, x1, 66*XLEN/8, x6)

inst_89:
// rs1_w1_val == -257, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffeff00020000;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffeff00020000, 0xc, x1, 67*XLEN/8, x6)

inst_90:
// rs1_w1_val == -513, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffffdfffffeffff;  immval:0x1b
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffffdfffffeffff, 0x1b, x1, 68*XLEN/8, x6)

inst_91:
// rs1_w1_val == -2049, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfffff7ffffffff7f;  immval:0x0
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfffff7ffffffff7f, 0x0, x1, 69*XLEN/8, x6)

inst_92:
// rs1_w1_val == -4097, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffffefff00080000;  immval:0x5
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffffefff00080000, 0x5, x1, 70*XLEN/8, x6)

inst_93:
// rs1_w1_val == 8388608, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x80000000000008;  immval:0xb
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x80000000000008, 0xb, x1, 71*XLEN/8, x6)

inst_94:
// rs1_w1_val == 8192, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x002000fffdffff;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x002000fffdffff, 0xc, x1, 72*XLEN/8, x6)

inst_95:
// rs1_w1_val == 16384, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x004000ffff7fff;  immval:0x1a
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x004000ffff7fff, 0x1a, x1, 73*XLEN/8, x6)

inst_96:
// rs1_w1_val == -32769, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffff7ffffffffff8;  immval:0x1a
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffff7ffffffffff8, 0x1a, x1, 74*XLEN/8, x6)

inst_97:
// rs1_w1_val == 262144, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x04000010000000;  immval:0x3
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x04000010000000, 0x3, x1, 75*XLEN/8, x6)

inst_98:
// rs1_w1_val == 2097152, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x200000ffdfffff;  immval:0xd
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x200000ffdfffff, 0xd, x1, 76*XLEN/8, x6)

inst_99:
// rs1_w1_val == 4194304, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0x400000fffffff7;  immval:0xc
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0x400000fffffff7, 0xc, x1, 77*XLEN/8, x6)

inst_100:
// rs1_w1_val == -16777217, 
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xfefffffffffffbff;  immval:0x10
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xfefffffffffffbff, 0x10, x1, 78*XLEN/8, x6)

inst_101:
// rs1_w0_val == 64, imm_val == 1, rs1_w1_val == -1048577
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffefffff00000040;  immval:0x1
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffefffff00000040, 0x1, x1, 79*XLEN/8, x6)

inst_102:
// rs1_w0_val == 512, rs1_w1_val == -2097153, imm_val == 7
// opcode: psexth.w ; op1:x30; dest:x31; op1val:0xffdfffff00000200;  immval:0x7
TEST_IMM_OP( psexth.w, x31, x30, 0x0000000000000000, 0xffdfffff00000200, 0x7, x1, 80*XLEN/8, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 22*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 81*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
