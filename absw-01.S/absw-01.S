
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 03:47:09 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p4-5.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the absw instruction of the RISC-V RV64PZicsr extension for the absw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",absw)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1==x11, rd==x17, rs1_w0_val == -2147483648, rs1_w1_val == 128
// opcode: absw ; op1:x11; dest:x17; op1val:0x00008080000000;
TEST_RD_OP( absw, x17, x11, 0x0000000000000000, 0x00008080000000, x4, 0*XLEN/8, x5)

inst_1:
// rs1==x8, rd==x10, rs1_w0_val == -1, rs1_w1_val == 4194304
// opcode: absw ; op1:x8; dest:x10; op1val:0x400000ffffffff;
TEST_RD_OP( absw, x10, x8, 0x0000000000000000, 0x400000ffffffff, x4, 2*XLEN/8, x5)

inst_2:
// rs1==x22, rd==x18, rs1_w0_val == 0, rs1_w1_val == -8193
// opcode: absw ; op1:x22; dest:x18; op1val:0xffffdfff00000000;
TEST_RD_OP( absw, x18, x22, 0x0000000000000000, 0xffffdfff00000000, x4, 4*XLEN/8, x5)

inst_3:
// rs1==x20, rd==x31, rs1_w0_val == 1, rs1_w1_val == -131073
// opcode: absw ; op1:x20; dest:x31; op1val:0xfffdffff00000001;
TEST_RD_OP( absw, x31, x20, 0x0000000000000000, 0xfffdffff00000001, x4, 6*XLEN/8, x5)

inst_4:
// rs1==x3, rd==x21, rs1_w0_val == 2147483647, rs1_w1_val == 8192
// opcode: absw ; op1:x3; dest:x21; op1val:0x0020007fffffff;
TEST_RD_OP( absw, x21, x3, 0x0000000000000000, 0x0020007fffffff, x4, 8*XLEN/8, x5)

inst_5:
// rs1==x6, rd==x19, rs1_w0_val == 2, rs1_w1_val == 4096
// opcode: absw ; op1:x6; dest:x19; op1val:0x00100000000002;
TEST_RD_OP( absw, x19, x6, 0x0000000000000000, 0x00100000000002, x4, 10*XLEN/8, x5)

inst_6:
// rs1==x9, rd==x14, rs1_w0_val == 4, rs1_w1_val == 1431655765
// opcode: absw ; op1:x9; dest:x14; op1val:0x5555555500000004;
TEST_RD_OP( absw, x14, x9, 0x0000000000000000, 0x5555555500000004, x4, 12*XLEN/8, x5)

inst_7:
// rs1==x28, rd==x9, rs1_w0_val == 8, rs1_w1_val == 0
// opcode: absw ; op1:x28; dest:x9; op1val:0x00000000000008;
TEST_RD_OP( absw, x9, x28, 0x0000000000000000, 0x00000000000008, x4, 14*XLEN/8, x5)

inst_8:
// rs1==x23, rd==x29, rs1_w0_val == 16, rs1_w1_val == 512
// opcode: absw ; op1:x23; dest:x29; op1val:0x00020000000010;
TEST_RD_OP( absw, x29, x23, 0x0000000000000000, 0x00020000000010, x4, 16*XLEN/8, x5)

inst_9:
// rs1==x1, rd==x15, rs1_w0_val == 32, rs1_w1_val == -1
// opcode: absw ; op1:x1; dest:x15; op1val:0xffffffff00000020;
TEST_RD_OP( absw, x15, x1, 0x0000000000000000, 0xffffffff00000020, x4, 18*XLEN/8, x5)

inst_10:
// rs1==x2, rd==x8, rs1_w0_val == 64, rs1_w1_val == -1073741825
// opcode: absw ; op1:x2; dest:x8; op1val:0xbfffffff00000040;
TEST_RD_OP( absw, x8, x2, 0x0000000000000000, 0xbfffffff00000040, x4, 20*XLEN/8, x5)

inst_11:
// rs1==x30, rd==x7, rs1_w0_val == 128, rs1_w1_val == -65537
// opcode: absw ; op1:x30; dest:x7; op1val:0xfffeffff00000080;
TEST_RD_OP( absw, x7, x30, 0x0000000000000000, 0xfffeffff00000080, x4, 22*XLEN/8, x5)

inst_12:
// rs1==x0, rd==x3, rs1_w0_val == 256, rs1_w1_val == 33554432
// opcode: absw ; op1:x0; dest:x3; op1val:0x200000000000100;
TEST_RD_OP( absw, x3, x0, 0x0000000000000000, 0x200000000000100, x4, 24*XLEN/8, x5)

inst_13:
// rs1==x16, rd==x20, rs1_w0_val == 512, rs1_w1_val == 256
// opcode: absw ; op1:x16; dest:x20; op1val:0x00010000000200;
TEST_RD_OP( absw, x20, x16, 0x0000000000000000, 0x00010000000200, x4, 26*XLEN/8, x5)

inst_14:
// rs1==x21, rd==x2, rs1_w0_val == 1024, rs1_w1_val == 65536
// opcode: absw ; op1:x21; dest:x2; op1val:0x01000000000400;
TEST_RD_OP( absw, x2, x21, 0x0000000000000000, 0x01000000000400, x4, 28*XLEN/8, x5)

inst_15:
// rs1==x13, rd==x12, rs1_w0_val == 2048, rs1_w1_val == 2
// opcode: absw ; op1:x13; dest:x12; op1val:0x00000200000800;
TEST_RD_OP( absw, x12, x13, 0x0000000000000000, 0x00000200000800, x4, 30*XLEN/8, x5)

inst_16:
// rs1==x14, rd==x16, rs1_w0_val == 4096, rs1_w1_val == -3
// opcode: absw ; op1:x14; dest:x16; op1val:0xfffffffd00001000;
TEST_RD_OP( absw, x16, x14, 0x0000000000000000, 0xfffffffd00001000, x4, 32*XLEN/8, x5)

inst_17:
// rs1==x7, rd==x1, rs1_w0_val == 8192, 
// opcode: absw ; op1:x7; dest:x1; op1val:0xfffffffd00002000;
TEST_RD_OP( absw, x1, x7, 0x0000000000000000, 0xfffffffd00002000, x4, 34*XLEN/8, x5)

inst_18:
// rs1==x26, rd==x27, rs1_w0_val == 16384, rs1_w1_val == 67108864
// opcode: absw ; op1:x26; dest:x27; op1val:0x400000000004000;
TEST_RD_OP( absw, x27, x26, 0x0000000000000000, 0x400000000004000, x4, 36*XLEN/8, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x15, rd==x13, rs1_w0_val == 32768, 
// opcode: absw ; op1:x15; dest:x13; op1val:0x00200000008000;
TEST_RD_OP( absw, x13, x15, 0x0000000000000000, 0x00200000008000, x1, 0*XLEN/8, x2)

inst_20:
// rs1==x12, rd==x4, rs1_w0_val == 65536, rs1_w1_val == 262144
// opcode: absw ; op1:x12; dest:x4; op1val:0x04000000010000;
TEST_RD_OP( absw, x4, x12, 0x0000000000000000, 0x04000000010000, x1, 2*XLEN/8, x2)

inst_21:
// rs1==x24, rd==x26, rs1_w0_val == 131072, 
// opcode: absw ; op1:x24; dest:x26; op1val:0x200000000020000;
TEST_RD_OP( absw, x26, x24, 0x0000000000000000, 0x200000000020000, x1, 4*XLEN/8, x2)

inst_22:
// rs1==x19, rd==x24, rs1_w0_val == 262144, 
// opcode: absw ; op1:x19; dest:x24; op1val:0x00000200040000;
TEST_RD_OP( absw, x24, x19, 0x0000000000000000, 0x00000200040000, x1, 6*XLEN/8, x2)

inst_23:
// rs1==x10, rd==x6, rs1_w0_val == 524288, 
// opcode: absw ; op1:x10; dest:x6; op1val:0xfffffff800080000;
TEST_RD_OP( absw, x6, x10, 0x0000000000000000, 0xfffffff800080000, x1, 8*XLEN/8, x2)

inst_24:
// rs1==x18, rd==x23, rs1_w0_val == 1048576, rs1_w1_val == 131072
// opcode: absw ; op1:x18; dest:x23; op1val:0x02000000100000;
TEST_RD_OP( absw, x23, x18, 0x0000000000000000, 0x02000000100000, x1, 10*XLEN/8, x2)

inst_25:
// rs1==x5, rd==x22, rs1_w0_val == 2097152, rs1_w1_val == 524288
// opcode: absw ; op1:x5; dest:x22; op1val:0x08000000200000;
TEST_RD_OP( absw, x22, x5, 0x0000000000000000, 0x08000000200000, x1, 12*XLEN/8, x2)

inst_26:
// rs1==x27, rd==x11, rs1_w0_val == 4194304, 
// opcode: absw ; op1:x27; dest:x11; op1val:0x5555555500400000;
TEST_RD_OP( absw, x11, x27, 0x0000000000000000, 0x5555555500400000, x1, 14*XLEN/8, x2)

inst_27:
// rs1==x29, rd==x0, rs1_w0_val == 8388608, 
// opcode: absw ; op1:x29; dest:x0; op1val:0xfffdffff00800000;
TEST_RD_OP( absw, x0, x29, 0x0000000000000000, 0xfffdffff00800000, x1, 16*XLEN/8, x2)

inst_28:
// rs1==x4, rd==x30, rs1_w0_val == 16777216, 
// opcode: absw ; op1:x4; dest:x30; op1val:0x400000001000000;
TEST_RD_OP( absw, x30, x4, 0x0000000000000000, 0x400000001000000, x1, 18*XLEN/8, x2)

inst_29:
// rs1==x31, rd==x25, rs1_w0_val == 33554432, rs1_w1_val == -1048577
// opcode: absw ; op1:x31; dest:x25; op1val:0xffefffff02000000;
TEST_RD_OP( absw, x25, x31, 0x0000000000000000, 0xffefffff02000000, x1, 20*XLEN/8, x2)

inst_30:
// rs1==x25, rd==x28, rs1_w0_val == 67108864, rs1_w1_val == -17
// opcode: absw ; op1:x25; dest:x28; op1val:0xffffffef04000000;
TEST_RD_OP( absw, x28, x25, 0x0000000000000000, 0xffffffef04000000, x1, 22*XLEN/8, x2)

inst_31:
// rs1==x17, rd==x5, rs1_w0_val == 134217728, rs1_w1_val == 536870912
// opcode: absw ; op1:x17; dest:x5; op1val:0x2000000008000000;
TEST_RD_OP( absw, x5, x17, 0x0000000000000000, 0x2000000008000000, x1, 24*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, rs1_w1_val == -2049
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffff7ff10000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffff7ff10000000, x1, 26*XLEN/8, x2)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x00000720000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x00000720000000, x1, 28*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs1_w1_val == -524289
// opcode: absw ; op1:x30; dest:x31; op1val:0xfff7ffff40000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfff7ffff40000000, x1, 30*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w1_val == -2
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffefffffffe;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffefffffffe, x1, 32*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x001000fffffffd;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x001000fffffffd, x1, 34*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == 2097152
// opcode: absw ; op1:x30; dest:x31; op1val:0x200000fffffffb;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x200000fffffffb, x1, 36*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x001000fffffff7;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x001000fffffff7, x1, 38*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x020000ffffffef;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x020000ffffffef, x1, 40*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffdffffffdf;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffdffffffdf, x1, 42*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000200ffffffbf;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000200ffffffbf, x1, 44*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffffffffffff7f;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffffffffffff7f, x1, 46*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == -1431655766
// opcode: absw ; op1:x30; dest:x31; op1val:0xaaaaaaaafffffeff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xaaaaaaaafffffeff, x1, 48*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffffffffdff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffffffffdff, x1, 50*XLEN/8, x2)

inst_45:
// rs1_w1_val == -33554433, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfdffffff00000006;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfdffffff00000006, x1, 52*XLEN/8, x2)

inst_46:
// rs1_w1_val == -67108865, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfbffffffffffffef;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfbffffffffffffef, x1, 54*XLEN/8, x2)

inst_47:
// rs1_w1_val == -134217729, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xf7ffffff3fffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xf7ffffff3fffffff, x1, 56*XLEN/8, x2)

inst_48:
// rs1_w1_val == -268435457, rs1_w0_val == -1025
// opcode: absw ; op1:x30; dest:x31; op1val:0xeffffffffffffbff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xeffffffffffffbff, x1, 58*XLEN/8, x2)

inst_49:
// rs1_w1_val == -536870913, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xdfffffff00000040;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xdfffffff00000040, x1, 60*XLEN/8, x2)

inst_50:
// rs1_w0_val == -2049, rs1_w1_val == 2048
// opcode: absw ; op1:x30; dest:x31; op1val:0x000800fffff7ff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000800fffff7ff, x1, 62*XLEN/8, x2)

inst_51:
// rs1_w0_val == -4097, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfbffffffffffefff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfbffffffffffefff, x1, 64*XLEN/8, x2)

inst_52:
// rs1_w0_val == -8193, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x2000000ffffdfff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x2000000ffffdfff, x1, 66*XLEN/8, x2)

inst_53:
// rs1_w0_val == -16385, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x400000ffffbfff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x400000ffffbfff, x1, 68*XLEN/8, x2)

inst_54:
// rs1_w0_val == -32769, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x002000ffff7fff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x002000ffff7fff, x1, 70*XLEN/8, x2)

inst_55:
// rs1_w0_val == -65537, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xdffffffffffeffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xdffffffffffeffff, x1, 72*XLEN/8, x2)

inst_56:
// rs1_w0_val == -131073, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfff7fffffffdffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfff7fffffffdffff, x1, 74*XLEN/8, x2)

inst_57:
// rs1_w0_val == -262145, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xeffffffffffbffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xeffffffffffbffff, x1, 76*XLEN/8, x2)

inst_58:
// rs1_w0_val == -524289, rs1_w1_val == -513
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffdfffff7ffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffdfffff7ffff, x1, 78*XLEN/8, x2)

inst_59:
// rs1_w0_val == -1048577, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x400000ffefffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x400000ffefffff, x1, 80*XLEN/8, x2)

inst_60:
// rs1_w0_val == -2097153, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xefffffffffdfffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xefffffffffdfffff, x1, 82*XLEN/8, x2)

inst_61:
// rs1_w0_val == -4194305, rs1_w1_val == 16777216
// opcode: absw ; op1:x30; dest:x31; op1val:0x1000000ffbfffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x1000000ffbfffff, x1, 84*XLEN/8, x2)

inst_62:
// rs1_w0_val == -8388609, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xdfffffffff7fffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xdfffffffff7fffff, x1, 86*XLEN/8, x2)

inst_63:
// rs1_w0_val == -16777217, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffefeffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffefeffffff, x1, 88*XLEN/8, x2)

inst_64:
// rs1_w0_val == -33554433, rs1_w1_val == 64
// opcode: absw ; op1:x30; dest:x31; op1val:0x000040fdffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000040fdffffff, x1, 90*XLEN/8, x2)

inst_65:
// rs1_w0_val == -67108865, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x040000fbffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x040000fbffffff, x1, 92*XLEN/8, x2)

inst_66:
// rs1_w0_val == -134217729, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffef7ffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffef7ffffff, x1, 94*XLEN/8, x2)

inst_67:
// rs1_w0_val == -268435457, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x3fffffffefffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x3fffffffefffffff, x1, 96*XLEN/8, x2)

inst_68:
// rs1_w0_val == -536870913, rs1_w1_val == -4097
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffefffdfffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffefffdfffffff, x1, 98*XLEN/8, x2)

inst_69:
// rs1_w0_val == -1073741825, rs1_w1_val == -5
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffffbbfffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffffbbfffffff, x1, 100*XLEN/8, x2)

inst_70:
// rs1_w0_val == 1431655765, rs1_w1_val == -4194305
// opcode: absw ; op1:x30; dest:x31; op1val:0xffbfffff55555555;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffbfffff55555555, x1, 102*XLEN/8, x2)

inst_71:
// rs1_w0_val == -1431655766, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x1000000aaaaaaaa;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x1000000aaaaaaaa, x1, 104*XLEN/8, x2)

inst_72:
// rs1_w1_val == -2147483648, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x8000000000800000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x8000000000800000, x1, 106*XLEN/8, x2)

inst_73:
// rs1_w1_val == 1, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000001feffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000001feffffff, x1, 108*XLEN/8, x2)

inst_74:
// rs1_w1_val == 2147483647, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x7fffffff00002000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x7fffffff00002000, x1, 110*XLEN/8, x2)

inst_75:
// rs1_w1_val == 4, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000004fffffffb;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000004fffffffb, x1, 112*XLEN/8, x2)

inst_76:
// rs1_w1_val == 8, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000008fdffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000008fdffffff, x1, 114*XLEN/8, x2)

inst_77:
// rs1_w1_val == 16, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000010ffffefff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000010ffffefff, x1, 116*XLEN/8, x2)

inst_78:
// rs1_w1_val == 32, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x0000203fffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x0000203fffffff, x1, 118*XLEN/8, x2)

inst_79:
// rs1_w1_val == 1024, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x000400ffffdfff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x000400ffffdfff, x1, 120*XLEN/8, x2)

inst_80:
// rs1_w1_val == 16384, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x00400000000020;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x00400000000020, x1, 122*XLEN/8, x2)

inst_81:
// rs1_w1_val == 32768, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x00800000000800;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x00800000000800, x1, 124*XLEN/8, x2)

inst_82:
// rs1_w1_val == 1048576, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x100000fbffffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x100000fbffffff, x1, 126*XLEN/8, x2)

inst_83:
// rs1_w1_val == 8388608, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x800000ffffff7f;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x800000ffffff7f, x1, 128*XLEN/8, x2)

inst_84:
// rs1_w1_val == 134217728, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x800000080000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x800000080000000, x1, 130*XLEN/8, x2)

inst_85:
// rs1_w1_val == 268435456, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x10000000aaaaaaaa;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x10000000aaaaaaaa, x1, 132*XLEN/8, x2)

inst_86:
// rs1_w1_val == 1073741824, 
// opcode: absw ; op1:x30; dest:x31; op1val:0x4000000000000008;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x4000000000000008, x1, 134*XLEN/8, x2)

inst_87:
// rs1_w1_val == -9, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffff700000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffff700000000, x1, 136*XLEN/8, x2)

inst_88:
// rs1_w1_val == -33, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffffdffffffffd;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffffdffffffffd, x1, 138*XLEN/8, x2)

inst_89:
// rs1_w1_val == -65, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffffbffffffffd;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffffbffffffffd, x1, 140*XLEN/8, x2)

inst_90:
// rs1_w1_val == -129, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffff7f00004000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffff7f00004000, x1, 142*XLEN/8, x2)

inst_91:
// rs1_w1_val == -257, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffeff00000008;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffeff00000008, x1, 144*XLEN/8, x2)

inst_92:
// rs1_w1_val == -1025, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffffbff00004000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffffbff00004000, x1, 146*XLEN/8, x2)

inst_93:
// rs1_w1_val == -16385, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffffbfff80000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffffbfff80000000, x1, 148*XLEN/8, x2)

inst_94:
// rs1_w1_val == -32769, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffff7fffffefffff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffff7fffffefffff, x1, 150*XLEN/8, x2)

inst_95:
// rs1_w1_val == -262145, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfffbffffffffbfff;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfffbffffffffbfff, x1, 152*XLEN/8, x2)

inst_96:
// rs1_w1_val == -2097153, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xffdfffff00000400;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xffdfffff00000400, x1, 154*XLEN/8, x2)

inst_97:
// rs1_w1_val == -8388609, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xff7fffff00000200;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xff7fffff00000200, x1, 156*XLEN/8, x2)

inst_98:
// rs1_w1_val == -16777217, 
// opcode: absw ; op1:x30; dest:x31; op1val:0xfeffffff80000000;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0xfeffffff80000000, x1, 158*XLEN/8, x2)

inst_99:
// rs1_w0_val == 256, rs1_w1_val == 33554432
// opcode: absw ; op1:x30; dest:x31; op1val:0x200000000000100;
TEST_RD_OP( absw, x31, x30, 0x0000000000000000, 0x200000000000100, x1, 160*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 38*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 162*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
