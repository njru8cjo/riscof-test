
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmhraccu.h instruction of the RISC-V RV64PZicsr extension for the pmhraccu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmhraccu.h)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs2 == rd != rs1, rs1==x15, rs2==x4, rd==x4, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -3, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -21846, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -65, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 32, rs1_h3_val != rs2_h3_val, rs1_h1_val == -65
// opcode: pmhraccu.h ; op1:x15; op2:x4; dest:x4; op1val:0x20aaaaffbf8000;  op2val:0x06ffbf0003fffd
TEST_RR_OP(pmhraccu.h, x4, x15, x4, 0x0000000000000000, 0x20aaaaffbf8000, 0x06ffbf0003fffd, x3, 0*XLEN/8, x19)

inst_1:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x15, rs1_h0_val == -1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -8193, rs2_h1_val == -129, rs2_h0_val == 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == rs2_h3_val, rs2_h3_val == -8193, rs1_h2_val == -9
// opcode: pmhraccu.h ; op1:x22; op2:x22; dest:x15; op1val:0xdffffff70006ffff;  op2val:0xdffffff9ff7f0000
TEST_RR_OP(pmhraccu.h, x15, x22, x22, 0x0000000000000000, 0xdffffff70006ffff, 0xdffffff9ff7f0000, x3, 1*XLEN/8, x19)

inst_2:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h0_val == 0, rs2_h2_val == 16, rs1_h1_val == -1, rs1_h2_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h3_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == -8193, rs2_h3_val == -4097
// opcode: pmhraccu.h ; op1:x2; op2:x2; dest:x2; op1val:0xf7ffefffffff0000;  op2val:0xefff0010fffcdfff
TEST_RR_OP(pmhraccu.h, x2, x2, x2, 0x0000000000000000, 0xf7ffefffffff0000, 0xefff0010fffcdfff, x3, 2*XLEN/8, x19)

inst_3:
// rs1 == rd != rs2, rs1==x24, rs2==x14, rd==x24, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -4097, rs1_h1_val == 32, rs2_h0_val == -2049, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 32767, rs2_h2_val == 0
// opcode: pmhraccu.h ; op1:x24; op2:x14; dest:x24; op1val:0xeffffff900200001;  op2val:0x0400007ffff7ff
TEST_RR_OP(pmhraccu.h, x24, x24, x14, 0x0000000000000000, 0xeffffff900200001, 0x0400007ffff7ff, x3, 3*XLEN/8, x19)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x8, rd==x20, rs1_h0_val == 32767, rs2_h3_val == -9, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == 512, rs1_h3_val == 1
// opcode: pmhraccu.h ; op1:x0; op2:x8; dest:x20; op1val:0x01fffa00207fff;  op2val:0xfff702000006fff9
TEST_RR_OP(pmhraccu.h, x20, x0, x8, 0x0000000000000000, 0x01fffa00207fff, 0xfff702000006fff9, x3, 4*XLEN/8, x19)

inst_5:
// rs1==x18, rs2==x25, rd==x27, rs1_h0_val == 2, rs1_h1_val == -4097, rs2_h0_val == -32768, rs1_h3_val == 8, rs2_h2_val == 4, rs2_h3_val == 21845
// opcode: pmhraccu.h ; op1:x18; op2:x25; dest:x27; op1val:0x08fff6efff0002;  op2val:0x5555000400038000
TEST_RR_OP(pmhraccu.h, x27, x18, x25, 0x0000000000000000, 0x08fff6efff0002, 0x5555000400038000, x3, 5*XLEN/8, x19)

inst_6:
// rs1==x17, rs2==x18, rd==x22, rs1_h0_val == 4, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == 2048, rs2_h0_val == -1025, rs1_h2_val == 2048
// opcode: pmhraccu.h ; op1:x17; op2:x18; dest:x22; op1val:0xfffa080000070004;  op2val:0xfffcffbf0800fbff
TEST_RR_OP(pmhraccu.h, x22, x17, x18, 0x0000000000000000, 0xfffa080000070004, 0xfffcffbf0800fbff, x3, 6*XLEN/8, x19)

inst_7:
// rs1==x30, rs2==x12, rd==x11, rs1_h0_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 256, rs2_h1_val == -17, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 2048, rs2_h0_val == 4, rs2_h3_val == -21846
// opcode: pmhraccu.h ; op1:x30; op2:x12; dest:x11; op1val:0xfff8000608000008;  op2val:0xaaaa0100ffef0004
TEST_RR_OP(pmhraccu.h, x11, x30, x12, 0x0000000000000000, 0xfff8000608000008, 0xaaaa0100ffef0004, x3, 7*XLEN/8, x19)

inst_8:
// rs1==x6, rs2==x7, rd==x8, rs1_h0_val == 16, rs2_h2_val == 128, rs2_h0_val == -9, rs1_h1_val == -3, rs2_h1_val == 4, rs1_h2_val == -3
// opcode: pmhraccu.h ; op1:x6; op2:x7; dest:x8; op1val:0xfff9fffdfffd0010;  op2val:0xfffa00800004fff7
TEST_RR_OP(pmhraccu.h, x8, x6, x7, 0x0000000000000000, 0xfff9fffdfffd0010, 0xfffa00800004fff7, x3, 8*XLEN/8, x19)

inst_9:
// rs1==x26, rs2==x5, rd==x12, rs1_h0_val == 32, rs1_h3_val == 4096, rs1_h1_val == 8192, rs2_h3_val == 128
// opcode: pmhraccu.h ; op1:x26; op2:x5; dest:x12; op1val:0x1000000620000020;  op2val:0x80fffc3ffffff6
TEST_RR_OP(pmhraccu.h, x12, x26, x5, 0x0000000000000000, 0x1000000620000020, 0x80fffc3ffffff6, x3, 9*XLEN/8, x19)

inst_10:
// rs1==x11, rs2==x30, rd==x23, rs1_h0_val == 64, rs1_h2_val == -257, rs1_h3_val == -33, rs2_h3_val == -2, rs1_h1_val == 1024, rs2_h2_val == -513, rs2_h0_val == 2
// opcode: pmhraccu.h ; op1:x11; op2:x30; dest:x23; op1val:0xffdffeff04000040;  op2val:0xfffefdff7fff0002
TEST_RR_OP(pmhraccu.h, x23, x11, x30, 0x0000000000000000, 0xffdffeff04000040, 0xfffefdff7fff0002, x3, 10*XLEN/8, x19)

inst_11:
// rs1==x14, rs2==x13, rd==x10, rs1_h0_val == 128, rs1_h3_val == 1024, rs2_h3_val == 0, rs1_h1_val == -257
// opcode: pmhraccu.h ; op1:x14; op2:x13; dest:x10; op1val:0x4000003feff0080;  op2val:0x00000700050004
TEST_RR_OP(pmhraccu.h, x10, x14, x13, 0x0000000000000000, 0x4000003feff0080, 0x00000700050004, x3, 11*XLEN/8, x19)

inst_12:
// rs1==x23, rs2==x16, rd==x1, rs1_h0_val == 256, rs2_h0_val == 4096, rs1_h2_val == -16385, rs2_h2_val == 16384, rs2_h3_val == 1024, rs2_h1_val == 2
// opcode: pmhraccu.h ; op1:x23; op2:x16; dest:x1; op1val:0x09bfffffff0100;  op2val:0x400400000021000
TEST_RR_OP(pmhraccu.h, x1, x23, x16, 0x0000000000000000, 0x09bfffffff0100, 0x400400000021000, x3, 12*XLEN/8, x19)

inst_13:
// rs1==x25, rs2==x27, rd==x17, rs1_h0_val == 512, rs2_h1_val == -65, rs1_h1_val == 128, rs1_h3_val == 128, rs2_h2_val == -1, rs1_h2_val == 16384, rs2_h3_val == 1
// opcode: pmhraccu.h ; op1:x25; op2:x27; dest:x17; op1val:0x80400000800200;  op2val:0x01ffffffbffff8
TEST_RR_OP(pmhraccu.h, x17, x25, x27, 0x0000000000000000, 0x80400000800200, 0x01ffffffbffff8, x3, 13*XLEN/8, x19)

inst_14:
// rs1==x27, rs2==x10, rd==x25, rs1_h0_val == 1024, rs1_h3_val == 2, rs2_h1_val == 1
// opcode: pmhraccu.h ; op1:x27; op2:x10; dest:x25; op1val:0x020003fff80400;  op2val:0xfff6ffbf0001dfff
TEST_RR_OP(pmhraccu.h, x25, x27, x10, 0x0000000000000000, 0x020003fff80400, 0xfff6ffbf0001dfff, x3, 14*XLEN/8, x19)

inst_15:
// rs1==x21, rs2==x24, rd==x9, rs1_h0_val == 2048, rs1_h1_val == -1025, rs1_h2_val == 0, rs1_h3_val == -129, rs2_h3_val == 512
// opcode: pmhraccu.h ; op1:x21; op2:x24; dest:x9; op1val:0xff7f0000fbff0800;  op2val:0x200c000c000fff9
TEST_RR_OP(pmhraccu.h, x9, x21, x24, 0x0000000000000000, 0xff7f0000fbff0800, 0x200c000c000fff9, x3, 15*XLEN/8, x19)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x7, rs2==x9, rd==x3, rs1_h0_val == 4096, rs1_h2_val == 21845, rs2_h0_val == 256, rs2_h3_val == -1, rs1_h3_val == 4
// opcode: pmhraccu.h ; op1:x7; op2:x9; dest:x3; op1val:0x045555fffc1000;  op2val:0xfffffdfffffa0100
TEST_RR_OP(pmhraccu.h, x3, x7, x9, 0x0000000000000000, 0x045555fffc1000, 0xfffffdfffffa0100, x2, 0*XLEN/8, x12)

inst_17:
// rs1==x10, rs2==x15, rd==x31, rs1_h0_val == 8192, rs1_h3_val == -1025, rs2_h0_val == -1, rs1_h2_val == 128, rs2_h1_val == 8192
// opcode: pmhraccu.h ; op1:x10; op2:x15; dest:x31; op1val:0xfbff0080c0002000;  op2val:0xfffffffc2000ffff
TEST_RR_OP(pmhraccu.h, x31, x10, x15, 0x0000000000000000, 0xfbff0080c0002000, 0xfffffffc2000ffff, x2, 1*XLEN/8, x12)

inst_18:
// rs1==x28, rs2==x20, rd==x26, rs1_h0_val == 16384, rs2_h1_val == -8193, rs2_h0_val == -2, rs1_h3_val == 16, rs2_h2_val == 8
// opcode: pmhraccu.h ; op1:x28; op2:x20; dest:x26; op1val:0x10080004004000;  op2val:0x2000008dffffffe
TEST_RR_OP(pmhraccu.h, x26, x28, x20, 0x0000000000000000, 0x10080004004000, 0x2000008dffffffe, x2, 2*XLEN/8, x12)

inst_19:
// rs1==x3, rs2==x17, rd==x19, rs1_h0_val == -2, rs2_h2_val == 32, rs1_h2_val == -1025, rs2_h3_val == 64, rs1_h1_val == -21846, rs2_h1_val == 0, rs1_h3_val == 2048
// opcode: pmhraccu.h ; op1:x3; op2:x17; dest:x19; op1val:0x800fbffaaaafffe;  op2val:0x4000200000fff9
TEST_RR_OP(pmhraccu.h, x19, x3, x17, 0x0000000000000000, 0x800fbffaaaafffe, 0x4000200000fff9, x2, 3*XLEN/8, x12)

inst_20:
// rs1==x8, rs2==x21, rd==x5, rs1_h0_val == -3, rs2_h0_val == -33, rs1_h1_val == -9, rs1_h3_val == 8192, rs2_h1_val == -21846
// opcode: pmhraccu.h ; op1:x8; op2:x21; dest:x5; op1val:0x2000fffafff7fffd;  op2val:0x000080aaaaffdf
TEST_RR_OP(pmhraccu.h, x5, x8, x21, 0x0000000000000000, 0x2000fffafff7fffd, 0x000080aaaaffdf, x2, 4*XLEN/8, x12)

inst_21:
// rs1==x9, rs2==x29, rd==x6, rs1_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -32768, rs1_h2_val == 4, rs2_h2_val == -4097
// opcode: pmhraccu.h ; op1:x9; op2:x29; dest:x6; op1val:0x0200048000fffb;  op2val:0xfffcefff08000006
TEST_RR_OP(pmhraccu.h, x6, x9, x29, 0x0000000000000000, 0x0200048000fffb, 0xfffcefff08000006, x2, 5*XLEN/8, x12)

inst_22:
// rs1==x1, rs2==x23, rd==x29, rs1_h0_val == -9, rs1_h2_val == 64, rs2_h1_val == -2
// opcode: pmhraccu.h ; op1:x1; op2:x23; dest:x29; op1val:0xc00000400800fff7;  op2val:0x3fff3ffffffe0003
TEST_RR_OP(pmhraccu.h, x29, x1, x23, 0x0000000000000000, 0xc00000400800fff7, 0x3fff3ffffffe0003, x2, 6*XLEN/8, x12)

inst_23:
// rs1==x29, rs2==x28, rd==x13, rs1_h0_val == -17, rs2_h2_val == -129, rs1_h2_val == 512
// opcode: pmhraccu.h ; op1:x29; op2:x28; dest:x13; op1val:0x0902002000ffef;  op2val:0xc000ff7f08000004
TEST_RR_OP(pmhraccu.h, x13, x29, x28, 0x0000000000000000, 0x0902002000ffef, 0xc000ff7f08000004, x2, 7*XLEN/8, x12)

inst_24:
// rs1==x4, rs2==x11, rd==x14, rs1_h0_val == -33, rs1_h2_val == -32768, rs1_h1_val == -5, rs2_h2_val == -2, rs1_h3_val == -513
// opcode: pmhraccu.h ; op1:x4; op2:x11; dest:x14; op1val:0xfdff8000fffbffdf;  op2val:0xfff9fffefff90007
TEST_RR_OP(pmhraccu.h, x14, x4, x11, 0x0000000000000000, 0xfdff8000fffbffdf, 0xfff9fffefff90007, x2, 8*XLEN/8, x12)

inst_25:
// rs1==x20, rs2==x6, rd==x30, rs1_h0_val == -65, rs2_h3_val == 8
// opcode: pmhraccu.h ; op1:x20; op2:x6; dest:x30; op1val:0xfdfffff6ffffffbf;  op2val:0x080020c0000009
TEST_RR_OP(pmhraccu.h, x30, x20, x6, 0x0000000000000000, 0xfdfffff6ffffffbf, 0x080020c0000009, x2, 9*XLEN/8, x12)

inst_26:
// rs1==x13, rs2==x3, rd==x21, rs1_h0_val == -129, rs2_h2_val == -1025
// opcode: pmhraccu.h ; op1:x13; op2:x3; dest:x21; op1val:0x2000effffeffff7f;  op2val:0xc000fbfffffac000
TEST_RR_OP(pmhraccu.h, x21, x13, x3, 0x0000000000000000, 0x2000effffeffff7f, 0xc000fbfffffac000, x2, 10*XLEN/8, x12)

inst_27:
// rs1==x16, rs2==x0, rd==x18, rs1_h0_val == -257, rs2_h3_val == 16, rs1_h1_val == rs2_h1_val, rs1_h1_val == 16, rs1_h2_val == -2, rs2_h1_val == 16, rs2_h0_val == 1024
// opcode: pmhraccu.h ; op1:x16; op2:x0; dest:x18; op1val:0xf7fffffe0010feff;  op2val:0x10020000100400
TEST_RR_OP(pmhraccu.h, x18, x16, x0, 0x0000000000000000, 0xf7fffffe0010feff, 0x10020000100400, x2, 11*XLEN/8, x12)

inst_28:
// rs1==x12, rs2==x26, rd==x7, rs1_h0_val == -513, rs2_h1_val == 1024, rs1_h2_val == -17
// opcode: pmhraccu.h ; op1:x12; op2:x26; dest:x7; op1val:0xffdfffeffbfffdff;  op2val:0xffff000004000003
TEST_RR_OP(pmhraccu.h, x7, x12, x26, 0x0000000000000000, 0xffdfffeffbfffdff, 0xffff000004000003, x2, 12*XLEN/8, x3)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_29:
// rs1==x31, rs2==x1, rd==x0, rs1_h0_val == -1025, rs1_h1_val == 256, rs2_h1_val == -1025, rs1_h2_val == -5, rs2_h0_val == -5
// opcode: pmhraccu.h ; op1:x31; op2:x1; dest:x0; op1val:0xfff6fffb0100fbff;  op2val:0xeffffffcfbfffffb
TEST_RR_OP(pmhraccu.h, x0, x31, x1, 0x0000000000000000, 0xfff6fffb0100fbff, 0xeffffffcfbfffffb, x2, 0*XLEN/8, x3)

inst_30:
// rs1==x5, rs2==x19, rd==x28, rs1_h0_val == -2049, rs2_h1_val == -5, rs2_h0_val == 1, rs1_h2_val == 256, rs1_h1_val == 64
// opcode: pmhraccu.h ; op1:x5; op2:x19; dest:x28; op1val:0xc00001000040f7ff;  op2val:0x084000fffb0001
TEST_RR_OP(pmhraccu.h, x28, x5, x19, 0x0000000000000000, 0xc00001000040f7ff, 0x084000fffb0001, x2, 1*XLEN/8, x3)

inst_31:
// rs1==x19, rs2==x31, rd==x16, rs1_h0_val == -4097, rs1_h3_val == 32767
// opcode: pmhraccu.h ; op1:x19; op2:x31; dest:x16; op1val:0x7fffffeffff8efff;  op2val:0xdfff0006fffa0002
TEST_RR_OP(pmhraccu.h, x16, x19, x31, 0x0000000000000000, 0x7fffffeffff8efff, 0xdfff0006fffa0002, x2, 2*XLEN/8, x3)

inst_32:
// rs1_h0_val == -8193, rs2_h1_val == -3, rs1_h3_val == -9, rs2_h0_val == -513, rs2_h2_val == -2049
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff700070005dfff;  op2val:0xfff8f7fffffdfdff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff700070005dfff, 0xfff8f7fffffdfdff, x2, 3*XLEN/8, x3)

inst_33:
// rs1_h0_val == -16385, rs2_h2_val == -257
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800fff8fbffbfff;  op2val:0xc000fefffffd0001
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x800fff8fbffbfff, 0xc000fefffffd0001, x2, 4*XLEN/8, x3)

inst_34:
// rs1_h0_val == 21845, rs1_h1_val == -2
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x070006fffe5555;  op2val:0x04fff6fffe0005
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x070006fffe5555, 0x04fff6fffe0005, x2, 5*XLEN/8, x3)

inst_35:
// rs2_h3_val == 32767, rs1_h2_val == 2, rs2_h0_val == 8
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0002fffc0007;  op2val:0x7ffffeffffef0008
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0002fffc0007, 0x7ffffeffffef0008, x2, 6*XLEN/8, x3)

inst_36:
// rs2_h3_val == 2, rs1_h1_val == 512, rs2_h0_val == 32, rs2_h2_val == 2
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfeff0200ffff;  op2val:0x02000200090020
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffcfeff0200ffff, 0x02000200090020, x2, 7*XLEN/8, x3)

inst_37:
// rs2_h3_val == 32, rs2_h1_val == 4096, rs2_h2_val == 1024, rs1_h2_val == 8, rs2_h0_val == -21846, rs1_h1_val == -129
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0008ff7f8000;  op2val:0x2004001000aaaa
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x7fff0008ff7f8000, 0x2004001000aaaa, x2, 8*XLEN/8, x3)

inst_38:
// rs2_h3_val == 256, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000000700060001;  op2val:0x100fbff0010fbff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x1000000700060001, 0x100fbff0010fbff, x2, 9*XLEN/8, x3)

inst_39:
// rs2_h3_val == 2048, rs2_h2_val == -16385, rs2_h0_val == -129
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400fffefff80008;  op2val:0x800bffffffbff7f
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x400fffefff80008, 0x800bffffffbff7f, x2, 10*XLEN/8, x3)

inst_40:
// rs2_h3_val == 4096, rs2_h2_val == 1, rs1_h1_val == 4096
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff800021000fff6;  op2val:0x10000001dfffffff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff800021000fff6, 0x10000001dfffffff, x2, 11*XLEN/8, x3)

inst_41:
// rs2_h3_val == 8192, rs2_h1_val == -1
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x05fffcc0004000;  op2val:0x20000080fffffffe
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x05fffcc0004000, 0x20000080fffffffe, x2, 12*XLEN/8, x3)

inst_42:
// rs2_h3_val == 16384, rs1_h1_val == 2, rs2_h1_val == 64
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x02fff900020005;  op2val:0x400000030040fffc
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x02fff900020005, 0x400000030040fffc, x2, 13*XLEN/8, x3)

inst_43:
// rs2_h3_val == -3, rs2_h1_val == -32768
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc4000fffa0100;  op2val:0xfffd000080003fff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffc4000fffa0100, 0xfffd000080003fff, x2, 14*XLEN/8, x3)

inst_44:
// rs2_h3_val == -5, rs2_h1_val == 8, rs1_h3_val == -65
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff880000002;  op2val:0xfffb001000080001
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xffbffff880000002, 0xfffb001000080001, x2, 15*XLEN/8, x3)

inst_45:
// rs2_h3_val == -17, rs2_h1_val == -33
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeffaaaa0400;  op2val:0xffeffffeffdf0009
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xdffffeffaaaa0400, 0xffeffffeffdf0009, x2, 16*XLEN/8, x3)

inst_46:
// rs2_h3_val == -33, rs2_h0_val == 8192, rs1_h3_val == -17
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffefc000fefffff9;  op2val:0xffdffffffff82000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xffefc000fefffff9, 0xffdffffffff82000, x2, 17*XLEN/8, x3)

inst_47:
// rs2_h3_val == -65, rs1_h2_val == -33
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdfff7f0800;  op2val:0xffbfc0000000f7ff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x01ffdfff7f0800, 0xffbfc0000000f7ff, x2, 18*XLEN/8, x3)

inst_48:
// rs2_h3_val == -129, rs2_h0_val == -257, rs1_h2_val == 1024
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc0000400fffefff6;  op2val:0xff7fbfff0010feff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xc0000400fffefff6, 0xff7fbfff0010feff, x2, 19*XLEN/8, x3)

inst_49:
// rs2_h3_val == -257, rs1_h3_val == 21845
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fff80001;  op2val:0xfeffc0000800fff8
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x55555555fff80001, 0xfeffc0000800fff8, x2, 20*XLEN/8, x3)

inst_50:
// rs2_h3_val == -513, rs1_h3_val == -1
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff800000070001;  op2val:0xfdff0004fff81000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xffff800000070001, 0xfdff0004fff81000, x2, 21*XLEN/8, x3)

inst_51:
// rs2_h3_val == -1025, rs2_h0_val == 64
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x07000700050020;  op2val:0xfbff0005ffdf0040
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x07000700050020, 0xfbff0005ffdf0040, x2, 22*XLEN/8, x3)

inst_52:
// rs2_h3_val == -2049, rs2_h1_val == 512, rs2_h2_val == 21845
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffd0080ffff;  op2val:0xf7ff555502000003
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffcfffd0080ffff, 0xf7ff555502000003, x2, 23*XLEN/8, x3)

inst_53:
// rs2_h3_val == -16385, rs2_h2_val == 8192, rs1_h1_val == -8193
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000009dfff0007;  op2val:0xbfff20000003fff7
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x4000009dfff0007, 0xbfff20000003fff7, x2, 24*XLEN/8, x3)

inst_54:
// rs1_h0_val == -21846, rs1_h2_val == 8192, rs1_h3_val == -32768, rs1_h1_val == 21845
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800020005555aaaa;  op2val:0xfffc00100200fdff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x800020005555aaaa, 0xfffc00100200fdff, x2, 25*XLEN/8, x3)

inst_55:
// rs1_h0_val == rs2_h0_val, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6feffefff0004;  op2val:0x400000600080004
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff6feffefff0004, 0x400000600080004, x2, 26*XLEN/8, x3)

inst_56:
// rs1_h1_val == 0, rs2_h2_val == -32768
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x093fff0000bfff;  op2val:0x7fff80008000aaaa
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x093fff0000bfff, 0x7fff80008000aaaa, x2, 27*XLEN/8, x3)

inst_57:
// rs1_h1_val == 1, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x55553fff00014000;  op2val:0xc000fffc02002000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x55553fff00014000, 0xc000fffc02002000, x2, 28*XLEN/8, x3)

inst_58:
// rs1_h1_val == 32767, rs1_h2_val == 4096, rs2_h1_val == 256
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8010007ffffdff;  op2val:0xfbff040001000008
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x8010007ffffdff, 0xfbff040001000008, x2, 29*XLEN/8, x3)

inst_59:
// rs1_h1_val == 4, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bfff00040005;  op2val:0xfffe008000080009
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff7bfff00040005, 0xfffe008000080009, x2, 30*XLEN/8, x3)

inst_60:
// rs1_h3_val == -3, rs1_h2_val == -8193
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffddffffff65555;  op2val:0xfffb400000020005
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffddffffff65555, 0xfffb400000020005, x2, 31*XLEN/8, x3)

inst_61:
// rs1_h3_val == -5, rs2_h2_val == -8193, rs2_h0_val == -16385
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffef00064000;  op2val:0xfdffdfff0002bfff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffbffef00064000, 0xfdffdfff0002bfff, x2, 32*XLEN/8, x3)

inst_62:
// rs1_h3_val == -257, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffbdffffdff;  op2val:0xdffffefffff6f7ff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfefffffbdffffdff, 0xdffffefffff6f7ff, x2, 33*XLEN/8, x3)

inst_63:
// rs1_h3_val == -16385, rs1_h1_val == 16384
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff010040000006;  op2val:0xfff7fdff0040fffb
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xbfff010040000006, 0xfff7fdff0040fffb, x2, 34*XLEN/8, x3)

inst_64:
// rs1_h3_val == -21846, rs2_h1_val == -2049, rs2_h0_val == 32767
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0009feffffef;  op2val:0x805555f7ff7fff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xaaaa0009feffffef, 0x805555f7ff7fff, x2, 35*XLEN/8, x3)

inst_65:
// rs2_h0_val == 16, rs1_h3_val == 256, rs2_h2_val == 64, rs1_h1_val == 8
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fbff0008efff;  op2val:0xffff004000070010
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x100fbff0008efff, 0xffff004000070010, x2, 36*XLEN/8, x3)

inst_66:
// rs2_h0_val == 128, rs2_h2_val == -21846, rs1_h2_val == 32767
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7fff00060005;  op2val:0x2000aaaa3fff0080
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffd7fff00060005, 0x2000aaaa3fff0080, x2, 37*XLEN/8, x3)

inst_67:
// rs2_h0_val == 512, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff900080000fffe;  op2val:0x09200080000200
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff900080000fffe, 0x09200080000200, x2, 38*XLEN/8, x3)

inst_68:
// rs2_h0_val == 2048, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00050200c000;  op2val:0x80dfff20000800
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfdff00050200c000, 0x80dfff20000800, x2, 39*XLEN/8, x3)

inst_69:
// rs2_h0_val == 16384, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff600800010;  op2val:0xfff94000fff64000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xffdffff600800010, 0xfff94000fff64000, x2, 40*XLEN/8, x3)

inst_70:
// rs2_h0_val == -17, rs2_h2_val == -3, rs2_h1_val == 32
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400fefffffac000;  op2val:0xfff9fffd0020ffef
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x400fefffffac000, 0xfff9fffd0020ffef, x2, 41*XLEN/8, x3)

inst_71:
// rs2_h0_val == -65, rs1_h2_val == -129
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7fff7f0004;  op2val:0xdffffdfff7ffffbf
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x5555ff7fff7f0004, 0xdffffdfff7ffffbf, x2, 42*XLEN/8, x3)

inst_72:
// rs2_h0_val == -4097, rs1_h2_val == 1
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00010200bfff;  op2val:0x03fff80002efff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffd00010200bfff, 0x03fff80002efff, x2, 43*XLEN/8, x3)

inst_73:
// rs1_h2_val == rs2_h2_val, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20000100ffff0002;  op2val:0xff7f010010000007
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x20000100ffff0002, 0xff7f010010000007, x2, 44*XLEN/8, x3)

inst_74:
// rs2_h0_val == 21845, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffcff7ffffcff7f;  op2val:0x050004fffb5555
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffcff7ffffcff7f, 0x050004fffb5555, x2, 45*XLEN/8, x3)

inst_75:
// rs1_h1_val == -17, rs1_h3_val == 64
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40feffffef0040;  op2val:0x3fff800000010400
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x40feffffef0040, 0x3fff800000010400, x2, 46*XLEN/8, x3)

inst_76:
// rs1_h1_val == -513, rs1_h2_val == 16
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000010fdff0008;  op2val:0xfff8f7ff04000800
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x10000010fdff0008, 0xfff8f7ff04000800, x2, 47*XLEN/8, x3)

inst_77:
// rs2_h1_val == 128, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdefffc000fff8;  op2val:0xffdf008000800400
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffdefffc000fff8, 0xffdf008000800400, x2, 48*XLEN/8, x3)

inst_78:
// rs1_h1_val == -2049, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200f7ff0200;  op2val:0x2000400fbff4000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xefff0200f7ff0200, 0x2000400fbff4000, x2, 49*XLEN/8, x3)

inst_79:
// rs1_h1_val == -16385, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006bfff5555;  op2val:0xfffbfff80200bfff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xbfff0006bfff5555, 0xfffbfff80200bfff, x2, 50*XLEN/8, x3)

inst_80:
// rs2_h1_val == 16384, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0200bfff0000;  op2val:0xfffe000440000000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xaaaa0200bfff0000, 0xfffe000440000000, x2, 51*XLEN/8, x3)

inst_81:
// rs1_h2_val == -1, rs2_h2_val == 32767
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffff5555ffdf;  op2val:0xfeff7ffffff6fff8
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x06ffff5555ffdf, 0xfeff7ffffff6fff8, x2, 52*XLEN/8, x3)

inst_82:
// rs2_h1_val == -9, rs2_h2_val == 4096
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20000005fffbfff8;  op2val:0x081000fff70000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x20000005fffbfff8, 0x081000fff70000, x2, 53*XLEN/8, x3)

inst_83:
// rs2_h1_val == -257, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef800000800800;  op2val:0x5555fffcfefffffc
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xffef800000800800, 0x5555fffcfefffffc, x2, 54*XLEN/8, x3)

inst_84:
// rs2_h1_val == -513, rs1_h2_val == 32
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00200008efff;  op2val:0x030002fdffffbf
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xf7ff00200008efff, 0x030002fdffffbf, x2, 55*XLEN/8, x3)

inst_85:
// rs2_h1_val == -4097, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x094000ffef0002;  op2val:0x2000040effffffb
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x094000ffef0002, 0x2000040effffffb, x2, 56*XLEN/8, x3)

inst_86:
// rs2_h1_val == -16385, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff04005555fbff;  op2val:0x100008bfffaaaa
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfbff04005555fbff, 0x100008bfffaaaa, x2, 57*XLEN/8, x3)

inst_87:
// rs1_h2_val == -65, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbffffc0006;  op2val:0xff7f00062000ffef
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x800ffbffffc0006, 0xff7f00062000ffef, x2, 58*XLEN/8, x3)

inst_88:
// rs1_h2_val == -513, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffef0040;  op2val:0x40000008fffd0009
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffffdffffef0040, 0x40000008fffd0009, x2, 59*XLEN/8, x3)

inst_89:
// rs1_h2_val == -2049, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7fffffe0400;  op2val:0x10000020400ffef
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x8000f7fffffe0400, 0x10000020400ffef, x2, 60*XLEN/8, x3)

inst_90:
// rs2_h2_val == 2048, rs1_h1_val == -33
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff9ffdf0004;  op2val:0x40000800dfff8000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x3ffffff9ffdf0004, 0x40000800dfff8000, x2, 61*XLEN/8, x3)

inst_91:
// rs2_h2_val == -5, rs1_h3_val == -2
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffdc0000020;  op2val:0x200fffb00080400
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfffefffdc0000020, 0x200fffb00080400, x2, 62*XLEN/8, x3)

inst_92:
// rs1_h3_val == 0, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffb0004;  op2val:0x2000ff7fc0000400
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x000007fffb0004, 0x2000ff7fc0000400, x2, 63*XLEN/8, x3)

inst_93:
// rs2_h2_val == -33, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffcfff7efff;  op2val:0x01ffdf00042000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xdffffffcfff7efff, 0x01ffdf00042000, x2, 64*XLEN/8, x3)

inst_94:
// rs2_h1_val == 21845, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8aaaabffffff8;  op2val:0xfffcaaaa5555ffdf
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff8aaaabffffff8, 0xfffcaaaa5555ffdf, x2, 65*XLEN/8, x3)

inst_95:
// rs1_h3_val == 512, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2001000fff9fdff;  op2val:0xfffefff6ffbff7ff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x2001000fff9fdff, 0xfffefff6ffbff7ff, x2, 66*XLEN/8, x3)

inst_96:
// rs2_h2_val == -17, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffbc0000008;  op2val:0xc000ffeffffc0005
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x7ffffffbc0000008, 0xc000ffeffffc0005, x2, 67*XLEN/8, x3)

inst_97:
// rs2_h3_val == -32768, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40fffeaaaa0005;  op2val:0x800000028000c000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x40fffeaaaa0005, 0x800000028000c000, x2, 68*XLEN/8, x3)

inst_98:
// rs1_h3_val == 16384, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40001000ffeffeff;  op2val:0x06efff2000ff7f
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x40001000ffeffeff, 0x06efff2000ff7f, x2, 69*XLEN/8, x3)

inst_99:
// rs2_h2_val == -9, 
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0100010000feff;  op2val:0xfff7fff7fffe0080
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x0100010000feff, 0xfff7fff7fffe0080, x2, 70*XLEN/8, x3)

inst_100:
// rs1_h0_val == -1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -8193, rs2_h1_val == -129, rs2_h0_val == 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == rs2_h3_val, rs2_h3_val == -8193, rs1_h2_val == -9
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff70006ffff;  op2val:0xdffffff9ff7f0000
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xdffffff70006ffff, 0xdffffff9ff7f0000, x2, 71*XLEN/8, x3)

inst_101:
// rs1_h0_val == 0, rs2_h2_val == 16, rs1_h1_val == -1, rs1_h2_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h3_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == -8193, rs2_h3_val == -4097
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffefffffff0000;  op2val:0xefff0010fffcdfff
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xf7ffefffffff0000, 0xefff0010fffcdfff, x2, 72*XLEN/8, x3)

inst_102:
// rs1_h0_val == 32767, rs2_h3_val == -9, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == 512, rs1_h3_val == 1
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0x01fffa00207fff;  op2val:0xfff702000006fff9
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0x01fffa00207fff, 0xfff702000006fff9, x2, 73*XLEN/8, x3)

inst_103:
// rs1_h0_val == -257, rs2_h3_val == 16, rs1_h1_val == rs2_h1_val, rs1_h1_val == 16, rs1_h2_val == -2, rs2_h1_val == 16, rs2_h0_val == 1024
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffe0010feff;  op2val:0x10020000100400
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xf7fffffe0010feff, 0x10020000100400, x2, 74*XLEN/8, x3)

inst_104:
// rs1_h0_val == -1025, rs1_h1_val == 256, rs2_h1_val == -1025, rs1_h2_val == -5, rs2_h0_val == -5
// opcode: pmhraccu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb0100fbff;  op2val:0xeffffffcfbfffffb
TEST_RR_OP(pmhraccu.h, x31, x30, x29, 0x0000000000000000, 0xfff6fffb0100fbff, 0xeffffffcfbfffffb, x2, 75*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 76*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
