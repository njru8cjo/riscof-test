
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the psadd.h instruction of the RISC-V RV64PZicsr extension for the psadd.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",psadd.h)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x7, rd==x3, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 2, rs1_h2_val == 1, rs2_h3_val == 4096, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -257, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 32767, rs1_h3_val == 32, rs1_h3_val != rs2_h3_val, rs2_h2_val == -21846
// opcode: psadd.h ; op1:x17; op2:x7; dest:x3; op1val:0x20000100028000;  op2val:0x1000aaaafeff7fff
TEST_RR_OP(psadd.h, x3, x17, x7, 0x0000000000000000, 0x20000100028000, 0x1000aaaafeff7fff, x4, 0*XLEN/8, x9)

inst_1:
// rs2 == rd != rs1, rs1==x15, rs2==x21, rd==x21, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -1, rs2_h0_val == -513, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == -21846, rs2_h3_val == -5, rs1_h1_val == 4096, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -32768
// opcode: psadd.h ; op1:x15; op2:x21; dest:x21; op1val:0xaaaaffff1000ffff;  op2val:0xfffb80000800fdff
TEST_RR_OP(psadd.h, x21, x15, x21, 0x0000000000000000, 0xaaaaffff1000ffff, 0xfffb80000800fdff, x4, 1*XLEN/8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x8, rs1_h0_val == 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -2049, rs2_h1_val == -8193, rs1_h2_val == -17
// opcode: psadd.h ; op1:x29; op2:x29; dest:x8; op1val:0x06ffeff7ff0000;  op2val:0x03fff6dfff0007
TEST_RR_OP(psadd.h, x8, x29, x29, 0x0000000000000000, 0x06ffeff7ff0000, 0x03fff6dfff0007, x4, 2*XLEN/8, x9)

inst_3:
// rs1 == rd != rs2, rs1==x10, rs2==x0, rd==x10, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -4097, rs1_h2_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == rs2_h2_val, rs2_h1_val == -1025, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 1024, rs2_h2_val == 32767, rs2_h3_val == -21846
// opcode: psadd.h ; op1:x10; op2:x0; dest:x10; op1val:0x4007fffefff0001;  op2val:0xaaaa7ffffbfffffc
TEST_RR_OP(psadd.h, x10, x10, x0, 0x0000000000000000, 0x4007fffefff0001, 0xaaaa7ffffbfffffc, x4, 3*XLEN/8, x9)

inst_4:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8192, rs1_h3_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == -3, rs2_h0_val == 128, rs1_h2_val == -5
// opcode: psadd.h ; op1:x25; op2:x25; dest:x25; op1val:0xbffffffb00067fff;  op2val:0xfffd2000fff80080
TEST_RR_OP(psadd.h, x25, x25, x25, 0x0000000000000000, 0xbffffffb00067fff, 0xfffd2000fff80080, x4, 4*XLEN/8, x9)

inst_5:
// rs1==x31, rs2==x5, rd==x15, rs1_h0_val == 2, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == 32767, rs2_h0_val == -8193, rs2_h2_val == -16385, rs1_h1_val == -17
// opcode: psadd.h ; op1:x31; op2:x5; dest:x15; op1val:0x7fffffefffef0002;  op2val:0x1000bfff0007dfff
TEST_RR_OP(psadd.h, x15, x31, x5, 0x0000000000000000, 0x7fffffefffef0002, 0x1000bfff0007dfff, x4, 5*XLEN/8, x9)

inst_6:
// rs1==x20, rs2==x1, rd==x26, rs1_h0_val == 4, rs2_h0_val == -9, rs1_h1_val == 1, rs1_h2_val == 21845, rs2_h2_val == 21845, rs2_h3_val == -1
// opcode: psadd.h ; op1:x20; op2:x1; dest:x26; op1val:0xfff8555500010004;  op2val:0xffff5555fffafff7
TEST_RR_OP(psadd.h, x26, x20, x1, 0x0000000000000000, 0xfff8555500010004, 0xffff5555fffafff7, x4, 6*XLEN/8, x9)

inst_7:
// rs1==x27, rs2==x6, rd==x7, rs1_h0_val == 8, rs1_h2_val == -129, rs2_h1_val == 1024, rs2_h3_val == 256, rs2_h2_val == -2, rs1_h3_val == 512
// opcode: psadd.h ; op1:x27; op2:x6; dest:x7; op1val:0x200ff7f00050008;  op2val:0x100fffe0400fff7
TEST_RR_OP(psadd.h, x7, x27, x6, 0x0000000000000000, 0x200ff7f00050008, 0x100fffe0400fff7, x4, 7*XLEN/8, x9)

inst_8:
// rs1==x0, rs2==x16, rd==x14, rs1_h0_val == 16, rs1_h3_val == -2049, rs2_h1_val == -17, rs1_h2_val == 2, rs1_h1_val == 512, rs2_h3_val == -17, rs2_h2_val == -2049
// opcode: psadd.h ; op1:x0; op2:x16; dest:x14; op1val:0xf7ff000202000010;  op2val:0xffeff7ffffefdfff
TEST_RR_OP(psadd.h, x14, x0, x16, 0x0000000000000000, 0xf7ff000202000010, 0xffeff7ffffefdfff, x4, 8*XLEN/8, x9)

inst_9:
// rs1==x16, rs2==x10, rd==x6, rs1_h0_val == 32, rs1_h3_val == 2048, rs2_h3_val == 8192
// opcode: psadd.h ; op1:x16; op2:x10; dest:x6; op1val:0x800c000fff60020;  op2val:0x2000800008000007
TEST_RR_OP(psadd.h, x6, x16, x10, 0x0000000000000000, 0x800c000fff60020, 0x2000800008000007, x4, 9*XLEN/8, x9)

inst_10:
// rs1==x7, rs2==x14, rd==x2, rs1_h0_val == 64, rs1_h2_val == -257, rs2_h2_val == -17
// opcode: psadd.h ; op1:x7; op2:x14; dest:x2; op1val:0xfff6fefff7ff0040;  op2val:0xfffcffefc0000009
TEST_RR_OP(psadd.h, x2, x7, x14, 0x0000000000000000, 0xfff6fefff7ff0040, 0xfffcffefc0000009, x4, 10*XLEN/8, x9)

inst_11:
// rs1==x8, rs2==x19, rd==x20, rs1_h0_val == 128, rs2_h0_val == 16384, rs1_h3_val == -17, rs1_h1_val == -21846, rs1_h2_val == -8193, rs2_h3_val == 0, rs2_h1_val == 64
// opcode: psadd.h ; op1:x8; op2:x19; dest:x20; op1val:0xffefdfffaaaa0080;  op2val:0x00fff600404000
TEST_RR_OP(psadd.h, x20, x8, x19, 0x0000000000000000, 0xffefdfffaaaa0080, 0x00fff600404000, x4, 11*XLEN/8, x9)

inst_12:
// rs1==x18, rs2==x30, rd==x24, rs1_h0_val == 256, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h3_val == 64
// opcode: psadd.h ; op1:x18; op2:x30; dest:x24; op1val:0xc000c000fff90100;  op2val:0x40fffc00067fff
TEST_RR_OP(psadd.h, x24, x18, x30, 0x0000000000000000, 0xc000c000fff90100, 0x40fffc00067fff, x4, 12*XLEN/8, x9)

inst_13:
// rs1==x24, rs2==x15, rd==x28, rs1_h0_val == 512, rs2_h1_val == -21846, rs1_h2_val == 8
// opcode: psadd.h ; op1:x24; op2:x15; dest:x28; op1val:0x8000008fffa0200;  op2val:0x20007fffaaaafffc
TEST_RR_OP(psadd.h, x28, x24, x15, 0x0000000000000000, 0x8000008fffa0200, 0x20007fffaaaafffc, x4, 13*XLEN/8, x9)

inst_14:
// rs1==x23, rs2==x3, rd==x18, rs1_h0_val == 1024, rs1_h2_val == -2049, rs2_h0_val == -17, rs2_h2_val == -5, rs2_h1_val == 16, rs2_h3_val == -16385
// opcode: psadd.h ; op1:x23; op2:x3; dest:x18; op1val:0xffeff7ff02000400;  op2val:0xbffffffb0010ffef
TEST_RR_OP(psadd.h, x18, x23, x3, 0x0000000000000000, 0xffeff7ff02000400, 0xbffffffb0010ffef, x4, 14*XLEN/8, x9)

inst_15:
// rs1==x21, rs2==x17, rd==x19, rs1_h0_val == 2048, rs2_h2_val == 2048, rs1_h2_val == 128, rs2_h1_val == -32768, rs1_h1_val == -3, rs2_h3_val == -4097
// opcode: psadd.h ; op1:x21; op2:x17; dest:x19; op1val:0xfffc0080fffd0800;  op2val:0xefff08008000fdff
TEST_RR_OP(psadd.h, x19, x21, x17, 0x0000000000000000, 0xfffc0080fffd0800, 0xefff08008000fdff, x4, 15*XLEN/8, x10)

inst_16:
// rs1==x11, rs2==x13, rd==x23, rs1_h0_val == 4096, rs1_h1_val == -5, rs2_h3_val == 4, rs1_h2_val == 4
// opcode: psadd.h ; op1:x11; op2:x13; dest:x23; op1val:0xffef0004fffb1000;  op2val:0x04fffefff80007
TEST_RR_OP(psadd.h, x23, x11, x13, 0x0000000000000000, 0xffef0004fffb1000, 0x04fffefff80007, x4, 16*XLEN/8, x10)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x9, rs2==x28, rd==x0, rs1_h0_val == 8192, rs1_h2_val == -16385, rs2_h0_val == 256, rs2_h3_val == 21845, rs2_h1_val == 128
// opcode: psadd.h ; op1:x9; op2:x28; dest:x0; op1val:0xfffcbfffc0002000;  op2val:0x5555fff800800100
TEST_RR_OP(psadd.h, x0, x9, x28, 0x0000000000000000, 0xfffcbfffc0002000, 0x5555fff800800100, x7, 0*XLEN/8, x10)

inst_18:
// rs1==x28, rs2==x22, rd==x17, rs1_h0_val == 16384, rs1_h3_val == 256, rs2_h2_val == -65, rs1_h2_val == -2, rs2_h0_val == 4096
// opcode: psadd.h ; op1:x28; op2:x22; dest:x17; op1val:0x100fffefffd4000;  op2val:0x3fffffbf00401000
TEST_RR_OP(psadd.h, x17, x28, x22, 0x0000000000000000, 0x100fffefffd4000, 0x3fffffbf00401000, x7, 1*XLEN/8, x10)

inst_19:
// rs1==x5, rs2==x4, rd==x30, rs1_h0_val == -2, rs2_h1_val == -65, rs2_h0_val == -1025
// opcode: psadd.h ; op1:x5; op2:x4; dest:x30; op1val:0x3ffffff6fffcfffe;  op2val:0xeffffff6ffbffbff
TEST_RR_OP(psadd.h, x30, x5, x4, 0x0000000000000000, 0x3ffffff6fffcfffe, 0xeffffff6ffbffbff, x7, 2*XLEN/8, x10)

inst_20:
// rs1==x1, rs2==x11, rd==x13, rs1_h0_val == -3, rs1_h3_val == 8, rs1_h1_val == 64, rs2_h1_val == 1
// opcode: psadd.h ; op1:x1; op2:x11; dest:x13; op1val:0x08ff7f0040fffd;  op2val:0x1000000600010009
TEST_RR_OP(psadd.h, x13, x1, x11, 0x0000000000000000, 0x08ff7f0040fffd, 0x1000000600010009, x7, 3*XLEN/8, x10)

inst_21:
// rs1==x19, rs2==x31, rd==x4, rs1_h0_val == -5, rs1_h2_val == -65, rs1_h1_val == -33, rs2_h0_val == 512, rs2_h1_val == -129
// opcode: psadd.h ; op1:x19; op2:x31; dest:x4; op1val:0x100ffbfffdffffb;  op2val:0xffff7fffff7f0200
TEST_RR_OP(psadd.h, x4, x19, x31, 0x0000000000000000, 0x100ffbfffdffffb, 0xffff7fffff7f0200, x7, 4*XLEN/8, x10)

inst_22:
// rs1==x22, rs2==x20, rd==x12, rs1_h0_val == -9, rs2_h3_val == -9, rs2_h0_val == -3, rs2_h1_val == 32
// opcode: psadd.h ; op1:x22; op2:x20; dest:x12; op1val:0x800fff9aaaafff7;  op2val:0xfff720000020fffd
TEST_RR_OP(psadd.h, x12, x22, x20, 0x0000000000000000, 0x800fff9aaaafff7, 0xfff720000020fffd, x7, 5*XLEN/8, x10)

inst_23:
// rs1==x2, rs2==x23, rd==x27, rs1_h0_val == -17, rs1_h3_val == -513, rs2_h0_val == 1, rs2_h3_val == -33, rs1_h2_val == 256, rs2_h1_val == -16385
// opcode: psadd.h ; op1:x2; op2:x23; dest:x27; op1val:0xfdff01003fffffef;  op2val:0xffdf0003bfff0001
TEST_RR_OP(psadd.h, x27, x2, x23, 0x0000000000000000, 0xfdff01003fffffef, 0xffdf0003bfff0001, x7, 6*XLEN/8, x10)

inst_24:
// rs1==x6, rs2==x24, rd==x11, rs1_h0_val == -33, rs2_h3_val == 16, rs2_h1_val == 8192
// opcode: psadd.h ; op1:x6; op2:x24; dest:x11; op1val:0x070100efffffdf;  op2val:0x107fff2000fffc
TEST_RR_OP(psadd.h, x11, x6, x24, 0x0000000000000000, 0x070100efffffdf, 0x107fff2000fffc, x7, 7*XLEN/8, x10)

inst_25:
// rs1==x12, rs2==x27, rd==x5, rs1_h0_val == -65, rs1_h1_val == -9, rs2_h0_val == 2
// opcode: psadd.h ; op1:x12; op2:x27; dest:x5; op1val:0x4000008fff7ffbf;  op2val:0x09ffbfffef0002
TEST_RR_OP(psadd.h, x5, x12, x27, 0x0000000000000000, 0x4000008fff7ffbf, 0x09ffbfffef0002, x7, 8*XLEN/8, x10)

inst_26:
// rs1==x30, rs2==x2, rd==x31, rs1_h0_val == -129, rs1_h2_val == 4096, rs2_h3_val == 1024, rs1_h3_val == 4096, rs2_h0_val == -5
// opcode: psadd.h ; op1:x30; op2:x2; dest:x31; op1val:0x10001000f7ffff7f;  op2val:0x40008000005fffb
TEST_RR_OP(psadd.h, x31, x30, x2, 0x0000000000000000, 0x10001000f7ffff7f, 0x40008000005fffb, x7, 9*XLEN/8, x10)

inst_27:
// rs1==x3, rs2==x8, rd==x1, rs1_h0_val == -257, rs1_h1_val == -8193, rs1_h3_val == -2
// opcode: psadd.h ; op1:x3; op2:x8; dest:x1; op1val:0xfffefff6dffffeff;  op2val:0x200055550009fffd
TEST_RR_OP(psadd.h, x1, x3, x8, 0x0000000000000000, 0xfffefff6dffffeff, 0x200055550009fffd, x7, 10*XLEN/8, x10)

inst_28:
// rs1==x4, rs2==x26, rd==x22, rs1_h0_val == -513, rs1_h3_val == -1025, rs1_h1_val == 0, rs2_h3_val == 2
// opcode: psadd.h ; op1:x4; op2:x26; dest:x22; op1val:0xfbfffeff0000fdff;  op2val:0x02200080000080
TEST_RR_OP(psadd.h, x22, x4, x26, 0x0000000000000000, 0xfbfffeff0000fdff, 0x02200080000080, x7, 11*XLEN/8, x10)

inst_29:
// rs1==x13, rs2==x18, rd==x16, rs1_h0_val == -1025, rs2_h0_val == -16385, rs2_h3_val == -65, rs1_h1_val == -129
// opcode: psadd.h ; op1:x13; op2:x18; dest:x16; op1val:0x200c000ff7ffbff;  op2val:0xffbfffefffbfbfff
TEST_RR_OP(psadd.h, x16, x13, x18, 0x0000000000000000, 0x200c000ff7ffbff, 0xffbfffefffbfbfff, x7, 12*XLEN/8, x10)

inst_30:
// rs1==x14, rs2==x12, rd==x29, rs1_h0_val == -2049, rs1_h2_val == -21846, rs2_h2_val == 1024
// opcode: psadd.h ; op1:x14; op2:x12; dest:x29; op1val:0xfffeaaaaffeff7ff;  op2val:0x400040020003fff
TEST_RR_OP(psadd.h, x29, x14, x12, 0x0000000000000000, 0xfffeaaaaffeff7ff, 0x400040020003fff, x7, 13*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x26, rs1_h0_val == -4097, rs1_h1_val == 8192
// opcode: psadd.h ; op1:x26; op2:x30; dest:x0; op1val:0xfff6dfff2000efff;  op2val:0xc0003ffffefffffc
TEST_RR_OP(psadd.h, x0, x26, x30, 0x0000000000000000, 0xfff6dfff2000efff, 0xc0003ffffefffffc, x1, 0*XLEN/8, x2)

inst_32:
// rs2==x9, rs1_h0_val == -8193, rs2_h0_val == 8192, rs1_h1_val == 16, rs1_h3_val == 8192
// opcode: psadd.h ; op1:x28; op2:x9; dest:x31; op1val:0x200000060010dfff;  op2val:0xffbffff600062000
TEST_RR_OP(psadd.h, x31, x28, x9, 0x0000000000000000, 0x200000060010dfff, 0xffbffff600062000, x1, 1*XLEN/8, x2)

inst_33:
// rd==x9, rs1_h0_val == -16385, rs2_h2_val == 64, rs2_h0_val == -33, rs2_h1_val == -33, rs1_h3_val == -8193, rs2_h3_val == -513
// opcode: psadd.h ; op1:x11; op2:x3; dest:x9; op1val:0xdfffbfffc000bfff;  op2val:0xfdff0040ffdfffdf
TEST_RR_OP(psadd.h, x9, x11, x3, 0x0000000000000000, 0xdfffbfffc000bfff, 0xfdff0040ffdfffdf, x1, 2*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs1_h2_val == 16384, rs1_h3_val == 4
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x044000fffd5555;  op2val:0xfff80005fff92000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x044000fffd5555, 0xfff80005fff92000, x1, 3*XLEN/8, x2)

inst_35:
// rs1_h0_val == -21846, rs2_h0_val == 32, rs2_h2_val == -1, rs1_h3_val == 16, rs1_h1_val == -65
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x10fffaffbfaaaa;  op2val:0xfff8ffff00100020
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x10fffaffbfaaaa, 0xfff8ffff00100020, x1, 4*XLEN/8, x2)

inst_36:
// rs2_h3_val == 32767, rs2_h1_val == 2, rs1_h1_val == 32, rs1_h2_val == -4097
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffeefff00200080;  op2val:0x7fff20000002dfff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffeefff00200080, 0x7fff20000002dfff, x1, 5*XLEN/8, x2)

inst_37:
// rs2_h3_val == 8, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x800f7fffffbffef;  op2val:0x08fff9fffa3fff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x800f7fffffbffef, 0x08fff9fffa3fff, x1, 6*XLEN/8, x2)

inst_38:
// rs2_h3_val == 32, rs1_h1_val == 8, rs2_h1_val == 4096
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff60008fffa;  op2val:0x20080010003fff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffafff60008fffa, 0x20080010003fff, x1, 7*XLEN/8, x2)

inst_39:
// rs2_h3_val == 128, rs2_h2_val == 128
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0001fffdffff;  op2val:0x80008000800200
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x7fff0001fffdffff, 0x80008000800200, x1, 8*XLEN/8, x2)

inst_40:
// rs2_h3_val == 512, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff3fff5555;  op2val:0x2007ffffff8fff6
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x7ffffeff3fff5555, 0x2007ffffff8fff6, x1, 9*XLEN/8, x2)

inst_41:
// rs2_h3_val == 2048, rs2_h2_val == 4096
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fff80000ffbf;  op2val:0x8001000feff0080
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x09fff80000ffbf, 0x8001000feff0080, x1, 10*XLEN/8, x2)

inst_42:
// rs2_h3_val == 16384, rs1_h1_val == 128
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffb0080bfff;  op2val:0x4000fff93fff3fff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x3ffffffb0080bfff, 0x4000fff93fff3fff, x1, 11*XLEN/8, x2)

inst_43:
// rs2_h3_val == -2, rs1_h3_val == -3, rs2_h2_val == 1, rs1_h2_val == 512
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd020010002000;  op2val:0xfffe000100010007
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffd020010002000, 0xfffe000100010007, x1, 12*XLEN/8, x2)

inst_44:
// rs2_h3_val == -129, rs1_h1_val == -1025, rs2_h1_val == 0
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000100fbff0004;  op2val:0xff7f000700000006
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x10000100fbff0004, 0xff7f000700000006, x1, 13*XLEN/8, x2)

inst_45:
// rs2_h3_val == -257, rs2_h0_val == -1
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fffeffdf0005;  op2val:0xfeff0003ff7fffff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x08fffeffdf0005, 0xfeff0003ff7fffff, x1, 14*XLEN/8, x2)

inst_46:
// rs2_h3_val == -1025, rs2_h2_val == -9
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x20000020005ffff;  op2val:0xfbfffff70010fbff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x20000020005ffff, 0xfbfffff70010fbff, x1, 15*XLEN/8, x2)

inst_47:
// rs2_h3_val == -2049, rs1_h2_val == 32, rs2_h2_val == 0, rs2_h0_val == -21846
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0020c0000200;  op2val:0xf7ff00000800aaaa
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffd0020c0000200, 0xf7ff00000800aaaa, x1, 16*XLEN/8, x2)

inst_48:
// rs2_h3_val == -8193, rs1_h1_val == 32767, rs1_h3_val == 0
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fffc7ffffffc;  op2val:0xdfff7fff00800001
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x00fffc7ffffffc, 0xdfff7fff00800001, x1, 17*XLEN/8, x2)

inst_49:
// rs1_h1_val == -32768, rs1_h3_val == -5, rs2_h0_val == 1024, rs2_h1_val == 21845, rs1_h2_val == -9
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff78000aaaa;  op2val:0xfeffc00055550400
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffbfff78000aaaa, 0xfeffc00055550400, x1, 18*XLEN/8, x2)

inst_50:
// rs1_h0_val == rs2_h0_val, rs2_h2_val == 2
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffec00000100001;  op2val:0xc0000002ff7f0001
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffec00000100001, 0xc0000002ff7f0001, x1, 19*XLEN/8, x2)

inst_51:
// rs1_h1_val == -1, rs2_h2_val == 16
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x04feffffff0009;  op2val:0xffff0010fffc3fff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x04feffffff0009, 0xffff0010fffc3fff, x1, 20*XLEN/8, x2)

inst_52:
// rs1_h1_val == 4, rs1_h3_val == -257
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff40000004fff6;  op2val:0x090002ffef0007
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfeff40000004fff6, 0x090002ffef0007, x1, 21*XLEN/8, x2)

inst_53:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == -2049, rs2_h3_val == -32768, rs1_h3_val == 128
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x800007f7fffffb;  op2val:0x8000fff6f7ff0005
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x800007f7fffffb, 0x8000fff6f7ff0005, x1, 22*XLEN/8, x2)

inst_54:
// rs1_h1_val == 256, rs2_h2_val == 32, rs1_h3_val == -32768
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffa0100fff9;  op2val:0xfff90020fffa1000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x8000fffa0100fff9, 0xfff90020fffa1000, x1, 23*XLEN/8, x2)

inst_55:
// rs1_h1_val == 1024, rs1_h3_val == -9, rs2_h1_val == 16384, rs2_h0_val == -129, rs1_h2_val == 16, rs2_h2_val == -129
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff700100400fffa;  op2val:0xfffcff7f4000ff7f
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff700100400fffa, 0xfffcff7f4000ff7f, x1, 24*XLEN/8, x2)

inst_56:
// rs1_h1_val == 2048, rs2_h1_val == -3, rs2_h2_val == -513, rs2_h3_val == 1
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff810000800ffff;  op2val:0x01fdfffffdfffb
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff810000800ffff, 0x01fdfffffdfffb, x1, 25*XLEN/8, x2)

inst_57:
// rs1_h1_val == 16384, rs1_h3_val == 16384
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000000440008000;  op2val:0xfffdfdfffff6fff6
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x4000000440008000, 0xfffdfdfffff6fff6, x1, 26*XLEN/8, x2)

inst_58:
// rs1_h3_val == -33, rs2_h0_val == 0, rs2_h1_val == 8
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbffffffeff;  op2val:0xff7ffffe00080000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffdfffbffffffeff, 0xff7ffffe00080000, x1, 27*XLEN/8, x2)

inst_59:
// rs1_h3_val == -65, rs2_h0_val == -32768, rs2_h2_val == 4
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0001fbffffff;  op2val:0x050004ff7f8000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffbf0001fbffffff, 0x050004ff7f8000, x1, 28*XLEN/8, x2)

inst_60:
// rs1_h3_val == -129, rs2_h1_val == -9
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0008fff60800;  op2val:0x10fffffff7fff6
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xff7f0008fff60800, 0x10fffffff7fff6, x1, 29*XLEN/8, x2)

inst_61:
// rs1_h3_val == -4097, rs2_h2_val == -33, rs1_h2_val == -1025
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffbff00010100;  op2val:0x5555ffdf00800100
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xeffffbff00010100, 0x5555ffdf00800100, x1, 30*XLEN/8, x2)

inst_62:
// rs1_h3_val == 21845, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555000700040200;  op2val:0x800000070080bfff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x5555000700040200, 0x800000070080bfff, x1, 31*XLEN/8, x2)

inst_63:
// rs2_h0_val == 4, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffeff00050020;  op2val:0x00fff920000004
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xf7fffeff00050020, 0x00fff920000004, x1, 32*XLEN/8, x2)

inst_64:
// rs2_h0_val == 8, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x00effffffd3fff;  op2val:0xf7fffffb00070008
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x00effffffd3fff, 0xf7fffffb00070008, x1, 33*XLEN/8, x2)

inst_65:
// rs2_h0_val == 16, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffbff7ffffffb;  op2val:0x20000009fffc0010
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xff7ffbff7ffffffb, 0x20000009fffc0010, x1, 34*XLEN/8, x2)

inst_66:
// rs2_h0_val == 64, rs1_h2_val == 2048
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff08000002fffe;  op2val:0x09000500010040
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xbfff08000002fffe, 0x09000500010040, x1, 35*XLEN/8, x2)

inst_67:
// rs2_h0_val == 2048, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002ffbff7ff;  op2val:0x40004000100800
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff70002ffbff7ff, 0x40004000100800, x1, 36*XLEN/8, x2)

inst_68:
// rs2_h0_val == -2, rs1_h3_val == rs2_h3_val
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbfffbfffeff;  op2val:0xffbf0006aaaafffe
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffbffbfffbfffeff, 0xffbf0006aaaafffe, x1, 37*XLEN/8, x2)

inst_69:
// rs2_h0_val == -65, rs2_h2_val == -8193, rs1_h2_val == 8192
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000fff92000;  op2val:0xfff6dfff0001ffbf
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfbff2000fff92000, 0xfff6dfff0001ffbf, x1, 38*XLEN/8, x2)

inst_70:
// rs2_h0_val == -257, rs2_h1_val == 256
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffafffd4000;  op2val:0xff7fffdf0100feff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xdffffffafffd4000, 0xff7fffdf0100feff, x1, 39*XLEN/8, x2)

inst_71:
// rs2_h0_val == -2049, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff70020ffff;  op2val:0xefff0002fffaf7ff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xeffffff70020ffff, 0xefff0002fffaf7ff, x1, 40*XLEN/8, x2)

inst_72:
// rs2_h0_val == -4097, rs1_h3_val == -1
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff3fffff7f5555;  op2val:0xfdfffff6f7ffefff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffff3fffff7f5555, 0xfdfffff6f7ffefff, x1, 41*XLEN/8, x2)

inst_73:
// rs2_h0_val == 21845, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff9f7ffff7f;  op2val:0x800010ffbf5555
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xc000fff9f7ffff7f, 0x800010ffbf5555, x1, 42*XLEN/8, x2)

inst_74:
// rs1_h1_val == -513, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x094000fdff0007;  op2val:0x5555ffdf0008fffa
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x094000fdff0007, 0x5555ffdf0008fffa, x1, 43*XLEN/8, x2)

inst_75:
// rs2_h1_val == 512, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7fff7efff;  op2val:0x1010000200ff7f
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xf7fffff7fff7efff, 0x1010000200ff7f, x1, 44*XLEN/8, x2)

inst_76:
// rs1_h1_val == -16385, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000c000bfff8000;  op2val:0x0210000400bfff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xc000c000bfff8000, 0x0210000400bfff, x1, 45*XLEN/8, x2)

inst_77:
// rs1_h1_val == 21845, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc100055550020;  op2val:0x20000410007fff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfffc100055550020, 0x20000410007fff, x1, 46*XLEN/8, x2)

inst_78:
// rs2_h1_val == -2, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x0300204000fbff;  op2val:0x4000fff7fffe0020
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x0300204000fbff, 0x4000fff7fffe0020, x1, 47*XLEN/8, x2)

inst_79:
// rs1_h2_val == -32768, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x038000fff70006;  op2val:0xfff600020005ff7f
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x038000fff70006, 0xfff600020005ff7f, x1, 48*XLEN/8, x2)

inst_80:
// rs2_h1_val == -5, rs1_h2_val == 64
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0040ffdfffbf;  op2val:0x8007ffffffbfffc
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfbff0040ffdfffbf, 0x8007ffffffbfffc, x1, 49*XLEN/8, x2)

inst_81:
// rs1_h2_val == 0, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x800000000009fff7;  op2val:0x7fff0010c000fffd
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x800000000009fff7, 0x7fff0010c000fffd, x1, 50*XLEN/8, x2)

inst_82:
// rs2_h1_val == -513, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x08000640005555;  op2val:0xbfff0007fdfffffd
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x08000640005555, 0xbfff0007fdfffffd, x1, 51*XLEN/8, x2)

inst_83:
// rs2_h1_val == -4097, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x100005fff80002;  op2val:0x04ffbfeffffdff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x100005fff80002, 0x04ffbfeffffdff, x1, 52*XLEN/8, x2)

inst_84:
// rs1_h2_val == 1024, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400ffeff7ff;  op2val:0xefff0009ffbf0003
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x7fff0400ffeff7ff, 0xefff0009ffbf0003, x1, 53*XLEN/8, x2)

inst_85:
// rs1_h1_val == -2, rs2_h2_val == -3
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffaaaafffe0010;  op2val:0xfffdfffdfffd0080
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xf7ffaaaafffe0010, 0xfffdfffdfffd0080, x1, 54*XLEN/8, x2)

inst_86:
// rs1_h2_val == -3, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffd00060003;  op2val:0x04ffdf00000002
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff8fffd00060003, 0x04ffdf00000002, x1, 55*XLEN/8, x2)

inst_87:
// rs2_h2_val == 8, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff9bffffff6;  op2val:0xfffe0008aaaaff7f
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffdffff9bffffff6, 0xfffe0008aaaaff7f, x1, 56*XLEN/8, x2)

inst_88:
// rs1_h2_val == -33, rs1_h3_val == 64
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdf0008aaaa;  op2val:0x05555580000010
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x40ffdf0008aaaa, 0x05555580000010, x1, 57*XLEN/8, x2)

inst_89:
// rs1_h2_val == -513, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdff01000080;  op2val:0x01fffb0010fffe
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xbffffdff01000080, 0x01fffb0010fffe, x1, 58*XLEN/8, x2)

inst_90:
// rs2_h2_val == 256, rs2_h1_val == 32767
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x06000304000008;  op2val:0x0301007fff0009
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x06000304000008, 0x0301007fff0009, x1, 59*XLEN/8, x2)

inst_91:
// rs2_h2_val == 512, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x00555500100080;  op2val:0xbfff02000007fff9
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x00555500100080, 0xbfff02000007fff9, x1, 60*XLEN/8, x2)

inst_92:
// rs2_h2_val == 16384, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6000800030400;  op2val:0xc00040001000ffff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff6000800030400, 0xc00040001000ffff, x1, 61*XLEN/8, x2)

inst_93:
// rs1_h3_val == 1, rs2_h2_val == -257
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x010007ffdfffff;  op2val:0x7ffffeff0005fffd
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x010007ffdfffff, 0x7ffffeff0005fffd, x1, 62*XLEN/8, x2)

inst_94:
// rs1_h3_val == 2, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x02efff00070040;  op2val:0xffeffffd00034000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x02efff00070040, 0xffeffffd00034000, x1, 63*XLEN/8, x2)

inst_95:
// rs2_h1_val == -1, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac00000070010;  op2val:0x077fffffff0040
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xaaaac00000070010, 0x077fffffff0040, x1, 64*XLEN/8, x2)

inst_96:
// rs2_h1_val == 4, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00008000fbff;  op2val:0x06bfff0004aaaa
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xffdf00008000fbff, 0x06bfff0004aaaa, x1, 65*XLEN/8, x2)

inst_97:
// rs2_h2_val == -4097, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00015555fffe;  op2val:0x8000efffaaaa0000
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xaaaa00015555fffe, 0x8000efffaaaa0000, x1, 66*XLEN/8, x2)

inst_98:
// rs2_h2_val == -1025, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x03fffafff6c000;  op2val:0x800fbff0020efff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x03fffafff6c000, 0x800fbff0020efff, x1, 67*XLEN/8, x2)

inst_99:
// rs1_h1_val == -257, 
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x080400fefff7ff;  op2val:0xfbfffffcdffffffa
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x080400fefff7ff, 0xfbfffffcdffffffa, x1, 68*XLEN/8, x2)

inst_100:
// rs1_h0_val == 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -2049, rs2_h1_val == -8193, rs1_h2_val == -17
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffeff7ff0000;  op2val:0x03fff6dfff0007
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x06ffeff7ff0000, 0x03fff6dfff0007, x1, 69*XLEN/8, x2)

inst_101:
// rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -4097, rs1_h2_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == rs2_h2_val, rs2_h1_val == -1025, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 1024, rs2_h2_val == 32767, rs2_h3_val == -21846
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x4007fffefff0001;  op2val:0xaaaa7ffffbfffffc
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0x4007fffefff0001, 0xaaaa7ffffbfffffc, x1, 70*XLEN/8, x2)

inst_102:
// rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8192, rs1_h3_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == -3, rs2_h0_val == 128, rs1_h2_val == -5
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffb00067fff;  op2val:0xfffd2000fff80080
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xbffffffb00067fff, 0xfffd2000fff80080, x1, 71*XLEN/8, x2)

inst_103:
// rs1_h0_val == 16, rs1_h3_val == -2049, rs2_h1_val == -17, rs1_h2_val == 2, rs1_h1_val == 512, rs2_h3_val == -17, rs2_h2_val == -2049
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000202000010;  op2val:0xffeff7ffffefdfff
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xf7ff000202000010, 0xffeff7ffffefdfff, x1, 72*XLEN/8, x2)

inst_104:
// rs1_h0_val == -4097, rs1_h1_val == 8192
// opcode: psadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6dfff2000efff;  op2val:0xc0003ffffefffffc
TEST_RR_OP(psadd.h, x31, x30, x29, 0x0000000000000000, 0xfff6dfff2000efff, 0xc0003ffffefffffc, x1, 73*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 74*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
