
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Mon Jan 20 08:49:24 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv32ip_cgf/p17.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulq.h instruction of the RISC-V RV32PZicsr extension for the pmulq.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulq.h)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x17, rd==x21, rs1_h0_val == -32768, rs2_h0_val == -21846, rs2_h1_val == -21846, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val
// opcode: pmulq.h ; op1:x28; op2:x17; dest:x21; op1val:0xfffa8000;  op2val:0xaaaaaaaa
TEST_RR_OP(pmulq.h, x21, x28, x17, 0x00000000, 0xfffa8000, 0xaaaaaaaa, x7, 0*XLEN/8, x10)

inst_1:
// rs2 == rd != rs1, rs1==x20, rs2==x28, rd==x28, rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == -65
// opcode: pmulq.h ; op1:x20; op2:x28; dest:x28; op1val:0xffbfffff;  op2val:0x090100
TEST_RR_OP(pmulq.h, x28, x20, x28, 0x00000000, 0xffbfffff, 0x090100, x7, 1*XLEN/8, x10)

inst_2:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h0_val == 0, rs1_h1_val == -4097, rs2_h0_val == 32767, rs2_h1_val == -16385
// opcode: pmulq.h ; op1:x16; op2:x16; dest:x16; op1val:0xefff0000;  op2val:0xbfff7fff
TEST_RR_OP(pmulq.h, x16, x16, x16, 0x00000000, 0xefff0000, 0xbfff7fff, x7, 2*XLEN/8, x10)

inst_3:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x17, rs1_h0_val == 1, rs2_h0_val == -32768, rs2_h1_val == -1025, rs1_h1_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: pmulq.h ; op1:x2; op2:x2; dest:x17; op1val:0x2000001;  op2val:0xfbff8000
TEST_RR_OP(pmulq.h, x17, x2, x2, 0x00000000, 0x2000001, 0xfbff8000, x7, 3*XLEN/8, x10)

inst_4:
// rs1 == rd != rs2, rs1==x26, rs2==x1, rd==x26, rs1_h0_val == 32767, rs1_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 256
// opcode: pmulq.h ; op1:x26; op2:x1; dest:x26; op1val:0x407fff;  op2val:0x1000020
TEST_RR_OP(pmulq.h, x26, x26, x1, 0x00000000, 0x407fff, 0x1000020, x7, 4*XLEN/8, x10)

inst_5:
// rs1==x25, rs2==x24, rd==x18, rs1_h0_val == 2, rs2_h0_val == -1, rs1_h1_val == 0
// opcode: pmulq.h ; op1:x25; op2:x24; dest:x18; op1val:0x000002;  op2val:0xfffcffff
TEST_RR_OP(pmulq.h, x18, x25, x24, 0x00000000, 0x000002, 0xfffcffff, x7, 5*XLEN/8, x10)

inst_6:
// rs1==x18, rs2==x0, rd==x3, rs1_h0_val == 4, 
// opcode: pmulq.h ; op1:x18; op2:x0; dest:x3; op1val:0xfffc0004;  op2val:0xc0000100
TEST_RR_OP(pmulq.h, x3, x18, x0, 0x00000000, 0xfffc0004, 0xc0000100, x7, 6*XLEN/8, x10)

inst_7:
// rs1==x8, rs2==x22, rd==x20, rs1_h0_val == 8, rs2_h1_val == 16, rs1_h1_val == -33, rs2_h0_val == -3
// opcode: pmulq.h ; op1:x8; op2:x22; dest:x20; op1val:0xffdf0008;  op2val:0x10fffd
TEST_RR_OP(pmulq.h, x20, x8, x22, 0x00000000, 0xffdf0008, 0x10fffd, x7, 7*XLEN/8, x10)

inst_8:
// rs1==x21, rs2==x18, rd==x19, rs1_h0_val == 16, rs1_h1_val == 2
// opcode: pmulq.h ; op1:x21; op2:x18; dest:x19; op1val:0x020010;  op2val:0xaaaa3fff
TEST_RR_OP(pmulq.h, x19, x21, x18, 0x00000000, 0x020010, 0xaaaa3fff, x7, 8*XLEN/8, x10)

inst_9:
// rs1==x5, rs2==x14, rd==x29, rs1_h0_val == 32, rs1_h1_val == -8193, rs2_h1_val == -2
// opcode: pmulq.h ; op1:x5; op2:x14; dest:x29; op1val:0xdfff0020;  op2val:0xfffe7fff
TEST_RR_OP(pmulq.h, x29, x5, x14, 0x00000000, 0xdfff0020, 0xfffe7fff, x7, 9*XLEN/8, x10)

inst_10:
// rs1==x14, rs2==x3, rd==x8, rs1_h0_val == 64, rs1_h1_val == 32767, rs2_h0_val == -65, rs2_h1_val == -9
// opcode: pmulq.h ; op1:x14; op2:x3; dest:x8; op1val:0x7fff0040;  op2val:0xfff7ffbf
TEST_RR_OP(pmulq.h, x8, x14, x3, 0x00000000, 0x7fff0040, 0xfff7ffbf, x7, 10*XLEN/8, x10)

inst_11:
// rs1==x24, rs2==x31, rd==x14, rs1_h0_val == 128, rs2_h0_val == -33, rs1_h1_val == -17
// opcode: pmulq.h ; op1:x24; op2:x31; dest:x14; op1val:0xffef0080;  op2val:0xfffcffdf
TEST_RR_OP(pmulq.h, x14, x24, x31, 0x00000000, 0xffef0080, 0xfffcffdf, x7, 11*XLEN/8, x10)

inst_12:
// rs1==x1, rs2==x4, rd==x15, rs1_h0_val == 256, rs1_h1_val == -5, rs2_h0_val == 0, rs2_h1_val == 4096
// opcode: pmulq.h ; op1:x1; op2:x4; dest:x15; op1val:0xfffb0100;  op2val:0x10000000
TEST_RR_OP(pmulq.h, x15, x1, x4, 0x00000000, 0xfffb0100, 0x10000000, x7, 12*XLEN/8, x10)

inst_13:
// rs1==x17, rs2==x30, rd==x23, rs1_h0_val == 512, rs2_h0_val == 4096, rs1_h1_val == 4
// opcode: pmulq.h ; op1:x17; op2:x30; dest:x23; op1val:0x040200;  op2val:0x101000
TEST_RR_OP(pmulq.h, x23, x17, x30, 0x00000000, 0x040200, 0x101000, x7, 13*XLEN/8, x10)

inst_14:
// rs1==x9, rs2==x6, rd==x11, rs1_h0_val == 1024, rs1_h1_val == -513, rs2_h1_val == -8193, rs2_h0_val == 2048
// opcode: pmulq.h ; op1:x9; op2:x6; dest:x11; op1val:0xfdff0400;  op2val:0xdfff0800
TEST_RR_OP(pmulq.h, x11, x9, x6, 0x00000000, 0xfdff0400, 0xdfff0800, x7, 14*XLEN/8, x10)
RVTEST_SIGBASE(x14,signature_x14_0)

inst_15:
// rs1==x31, rs2==x13, rd==x0, rs1_h0_val == 2048, rs2_h1_val == -3
// opcode: pmulq.h ; op1:x31; op2:x13; dest:x0; op1val:0xfffc0800;  op2val:0xfffdfffd
TEST_RR_OP(pmulq.h, x0, x31, x13, 0x00000000, 0xfffc0800, 0xfffdfffd, x14, 0*XLEN/8, x16)

inst_16:
// rs1==x23, rs2==x12, rd==x2, rs1_h0_val == 4096, 
// opcode: pmulq.h ; op1:x23; op2:x12; dest:x2; op1val:0x7fff1000;  op2val:0xfffdfff8
TEST_RR_OP(pmulq.h, x2, x23, x12, 0x00000000, 0x7fff1000, 0xfffdfff8, x14, 1*XLEN/8, x16)

inst_17:
// rs1==x12, rs2==x11, rd==x25, rs1_h0_val == 8192, rs1_h1_val == 8192, rs2_h1_val == 64, rs2_h0_val == -4097
// opcode: pmulq.h ; op1:x12; op2:x11; dest:x25; op1val:0x20002000;  op2val:0x40efff
TEST_RR_OP(pmulq.h, x25, x12, x11, 0x00000000, 0x20002000, 0x40efff, x14, 2*XLEN/8, x16)

inst_18:
// rs1==x13, rs2==x29, rd==x1, rs1_h0_val == 16384, 
// opcode: pmulq.h ; op1:x13; op2:x29; dest:x1; op1val:0x7fff4000;  op2val:0xfff60800
TEST_RR_OP(pmulq.h, x1, x13, x29, 0x00000000, 0x7fff4000, 0xfff60800, x14, 3*XLEN/8, x16)

inst_19:
// rs1==x3, rs2==x15, rd==x27, rs1_h0_val == -2, rs1_h1_val == 16384
// opcode: pmulq.h ; op1:x3; op2:x15; dest:x27; op1val:0x4000fffe;  op2val:0x3ffffff8
TEST_RR_OP(pmulq.h, x27, x3, x15, 0x00000000, 0x4000fffe, 0x3ffffff8, x14, 4*XLEN/8, x16)

inst_20:
// rs1==x15, rs2==x25, rd==x6, rs1_h0_val == -3, rs2_h0_val == -16385
// opcode: pmulq.h ; op1:x15; op2:x25; dest:x6; op1val:0xc000fffd;  op2val:0x06bfff
TEST_RR_OP(pmulq.h, x6, x15, x25, 0x00000000, 0xc000fffd, 0x06bfff, x14, 5*XLEN/8, x16)

inst_21:
// rs1==x30, rs2==x10, rd==x5, rs1_h0_val == -5, rs2_h1_val == -2049, rs1_h1_val == 32
// opcode: pmulq.h ; op1:x30; op2:x10; dest:x5; op1val:0x20fffb;  op2val:0xf7fffff6
TEST_RR_OP(pmulq.h, x5, x30, x10, 0x00000000, 0x20fffb, 0xf7fffff6, x14, 6*XLEN/8, x16)

inst_22:
// rs1==x11, rs2==x5, rd==x12, rs1_h0_val == -9, rs2_h0_val == -2049
// opcode: pmulq.h ; op1:x11; op2:x5; dest:x12; op1val:0x200fff7;  op2val:0x1000f7ff
TEST_RR_OP(pmulq.h, x12, x11, x5, 0x00000000, 0x200fff7, 0x1000f7ff, x14, 7*XLEN/8, x16)

inst_23:
// rs1==x29, rs2==x7, rd==x9, rs1_h0_val == -17, rs2_h1_val == -129, rs1_h1_val == -21846
// opcode: pmulq.h ; op1:x29; op2:x7; dest:x9; op1val:0xaaaaffef;  op2val:0xff7f0100
TEST_RR_OP(pmulq.h, x9, x29, x7, 0x00000000, 0xaaaaffef, 0xff7f0100, x14, 8*XLEN/8, x16)

inst_24:
// rs1==x10, rs2==x27, rd==x22, rs1_h0_val == -33, rs2_h0_val == 16, rs2_h1_val == -1
// opcode: pmulq.h ; op1:x10; op2:x27; dest:x22; op1val:0xc000ffdf;  op2val:0xffff0010
TEST_RR_OP(pmulq.h, x22, x10, x27, 0x00000000, 0xc000ffdf, 0xffff0010, x14, 9*XLEN/8, x16)

inst_25:
// rs1==x6, rs2==x21, rd==x4, rs1_h0_val == -65, rs2_h0_val == -257
// opcode: pmulq.h ; op1:x6; op2:x21; dest:x4; op1val:0x02ffbf;  op2val:0xfffdfeff
TEST_RR_OP(pmulq.h, x4, x6, x21, 0x00000000, 0x02ffbf, 0xfffdfeff, x14, 10*XLEN/8, x16)

inst_26:
// rs1==x0, rs2==x9, rd==x31, rs1_h0_val == -129, rs1_h1_val == 4096
// opcode: pmulq.h ; op1:x0; op2:x9; dest:x31; op1val:0x1000ff7f;  op2val:0xc0000003
TEST_RR_OP(pmulq.h, x31, x0, x9, 0x00000000, 0x1000ff7f, 0xc0000003, x14, 11*XLEN/8, x16)

inst_27:
// rs1==x27, rs2==x19, rd==x13, rs1_h0_val == -257, 
// opcode: pmulq.h ; op1:x27; op2:x19; dest:x13; op1val:0x03feff;  op2val:0xfbfffffa
TEST_RR_OP(pmulq.h, x13, x27, x19, 0x00000000, 0x03feff, 0xfbfffffa, x14, 12*XLEN/8, x16)

inst_28:
// rs1==x19, rs2==x23, rd==x30, rs1_h0_val == -513, 
// opcode: pmulq.h ; op1:x19; op2:x23; dest:x30; op1val:0xaaaafdff;  op2val:0x03fffd
TEST_RR_OP(pmulq.h, x30, x19, x23, 0x00000000, 0xaaaafdff, 0x03fffd, x14, 13*XLEN/8, x16)

inst_29:
// rs1==x7, rs2==x20, rd==x10, rs1_h0_val == -1025, 
// opcode: pmulq.h ; op1:x7; op2:x20; dest:x10; op1val:0xfffafbff;  op2val:0xfbff0100
TEST_RR_OP(pmulq.h, x10, x7, x20, 0x00000000, 0xfffafbff, 0xfbff0100, x14, 14*XLEN/8, x16)

inst_30:
// rs1==x4, rs2==x8, rd==x7, rs1_h0_val == -2049, 
// opcode: pmulq.h ; op1:x4; op2:x8; dest:x7; op1val:0x02f7ff;  op2val:0x070000
TEST_RR_OP(pmulq.h, x7, x4, x8, 0x00000000, 0x02f7ff, 0x070000, x14, 15*XLEN/8, x16)

inst_31:
// rs1==x22, rs2==x26, rd==x24, rs1_h0_val == -4097, rs2_h0_val == -129
// opcode: pmulq.h ; op1:x22; op2:x26; dest:x24; op1val:0x20efff;  op2val:0xdfffff7f
TEST_RR_OP(pmulq.h, x24, x22, x26, 0x00000000, 0x20efff, 0xdfffff7f, x14, 16*XLEN/8, x16)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs1_h0_val == -8193, rs2_h1_val == -5
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff;  op2val:0xfffbff7f
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x20dfff, 0xfffbff7f, x1, 0*XLEN/8, x2)

inst_33:
// rs2_h1_val == -17, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x10002000;  op2val:0xffefff7f
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x10002000, 0xffefff7f, x1, 1*XLEN/8, x2)

inst_34:
// rs2_h1_val == -33, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x03fffc;  op2val:0xffdfffdf
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x03fffc, 0xffdfffdf, x1, 2*XLEN/8, x2)

inst_35:
// rs2_h1_val == -65, rs1_h1_val == -16385
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7;  op2val:0xffbfffbf
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xbffffff7, 0xffbfffbf, x1, 3*XLEN/8, x2)

inst_36:
// rs2_h1_val == -257, rs2_h0_val == -8193
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x04fff9;  op2val:0xfeffdfff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x04fff9, 0xfeffdfff, x1, 4*XLEN/8, x2)

inst_37:
// rs2_h1_val == -513, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000400;  op2val:0xfdffefff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x2000400, 0xfdffefff, x1, 5*XLEN/8, x2)

inst_38:
// rs2_h1_val == -4097, rs2_h0_val == 4, rs1_h1_val == 128
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x800080;  op2val:0xefff0004
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x800080, 0xefff0004, x1, 6*XLEN/8, x2)

inst_39:
// rs2_h1_val == 21845, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000040;  op2val:0x55550003
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x10000040, 0x55550003, x1, 7*XLEN/8, x2)

inst_40:
// rs1_h0_val == rs2_h0_val, rs2_h1_val == 1024
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x02fff9;  op2val:0x400fff9
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x02fff9, 0x400fff9, x1, 8*XLEN/8, x2)

inst_41:
// rs1_h1_val == rs2_h1_val, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x404000;  op2val:0x400800
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x404000, 0x400800, x1, 9*XLEN/8, x2)

inst_42:
// rs1_h0_val == -16385, rs2_h1_val == 2, rs2_h0_val == 16384
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x05bfff;  op2val:0x024000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x05bfff, 0x024000, x1, 10*XLEN/8, x2)

inst_43:
// rs1_h0_val == 21845, rs1_h1_val == 16, rs2_h0_val == -5
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x105555;  op2val:0x3ffffffb
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x105555, 0x3ffffffb, x1, 11*XLEN/8, x2)

inst_44:
// rs1_h0_val == -21846, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x09aaaa;  op2val:0x10000009
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x09aaaa, 0x10000009, x1, 12*XLEN/8, x2)

inst_45:
// rs1_h1_val == -32768, rs2_h1_val == 4, rs2_h0_val == 8
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffa;  op2val:0x040008
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x8000fffa, 0x040008, x1, 13*XLEN/8, x2)

inst_46:
// rs1_h1_val == -1, rs2_h0_val == -2
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff0020;  op2val:0xffeffffe
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xffff0020, 0xffeffffe, x1, 14*XLEN/8, x2)

inst_47:
// rs1_h1_val == 1, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x01fbff;  op2val:0xff7ffff8
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x01fbff, 0xff7ffff8, x1, 15*XLEN/8, x2)

inst_48:
// rs1_h1_val == 8, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fbff;  op2val:0x3fffaaaa
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x08fbff, 0x3fffaaaa, x1, 16*XLEN/8, x2)

inst_49:
// rs1_h1_val == 256, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fbff;  op2val:0x040000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x100fbff, 0x040000, x1, 17*XLEN/8, x2)

inst_50:
// rs1_h1_val == 1024, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x400ff7f;  op2val:0xfff7bfff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x400ff7f, 0xfff7bfff, x1, 18*XLEN/8, x2)

inst_51:
// rs1_h1_val == 2048, rs2_h1_val == 32
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0x200800
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x8000000, 0x200800, x1, 19*XLEN/8, x2)

inst_52:
// rs1_h1_val == -1025, rs2_h0_val == 2
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff9;  op2val:0x400002
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfbfffff9, 0x400002, x1, 20*XLEN/8, x2)

inst_53:
// rs1_h1_val == -2049, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7;  op2val:0xfff8ffdf
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xf7fffff7, 0xfff8ffdf, x1, 21*XLEN/8, x2)

inst_54:
// rs1_h1_val == 21845, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f;  op2val:0xf7ff0009
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x5555ff7f, 0xf7ff0009, x1, 22*XLEN/8, x2)

inst_55:
// rs2_h0_val == 1, rs2_h1_val == 0
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0040;  op2val:0x000001
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfffa0040, 0x000001, x1, 23*XLEN/8, x2)

inst_56:
// rs2_h0_val == 64, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf;  op2val:0xbfff0040
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xffefffdf, 0xbfff0040, x1, 24*XLEN/8, x2)

inst_57:
// rs2_h0_val == 128, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000feff;  op2val:0xf7ff0080
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xc000feff, 0xf7ff0080, x1, 25*XLEN/8, x2)

inst_58:
// rs2_h0_val == 512, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0080;  op2val:0xfff60200
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x7fff0080, 0xfff60200, x1, 26*XLEN/8, x2)

inst_59:
// rs1_h1_val == -2, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0xc000fff6
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfffe0008, 0xc000fff6, x1, 27*XLEN/8, x2)

inst_60:
// rs2_h0_val == 1024, rs2_h1_val == 128
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff1000;  op2val:0x800400
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xf7ff1000, 0x800400, x1, 28*XLEN/8, x2)

inst_61:
// rs2_h0_val == 8192, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x075555;  op2val:0xfff62000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x075555, 0xfff62000, x1, 29*XLEN/8, x2)

inst_62:
// rs2_h0_val == -9, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0x80fff7
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x4000000, 0x80fff7, x1, 30*XLEN/8, x2)

inst_63:
// rs1_h1_val == -129, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0x05fff7
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xff7fffff, 0x05fff7, x1, 31*XLEN/8, x2)

inst_64:
// rs2_h0_val == -513, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x400005;  op2val:0x02fdff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x400005, 0x02fdff, x1, 32*XLEN/8, x2)

inst_65:
// rs2_h0_val == -1025, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fff;  op2val:0x400fbff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xff7f7fff, 0x400fbff, x1, 33*XLEN/8, x2)

inst_66:
// rs2_h0_val == 21845, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc;  op2val:0xfffc5555
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xff7ffffc, 0xfffc5555, x1, 34*XLEN/8, x2)

inst_67:
// rs2_h1_val == -32768, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffc;  op2val:0x8000fff8
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xdffffffc, 0x8000fff8, x1, 35*XLEN/8, x2)

inst_68:
// rs2_h1_val == 1, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f;  op2val:0x01dfff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfdffff7f, 0x01dfff, x1, 36*XLEN/8, x2)

inst_69:
// rs2_h1_val == 32767, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb;  op2val:0x7fff0000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x04fffb, 0x7fff0000, x1, 37*XLEN/8, x2)

inst_70:
// rs1_h1_val == -257, rs2_h0_val == -17
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0400;  op2val:0xc000ffef
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfeff0400, 0xc000ffef, x1, 38*XLEN/8, x2)

inst_71:
// rs2_h1_val == 8, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffff7ff;  op2val:0x08fffe
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x3ffff7ff, 0x08fffe, x1, 39*XLEN/8, x2)

inst_72:
// rs1_h1_val == -3, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffd;  op2val:0x040100
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfffdfffd, 0x040100, x1, 40*XLEN/8, x2)

inst_73:
// rs2_h1_val == 512, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x800fffb;  op2val:0x2000002
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x800fffb, 0x2000002, x1, 41*XLEN/8, x2)

inst_74:
// rs1_h1_val == -9, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff;  op2val:0x03fffc
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfff7fbff, 0x03fffc, x1, 42*XLEN/8, x2)

inst_75:
// rs2_h1_val == 2048, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff4000;  op2val:0x800fffd
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xffff4000, 0x800fffd, x1, 43*XLEN/8, x2)

inst_76:
// rs2_h1_val == 8192, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x1002000;  op2val:0x20004000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x1002000, 0x20004000, x1, 44*XLEN/8, x2)

inst_77:
// rs2_h1_val == 16384, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffc;  op2val:0x40007fff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x7ffffffc, 0x40007fff, x1, 45*XLEN/8, x2)

inst_78:
// rs1_h0_val == 0, rs1_h1_val == -4097, rs2_h0_val == 32767, rs2_h1_val == -16385
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000;  op2val:0xbfff7fff
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xefff0000, 0xbfff7fff, x1, 46*XLEN/8, x2)

inst_79:
// rs1_h0_val == 1, rs2_h0_val == -32768, rs2_h1_val == -1025, rs1_h1_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000001;  op2val:0xfbff8000
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0x2000001, 0xfbff8000, x1, 47*XLEN/8, x2)

inst_80:
// rs1_h0_val == 4, 
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0004;  op2val:0xc0000100
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfffc0004, 0xc0000100, x1, 48*XLEN/8, x2)

inst_81:
// rs1_h0_val == 2048, rs2_h1_val == -3
// opcode: pmulq.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0800;  op2val:0xfffdfffd
TEST_RR_OP(pmulq.h, x31, x30, x29, 0x00000000, 0xfffc0800, 0xfffdfffd, x1, 49*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x14_0:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 50*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
