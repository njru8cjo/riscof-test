
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Mar 14 02:36:27 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmacc.w.heo instruction of the RISC-V RV64PZicsr extension for the pmacc.w.heo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmacc.w.heo)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x0, rs2==x6, rd==x6, rd_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w1_val == -8193, rs1_w0_val == -67108865, rs2_w0_val == 8388608, rs1_w1_val == 268435456, rd_w1_val == -524289, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmacc.w.heo ; op1:x0; op2:x6; dest:x6; op1val:0x10000000fbffffff;  op2val:0xffffdfff00800000
TEST_RD_RR_OP(pmacc.w.heo, x6, x0, x6, 0x0000000000000000, 0xfff7ffff80000000, 0x10000000fbffffff, 0xffffdfff00800000, x1, 0*XLEN/8, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x0, rd==x12, rd_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -8388609, rs1_w1_val == -1025, rs2_w0_val == 4, rd_w1_val == 131072, rs2_w1_val == 64
// opcode: pmacc.w.heo ; op1:x22; op2:x0; dest:x12; op1val:0xfffffbffff7fffff;  op2val:0x00004000000004
TEST_RD_RR_OP(pmacc.w.heo, x12, x22, x0, 0x0000000000000000, 0x020000ffffffff, 0xfffffbffff7fffff, 0x00004000000004, x1, 1*XLEN/8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x8, rd==x16, rd_w0_val == 0, rs1_w1_val == 131072, rs1_w0_val == -1431655766, rs2_w0_val == 0, rd_w1_val == 8192, rs2_w1_val == -129
// opcode: pmacc.w.heo ; op1:x16; op2:x8; dest:x16; op1val:0x020000aaaaaaaa;  op2val:0xffffff7f00000000
TEST_RD_RR_OP(pmacc.w.heo, x16, x16, x8, 0x0000000000000000, 0x00200000000000, 0x020000aaaaaaaa, 0xffffff7f00000000, x1, 2*XLEN/8, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rd_w0_val == 1, rs1_w0_val == -2147483648, rs2_w1_val == -131073, rs1_w1_val == 67108864, rs2_w0_val == -65, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: pmacc.w.heo ; op1:x4; op2:x4; dest:x4; op1val:0x400000080000000;  op2val:0xfffdffffffffffbf
TEST_RD_RR_OP(pmacc.w.heo, x4, x4, x4, 0x0000000000000000, 0xfffffffa00000001, 0x400000080000000, 0xfffdffffffffffbf, x1, 3*XLEN/8, x3)

inst_4:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x21, rd_w0_val == 2147483647, rd_w1_val == -5, rs1_w0_val == 1, rs2_w1_val == 4194304, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 512, rs2_w0_val == 128, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pmacc.w.heo ; op1:x18; op2:x18; dest:x21; op1val:0x00020000000001;  op2val:0x40000000000080
TEST_RD_RR_OP(pmacc.w.heo, x21, x18, x18, 0x0000000000000000, 0xfffffffb7fffffff, 0x00020000000001, 0x40000000000080, x1, 4*XLEN/8, x3)

inst_5:
// rs1==x25, rs2==x13, rd==x11, rd_w0_val == 2, rs1_w1_val < 0 and rs2_w1_val < 0, rd_w1_val == -3, rs1_w0_val == 268435456, rs1_w1_val == -1431655766, rs2_w1_val == -134217729, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: pmacc.w.heo ; op1:x25; op2:x13; dest:x11; op1val:0xaaaaaaaa10000000;  op2val:0xf7ffffffc0000000
TEST_RD_RR_OP(pmacc.w.heo, x11, x25, x13, 0x0000000000000000, 0xfffffffd00000002, 0xaaaaaaaa10000000, 0xf7ffffffc0000000, x1, 5*XLEN/8, x3)

inst_6:
// rs1==x6, rs2==x29, rd==x13, rd_w0_val == 4, rs2_w1_val == 4096, rs2_w0_val == -1048577, rs1_w0_val == -9, rd_w1_val == 64, rs1_w1_val == -513
// opcode: pmacc.w.heo ; op1:x6; op2:x29; dest:x13; op1val:0xfffffdfffffffff7;  op2val:0x001000ffefffff
TEST_RD_RR_OP(pmacc.w.heo, x13, x6, x29, 0x0000000000000000, 0x00004000000004, 0xfffffdfffffffff7, 0x001000ffefffff, x1, 6*XLEN/8, x3)

inst_7:
// rs1==x30, rs2==x31, rd==x7, rd_w0_val == 8, rs1_w1_val == -9, rs2_w1_val == 131072, rd_w1_val == -134217729, rs1_w0_val == 128
// opcode: pmacc.w.heo ; op1:x30; op2:x31; dest:x7; op1val:0xfffffff700000080;  op2val:0x0200003fffffff
TEST_RD_RR_OP(pmacc.w.heo, x7, x30, x31, 0x0000000000000000, 0xf7ffffff00000008, 0xfffffff700000080, 0x0200003fffffff, x1, 7*XLEN/8, x3)

inst_8:
// rs1==x21, rs2==x15, rd==x27, rd_w0_val == 16, rs2_w0_val == 8192, rs1_w0_val == 256, rd_w1_val == -129, rs1_w1_val == -32769
// opcode: pmacc.w.heo ; op1:x21; op2:x15; dest:x27; op1val:0xffff7fff00000100;  op2val:0xffffdfff00002000
TEST_RD_RR_OP(pmacc.w.heo, x27, x21, x15, 0x0000000000000000, 0xffffff7f00000010, 0xffff7fff00000100, 0xffffdfff00002000, x1, 8*XLEN/8, x3)

inst_9:
// rs1==x28, rs2==x22, rd==x15, rd_w0_val == 32, rs2_w0_val == 32, rs1_w0_val == 8388608, rs1_w1_val == 4096
// opcode: pmacc.w.heo ; op1:x28; op2:x22; dest:x15; op1val:0x00100000800000;  op2val:0xf7ffffff00000020
TEST_RD_RR_OP(pmacc.w.heo, x15, x28, x22, 0x0000000000000000, 0x00000300000020, 0x00100000800000, 0xf7ffffff00000020, x1, 9*XLEN/8, x3)

inst_10:
// rs1==x13, rs2==x17, rd==x10, rd_w0_val == 64, rs1_w0_val == -65537, rd_w1_val == -131073, rs1_w1_val == -2049, rs2_w1_val == -17, rs2_w0_val == -1025
// opcode: pmacc.w.heo ; op1:x13; op2:x17; dest:x10; op1val:0xfffff7fffffeffff;  op2val:0xffffffeffffffbff
TEST_RD_RR_OP(pmacc.w.heo, x10, x13, x17, 0x0000000000000000, 0xfffdffff00000040, 0xfffff7fffffeffff, 0xffffffeffffffbff, x1, 10*XLEN/8, x3)

inst_11:
// rs1==x14, rs2==x20, rd==x19, rd_w0_val == 128, rs2_w1_val == 1048576, rs1_w1_val == 16, rd_w1_val == -2097153
// opcode: pmacc.w.heo ; op1:x14; op2:x20; dest:x19; op1val:0x000010fffffff9;  op2val:0x100000fffffbff
TEST_RD_RR_OP(pmacc.w.heo, x19, x14, x20, 0x0000000000000000, 0xffdfffff00000080, 0x000010fffffff9, 0x100000fffffbff, x1, 11*XLEN/8, x3)

inst_12:
// rs1==x19, rs2==x28, rd==x8, rd_w0_val == 256, rs2_w1_val == -524289
// opcode: pmacc.w.heo ; op1:x19; op2:x28; dest:x8; op1val:0xfffffff7aaaaaaaa;  op2val:0xfff7ffff00002000
TEST_RD_RR_OP(pmacc.w.heo, x8, x19, x28, 0x0000000000000000, 0xfffffffc00000100, 0xfffffff7aaaaaaaa, 0xfff7ffff00002000, x1, 12*XLEN/8, x3)

inst_13:
// rs1==x26, rs2==x23, rd==x2, rd_w0_val == 512, rs1_w0_val == 32, rs2_w1_val == -536870913, rd_w1_val == 4194304, rs1_w1_val == -4097, rs2_w0_val == -2049
// opcode: pmacc.w.heo ; op1:x26; op2:x23; dest:x2; op1val:0xffffefff00000020;  op2val:0xdffffffffffff7ff
TEST_RD_RR_OP(pmacc.w.heo, x2, x26, x23, 0x0000000000000000, 0x40000000000200, 0xffffefff00000020, 0xdffffffffffff7ff, x1, 13*XLEN/8, x3)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x10, rs2==x11, rd==x22, rd_w0_val == 1024, rs2_w0_val == -536870913, rs1_w0_val == -33554433, rs2_w1_val == 8388608
// opcode: pmacc.w.heo ; op1:x10; op2:x11; dest:x22; op1val:0xfffffbfffdffffff;  op2val:0x800000dfffffff
TEST_RD_RR_OP(pmacc.w.heo, x22, x10, x11, 0x0000000000000000, 0x00000900000400, 0xfffffbfffdffffff, 0x800000dfffffff, x4, 0*XLEN/8, x6)

inst_15:
// rs1==x2, rs2==x1, rd==x18, rd_w0_val == 2048, rs2_w0_val == 1, rd_w1_val == 2097152, rs1_w0_val == 2
// opcode: pmacc.w.heo ; op1:x2; op2:x1; dest:x18; op1val:0xfffff7ff00000002;  op2val:0x00000700000001
TEST_RD_RR_OP(pmacc.w.heo, x18, x2, x1, 0x0000000000000000, 0x20000000000800, 0xfffff7ff00000002, 0x00000700000001, x4, 1*XLEN/8, x6)

inst_16:
// rs1==x15, rs2==x30, rd==x0, rd_w0_val == 4096, rs2_w0_val == 4096, rs1_w1_val == 128, rs2_w1_val == -32769, rd_w1_val == -257
// opcode: pmacc.w.heo ; op1:x15; op2:x30; dest:x0; op1val:0x000080fffeffff;  op2val:0xffff7fff00001000
TEST_RD_RR_OP(pmacc.w.heo, x0, x15, x30, 0x0000000000000000, 0xfffffeff00001000, 0x000080fffeffff, 0xffff7fff00001000, x4, 2*XLEN/8, x6)

inst_17:
// rs1==x23, rs2==x14, rd==x28, rd_w0_val == 8192, rs2_w1_val == 256, rs1_w1_val == 2097152, rd_w1_val == 32768, rs2_w0_val == 8, rs1_w0_val == 65536
// opcode: pmacc.w.heo ; op1:x23; op2:x14; dest:x28; op1val:0x20000000010000;  op2val:0x00010000000008
TEST_RD_RR_OP(pmacc.w.heo, x28, x23, x14, 0x0000000000000000, 0x00800000002000, 0x20000000010000, 0x00010000000008, x4, 3*XLEN/8, x6)

inst_18:
// rs1==x1, rs2==x12, rd==x5, rd_w0_val == 16384, rs2_w0_val == -134217729, rd_w1_val == 512, rs1_w1_val == 32, rs1_w0_val == 512, rs2_w1_val == 2147483647
// opcode: pmacc.w.heo ; op1:x1; op2:x12; dest:x5; op1val:0x00002000000200;  op2val:0x7ffffffff7ffffff
TEST_RD_RR_OP(pmacc.w.heo, x5, x1, x12, 0x0000000000000000, 0x00020000004000, 0x00002000000200, 0x7ffffffff7ffffff, x4, 4*XLEN/8, x6)

inst_19:
// rs1==x31, rs2==x25, rd==x26, rd_w0_val == 32768, rs1_w0_val == 1048576, rs1_w1_val == 16777216, rd_w1_val == 0
// opcode: pmacc.w.heo ; op1:x31; op2:x25; dest:x26; op1val:0x100000000100000;  op2val:0x10000000000080
TEST_RD_RR_OP(pmacc.w.heo, x26, x31, x25, 0x0000000000000000, 0x00000000008000, 0x100000000100000, 0x10000000000080, x4, 5*XLEN/8, x6)

inst_20:
// rs1==x29, rs2==x3, rd==x1, rd_w0_val == 65536, rs1_w0_val == -16385, rs2_w1_val == -67108865, rs1_w1_val == -5, rs2_w0_val == -524289
// opcode: pmacc.w.heo ; op1:x29; op2:x3; dest:x1; op1val:0xfffffffbffffbfff;  op2val:0xfbfffffffff7ffff
TEST_RD_RR_OP(pmacc.w.heo, x1, x29, x3, 0x0000000000000000, 0xfffffff900010000, 0xfffffffbffffbfff, 0xfbfffffffff7ffff, x4, 6*XLEN/8, x6)

inst_21:
// rs1==x8, rs2==x16, rd==x14, rd_w0_val == 131072, rs1_w1_val == -131073, rs1_w0_val == 64, rd_w1_val == 1048576, rs2_w1_val == 1073741824
// opcode: pmacc.w.heo ; op1:x8; op2:x16; dest:x14; op1val:0xfffdffff00000040;  op2val:0x4000000000000020
TEST_RD_RR_OP(pmacc.w.heo, x14, x8, x16, 0x0000000000000000, 0x10000000020000, 0xfffdffff00000040, 0x4000000000000020, x4, 7*XLEN/8, x6)

inst_22:
// rs1==x17, rs2==x26, rd==x3, rd_w0_val == 262144, rd_w1_val == 33554432, rs1_w1_val == 2048
// opcode: pmacc.w.heo ; op1:x17; op2:x26; dest:x3; op1val:0x000800fffffff6;  op2val:0x00100000000007
TEST_RD_RR_OP(pmacc.w.heo, x3, x17, x26, 0x0000000000000000, 0x200000000040000, 0x000800fffffff6, 0x00100000000007, x4, 8*XLEN/8, x6)

inst_23:
// rs1==x5, rs2==x10, rd==x17, rd_w0_val == 524288, rs1_w1_val == 1024, rs2_w0_val == 33554432
// opcode: pmacc.w.heo ; op1:x5; op2:x10; dest:x17; op1val:0x000400fdffffff;  op2val:0x00000702000000
TEST_RD_RR_OP(pmacc.w.heo, x17, x5, x10, 0x0000000000000000, 0x40000000080000, 0x000400fdffffff, 0x00000702000000, x4, 9*XLEN/8, x6)

inst_24:
// rs1==x24, rs2==x9, rd==x31, rd_w0_val == 1048576, rs1_w0_val == -2097153, rs1_w1_val == 262144, rd_w1_val == 1
// opcode: pmacc.w.heo ; op1:x24; op2:x9; dest:x31; op1val:0x040000ffdfffff;  op2val:0xffffff7f00800000
TEST_RD_RR_OP(pmacc.w.heo, x31, x24, x9, 0x0000000000000000, 0x00000100100000, 0x040000ffdfffff, 0xffffff7f00800000, x4, 10*XLEN/8, x6)

inst_25:
// rs1==x12, rs2==x2, rd==x9, rd_w0_val == 2097152, rs2_w0_val == -1431655766, rd_w1_val == 16384
// opcode: pmacc.w.heo ; op1:x12; op2:x2; dest:x9; op1val:0x400000080000000;  op2val:0x800000aaaaaaaa
TEST_RD_RR_OP(pmacc.w.heo, x9, x12, x2, 0x0000000000000000, 0x00400000200000, 0x400000080000000, 0x800000aaaaaaaa, x4, 11*XLEN/8, x6)

inst_26:
// rs1==x11, rs2==x19, rd==x23, rd_w0_val == 4194304, rs2_w1_val == -2097153, rs1_w1_val == -2147483648, rs2_w0_val == 256, rs1_w0_val == -134217729
// opcode: pmacc.w.heo ; op1:x11; op2:x19; dest:x23; op1val:0x80000000f7ffffff;  op2val:0xffdfffff00000100
TEST_RD_RR_OP(pmacc.w.heo, x23, x11, x19, 0x0000000000000000, 0xf7ffffff00400000, 0x80000000f7ffffff, 0xffdfffff00000100, x4, 12*XLEN/8, x6)

inst_27:
// rs1==x7, rs2==x27, rd==x24, rd_w0_val == 8388608, rs2_w0_val == -2, rs2_w1_val == -16385, rs1_w1_val == -257
// opcode: pmacc.w.heo ; op1:x7; op2:x27; dest:x24; op1val:0xfffffeff00000003;  op2val:0xffffbffffffffffe
TEST_RD_RR_OP(pmacc.w.heo, x24, x7, x27, 0x0000000000000000, 0xc000000000800000, 0xfffffeff00000003, 0xffffbffffffffffe, x4, 13*XLEN/8, x6)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_28:
// rs1==x3, rs2==x24, rd==x25, rd_w0_val == 16777216, rs2_w0_val == -16385, rs1_w1_val == -262145, rs2_w1_val == 16384, rs1_w0_val == -1, rd_w1_val == -16385
// opcode: pmacc.w.heo ; op1:x3; op2:x24; dest:x25; op1val:0xfffbffffffffffff;  op2val:0x004000ffffbfff
TEST_RD_RR_OP(pmacc.w.heo, x25, x3, x24, 0x0000000000000000, 0xffffbfff01000000, 0xfffbffffffffffff, 0x004000ffffbfff, x1, 0*XLEN/8, x2)

inst_29:
// rs1==x9, rs2==x5, rd==x29, rd_w0_val == 33554432, rs1_w0_val == -129, rs2_w0_val == 1073741824, rs2_w1_val == 1, rd_w1_val == -65537
// opcode: pmacc.w.heo ; op1:x9; op2:x5; dest:x29; op1val:0xfffffffaffffff7f;  op2val:0x00000140000000
TEST_RD_RR_OP(pmacc.w.heo, x29, x9, x5, 0x0000000000000000, 0xfffeffff02000000, 0xfffffffaffffff7f, 0x00000140000000, x1, 1*XLEN/8, x2)

inst_30:
// rs1==x27, rs2==x7, rd==x30, rd_w0_val == 67108864, rs2_w0_val == 1024
// opcode: pmacc.w.heo ; op1:x27; op2:x7; dest:x30; op1val:0xfffffeff00000200;  op2val:0x3fffffff00000400
TEST_RD_RR_OP(pmacc.w.heo, x30, x27, x7, 0x0000000000000000, 0xffdfffff04000000, 0xfffffeff00000200, 0x3fffffff00000400, x1, 2*XLEN/8, x2)

inst_31:
// rs1==x20, rd_w0_val == 134217728, rs2_w0_val == 536870912, rs1_w1_val == -16777217
// opcode: pmacc.w.heo ; op1:x20; op2:x14; dest:x30; op1val:0xfeffffff3fffffff;  op2val:0x00000620000000
TEST_RD_RR_OP(pmacc.w.heo, x30, x20, x14, 0x0000000000000000, 0x00400008000000, 0xfeffffff3fffffff, 0x00000620000000, x1, 3*XLEN/8, x2)

inst_32:
// rs2==x21, rd_w0_val == 268435456, rs2_w0_val == -2097153, rs2_w1_val == -65537, rd_w1_val == -536870913, rs1_w0_val == -17
// opcode: pmacc.w.heo ; op1:x22; op2:x21; dest:x18; op1val:0xfffffffaffffffef;  op2val:0xfffeffffffdfffff
TEST_RD_RR_OP(pmacc.w.heo, x18, x22, x21, 0x0000000000000000, 0xdfffffff10000000, 0xfffffffaffffffef, 0xfffeffffffdfffff, x1, 4*XLEN/8, x2)

inst_33:
// rd==x20, rd_w0_val == 536870912, rs1_w1_val == -67108865, rs1_w0_val == 4
// opcode: pmacc.w.heo ; op1:x16; op2:x6; dest:x20; op1val:0xfbffffff00000004;  op2val:0x00000500002000
TEST_RD_RR_OP(pmacc.w.heo, x20, x16, x6, 0x0000000000000000, 0x00004020000000, 0xfbffffff00000004, 0x00000500002000, x1, 5*XLEN/8, x2)

inst_34:
// rd_w0_val == 1073741824, rs1_w0_val == -4194305, rs2_w0_val == -257, rd_w1_val == 1431655765
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffbfffff;  op2val:0x000100fffffeff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0xfffffffcffbfffff, 0x000100fffffeff, x1, 6*XLEN/8, x2)

inst_35:
// rd_w0_val == -2, rd_w1_val == -262145, rs1_w0_val == 2147483647, rs1_w1_val == -2
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe7fffffff;  op2val:0xffffffef00000005
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffe, 0xfffffffe7fffffff, 0xffffffef00000005, x1, 7*XLEN/8, x2)

inst_36:
// rd_w0_val == -3, rd_w1_val == 2, rs1_w0_val == 1431655765, rs2_w1_val == -4194305, rs1_w1_val == 2, rs2_w0_val == 1431655765, rs1_w0_val == rs2_w0_val
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000255555555;  op2val:0xffbfffff55555555
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000002fffffffd, 0x00000255555555, 0xffbfffff55555555, x1, 8*XLEN/8, x2)

inst_37:
// rd_w0_val == -5, rs1_w0_val == 8192, rd_w1_val == -65
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000000002000;  op2val:0xffff7fff00002000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffb, 0x04000000002000, 0xffff7fff00002000, x1, 9*XLEN/8, x2)

inst_38:
// rd_w0_val == -9, rs2_w0_val == 64, rs2_w1_val == 262144, rd_w1_val == 8388608
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffffa;  op2val:0x04000000000040
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x800000fffffff7, 0x000009fffffffa, 0x04000000000040, x1, 10*XLEN/8, x2)

inst_39:
// rd_w0_val == -17, rs2_w1_val == 512, rs1_w0_val == -524289
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffff7ffff;  op2val:0x000200ffffbfff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffef, 0xffff7ffffff7ffff, 0x000200ffffbfff, x1, 11*XLEN/8, x2)

inst_40:
// rd_w0_val == -33, rs1_w0_val == -1048577
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffefffff;  op2val:0x00020000000007
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x3fffffffffffffdf, 0xfffff7ffffefffff, 0x00020000000007, x1, 12*XLEN/8, x2)

inst_41:
// rd_w0_val == -65, rd_w1_val == 16777216, rs1_w0_val == -8193
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffdfff;  op2val:0xdfffffff00000400
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffbf, 0xfffffff9ffffdfff, 0xdfffffff00000400, x1, 13*XLEN/8, x2)

inst_42:
// rd_w0_val == -129, rs2_w1_val == -513, rd_w1_val == -67108865
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x0008007fffffff;  op2val:0xfffffdff00000008
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffff7f, 0x0008007fffffff, 0xfffffdff00000008, x1, 14*XLEN/8, x2)

inst_43:
// rd_w0_val == -257, rs2_w1_val == 33554432, rd_w1_val == -1073741825, rs1_w1_val == 0
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000000ff7fffff;  op2val:0x20000003fffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffeff, 0x000000ff7fffff, 0x20000003fffffff, x1, 15*XLEN/8, x2)

inst_44:
// rd_w0_val == -513, rs1_w1_val == -3, rd_w1_val == 536870912
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdaaaaaaaa;  op2val:0x3fffffff00800000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x20000000fffffdff, 0xfffffffdaaaaaaaa, 0x3fffffff00800000, x1, 16*XLEN/8, x2)

inst_45:
// rd_w0_val == -1025, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffff7;  op2val:0xffffdfffffdfffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003fffffbff, 0x000400fffffff7, 0xffffdfffffdfffff, x1, 17*XLEN/8, x2)

inst_46:
// rd_w0_val == -2049, rd_w1_val == 256, rs2_w1_val == 524288
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000001;  op2val:0x08000000000009
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000100fffff7ff, 0x3fffffff00000001, 0x08000000000009, x1, 18*XLEN/8, x2)

inst_47:
// rd_w0_val == -4097, rd_w1_val == -2049, rs2_w1_val == -268435457, rs1_w1_val == -1
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000009;  op2val:0xefffffffffffbfff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffefff, 0xffffffff00000009, 0xefffffffffffbfff, x1, 19*XLEN/8, x2)

inst_48:
// rd_w0_val == -8193, rd_w1_val == 65536, rs2_w1_val == 8192, rs1_w1_val == -65537
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffbfff;  op2val:0x00200000000100
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x010000ffffdfff, 0xfffeffffffffbfff, 0x00200000000100, x1, 20*XLEN/8, x2)

inst_49:
// rd_w0_val == -16385, rs2_w1_val == -1431655766, rd_w1_val == -33, rs1_w0_val == -268435457
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffefffffff;  op2val:0xaaaaaaaafffffff6
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffbfff, 0xfffffbffefffffff, 0xaaaaaaaafffffff6, x1, 21*XLEN/8, x2)

inst_50:
// rd_w0_val == -32769, rs2_w1_val == 134217728, rs2_w0_val == 65536, rs1_w0_val == -262145
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffbffff;  op2val:0x800000000010000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffff7fff, 0x000009fffbffff, 0x800000000010000, x1, 22*XLEN/8, x2)

inst_51:
// rd_w0_val == -65537, rs1_w0_val == -3, rs1_w1_val == -536870913
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffd;  op2val:0x00000100001000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffeffff, 0xdffffffffffffffd, 0x00000100001000, x1, 23*XLEN/8, x2)

inst_52:
// rd_w0_val == -131073, rs2_w1_val == 32768
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffffef;  op2val:0x008000fffffff8
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000fffdffff, 0x000020ffffffef, 0x008000fffffff8, x1, 24*XLEN/8, x2)

inst_53:
// rd_w0_val == -262145, rs2_w0_val == 16, rs1_w0_val == -5
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffffb;  op2val:0xfbffffff00000010
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003fffbffff, 0xfffffdfffffffffb, 0xfbffffff00000010, x1, 25*XLEN/8, x2)

inst_54:
// rd_w0_val == -524289, rs1_w1_val == 8388608
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x800000efffffff;  op2val:0x00004000000080
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000007fff7ffff, 0x800000efffffff, 0x00004000000080, x1, 26*XLEN/8, x2)

inst_55:
// rd_w0_val == -1048577, rs1_w0_val == 1073741824, rd_w1_val == 4, rs2_w0_val == -131073, rs1_w1_val == 1431655765
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0xeffffffffffdffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004ffefffff, 0x5555555540000000, 0xeffffffffffdffff, x1, 27*XLEN/8, x2)

inst_56:
// rd_w0_val == -2097153, rs2_w0_val == 2097152, rs1_w0_val == -2
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffe;  op2val:0xffffdfff00200000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffdfffff, 0xc0000000fffffffe, 0xffffdfff00200000, x1, 28*XLEN/8, x2)

inst_57:
// rd_w0_val == -4194305, rs2_w1_val == -9, rs1_w1_val == -268435457, rs2_w0_val == -33554433
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000002;  op2val:0xfffffff7fdffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040ffbfffff, 0xefffffff00000002, 0xfffffff7fdffffff, x1, 29*XLEN/8, x2)

inst_58:
// rd_w0_val == -8388609, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000000800000;  op2val:0xffdffffffffffff8
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7fff7fffff, 0x04000000800000, 0xffdffffffffffff8, x1, 30*XLEN/8, x2)

inst_59:
// rd_w0_val == -16777217, rs2_w1_val == 2048, rs1_w1_val == 8192, rs1_w0_val == -2049
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffff7ff;  op2val:0x000800fffffeff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x200000feffffff, 0x002000fffff7ff, 0x000800fffffeff, x1, 31*XLEN/8, x2)

inst_60:
// rd_w0_val == -33554433, rs2_w1_val == 16777216, rs2_w0_val == 512, rd_w1_val == -1431655766
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff3fffffff;  op2val:0x100000000000200
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafdffffff, 0xffffffff3fffffff, 0x100000000000200, x1, 32*XLEN/8, x2)

inst_61:
// rd_w0_val == -67108865, rd_w1_val == -4097, rs1_w1_val == 536870912
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x20000000aaaaaaaa;  op2val:0xaaaaaaaa00000008
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffeffffbffffff, 0x20000000aaaaaaaa, 0xaaaaaaaa00000008, x1, 33*XLEN/8, x2)

inst_62:
// rd_w0_val == -134217729, rd_w1_val == -33554433, rs2_w0_val == 16384, rs2_w1_val == 67108864
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffbfffff;  op2val:0x400000000004000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfdfffffff7ffffff, 0xfffffffdffbfffff, 0x400000000004000, x1, 34*XLEN/8, x2)

inst_63:
// rd_w0_val == -268435457, rs2_w1_val == 0, rs2_w0_val == -17
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000002;  op2val:0x000000ffffffef
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000001efffffff, 0x00000300000002, 0x000000ffffffef, x1, 35*XLEN/8, x2)

inst_64:
// rd_w0_val == -536870913, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000040;  op2val:0x000006dfffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000dfffffff, 0x00020000000040, 0x000006dfffffff, x1, 36*XLEN/8, x2)

inst_65:
// rd_w0_val == -1073741825, rd_w1_val == -8193, rs2_w0_val == -3
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffbffffff;  op2val:0x001000fffffffd
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffdfffbfffffff, 0xeffffffffbffffff, 0x001000fffffffd, x1, 37*XLEN/8, x2)

inst_66:
// rd_w0_val == 1431655765, rs2_w0_val == 268435456, rs1_w0_val == 2097152, rs2_w1_val == -2147483648
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700200000;  op2val:0x8000000010000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffb55555555, 0xfffffff700200000, 0x8000000010000000, x1, 38*XLEN/8, x2)

inst_67:
// rd_w0_val == -1431655766, rs1_w0_val == -131073
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffdffff;  op2val:0xfffffff800200000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffbaaaaaaaa, 0xfffffff6fffdffff, 0xfffffff800200000, x1, 39*XLEN/8, x2)

inst_68:
// rd_w1_val == -2147483648, rs1_w1_val == -8388609
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffdfffff;  op2val:0xfffffff9fffffff8
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000ffff7fff, 0xff7fffffffdfffff, 0xfffffff9fffffff8, x1, 40*XLEN/8, x2)

inst_69:
// rd_w1_val == -1, rs1_w0_val == -32769, rs2_w1_val == -1048577
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffff7fff;  op2val:0xffefffff00004000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffff00080000, 0x4000000ffff7fff, 0xffefffff00004000, x1, 41*XLEN/8, x2)

inst_70:
// rd_w1_val == 2147483647, rs2_w1_val == -262145
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffff7f;  op2val:0xfffbffff00000040
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffff8, 0x80000000ffffff7f, 0xfffbffff00000040, x1, 42*XLEN/8, x2)

inst_71:
// rd_w1_val == 8, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7c0000000;  op2val:0x8000000000000080
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000008fffffff7, 0xfffffff7c0000000, 0x8000000000000080, x1, 43*XLEN/8, x2)

inst_72:
// rd_w1_val == 16, rs1_w1_val == 8, rs1_w0_val == 2048
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000800;  op2val:0xfffffff800000400
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00001000000080, 0x00000800000800, 0xfffffff800000400, x1, 44*XLEN/8, x2)

inst_73:
// rd_w1_val == 32, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ff7fffff;  op2val:0x80000000fffffffd
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000020bfffffff, 0xc0000000ff7fffff, 0x80000000fffffffd, x1, 45*XLEN/8, x2)

inst_74:
// rd_w1_val == 128, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000006;  op2val:0x00100000000005
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000080ffffdfff, 0xfffffffe00000006, 0x00100000000005, x1, 46*XLEN/8, x2)

inst_75:
// rd_w1_val == 1024, rs1_w1_val == 1048576
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000001;  op2val:0xfffffffafffffff8
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00040004000000, 0x10000000000001, 0xfffffffafffffff8, x1, 47*XLEN/8, x2)

inst_76:
// rd_w1_val == 2048, rs2_w0_val == -2147483648, rs2_w1_val == -16777217
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffff7ff;  op2val:0xfeffffff80000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800fffffffb, 0xaaaaaaaafffff7ff, 0xfeffffff80000000, x1, 48*XLEN/8, x2)

inst_77:
// rs1_w1_val == -524289, rd_w1_val == -16777217
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffff9;  op2val:0xfeffffffffffbfff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0xfff7fffffffffff9, 0xfeffffffffffbfff, x1, 49*XLEN/8, x2)

inst_78:
// rs1_w1_val == -1048577, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffaaaaaaaa;  op2val:0x00000980000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x5555555500000005, 0xffefffffaaaaaaaa, 0x00000980000000, x1, 50*XLEN/8, x2)

inst_79:
// rs1_w1_val == -2097153, rs2_w0_val == -513
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffff7;  op2val:0x002000fffffdff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff600200000, 0xffdffffffffffff7, 0x002000fffffdff, x1, 51*XLEN/8, x2)

inst_80:
// rs1_w1_val == -4194305, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffefffffff;  op2val:0x020000ffffbfff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00800000200000, 0xffbfffffefffffff, 0x020000ffffbfff, x1, 52*XLEN/8, x2)

inst_81:
// rs1_w1_val == -33554433, rs2_w1_val == -65
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000005;  op2val:0xffffffbffffdffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000600000020, 0xfdffffff00000005, 0xffffffbffffdffff, x1, 53*XLEN/8, x2)

inst_82:
// rs1_w1_val == -134217729, rs1_w0_val == -1025
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffbff;  op2val:0xfffffdffffffffef
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040fff7ffff, 0xf7fffffffffffbff, 0xfffffdffffffffef, x1, 54*XLEN/8, x2)

inst_83:
// rs1_w1_val == -1073741825, rs2_w0_val == 67108864
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000002;  op2val:0xefffffff04000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000000000007, 0xbfffffff00000002, 0xefffffff04000000, x1, 55*XLEN/8, x2)

inst_84:
// rs2_w0_val == -1, rs2_w1_val == 2
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000080;  op2val:0x000002ffffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xbfffffff00080000, 0x00000600000080, 0x000002ffffffff, x1, 56*XLEN/8, x2)

inst_85:
// rs2_w0_val == 2147483647, rs1_w1_val == 1073741824
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffff7fff;  op2val:0xc00000007fffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000200ffffefff, 0x40000000ffff7fff, 0xc00000007fffffff, x1, 57*XLEN/8, x2)

inst_86:
// rs2_w0_val == 2, rs2_w1_val == -257
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000009;  op2val:0xfffffeff00000002
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000fffdffff, 0xfdffffff00000009, 0xfffffeff00000002, x1, 58*XLEN/8, x2)

inst_87:
// rs2_w0_val == 2048, rs2_w1_val == 8
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000006;  op2val:0x00000800000800
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0xfbffffff00000006, 0x00000800000800, x1, 59*XLEN/8, x2)

inst_88:
// rs2_w0_val == 32768, rs1_w0_val == 536870912
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff20000000;  op2val:0xffbfffff00008000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x7fffffff00020000, 0xfff7ffff20000000, 0xffbfffff00008000, x1, 60*XLEN/8, x2)

inst_89:
// rs2_w0_val == 131072, rs1_w0_val == 16777216
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff01000000;  op2val:0x80000000020000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000007fff7ffff, 0xefffffff01000000, 0x80000000020000, x1, 61*XLEN/8, x2)

inst_90:
// rs2_w0_val == 262144, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff6;  op2val:0xfeffffff00040000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x004000bfffffff, 0x001000fffffff6, 0xfeffffff00040000, x1, 62*XLEN/8, x2)

inst_91:
// rs2_w0_val == 524288, rs2_w1_val == -5
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffbffff;  op2val:0xfffffffb00080000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000002fbffffff, 0x000006fffbffff, 0xfffffffb00080000, x1, 63*XLEN/8, x2)

inst_92:
// rs2_w0_val == 1048576, rd_w1_val == -17, rs1_w0_val == 1024
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000400;  op2val:0xfffeffff00100000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffdf, 0xfffffdff00000400, 0xfffeffff00100000, x1, 64*XLEN/8, x2)

inst_93:
// rs2_w0_val == 4194304, rs2_w1_val == -2049, rs1_w0_val == 524288
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500080000;  op2val:0xfffff7ff00400000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00002000000003, 0x5555555500080000, 0xfffff7ff00400000, x1, 65*XLEN/8, x2)

inst_94:
// rs2_w0_val == 16777216, rd_w1_val == 134217728
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffe;  op2val:0x7fffffff01000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000fffbffff, 0x1000000fffffffe, 0x7fffffff01000000, x1, 66*XLEN/8, x2)

inst_95:
// rs2_w0_val == 134217728, rs1_w1_val == 4
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000400800000;  op2val:0xdfffffff08000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00020000002000, 0x00000400800000, 0xdfffffff08000000, x1, 67*XLEN/8, x2)

inst_96:
// rs2_w0_val == -5, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffffc;  op2val:0xffdffffffffffffb
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000100000006, 0xfffffbfffffffffc, 0xffdffffffffffffb, x1, 68*XLEN/8, x2)

inst_97:
// rs2_w0_val == -9, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000800;  op2val:0x100000fffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbffffffffbfffff, 0x100000000000800, 0x100000fffffff7, x1, 69*XLEN/8, x2)

inst_98:
// rs2_w0_val == -33, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000002;  op2val:0x020000ffffffdf
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000f7ffffff, 0x00000000000002, 0x020000ffffffdf, x1, 70*XLEN/8, x2)

inst_99:
// rs2_w0_val == -129, rs1_w1_val == -16385, rd_w1_val == -2
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffbffffff;  op2val:0x40000000ffffff7f
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000040, 0xffffbffffbffffff, 0x40000000ffffff7f, x1, 71*XLEN/8, x2)

inst_100:
// rs2_w0_val == -4097, rs2_w1_val == -1025, rs1_w0_val == -65, rs1_w1_val == 16384
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffbf;  op2val:0xfffffbffffffefff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000000fffffff6, 0x004000ffffffbf, 0xfffffbffffffefff, x1, 72*XLEN/8, x2)

inst_101:
// rs2_w0_val == -8193, rs2_w1_val == 65536, rs1_w1_val == 524288
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000c0000000;  op2val:0x010000ffffdfff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040ffffffbf, 0x080000c0000000, 0x010000ffffdfff, x1, 73*XLEN/8, x2)

inst_102:
// rs2_w0_val == -32769, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000020;  op2val:0xffefffffffff7fff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000007fffffdff, 0xfffff7ff00000020, 0xffefffffffff7fff, x1, 74*XLEN/8, x2)

inst_103:
// rs2_w0_val == -65537, rd_w1_val == -9
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00008001000000;  op2val:0x000200fffeffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff700000001, 0x00008001000000, 0x000200fffeffff, x1, 75*XLEN/8, x2)

inst_104:
// rs2_w0_val == -262145, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffff6;  op2val:0xfffbfffffffbffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000002ffffbfff, 0xffff7ffffffffff6, 0xfffbfffffffbffff, x1, 76*XLEN/8, x2)

inst_105:
// rs2_w0_val == -4194305, rs1_w1_val == 2147483647, rs2_w1_val == -8388609
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffbf;  op2val:0xff7fffffffbfffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000008000, 0x7fffffffffffffbf, 0xff7fffffffbfffff, x1, 77*XLEN/8, x2)

inst_106:
// rs2_w0_val == -8388609, rd_w1_val == -268435457
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00100000;  op2val:0xffffdfffff7fffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffb, 0xffffbfff00100000, 0xffffdfffff7fffff, x1, 78*XLEN/8, x2)

inst_107:
// rs2_w0_val == -16777217, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff55555555;  op2val:0xfffffdfffeffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000ffff7fff, 0xfeffffff55555555, 0xfffffdfffeffffff, x1, 79*XLEN/8, x2)

inst_108:
// rs2_w0_val == -67108865, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffbffffff;  op2val:0xfffffbfffbffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffdfffffffbfffff, 0xf7fffffffbffffff, 0xfffffbfffbffffff, x1, 80*XLEN/8, x2)

inst_109:
// rs2_w1_val == -4097, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffa;  op2val:0xffffefff00400000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000000007, 0xfffffffcfffffffa, 0xffffefff00400000, x1, 81*XLEN/8, x2)

inst_110:
// rs1_w0_val == 0, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000000;  op2val:0xf7ffffff00000010
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00002000000000, 0xffefffff00000000, 0xf7ffffff00000010, x1, 82*XLEN/8, x2)

inst_111:
// rs1_w0_val == 8, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000008;  op2val:0xfffdffffffffff7f
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffd, 0xfff7ffff00000008, 0xfffdffffffffff7f, x1, 83*XLEN/8, x2)

inst_112:
// rs1_w0_val == 16, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000010;  op2val:0x80000000000100
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000400fffff7ff, 0x1000000000000010, 0x80000000000100, x1, 84*XLEN/8, x2)

inst_113:
// rs2_w1_val == -33554433, rs1_w1_val == 134217728
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffb;  op2val:0xfdffffff00000008
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffa, 0x8000000fffffffb, 0xfdffffff00000008, x1, 85*XLEN/8, x2)

inst_114:
// rs2_w1_val == -1073741825, rs1_w1_val == -17
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef7fffffff;  op2val:0xbfffffff00000400
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7ffff01000000, 0xffffffef7fffffff, 0xbfffffff00000400, x1, 86*XLEN/8, x2)

inst_115:
// rs2_w1_val == 1431655765, rd_w1_val == -4194305
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffc0000000;  op2val:0x5555555500000400
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0xfffffeffc0000000, 0x5555555500000400, x1, 87*XLEN/8, x2)

inst_116:
// rs1_w0_val == 4096, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00001000;  op2val:0xffffffef00000100
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x004000fff7ffff, 0xfff7ffff00001000, 0xffffffef00000100, x1, 88*XLEN/8, x2)

inst_117:
// rs1_w0_val == 16384, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900004000;  op2val:0x7ffffffffffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0xfffffff900004000, 0x7ffffffffffffff7, x1, 89*XLEN/8, x2)

inst_118:
// rs1_w0_val == 32768, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600008000;  op2val:0xfffffff9fffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffef00000003, 0xfffffff600008000, 0xfffffff9fffffff7, x1, 90*XLEN/8, x2)

inst_119:
// rs1_w0_val == 131072, rs2_w1_val == 268435456, rs1_w1_val == 4194304
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000020000;  op2val:0x10000000fffdffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003fffffff7, 0x40000000020000, 0x10000000fffdffff, x1, 91*XLEN/8, x2)

inst_120:
// rs1_w0_val == 262144, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00040000;  op2val:0xffefffff00001000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000300000006, 0xfffffffc00040000, 0xffefffff00001000, x1, 92*XLEN/8, x2)

inst_121:
// rs1_w0_val == 4194304, rs1_w1_val == 33554432
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x200000000400000;  op2val:0xfffff7ff02000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000000000007, 0x200000000400000, 0xfffff7ff02000000, x1, 93*XLEN/8, x2)

inst_122:
// rs1_w1_val == rs2_w1_val, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00004000;  op2val:0x7fffffff7fffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x55555555fffffff6, 0x7fffffff00004000, 0x7fffffff7fffffff, x1, 94*XLEN/8, x2)

inst_123:
// rs1_w0_val == 33554432, rs1_w1_val == 256
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00010002000000;  op2val:0xffffefffc0000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbfffffff7ffff, 0x00010002000000, 0xffffefffc0000000, x1, 95*XLEN/8, x2)

inst_124:
// rs1_w0_val == 67108864, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff04000000;  op2val:0x3ffffffffffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xefffffff08000000, 0xfffffdff04000000, 0x3ffffffffffffff7, x1, 96*XLEN/8, x2)

inst_125:
// rs1_w0_val == 134217728, rs2_w1_val == -33
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000008000000;  op2val:0xffffffdffff7ffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000006, 0x04000008000000, 0xffffffdffff7ffff, x1, 97*XLEN/8, x2)

inst_126:
// rs1_w0_val == -33, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffdf;  op2val:0x010000fffffffe
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbffff01000000, 0xf7ffffffffffffdf, 0x010000fffffffe, x1, 98*XLEN/8, x2)

inst_127:
// rs1_w0_val == -257, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffeff;  op2val:0x400000008000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffdfffefffffff, 0x000007fffffeff, 0x400000008000000, x1, 99*XLEN/8, x2)

inst_128:
// rs1_w0_val == -513, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffdff;  op2val:0xffffffef00000100
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003c0000000, 0x3ffffffffffffdff, 0xffffffef00000100, x1, 100*XLEN/8, x2)

inst_129:
// rs1_w0_val == -4097, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffefff;  op2val:0xfffff7ff00010000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00001004000000, 0x800000ffffefff, 0xfffff7ff00010000, x1, 101*XLEN/8, x2)

inst_130:
// rs1_w0_val == -16777217, rd_w1_val == 1073741824
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000feffffff;  op2val:0xfffefffffffffeff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffdf, 0x400000feffffff, 0xfffefffffffffeff, x1, 102*XLEN/8, x2)

inst_131:
// rs1_w0_val == -536870913, rd_w1_val == -8388609
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x001000dfffffff;  op2val:0x00020000100000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffb, 0x001000dfffffff, 0x00020000100000, x1, 103*XLEN/8, x2)

inst_132:
// rs1_w0_val == -1073741825, rs2_w1_val == 1024
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000bfffffff;  op2val:0x000400fffffdff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffefff, 0x080000bfffffff, 0x000400fffffdff, x1, 104*XLEN/8, x2)

inst_133:
// rs2_w0_val == -268435457, rs2_w1_val == 4
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000900080000;  op2val:0x000004efffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffff7fff, 0x00000900080000, 0x000004efffffff, x1, 105*XLEN/8, x2)

inst_134:
// rs1_w1_val == 1, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffff7fff;  op2val:0x400000fffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x000080ffffff7f, 0x000001ffff7fff, 0x400000fffffff7, x1, 106*XLEN/8, x2)

inst_135:
// rs2_w0_val == -1073741825, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffc;  op2val:0xffffffdfbfffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffdf, 0x000400fffffffc, 0xffffffdfbfffffff, x1, 107*XLEN/8, x2)

inst_136:
// rd_w1_val == 4096, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000040;  op2val:0xdfffffff00000009
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x001000fffffff7, 0x00000300000040, 0xdfffffff00000009, x1, 108*XLEN/8, x2)

inst_137:
// rs2_w1_val == -1, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000fdffffff;  op2val:0xffffffff00002000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00800000400000, 0x100000fdffffff, 0xffffffff00002000, x1, 109*XLEN/8, x2)

inst_138:
// rs1_w1_val == 64, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffef;  op2val:0xfffff7ff00002000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00040000800000, 0x000040ffffffef, 0xfffff7ff00002000, x1, 110*XLEN/8, x2)

inst_139:
// rd_w1_val == 262144, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00100000;  op2val:0xc0000000fffffeff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x040000c0000000, 0xfffffeff00100000, 0xc0000000fffffeff, x1, 111*XLEN/8, x2)

inst_140:
// rd_w1_val == 524288, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000020;  op2val:0x400000efffffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000ffefffff, 0xffffbfff00000020, 0x400000efffffff, x1, 112*XLEN/8, x2)

inst_141:
// rs2_w1_val == 16, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000006;  op2val:0x000010ff7fffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x7fffffff02000000, 0x00010000000006, 0x000010ff7fffff, x1, 113*XLEN/8, x2)

inst_142:
// rs2_w1_val == 32, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000720000000;  op2val:0x00002000002000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000000000400, 0x00000720000000, 0x00002000002000, x1, 114*XLEN/8, x2)

inst_143:
// rs2_w1_val == 128, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000007;  op2val:0x00008000000010
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffefff01000000, 0x00000700000007, 0x00008000000010, x1, 115*XLEN/8, x2)

inst_144:
// rs1_w1_val == 32768, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000010;  op2val:0xfffffff720000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbfffffffbffffff, 0x00800000000010, 0xfffffff720000000, x1, 116*XLEN/8, x2)

inst_145:
// rs1_w1_val == 65536, rs2_w1_val == 2097152
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff7;  op2val:0x20000000020000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x00020004000000, 0x010000fffffff7, 0x20000000020000, x1, 117*XLEN/8, x2)

inst_146:
// rd_w1_val == 67108864, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff8;  op2val:0x000001ffffffbf
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000040000000, 0xfffffefffffffff8, 0x000001ffffffbf, x1, 118*XLEN/8, x2)

inst_147:
// rd_w1_val == 268435456, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000080000000;  op2val:0x2000000ffffffef
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000ffdfffff, 0x100000080000000, 0x2000000ffffffef, x1, 119*XLEN/8, x2)

inst_148:
// rd_w1_val == -513, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500080000;  op2val:0xffffbfff00000009
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffeff, 0x5555555500080000, 0xffffbfff00000009, x1, 120*XLEN/8, x2)

inst_149:
// rd_w1_val == -1025, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00080055555555;  op2val:0xfffffdfffffffff7
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffbffff, 0x00080055555555, 0xfffffdfffffffff7, x1, 121*XLEN/8, x2)

inst_150:
// rs1_w1_val == -33, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0xffffffdf00000002
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffc, 0xffffffdf00020000, 0xffffffdf00000002, x1, 122*XLEN/8, x2)

inst_151:
// rs2_w1_val == 536870912, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffefffffff;  op2val:0x20000000ffbfffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000000004, 0xfffdffffefffffff, 0x20000000ffbfffff, x1, 123*XLEN/8, x2)

inst_152:
// rs1_w1_val == -65, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffdffff;  op2val:0x08000040000000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffeff, 0xffffffbffffdffff, 0x08000040000000, x1, 124*XLEN/8, x2)

inst_153:
// rd_w1_val == -32769, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00040000;  op2val:0x000007fff7ffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffefff, 0xffffffbf00040000, 0x000007fff7ffff, x1, 125*XLEN/8, x2)

inst_154:
// rs1_w1_val == -129, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffa;  op2val:0xfffffdffff7fffff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x002000aaaaaaaa, 0xffffff7ffffffffa, 0xfffffdffff7fffff, x1, 126*XLEN/8, x2)

inst_155:
// rs2_w1_val == -3, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff3fffffff;  op2val:0xfffffffd00000010
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbffffff7ffffff, 0x7fffffff3fffffff, 0xfffffffd00000010, x1, 127*XLEN/8, x2)

inst_156:
// rd_w1_val == -1048577, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffbfffff;  op2val:0xbfffffff00008000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xffefffff00000001, 0xffff7fffffbfffff, 0xbfffffff00008000, x1, 128*XLEN/8, x2)

inst_157:
// rs1_w1_val == -8193, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffffd;  op2val:0xfffff7fffffffdff
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffe55555555, 0xffffdffffffffffd, 0xfffff7fffffffdff, x1, 129*XLEN/8, x2)

inst_158:
// rs2_w1_val == -2, 
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff40000000;  op2val:0xfffffffe00040000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffbfff, 0xffefffff40000000, 0xfffffffe00040000, x1, 130*XLEN/8, x2)

inst_159:
// rd_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w1_val == -8193, rs1_w0_val == -67108865, rs2_w0_val == 8388608, rs1_w1_val == 268435456, rd_w1_val == -524289, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fbffffff;  op2val:0xffffdfff00800000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7ffff80000000, 0x10000000fbffffff, 0xffffdfff00800000, x1, 131*XLEN/8, x2)

inst_160:
// rd_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -8388609, rs1_w1_val == -1025, rs2_w0_val == 4, rd_w1_val == 131072, rs2_w1_val == 64
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffff7fffff;  op2val:0x00004000000004
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0x020000ffffffff, 0xfffffbffff7fffff, 0x00004000000004, x1, 132*XLEN/8, x2)

inst_161:
// rd_w0_val == 2147483647, rd_w1_val == -5, rs1_w0_val == 1, rs2_w1_val == 4194304, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 512, rs2_w0_val == 128, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000001;  op2val:0x40000000000080
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffb7fffffff, 0x00020000000001, 0x40000000000080, x1, 133*XLEN/8, x2)

inst_162:
// rd_w0_val == 4096, rs2_w0_val == 4096, rs1_w1_val == 128, rs2_w1_val == -32769, rd_w1_val == -257
// opcode: pmacc.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffeffff;  op2val:0xffff7fff00001000
TEST_RD_RR_OP(pmacc.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffeff00001000, 0x000080fffeffff, 0xffff7fff00001000, x1, 134*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 135*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
