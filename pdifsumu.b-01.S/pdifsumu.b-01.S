
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec  8 04:22:25 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdifsumu.b instruction of the RISC-V RV64PZicsr extension for the pdifsumu.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdifsumu.b)

RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_b0_val == -128, rs1_b6_val == -3, rs2_b5_val == 4, rs1_b1_val == -1, rs2_b7_val == 2, rs2_b1_val == 64, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b1_val != rs2_b1_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b2_val != rs2_b2_val, rs2_b2_val == 64, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b3_val != rs2_b3_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b4_val != rs2_b4_val, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b6_val != rs2_b6_val, rs2_b3_val == -33, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b7_val != rs2_b7_val, rs2_b4_val == 127
// opcode: pdifsumu.b ; op1:x7; op2:x7; dest:x7; op1val:0xc0fd090906faff80;  op2val:0x203047fdf404009
TEST_RR_OP(pdifsumu.b, x7, x7, x7, 0x0000000000000000, 0xc0fd090906faff80, 0x203047fdf404009, x8, 0*XLEN/8, x14)

inst_1:// rs1 == rd != rs2, rs1==x25, rs2==x16, rd==x25, rs1_b0_val == -1, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b3_val == 2, rs2_b7_val == -3, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b3_val == -2, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b5_val == -3, rs1_b7_val == 2, rs2_b0_val == -86, rs2_b4_val == 8, rs1_b1_val == 127, rs2_b6_val == -1
// opcode: pdifsumu.b ; op1:x25; op2:x16; dest:x25; op1val:0x2f8fc3f02f97fff;  op2val:0xfdfffd08fe03faaa
TEST_RR_OP(pdifsumu.b, x25, x25, x16, 0x0000000000000000, 0x2f8fc3f02f97fff, 0xfdfffd08fe03faaa, x8, 1*XLEN/8, x14)

inst_2:// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x13, rs1_b0_val == 0, rs2_b6_val == 16, rs1_b5_val < 0 and rs2_b5_val > 0, rs2_b0_val == 127, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == 85, rs1_b3_val == -17, rs2_b3_val == -9, rs1_b7_val == -1, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b1_val == -128, rs1_b4_val == 2, rs2_b7_val == 32, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val == 85
// opcode: pdifsumu.b ; op1:x27; op2:x27; dest:x13; op1val:0xff55f802ef55c000;  op2val:0x20100906f7f8807f
TEST_RR_OP(pdifsumu.b, x13, x27, x27, 0x0000000000000000, 0xff55f802ef55c000, 0x20100906f7f8807f, x8, 2*XLEN/8, x14)

inst_3:// rs2 == rd != rs1, rs1==x1, rs2==x5, rd==x5, rs1_b0_val == 1, rs1_b4_val == -33, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b1_val == 85, rs2_b3_val == 64, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == -9, rs2_b0_val == -2, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b5_val == -2, rs2_b7_val == 8, rs2_b2_val == -5, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b7_val == -2, rs1_b2_val == -33, rs2_b6_val == 0, rs1_b4_val < 0 and rs2_b4_val > 0
// opcode: pdifsumu.b ; op1:x1; op2:x5; dest:x5; op1val:0xfe05fedff7df0301;  op2val:0x800fa0540fb55fe
TEST_RR_OP(pdifsumu.b, x5, x1, x5, 0x0000000000000000, 0xfe05fedff7df0301, 0x800fa0540fb55fe, x8, 3*XLEN/8, x14)

inst_4:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x1, rd==x16, rs1_b0_val == 127, rs2_b1_val == -3, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 4, rs2_b0_val == 16, rs2_b2_val == -128, rs2_b6_val == 85, rs2_b5_val == 16, rs1_b7_val == 127, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -5
// opcode: pdifsumu.b ; op1:x22; op2:x1; dest:x16; op1val:0x7f05faf604fbfa7f;  op2val:0xf85510080680fd10
TEST_RR_OP(pdifsumu.b, x16, x22, x1, 0x0000000000000000, 0x7f05faf604fbfa7f, 0xf85510080680fd10, x8, 4*XLEN/8, x14)

inst_5:// rs1==x0, rs2==x26, rd==x9, rs1_b0_val == 2, rs1_b1_val == -9, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b5_val == 0, rs1_b7_val == -128, rs2_b2_val == 16, rs2_b5_val == -9, rs1_b2_val == -3, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b4_val == -5
// opcode: pdifsumu.b ; op1:x0; op2:x26; dest:x9; op1val:0x800900c009fdf702;  op2val:0x5f9f7fbf7100510
TEST_RR_OP(pdifsumu.b, x9, x0, x26, 0x0000000000000000, 0x800900c009fdf702, 0x5f9f7fbf7100510, x8, 5*XLEN/8, x14)

inst_6:// rs1==x3, rs2==x4, rd==x12, rs1_b0_val == 4, rs2_b0_val == -1, rs2_b1_val == -9, rs1_b6_val == -9, rs1_b2_val == 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b2_val == -2, rs1_b1_val == 2, rs1_b7_val == -9, rs2_b4_val == -3
// opcode: pdifsumu.b ; op1:x3; op2:x4; dest:x12; op1val:0xf7f7fcf8f9000204;  op2val:0xf81006fd09fef7ff
TEST_RR_OP(pdifsumu.b, x12, x3, x4, 0x0000000000000000, 0xf7f7fcf8f9000204, 0xf81006fd09fef7ff, x8, 6*XLEN/8, x14)

inst_7:// rs1==x4, rs2==x20, rd==x19, rs1_b0_val == 8, rs1_b4_val == 85, rs1_b5_val == -1, rs1_b6_val == -17, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b1_val == 2, rs2_b2_val == -86, rs2_b3_val == -128
// opcode: pdifsumu.b ; op1:x4; op2:x20; dest:x19; op1val:0xf7efff55fafaf708;  op2val:0x7c009fb80aa02f9
TEST_RR_OP(pdifsumu.b, x19, x4, x20, 0x0000000000000000, 0xf7efff55fafaf708, 0x7c009fb80aa02f9, x8, 7*XLEN/8, x14)

inst_8:// rs1==x21, rs2==x10, rd==x28, rs1_b0_val == 16, rs2_b7_val == 127, rs2_b4_val == 85, rs2_b1_val == -17, rs1_b7_val == -86
// opcode: pdifsumu.b ; op1:x21; op2:x10; dest:x28; op1val:0xaaf8f6fc07f90210;  op2val:0x7f00f85503c0eff6
TEST_RR_OP(pdifsumu.b, x28, x21, x10, 0x0000000000000000, 0xaaf8f6fc07f90210, 0x7f00f85503c0eff6, x8, 8*XLEN/8, x14)

inst_9:// rs1==x28, rs2==x29, rd==x22, rs1_b0_val == 32, rs2_b5_val == 1, rs2_b2_val == -1, rs2_b3_val == -17, rs2_b4_val == -128, rs1_b1_val == -128, rs1_b4_val == 127, rs2_b7_val == 64, rs2_b6_val == 1
// opcode: pdifsumu.b ; op1:x28; op2:x29; dest:x22; op1val:0xc0f9fa7ffa008020;  op2val:0x40010180efff09f9
TEST_RR_OP(pdifsumu.b, x22, x28, x29, 0x0000000000000000, 0xc0f9fa7ffa008020, 0x40010180efff09f9, x8, 9*XLEN/8, x14)

inst_10:// rs1==x10, rs2==x0, rd==x3, rs1_b0_val == 64, rs2_b6_val == 64, rs1_b6_val == -2, rs2_b3_val == 16, rs2_b1_val == -65, rs1_b5_val == rs2_b5_val, rs1_b3_val == -5, rs2_b0_val == -3, rs1_b7_val == 0, rs1_b5_val == -65, rs2_b5_val == -65, rs2_b2_val == -65
// opcode: pdifsumu.b ; op1:x10; op2:x0; dest:x3; op1val:0xfebf7ffb060240;  op2val:0xfc40bf0810bfbffd
TEST_RR_OP(pdifsumu.b, x3, x10, x0, 0x0000000000000000, 0xfebf7ffb060240, 0xfc40bf0810bfbffd, x8, 10*XLEN/8, x14)

inst_11:// rs1==x6, rs2==x2, rd==x29, rs1_b0_val == -2, rs1_b6_val == -86, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b4_val == -128, rs2_b4_val == -1, rs2_b7_val == -5
// opcode: pdifsumu.b ; op1:x6; op2:x2; dest:x29; op1val:0xf7aa0080f60702fe;  op2val:0xfb05faff05090306
TEST_RR_OP(pdifsumu.b, x29, x6, x2, 0x0000000000000000, 0xf7aa0080f60702fe, 0xfb05faff05090306, x8, 11*XLEN/8, x14)

inst_12:// rs1==x5, rs2==x6, rd==x24, rs1_b0_val == -3, rs2_b3_val == 127, rs1_b3_val == 32, rs1_b6_val == -5, rs1_b5_val == 64, rs2_b2_val == 4, rs1_b7_val == 8, rs1_b2_val == -65, rs1_b1_val == 4, rs2_b7_val == -33
// opcode: pdifsumu.b ; op1:x5; op2:x6; dest:x24; op1val:0x8fb40fa20bf04fd;  op2val:0xdf0505c07f04fd10
TEST_RR_OP(pdifsumu.b, x24, x5, x6, 0x0000000000000000, 0x8fb40fa20bf04fd, 0xdf0505c07f04fd10, x8, 12*XLEN/8, x14)

inst_13:// rs1==x18, rs2==x13, rd==x15, rs1_b0_val == -5, rs1_b3_val == 64, rs2_b6_val == -9, rs1_b6_val == -65, rs2_b2_val == 32, rs2_b5_val == -17, rs1_b1_val == 8, rs2_b3_val == 0, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: pdifsumu.b ; op1:x18; op2:x13; dest:x15; op1val:0x5bf06fc40df08fb;  op2val:0xdff7effa0020faf8
TEST_RR_OP(pdifsumu.b, x15, x18, x13, 0x0000000000000000, 0x5bf06fc40df08fb, 0xdff7effa0020faf8, x8, 13*XLEN/8, x14)

inst_14:// rs1==x30, rs2==x19, rd==x11, rs1_b0_val == -9, rs2_b0_val == 1, rs2_b5_val == 2, rs2_b7_val == 0, rs2_b4_val == -9, rs1_b6_val == 0, rs2_b6_val == 127, rs2_b3_val == -1, rs1_b3_val == 0
// opcode: pdifsumu.b ; op1:x30; op2:x19; dest:x11; op1val:0xc000fe0900fd07f7;  op2val:0x7f02f7fffebf01
TEST_RR_OP(pdifsumu.b, x11, x30, x19, 0x0000000000000000, 0xc000fe0900fd07f7, 0x7f02f7fffebf01, x8, 14*XLEN/8, x14)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_15:// rs1==x12, rs2==x22, rd==x20, rs1_b0_val == -17, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b2_val == 2, rs2_b0_val == -9, rs1_b4_val == -3, rs2_b5_val == -2, rs2_b1_val == 8, rs1_b3_val == -128, rs1_b1_val == 32
// opcode: pdifsumu.b ; op1:x12; op2:x22; dest:x20; op1val:0x2fbbffd80fb20ef;  op2val:0x7f10fefcf70208f7
TEST_RR_OP(pdifsumu.b, x20, x12, x22, 0x0000000000000000, 0x2fbbffd80fb20ef, 0x7f10fefcf70208f7, x5, 0*XLEN/8, x7)

inst_16:// rs1==x8, rs2==x17, rd==x14, rs1_b0_val == -33, rs2_b1_val == -33, rs1_b3_val == 85, rs1_b5_val == -3, rs1_b2_val == 64, rs2_b4_val == 32, rs2_b7_val == -9
// opcode: pdifsumu.b ; op1:x8; op2:x17; dest:x14; op1val:0x207fd025540f6df;  op2val:0xf7fcf920fefbdfc0
TEST_RR_OP(pdifsumu.b, x14, x8, x17, 0x0000000000000000, 0x207fd025540f6df, 0xf7fcf920fefbdfc0, x5, 1*XLEN/8, x7)

inst_17:// rs1==x26, rs2==x15, rd==x21, rs1_b0_val == -65, rs1_b3_val == -65, rs1_b7_val == rs2_b7_val, rs1_b2_val == 16, rs2_b1_val == 4, rs1_b1_val == 16, rs1_b4_val == -9
// opcode: pdifsumu.b ; op1:x26; op2:x15; dest:x21; op1val:0xf73ff6f7bf1010bf;  op2val:0xf7f9f780df0404fe
TEST_RR_OP(pdifsumu.b, x21, x26, x15, 0x0000000000000000, 0xf73ff6f7bf1010bf, 0xf7f9f780df0404fe, x5, 2*XLEN/8, x7)

inst_18:// rs1==x14, rs2==x3, rd==x2, rs1_b0_val == 85, rs2_b0_val == 2, rs1_b5_val == 127, rs2_b6_val == -65, rs1_b3_val == -33, rs1_b2_val == 2, rs2_b5_val == 32, rs2_b4_val == 64, rs1_b6_val == 2, rs1_b4_val == -17
// opcode: pdifsumu.b ; op1:x14; op2:x3; dest:x2; op1val:0x8027fefdf02ff55;  op2val:0x6bf20401003df02
TEST_RR_OP(pdifsumu.b, x2, x14, x3, 0x0000000000000000, 0x8027fefdf02ff55, 0x6bf20401003df02, x5, 3*XLEN/8, x7)

inst_19:// rs1==x16, rs2==x9, rd==x1, rs1_b0_val == -86, rs1_b7_val == 16, rs1_b4_val == 64, rs1_b6_val == 127, rs1_b1_val == 1
// opcode: pdifsumu.b ; op1:x16; op2:x9; dest:x1; op1val:0x107ffe4040f601aa;  op2val:0x803f806f905fac0
TEST_RR_OP(pdifsumu.b, x1, x16, x9, 0x0000000000000000, 0x107ffe4040f601aa, 0x803f806f905fac0, x5, 4*XLEN/8, x7)

inst_20:// rs1==x17, rs2==x11, rd==x0, rs1_b1_val == 0, rs2_b6_val == -33, rs1_b5_val == 4, rs2_b3_val == 85, rs1_b2_val == -2, rs1_b4_val == -5, rs2_b4_val == -17
// opcode: pdifsumu.b ; op1:x17; op2:x11; dest:x0; op1val:0xfefd04fbbffe0055;  op2val:0xfcdf20ef55c0c005
TEST_RR_OP(pdifsumu.b, x0, x17, x11, 0x0000000000000000, 0xfefd04fbbffe0055, 0xfcdf20ef55c0c005, x5, 5*XLEN/8, x7)

inst_21:// rs1==x29, rs2==x8, rd==x6, rs1_b1_val == 64, rs1_b6_val == 32, rs1_b5_val == 8, rs2_b0_val == 85, rs2_b2_val == -3, rs2_b4_val == 2, rs1_b4_val == rs2_b4_val, rs1_b2_val == -17, rs2_b1_val == 16
// opcode: pdifsumu.b ; op1:x29; op2:x8; dest:x6; op1val:0xf7200802f7ef4040;  op2val:0xfcfa040280fd1055
TEST_RR_OP(pdifsumu.b, x6, x29, x8, 0x0000000000000000, 0xf7200802f7ef4040, 0xfcfa040280fd1055, x5, 6*XLEN/8, x7)

inst_22:// rs1==x19, rs2==x12, rd==x10, rs1_b1_val == -2, rs1_b6_val == -33, rs1_b4_val == -86, rs2_b7_val == 85
// opcode: pdifsumu.b ; op1:x19; op2:x12; dest:x10; op1val:0x3dff6aadffbfefd;  op2val:0x5501fcff3f078007
TEST_RR_OP(pdifsumu.b, x10, x19, x12, 0x0000000000000000, 0x3dff6aadffbfefd, 0x5501fcff3f078007, x5, 7*XLEN/8, x7)

inst_23:// rs1==x23, rs2==x30, rd==x4, rs1_b1_val == -3, rs1_b3_val == 8, rs2_b0_val == 8, rs2_b7_val == 16, rs2_b1_val == 0, rs2_b6_val == 4
// opcode: pdifsumu.b ; op1:x23; op2:x30; dest:x4; op1val:0x320fe5508fdfd02;  op2val:0x1004fe7f09400008
TEST_RR_OP(pdifsumu.b, x4, x23, x30, 0x0000000000000000, 0x320fe5508fdfd02, 0x1004fe7f09400008, x5, 8*XLEN/8, x7)

inst_24:// rs1==x9, rs2==x23, rd==x27, rs1_b1_val == -5, rs1_b4_val == 32, rs1_b5_val == -128, rs1_b3_val == -1
// opcode: pdifsumu.b ; op1:x9; op2:x23; dest:x27; op1val:0x3f8020ff06fbfb;  op2val:0xfbc0f820553ffdfd
TEST_RR_OP(pdifsumu.b, x27, x9, x23, 0x0000000000000000, 0x3f8020ff06fbfb, 0xfbc0f820553ffdfd, x5, 9*XLEN/8, x7)

inst_25:// rs1==x2, rs2==x18, rd==x17, rs1_b1_val == -17, rs2_b3_val == -5, rs1_b4_val == 0, rs2_b5_val == 0, rs1_b6_val == 64
// opcode: pdifsumu.b ; op1:x2; op2:x18; dest:x17; op1val:0xfe403f0020feefff;  op2val:0x5fa0002fbfff809
TEST_RR_OP(pdifsumu.b, x17, x2, x18, 0x0000000000000000, 0xfe403f0020feefff, 0x5fa0002fbfff809, x5, 10*XLEN/8, x7)

inst_26:// rs1==x11, rs2==x25, rd==x31, rs2_b4_val == -33, rs2_b7_val == 4, rs2_b6_val == -2, rs2_b5_val == -1, rs1_b5_val == 1
// opcode: pdifsumu.b ; op1:x11; op2:x25; dest:x31; op1val:0x54001033ffb0080;  op2val:0x4feffdff9fcc0f8
TEST_RR_OP(pdifsumu.b, x31, x11, x25, 0x0000000000000000, 0x54001033ffb0080, 0x4feffdff9fcc0f8, x5, 11*XLEN/8, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_27:// rs1==x20, rs2==x14, rd==x30, rs2_b4_val == -65, rs1_b6_val == 16, rs1_b6_val == rs2_b6_val, rs1_b3_val == -86, rs1_b5_val == -17, rs1_b4_val == 16, rs1_b7_val == -3
// opcode: pdifsumu.b ; op1:x20; op2:x14; dest:x30; op1val:0xfd10ef10aafef9bf;  op2val:0x41005bf03c0f802
TEST_RR_OP(pdifsumu.b, x30, x20, x14, 0x0000000000000000, 0xfd10ef10aafef9bf, 0x41005bf03c0f802, x1, 0*XLEN/8, x2)

inst_28:// rs1==x31, rs2==x21, rd==x8, rs2_b4_val == -86, rs1_b2_val == -1, rs2_b7_val == -86
// opcode: pdifsumu.b ; op1:x31; op2:x21; dest:x8; op1val:0xf810fedfbfffff10;  op2val:0xaadffcaa558006ff
TEST_RR_OP(pdifsumu.b, x8, x31, x21, 0x0000000000000000, 0xf810fedfbfffff10, 0xaadffcaa558006ff, x1, 1*XLEN/8, x2)

inst_29:// rs1==x13, rs2==x24, rd==x26, rs2_b5_val == -128, rs2_b6_val == -128, rs1_b7_val == 4
// opcode: pdifsumu.b ; op1:x13; op2:x24; dest:x26; op1val:0x40500fc55f940ef;  op2val:0x3f8080aaf8fd033f
TEST_RR_OP(pdifsumu.b, x26, x13, x24, 0x0000000000000000, 0x40500fc55f940ef, 0x3f8080aaf8fd033f, x1, 2*XLEN/8, x2)

inst_30:// rs1==x24, rs2==x31, rd==x18, rs2_b5_val == 127, rs2_b4_val == 16, rs2_b7_val == -1
// opcode: pdifsumu.b ; op1:x24; op2:x31; dest:x18; op1val:0x802f8aabf090306;  op2val:0xffdf7f10090410f8
TEST_RR_OP(pdifsumu.b, x18, x24, x31, 0x0000000000000000, 0x802f8aabf090306, 0xffdf7f10090410f8, x1, 3*XLEN/8, x2)

inst_31:// rs1==x15, rs2==x28, rd==x23, rs2_b5_val == 8, rs1_b6_val == -1, rs1_b5_val == -33, rs2_b0_val == 4, rs1_b3_val == -2
// opcode: pdifsumu.b ; op1:x15; op2:x28; dest:x23; op1val:0xc0ffdfaafe5502ef;  op2val:0xff00087fc0c00904
TEST_RR_OP(pdifsumu.b, x23, x15, x28, 0x0000000000000000, 0xc0ffdfaafe5502ef, 0xff00087fc0c00904, x1, 4*XLEN/8, x2)

inst_32:// rs2_b5_val == 64, rs1_b2_val == 1
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xff02060704017f07;  op2val:0xfaff407f10f6033f
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xff02060704017f07, 0xfaff407f10f6033f, x1, 5*XLEN/8, x2)

inst_33:// rs2_b5_val == -5, rs1_b1_val == 85, rs2_b0_val == -65, rs1_b2_val == 32, rs1_b7_val == 64, rs2_b1_val == 32
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x4002f9fa072055f9;  op2val:0xf7fefb7f030520bf
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x4002f9fa072055f9, 0xf7fefb7f030520bf, x1, 6*XLEN/8, x2)

inst_34:// rs2_b5_val == -33, rs2_b6_val == 8
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa3f7ffcfa40ffaa;  op2val:0x708df3f0304df04
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfa3f7ffcfa40ffaa, 0x708df3f0304df04, x1, 7*XLEN/8, x2)

inst_35:// rs2_b5_val == 85, rs1_b4_val == 1, rs2_b3_val == 8, rs2_b7_val == 1
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x806ef01dfff807f;  op2val:0x10555fa084004ff
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x806ef01dfff807f, 0x10555fa084004ff, x1, 8*XLEN/8, x2)

inst_36:// rs2_b5_val == -86, rs2_b4_val == 0, rs2_b6_val == -86, rs2_b2_val == 8
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfebf08f705df2003;  op2val:0xaaaa0008080010
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfebf08f705df2003, 0xaaaa0008080010, x1, 9*XLEN/8, x2)

inst_37:// rs2_b6_val == 2, rs2_b7_val == -17, rs1_b2_val == -86, rs1_b5_val == -5
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f8fb0109aa04fc;  op2val:0xef02f780800807c0
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x3f8fb0109aa04fc, 0xef02f780800807c0, x1, 10*XLEN/8, x2)

inst_38:// rs2_b6_val == 32, rs2_b3_val == 4, rs1_b2_val == 4, rs2_b4_val == -2, rs1_b3_val == rs2_b3_val, rs1_b7_val == -17
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xef40f820040409f7;  op2val:0x2004fe04fa55fd
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xef40f820040409f7, 0x2004fe04fa55fd, x1, 11*XLEN/8, x2)

inst_39:// rs1_b1_val == -33, rs1_b2_val == -128, rs1_b5_val == 2, rs2_b2_val == 0, rs1_b3_val == -3
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8c002dffd80df7f;  op2val:0x3f90607400003fd
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xf8c002dffd80df7f, 0x3f90607400003fd, x1, 12*XLEN/8, x2)

inst_40:// rs2_b6_val == -3, rs2_b2_val == 127, rs2_b7_val == -128
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc07fc0005f90801;  op2val:0x80fdf908557f8009
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfc07fc0005f90801, 0x80fdf908557f8009, x1, 13*XLEN/8, x2)

inst_41:// rs1_b7_val == 1, rs2_b3_val == -86
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1df800780ff0200;  op2val:0x02c055aafdc07f
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x1df800780ff0200, 0x02c055aafdc07f, x1, 14*XLEN/8, x2)

inst_42:// rs1_b7_val == 32, rs2_b0_val == 32, rs2_b4_val == 4
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x20fcf801f9ffdf00;  op2val:0xfbf8ef0408090920
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x20fcf801f9ffdf00, 0xfbf8ef0408090920, x1, 15*XLEN/8, x2)

inst_43:// rs1_b7_val == -5, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb400010aaff0704;  op2val:0x553ff600fe05037f
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfb400010aaff0704, 0x553ff600fe05037f, x1, 16*XLEN/8, x2)

inst_44:// rs1_b7_val == -33, rs1_b4_val == -65, rs1_b5_val == 32, rs2_b0_val == -17
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf0620bf02043ff7;  op2val:0xfb04effb3ffd07ef
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xdf0620bf02043ff7, 0xfb04effb3ffd07ef, x1, 17*XLEN/8, x2)

inst_45:// rs1_b7_val == -65, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbffc00f740040603;  op2val:0xdffaeff903c0f909
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xbffc00f740040603, 0xdffaeff903c0f909, x1, 18*XLEN/8, x2)

inst_46:// rs1_b7_val == 85, rs2_b2_val == -33, rs2_b3_val == 1, rs1_b6_val == -128, rs2_b1_val == 1
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x5580f602f9fdef05;  op2val:0x3c0017f01df0109
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x5580f602f9fdef05, 0x3c0017f01df0109, x1, 19*XLEN/8, x2)

inst_47:// rs2_b0_val == -128, rs2_b3_val == -3
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x60240f8fff67f05;  op2val:0xf8f60706fd08f980
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x60240f8fff67f05, 0xf8f60706fd08f980, x1, 20*XLEN/8, x2)

inst_48:// rs2_b0_val == 0, rs1_b4_val == 4
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfef7fc040780fa3f;  op2val:0x3faa0810ef030800
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfef7fc040780fa3f, 0x3faa0810ef030800, x1, 21*XLEN/8, x2)

inst_49:// rs1_b1_val == -65, rs1_b6_val == 1, rs1_b2_val == 127, rs2_b3_val == 32
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd01fc10407fbf07;  op2val:0x8f78055200940fc
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfd01fc10407fbf07, 0x8f78055200940fc, x1, 22*XLEN/8, x2)

inst_50:// rs2_b6_val == -5, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xc02001ef3ffcfb;  op2val:0xfbfbfefe10dfbf7f
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xc02001ef3ffcfb, 0xfbfbfefe10dfbf7f, x1, 23*XLEN/8, x2)

inst_51:// rs1_b1_val == -86, rs1_b2_val == -9
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x20fbdfc020f7aa03;  op2val:0x10fc80f8f90200ff
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x20fbdfc020f7aa03, 0x10fc80f8f90200ff, x1, 24*XLEN/8, x2)

inst_52:// rs2_b6_val == -17, rs1_b5_val == -86
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f07aabfffdf40fa;  op2val:0xc0ef00f7f9c0fa3f
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x7f07aabfffdf40fa, 0xc0ef00f7f9c0fa3f, x1, 25*XLEN/8, x2)

inst_53:// rs2_b0_val == 64, rs1_b3_val == 127, rs1_b6_val == 4
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd04ef017fbfbf55;  op2val:0xf9fffd7fef200140
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfd04ef017fbfbf55, 0xf9fffd7fef200140, x1, 26*XLEN/8, x2)

inst_54:// rs2_b1_val == -2, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x10aa0220fcefc004;  op2val:0xf7ef0110effffefd
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x10aa0220fcefc004, 0xf7ef0110effffefd, x1, 27*XLEN/8, x2)

inst_55:// rs2_b1_val == -5, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6fe07aa0755f6c0;  op2val:0x3f08ff06f680fbfd
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xf6fe07aa0755f6c0, 0x3f08ff06f680fbfd, x1, 28*XLEN/8, x2)

inst_56:// rs1_b3_val == 16, rs1_b6_val == 8
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd08fbaa1040aac0;  op2val:0x40fe071003fa0740
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfd08fbaa1040aac0, 0x40fe071003fa0740, x1, 29*XLEN/8, x2)

inst_57:// rs1_b0_val == rs2_b0_val, rs1_b4_val == 8
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc06050804fc0880;  op2val:0x6f9aaaaef044080
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfc06050804fc0880, 0x6f9aaaaef044080, x1, 30*XLEN/8, x2)

inst_58:// rs2_b1_val == -86, rs1_b4_val == -2, rs2_b2_val == -9
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf3ffcfe55fff609;  op2val:0x109f904c0f7aac0
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xdf3ffcfe55fff609, 0x109f904c0f7aac0, x1, 31*XLEN/8, x2)

inst_59:// rs1_b1_val == rs2_b1_val, rs2_b0_val == -33, rs1_b4_val == -1
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x805ffff05020709;  op2val:0x20100004faaa07df
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x805ffff05020709, 0x20100004faaa07df, x1, 32*XLEN/8, x2)

inst_60:// rs2_b2_val == 1, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcf7df10044007ef;  op2val:0x8fe8002f601c0df
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfcf7df10044007ef, 0x8fe8002f601c0df, x1, 33*XLEN/8, x2)

inst_61:// rs1_b2_val == rs2_b2_val, rs2_b2_val == 85, rs1_b3_val == 1
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0faf6400155df7f;  op2val:0x520bfdffc55df40
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xc0faf6400155df7f, 0x520bfdffc55df40, x1, 34*XLEN/8, x2)

inst_62:// rs2_b3_val == 2, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf803011004bffd03;  op2val:0x80f7dfaa02f70305
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xf803011004bffd03, 0x80f7dfaa02f70305, x1, 35*XLEN/8, x2)

inst_63:// rs1_b5_val == 16, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ff710ff0109ef06;  op2val:0x20104c0fff607ef
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x3ff710ff0109ef06, 0x20104c0fff607ef, x1, 36*XLEN/8, x2)

inst_64:// rs2_b0_val == -5, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ffcff03ff0200f8;  op2val:0xfd1000f6025500fb
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x3ffcff03ff0200f8, 0xfd1000f6025500fb, x1, 37*XLEN/8, x2)

inst_65:// rs2_b3_val == -65, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f80440c07ffefa;  op2val:0xfaef1002bffbaaf8
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x7f80440c07ffefa, 0xfaef1002bffbaaf8, x1, 38*XLEN/8, x2)

inst_66:// rs1_b2_val == 8, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x955f820000805f7;  op2val:0xffbffdaa3f0409fa
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x955f820000805f7, 0xffbffdaa3f0409fa, x1, 39*XLEN/8, x2)

inst_67:// rs1_b5_val == -9, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3fdf700030908fe;  op2val:0xff04fbfa017f4055
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x3fdf700030908fe, 0xff04fbfa017f4055, x1, 40*XLEN/8, x2)

inst_68:// rs2_b4_val == 1, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x605f6f70310fcfd;  op2val:0x10aa8001f903f8fb
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x605f6f70310fcfd, 0x10aa8001f903f8fb, x1, 41*XLEN/8, x2)

inst_69:// rs2_b1_val == -1, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfefafe060110fcef;  op2val:0x803f554005f8fffa
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfefafe060110fcef, 0x803f554005f8fffa, x1, 42*XLEN/8, x2)

inst_70:// rs1_b5_val == 85, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x4fa55aa07feff10;  op2val:0x102008060807f7ff
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x4fa55aa07feff10, 0x102008060807f7ff, x1, 43*XLEN/8, x2)

inst_71:// rs2_b1_val == 127, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xeffbfef905ff07f7;  op2val:0xf980bf8020097fbf
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xeffbfef905ff07f7, 0xf980bf8020097fbf, x1, 44*XLEN/8, x2)

inst_72:// rs2_b7_val == -2, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x550503c0bf000202;  op2val:0xfe057ffb05f70501
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x550503c0bf000202, 0xfe057ffb05f70501, x1, 45*XLEN/8, x2)

inst_73:// rs2_b7_val == -65, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3faa5580f8f8fb03;  op2val:0xbfc0fd08bfbf0800
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x3faa5580f8f8fb03, 0xbfc0fd08bfbf0800, x1, 46*XLEN/8, x2)

inst_74:// rs2_b2_val == -17, 
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x20550807807f0408;  op2val:0xf7aadfdf01ef20f6
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x20550807807f0408, 0xf7aadfdf01ef20f6, x1, 47*XLEN/8, x2)

inst_75:// rs1_b0_val == 2, rs1_b1_val == -9, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b5_val == 0, rs1_b7_val == -128, rs2_b2_val == 16, rs2_b5_val == -9, rs1_b2_val == -3, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b4_val == -5
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0x800900c009fdf702;  op2val:0x5f9f7fbf7100510
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0x800900c009fdf702, 0x5f9f7fbf7100510, x1, 48*XLEN/8, x2)

inst_76:// rs1_b0_val == 64, rs2_b6_val == 64, rs1_b6_val == -2, rs2_b3_val == 16, rs2_b1_val == -65, rs1_b5_val == rs2_b5_val, rs1_b3_val == -5, rs2_b0_val == -3, rs1_b7_val == 0, rs1_b5_val == -65, rs2_b5_val == -65, rs2_b2_val == -65
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfebf7ffb060240;  op2val:0xfc40bf0810bfbffd
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfebf7ffb060240, 0xfc40bf0810bfbffd, x1, 49*XLEN/8, x2)

inst_77:// rs1_b1_val == 0, rs2_b6_val == -33, rs1_b5_val == 4, rs2_b3_val == 85, rs1_b2_val == -2, rs1_b4_val == -5, rs2_b4_val == -17
// opcode: pdifsumu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfefd04fbbffe0055;  op2val:0xfcdf20ef55c0c005
TEST_RR_OP(pdifsumu.b, x31, x30, x29, 0x0000000000000000, 0xfefd04fbbffe0055, 0xfcdf20ef55c0c005, x1, 50*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x8_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x8_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 12*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 51*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
