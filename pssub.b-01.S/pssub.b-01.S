
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pssub.b instruction of the RISC-V RV64PZicsr extension for the pssub.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pssub.b)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x19, rd==x6, rs1_b0_val == -128, rs1_b6_val == -65, rs1_b1_val == 16, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b1_val != rs2_b1_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 2, rs1_b2_val != rs2_b2_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val != rs2_b4_val, rs2_b3_val == 127, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b5_val == -128, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val != rs2_b6_val, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val != rs2_b7_val, rs2_b4_val == 4
// opcode: pssub.b ; op1:x28; op2:x19; dest:x6; op1val:0x9bf80f6053f1080;  op2val:0xc0f809047f02fc07
TEST_RR_OP(pssub.b, x6, x28, x19, 0x0000000000000000, 0x9bf80f6053f1080, 0xc0f809047f02fc07, x4, 0*XLEN/8, x1)

inst_1:// rs2 == rd != rs1, rs1==x17, rs2==x3, rd==x3, rs1_b0_val == -1, rs1_b1_val == -3, rs1_b3_val == 4, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b5_val == -1, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b2_val == -128, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == 85, rs1_b5_val == 8, rs2_b0_val == -3, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b3_val == 85, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val == 16, rs2_b1_val == -1, rs2_b4_val == 64, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: pssub.b ; op1:x17; op2:x3; dest:x3; op1val:0x35508fc0410fdff;  op2val:0x7f8ff405580fffd
TEST_RR_OP(pssub.b, x3, x17, x3, 0x0000000000000000, 0x35508fc0410fdff, 0x7f8ff405580fffd, x4, 1*XLEN/8, x1)

inst_2:// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x0, rs1_b0_val == 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b4_val == -65, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == -65, rs2_b7_val == -86, rs1_b7_val == -9, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b0_val == -33, rs1_b4_val == -1, rs2_b5_val == -3, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == 85, rs2_b6_val == 1, rs1_b6_val == 8
// opcode: pssub.b ; op1:x12; op2:x12; dest:x0; op1val:0xf70880fff8550600;  op2val:0xaa01fdbf3f3fbfdf
TEST_RR_OP(pssub.b, x0, x12, x12, 0x0000000000000000, 0xf70880fff8550600, 0xaa01fdbf3f3fbfdf, x4, 2*XLEN/8, x1)

inst_3:// rs1 == rd != rs2, rs1==x27, rs2==x6, rd==x27, rs1_b0_val == 1, rs2_b0_val == -128, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b3_val == 32, rs2_b6_val == -9, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == rs2_b1_val, rs1_b5_val == -65, rs1_b4_val == 8, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b6_val == 127
// opcode: pssub.b ; op1:x27; op2:x6; dest:x27; op1val:0x77fbf0820050301;  op2val:0x5f7f90903f60380
TEST_RR_OP(pssub.b, x27, x27, x6, 0x0000000000000000, 0x77fbf0820050301, 0x5f7f90903f60380, x4, 3*XLEN/8, x1)

inst_4:// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == -17, rs2_b0_val == 127, rs1_b3_val == 16, rs1_b0_val == rs2_b0_val, rs2_b6_val == -17, rs2_b2_val == -1, rs1_b2_val == 1, rs1_b5_val == 16, rs1_b7_val == 4, rs2_b7_val == 8, rs2_b5_val == -65, rs2_b4_val == 8
// opcode: pssub.b ; op1:x18; op2:x18; dest:x18; op1val:0x4f910061001067f;  op2val:0x8efbf0809ffef7f
TEST_RR_OP(pssub.b, x18, x18, x18, 0x0000000000000000, 0x4f910061001067f, 0x8efbf0809ffef7f, x4, 4*XLEN/8, x1)

inst_5:// rs1==x2, rs2==x31, rd==x16, rs1_b0_val == 2, rs1_b6_val == rs2_b6_val, rs2_b3_val == -65, rs2_b2_val == 4, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val == 32, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b1_val == 127, rs1_b4_val == -3, rs1_b3_val == 1
// opcode: pssub.b ; op1:x2; op2:x31; dest:x16; op1val:0xc009f8fd01200702;  op2val:0x6090307bf047ffc
TEST_RR_OP(pssub.b, x16, x2, x31, 0x0000000000000000, 0xc009f8fd01200702, 0x6090307bf047ffc, x4, 5*XLEN/8, x1)

inst_6:// rs1==x30, rs2==x21, rd==x13, rs1_b0_val == 4, rs2_b6_val == 8, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val == 127, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b3_val == -65, rs2_b7_val == 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b4_val == -9, rs1_b4_val == 16, rs1_b6_val == -1, rs1_b7_val == -65, rs2_b3_val == -1, rs1_b1_val == -2
// opcode: pssub.b ; op1:x30; op2:x21; dest:x13; op1val:0xbfff7f10bf07fe04;  op2val:0x08faf7ff3f7fdf
TEST_RR_OP(pssub.b, x13, x30, x21, 0x0000000000000000, 0xbfff7f10bf07fe04, 0x08faf7ff3f7fdf, x4, 6*XLEN/8, x1)

inst_7:// rs1==x24, rs2==x11, rd==x8, rs1_b0_val == 8, rs2_b4_val == -33, rs2_b6_val == -33, rs2_b0_val == -9, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b2_val == -2, rs2_b1_val == 1, rs2_b7_val == -5, rs2_b2_val == -86, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val == -17
// opcode: pssub.b ; op1:x24; op2:x11; dest:x8; op1val:0xf8f803effafe0608;  op2val:0xfbdf09df05aa01f7
TEST_RR_OP(pssub.b, x8, x24, x11, 0x0000000000000000, 0xf8f803effafe0608, 0xfbdf09df05aa01f7, x4, 7*XLEN/8, x1)

inst_8:// rs1==x26, rs2==x20, rd==x5, rs1_b0_val == 16, rs1_b4_val == -33, rs1_b6_val == -9, rs2_b6_val == 85, rs2_b7_val == 4, rs1_b5_val == 85, rs2_b5_val == -86, rs1_b3_val == rs2_b3_val, rs1_b2_val == -86, rs1_b3_val == -1, rs1_b7_val == 85, rs2_b4_val == -17
// opcode: pssub.b ; op1:x26; op2:x20; dest:x5; op1val:0x55f755dfffaa0710;  op2val:0x455aaeffff93f3f
TEST_RR_OP(pssub.b, x5, x26, x20, 0x0000000000000000, 0x55f755dfffaa0710, 0x455aaeffff93f3f, x4, 8*XLEN/8, x1)

inst_9:// rs1==x9, rs2==x30, rd==x12, rs1_b0_val == 32, rs1_b6_val == -33, rs1_b2_val == rs2_b2_val, rs1_b7_val == 64, rs1_b3_val == 85
// opcode: pssub.b ; op1:x9; op2:x30; dest:x12; op1val:0x40dffa3f55c01020;  op2val:0xf6f90606c0f980
TEST_RR_OP(pssub.b, x12, x9, x30, 0x0000000000000000, 0x40dffa3f55c01020, 0xf6f90606c0f980, x4, 9*XLEN/8, x1)

inst_10:// rs1==x25, rs2==x14, rd==x20, rs1_b0_val == 64, rs2_b3_val == 16, rs1_b5_val == -9, rs2_b7_val == -2, rs2_b6_val == -1, rs2_b4_val == -2
// opcode: pssub.b ; op1:x25; op2:x14; dest:x20; op1val:0xfa05f706c020c040;  op2val:0xfefff6fe103fbfc0
TEST_RR_OP(pssub.b, x20, x25, x14, 0x0000000000000000, 0xfa05f706c020c040, 0xfefff6fe103fbfc0, x4, 10*XLEN/8, x1)

inst_11:// rs1==x15, rs2==x25, rd==x10, rs1_b0_val == -2, rs2_b6_val == -5, rs1_b6_val == -17, rs1_b1_val == 1, rs2_b7_val == 85, rs2_b3_val == 1
// opcode: pssub.b ; op1:x15; op2:x25; dest:x10; op1val:0x7efc003050601fe;  op2val:0x55fbff0501aa03f7
TEST_RR_OP(pssub.b, x10, x15, x25, 0x0000000000000000, 0x7efc003050601fe, 0x55fbff0501aa03f7, x4, 11*XLEN/8, x1)

inst_12:// rs1==x31, rs2==x17, rd==x19, rs1_b0_val == -3, rs1_b1_val == -86, rs1_b3_val == -5, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b7_val == 32, rs2_b1_val == 64
// opcode: pssub.b ; op1:x31; op2:x17; dest:x19; op1val:0x2007fcc0fbf6aafd;  op2val:0x55f908fa024005
TEST_RR_OP(pssub.b, x19, x31, x17, 0x0000000000000000, 0x2007fcc0fbf6aafd, 0x55f908fa024005, x4, 12*XLEN/8, x3)

inst_13:// rs1==x5, rs2==x27, rd==x9, rs1_b0_val == -5, rs2_b5_val == 1, rs2_b0_val == 8, rs2_b2_val == 127, rs2_b4_val == 16, rs2_b7_val == -17, rs1_b1_val == 64, rs2_b6_val == 4
// opcode: pssub.b ; op1:x5; op2:x27; dest:x9; op1val:0x4009bf3f3ffa40fb;  op2val:0xef040110fc7fbf08
TEST_RR_OP(pssub.b, x9, x5, x27, 0x0000000000000000, 0x4009bf3f3ffa40fb, 0xef040110fc7fbf08, x4, 13*XLEN/8, x3)

inst_14:// rs1==x8, rs2==x23, rd==x1, rs1_b0_val == -9, rs2_b1_val == -86, rs1_b2_val == 64, rs2_b5_val == -33, rs1_b1_val == -1, rs2_b2_val == -65, rs1_b3_val == -128
// opcode: pssub.b ; op1:x8; op2:x23; dest:x1; op1val:0xc03f55068040fff7;  op2val:0x709dffefcbfaa09
TEST_RR_OP(pssub.b, x1, x8, x23, 0x0000000000000000, 0xc03f55068040fff7, 0x709dffefcbfaa09, x4, 14*XLEN/8, x3)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_15:// rs1==x21, rs2==x24, rd==x29, rs1_b0_val == -17, rs1_b4_val == -65, rs1_b3_val == -3, rs2_b2_val == 0, rs2_b7_val == -128, rs1_b7_val == 16, rs1_b5_val == -86, rs2_b1_val == 16, rs1_b6_val == 2
// opcode: pssub.b ; op1:x21; op2:x24; dest:x29; op1val:0x1002aabffd01f8ef;  op2val:0x8003f640fc0010f8
TEST_RR_OP(pssub.b, x29, x21, x24, 0x0000000000000000, 0x1002aabffd01f8ef, 0x8003f640fc0010f8, x12, 0*XLEN/8, x3)

inst_16:// rs1==x4, rs2==x0, rd==x31, rs1_b0_val == -33, rs1_b6_val == 16, rs2_b6_val == 32, rs1_b1_val == -9, rs2_b4_val == -3
// opcode: pssub.b ; op1:x4; op2:x0; dest:x31; op1val:0x71007f6fb3ff7df;  op2val:0xf920f8fdfc05bf05
TEST_RR_OP(pssub.b, x31, x4, x0, 0x0000000000000000, 0x71007f6fb3ff7df, 0xf920f8fdfc05bf05, x12, 1*XLEN/8, x3)

inst_17:// rs1==x22, rs2==x16, rd==x24, rs1_b0_val == -65, rs1_b7_val == -3, rs1_b6_val == -86, rs2_b7_val == 1
// opcode: pssub.b ; op1:x22; op2:x16; dest:x24; op1val:0xfdaa8006fb01aabf;  op2val:0x1ffc00406f809fa
TEST_RR_OP(pssub.b, x24, x22, x16, 0x0000000000000000, 0xfdaa8006fb01aabf, 0x1ffc00406f809fa, x12, 2*XLEN/8, x3)

inst_18:// rs1==x6, rs2==x22, rd==x25, rs1_b0_val == 85, rs2_b1_val == -9, rs1_b5_val == 4, rs2_b2_val == -5, rs2_b6_val == -65
// opcode: pssub.b ; op1:x6; op2:x22; dest:x25; op1val:0xc0030410fc060155;  op2val:0x9bf0303fffbf705
TEST_RR_OP(pssub.b, x25, x6, x22, 0x0000000000000000, 0xc0030410fc060155, 0x9bf0303fffbf705, x12, 3*XLEN/8, x3)

inst_19:// rs1==x0, rs2==x9, rd==x17, rs1_b0_val == -86, rs2_b1_val == -5, rs1_b4_val == 0, rs2_b5_val == -17, rs1_b3_val == -86
// opcode: pssub.b ; op1:x0; op2:x9; dest:x17; op1val:0xf6f83f00aa07f9aa;  op2val:0xfe55ef080106fb7f
TEST_RR_OP(pssub.b, x17, x0, x9, 0x0000000000000000, 0xf6f83f00aa07f9aa, 0xfe55ef080106fb7f, x12, 4*XLEN/8, x3)

inst_20:// rs1==x10, rs2==x15, rd==x7, rs1_b1_val == -128, rs2_b4_val == -128, rs2_b0_val == 85, rs2_b5_val == -9, rs2_b6_val == 127
// opcode: pssub.b ; op1:x10; op2:x15; dest:x7; op1val:0xf6038010205580fa;  op2val:0x77ff780f8060355
TEST_RR_OP(pssub.b, x7, x10, x15, 0x0000000000000000, 0xf6038010205580fa, 0x77ff780f8060355, x12, 5*XLEN/8, x3)

inst_21:// rs1==x11, rs2==x13, rd==x2, rs1_b1_val == 0, rs2_b3_val == -3, rs2_b5_val == 2, rs1_b7_val == 0, rs2_b6_val == 0, rs1_b4_val == -2, rs2_b7_val == -65
// opcode: pssub.b ; op1:x11; op2:x13; dest:x2; op1val:0xf609fe06070000;  op2val:0xbf000209fdaaf608
TEST_RR_OP(pssub.b, x2, x11, x13, 0x0000000000000000, 0xf609fe06070000, 0xbf000209fdaaf608, x12, 6*XLEN/8, x3)

inst_22:// rs1==x13, rs2==x5, rd==x28, rs1_b1_val == 127, rs2_b3_val == -5, rs2_b0_val == -5, rs1_b2_val == 8, rs1_b7_val == 2, rs2_b4_val == 0, rs2_b2_val == -33
// opcode: pssub.b ; op1:x13; op2:x5; dest:x28; op1val:0x2fa043fff087ff9;  op2val:0xfc0700fbdffbfb
TEST_RR_OP(pssub.b, x28, x13, x5, 0x0000000000000000, 0x2fa043fff087ff9, 0xfc0700fbdffbfb, x12, 7*XLEN/8, x3)

inst_23:// rs1==x20, rs2==x26, rd==x21, rs1_b1_val == 2, rs1_b4_val == -86, rs1_b6_val == -3, rs2_b0_val == 64, rs2_b6_val == -86, rs2_b7_val == -1, rs1_b2_val == -9, rs1_b7_val == -86
// opcode: pssub.b ; op1:x20; op2:x26; dest:x21; op1val:0xaafdf9aaf9f70220;  op2val:0xffaafaf6bf04ff40
TEST_RR_OP(pssub.b, x21, x20, x26, 0x0000000000000000, 0xaafdf9aaf9f70220, 0xffaafaf6bf04ff40, x12, 8*XLEN/8, x3)

inst_24:// rs1==x29, rs2==x4, rd==x22, rs1_b1_val == 4, rs1_b3_val == -17, rs1_b5_val == 32, rs1_b7_val == rs2_b7_val, rs1_b2_val == 4, rs2_b1_val == -128
// opcode: pssub.b ; op1:x29; op2:x4; dest:x22; op1val:0x9bf203fef04043f;  op2val:0x904ff10fbf980fc
TEST_RR_OP(pssub.b, x22, x29, x4, 0x0000000000000000, 0x9bf203fef04043f, 0x904ff10fbf980fc, x12, 9*XLEN/8, x5)

inst_25:// rs1==x14, rs2==x1, rd==x26, rs1_b1_val == 8, rs2_b0_val == 4, rs1_b7_val == -1, rs2_b1_val == 0, rs1_b4_val == 4, rs1_b6_val == 0
// opcode: pssub.b ; op1:x14; op2:x1; dest:x26; op1val:0xff000604fd040880;  op2val:0x500bff8f9fa0004
TEST_RR_OP(pssub.b, x26, x14, x1, 0x0000000000000000, 0xff000604fd040880, 0x500bff8f9fa0004, x12, 10*XLEN/8, x5)

inst_26:// rs1==x23, rs2==x29, rd==x11, rs1_b1_val == 32, rs1_b6_val == 32, rs1_b5_val == rs2_b5_val, rs1_b2_val == 127, rs1_b5_val == -33, rs1_b7_val == -2, rs2_b1_val == 8
// opcode: pssub.b ; op1:x23; op2:x29; dest:x11; op1val:0xfe20df07f67f2009;  op2val:0x405dfc0fdfa08fa
TEST_RR_OP(pssub.b, x11, x23, x29, 0x0000000000000000, 0xfe20df07f67f2009, 0x405dfc0fdfa08fa, x12, 11*XLEN/8, x5)

inst_27:// rs1==x16, rs2==x2, rd==x23, rs1_b1_val == -5, rs2_b3_val == 4, rs2_b4_val == 85, rs1_b6_val == -2, rs1_b2_val == 0, rs1_b5_val == -2
// opcode: pssub.b ; op1:x16; op2:x2; dest:x23; op1val:0x2fefef6f600fbfb;  op2val:0x304065504c0c009
TEST_RR_OP(pssub.b, x23, x16, x2, 0x0000000000000000, 0x2fefef6f600fbfb, 0x304065504c0c009, x12, 12*XLEN/8, x5)

inst_28:// rs1==x3, rs2==x7, rd==x4, rs2_b4_val == -86, rs1_b3_val == 127, rs2_b1_val == 4, rs1_b2_val == -33, rs2_b2_val == 85, rs1_b4_val == rs2_b4_val
// opcode: pssub.b ; op1:x3; op2:x7; dest:x4; op1val:0xaa09aaaa7fdffafe;  op2val:0xbf0605aa035504fb
TEST_RR_OP(pssub.b, x4, x3, x7, 0x0000000000000000, 0xaa09aaaa7fdffafe, 0xbf0605aa035504fb, x12, 13*XLEN/8, x5)

inst_29:// rs1==x1, rs2==x8, rd==x15, rs2_b5_val == -128, rs2_b7_val == 2, rs2_b1_val == -33, rs2_b2_val == 32, rs1_b5_val == 64
// opcode: pssub.b ; op1:x1; op2:x8; dest:x15; op1val:0x40aa40f855fac0fd;  op2val:0x201803f0920df3f
TEST_RR_OP(pssub.b, x15, x1, x8, 0x0000000000000000, 0x40aa40f855fac0fd, 0x201803f0920df3f, x12, 14*XLEN/8, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:// rs1==x19, rs2==x10, rd==x14, rs2_b5_val == 0, rs2_b3_val == -86, rs2_b4_val == 1, rs2_b2_val == 8
// opcode: pssub.b ; op1:x19; op2:x10; dest:x14; op1val:0x3f07f6fe80f902f6;  op2val:0xbf080001aa080006
TEST_RR_OP(pssub.b, x14, x19, x10, 0x0000000000000000, 0x3f07f6fe80f902f6, 0xbf080001aa080006, x1, 0*XLEN/8, x5)

inst_31:// rs1==x7, rs2==x28, rd==x30, rs2_b5_val == 127, rs1_b2_val == -1, rs1_b4_val == 85, rs2_b4_val == 127, rs2_b0_val == -17
// opcode: pssub.b ; op1:x7; op2:x28; dest:x30; op1val:0xf9fc065555fffd40;  op2val:0xfc077f7f053ff9ef
TEST_RR_OP(pssub.b, x30, x7, x28, 0x0000000000000000, 0xf9fc065555fffd40, 0xfc077f7f053ff9ef, x1, 1*XLEN/8, x5)

inst_32:// rs2_b5_val == 4, rs1_b4_val == -128, rs2_b6_val == -3
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcf6df8005050000;  op2val:0xf8fd0401fffcf9fa
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfcf6df8005050000, 0xf8fd0401fffcf9fa, x1, 2*XLEN/8, x5)

inst_33:// rs2_b5_val == 8, rs2_b6_val == -2, rs1_b7_val == 8, rs2_b1_val == 85, rs1_b5_val == 1
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x8df01efaafe80fe;  op2val:0xfcfe08fdc055557f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x8df01efaafe80fe, 0xfcfe08fdc055557f, x1, 3*XLEN/8, x5)

inst_34:// rs2_b5_val == 16, rs1_b5_val == 2, rs2_b6_val == 64, rs2_b3_val == -17
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc7f020907f8fa04;  op2val:0x94010dfef0003fd
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfc7f020907f8fa04, 0x94010dfef0003fd, x1, 4*XLEN/8, x5)

inst_35:// rs2_b5_val == 32, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3bf07fd04f7f6df;  op2val:0xef5520bfbff804fb
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3bf07fd04f7f6df, 0xef5520bfbff804fb, x1, 5*XLEN/8, x5)

inst_36:// rs2_b5_val == 64, rs1_b1_val == -33, rs1_b3_val == -9, rs1_b7_val == 127, rs2_b4_val == -1, rs2_b7_val == 64
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffc06f7aadffc;  op2val:0x40f640ff0909ff03
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x7ffffc06f7aadffc, 0x40f640ff0909ff03, x1, 6*XLEN/8, x5)

inst_37:// rs2_b5_val == -2, rs1_b4_val == 32, rs1_b2_val == -3
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x40fa022003fd00fa;  op2val:0xfdfef6f9c00508
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x40fa022003fd00fa, 0xfdfef6f9c00508, x1, 7*XLEN/8, x5)

inst_38:// rs2_b5_val == -5, rs1_b5_val == -17, rs1_b4_val == 1, rs2_b2_val == 1, rs1_b3_val == -2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8c0ef01fe40f804;  op2val:0xc040fb07f601fffa
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf8c0ef01fe40f804, 0xc040fb07f601fffa, x1, 8*XLEN/8, x5)

inst_39:// rs2_b5_val == 85, rs2_b7_val == -3, rs2_b4_val == 32
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa06fcc0bf09dffb;  op2val:0xfd555520bf80faf6
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfa06fcc0bf09dffb, 0xfd555520bf80faf6, x1, 9*XLEN/8, x5)

inst_40:// rs2_b6_val == -128, rs1_b7_val == -33, rs1_b2_val == -5
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xdffc3f007ffb8005;  op2val:0x6800500fffa40df
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xdffc3f007ffb8005, 0x6800500fffa40df, x1, 10*XLEN/8, x5)

inst_41:// rs2_b6_val == 2, rs2_b0_val == 2, rs1_b5_val == 0
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x5502000555030703;  op2val:0x202400504fc0602
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x5502000555030703, 0x202400504fc0602, x1, 11*XLEN/8, x5)

inst_42:// rs2_b6_val == 16, rs1_b7_val == 1
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x1fa3ff9fe100608;  op2val:0xf6107faaf805fbfd
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x1fa3ff9fe100608, 0xf6107faaf805fbfd, x1, 12*XLEN/8, x5)

inst_43:// rs1_b6_val == 64, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f401055fa01df03;  op2val:0xaa3f55207ff81055
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x7f401055fa01df03, 0xaa3f55207ff81055, x1, 13*XLEN/8, x5)

inst_44:// rs1_b6_val == -5, rs2_b3_val == 64
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x8fb3f0603403f02;  op2val:0x9f9075540aadf40
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x8fb3f0603403f02, 0x9f9075540aadf40, x1, 14*XLEN/8, x5)

inst_45:// rs1_b7_val == -128, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x803f02eff8050380;  op2val:0xc0000106ef02097f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x803f02eff8050380, 0xc0000106ef02097f, x1, 15*XLEN/8, x5)

inst_46:// rs1_b7_val == -5, rs2_b0_val == -2, rs2_b4_val == -5, rs2_b3_val == -2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbfd030504f90005;  op2val:0x4103ffbfefc05fe
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfbfd030504f90005, 0x4103ffbfefc05fe, x1, 16*XLEN/8, x5)

inst_47:// rs1_b7_val == -17, rs2_b3_val == 0
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xef067f00f606dffe;  op2val:0xf9013fff00c004f8
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xef067f00f606dffe, 0xf9013fff00c004f8, x1, 17*XLEN/8, x5)

inst_48:// rs2_b0_val == -1, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xff0680dff608fb07;  op2val:0x4aa107f10f6f7ff
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xff0680dff608fb07, 0x4aa107f10f6f7ff, x1, 18*XLEN/8, x5)

inst_49:// rs2_b0_val == 0, rs2_b7_val == 32
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f9f83ffc080880;  op2val:0x2001f901f9bfef00
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3f9f83ffc080880, 0x2001f901f9bfef00, x1, 19*XLEN/8, x5)

inst_50:// rs1_b1_val == -17, rs2_b0_val == 1, rs1_b5_val == -1, rs2_b2_val == -17, rs2_b3_val == -128, rs1_b3_val == 0
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbaaff0100feef80;  op2val:0x407f8aa80ef8001
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfbaaff0100feef80, 0x407f8aa80ef8001, x1, 20*XLEN/8, x5)

inst_51:// rs1_b1_val == -65, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x10fef9083f07bf06;  op2val:0x2bf09fa40800502
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x10fef9083f07bf06, 0x2bf09fa40800502, x1, 21*XLEN/8, x5)

inst_52:// rs1_b1_val == 85, rs1_b2_val == 2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x2f8ef06c00255bf;  op2val:0xc0fa3f20f9050180
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x2f8ef06c00255bf, 0xc0fa3f20f9050180, x1, 22*XLEN/8, x5)

inst_53:// rs1_b2_val == -128, rs2_b0_val == -86, rs1_b4_val == 2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xff064002f780ef06;  op2val:0xffdf10fdaa0609aa
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xff064002f780ef06, 0xffdf10fdaa0609aa, x1, 23*XLEN/8, x5)

inst_54:// rs2_b0_val == 16, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf707fe02ef07bf20;  op2val:0x30655fac0bf0810
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf707fe02ef07bf20, 0x30655fac0bf0810, x1, 24*XLEN/8, x5)

inst_55:// rs2_b0_val == 32, rs2_b2_val == -2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbf6aafa20fd0202;  op2val:0xf8f9f606aafebf20
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfbf6aafa20fd0202, 0xf8f9f606aafebf20, x1, 25*XLEN/8, x5)

inst_56:// rs2_b7_val == 127, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9057f0103fe207f;  op2val:0x7ff740fc00aa0420
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf9057f0103fe207f, 0x7ff740fc00aa0420, x1, 26*XLEN/8, x5)

inst_57:// rs2_b0_val == -65, rs1_b4_val == 127, rs2_b3_val == -33, rs1_b2_val == -17
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3efbf7ffaeffb06;  op2val:0x3073ffedf05f8bf
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3efbf7ffaeffb06, 0x3073ffedf05f8bf, x1, 27*XLEN/8, x5)

inst_58:// rs2_b7_val == 16, rs2_b3_val == -9
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x210073fff55f655;  op2val:0x10100204f704f9fe
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x210073fff55f655, 0x10100204f704f9fe, x1, 28*XLEN/8, x5)

inst_59:// rs2_b1_val == -3, rs1_b4_val == 64
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7fdfaa4080808009;  op2val:0x955f7550507fddf
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x7fdfaa4080808009, 0x955f7550507fddf, x1, 29*XLEN/8, x5)

inst_60:// rs1_b3_val == 2, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa20091002f7f604;  op2val:0x40ffaa04fceff7f7
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xaa20091002f7f604, 0x40ffaa04fceff7f7, x1, 30*XLEN/8, x5)

inst_61:// rs1_b3_val == 8, rs2_b1_val == 2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3faa070708fc0100;  op2val:0xf6fd098010f802fd
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3faa070708fc0100, 0xf6fd098010f802fd, x1, 31*XLEN/8, x5)

inst_62:// rs1_b3_val == 64, rs1_b5_val == -3, rs1_b6_val == 4
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xc004fddf4001fa00;  op2val:0x2c0c00901f900ff
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xc004fddf4001fa00, 0x2c0c00901f900ff, x1, 32*XLEN/8, x5)

inst_63:// rs1_b3_val == -33, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xeffaf703dfaa4001;  op2val:0x440f7bffa08ff05
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xeffaf703dfaa4001, 0x440f7bffa08ff05, x1, 33*XLEN/8, x5)

inst_64:// rs2_b2_val == 16, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xdffb7f7ff91008bf;  op2val:0x3ffc0606031004c0
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xdffb7f7ff91008bf, 0x3ffc0606031004c0, x1, 34*XLEN/8, x5)

inst_65:// rs2_b2_val == 64, rs2_b3_val == 2
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb07f8fc02c04001;  op2val:0x5580fd0902400920
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfb07f8fc02c04001, 0x5580fd0902400920, x1, 35*XLEN/8, x5)

inst_66:// rs2_b2_val == -3, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f955fcf71009f9;  op2val:0x10c040c006fd033f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3f955fcf71009f9, 0x10c040c006fd033f, x1, 36*XLEN/8, x5)

inst_67:// rs2_b3_val == 8, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf67f0040df80f6f7;  op2val:0xf6fefb20088040fa
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf67f0040df80f6f7, 0xf6fefb20088040fa, x1, 37*XLEN/8, x5)

inst_68:// rs2_b3_val == 32, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfdc0aa1008084002;  op2val:0x200010f920f8c03f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfdc0aa1008084002, 0x200010f920f8c03f, x1, 38*XLEN/8, x5)

inst_69:// rs1_b5_val == -5, rs1_b6_val == -128
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xc080fb02064040fe;  op2val:0x3f00f8ffdff90407
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xc080fb02064040fe, 0x3f00f8ffdff90407, x1, 39*XLEN/8, x5)

inst_70:// rs1_b4_val == -5, rs2_b7_val == -33
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x27f09fb024008fd;  op2val:0xdf7f7f4005100910
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x27f09fb024008fd, 0xdf7f7f4005100910, x1, 40*XLEN/8, x5)

inst_71:// rs2_b4_val == 2, rs2_b7_val == -9
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xdff9f9dfdff709fa;  op2val:0xf7dffb02fe053fff
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xdff9f9dfdff709fa, 0xf7dffb02fe053fff, x1, 41*XLEN/8, x5)

inst_72:// rs2_b2_val == -9, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x10509fe55fa0300;  op2val:0xfa0406fefbf70480
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x10509fe55fa0300, 0xfa0406fefbf70480, x1, 42*XLEN/8, x5)

inst_73:// rs1_b2_val == -65, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f10f905fdbf08f6;  op2val:0xdfbfff00effe04fe
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x3f10f905fdbf08f6, 0xdfbfff00effe04fe, x1, 43*XLEN/8, x5)

inst_74:// rs1_b6_val == 1, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x01f8071040fd55;  op2val:0x880032080fe1055
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x01f8071040fd55, 0x880032080fe1055, x1, 44*XLEN/8, x5)

inst_75:// rs2_b1_val == 32, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb200807fcdfc0aa;  op2val:0x10355ff40fc2006
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xfb200807fcdfc0aa, 0x10355ff40fc2006, x1, 45*XLEN/8, x5)

inst_76:// rs1_b4_val == -9, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa3f05f7fefa7ff6;  op2val:0xf700fe03aa08c0fe
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xaa3f05f7fefa7ff6, 0xf700fe03aa08c0fe, x1, 46*XLEN/8, x5)

inst_77:// rs2_b1_val == -2, 
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x10fffcf6fa55bff9;  op2val:0xf73f0455ff7ffe10
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x10fffcf6fa55bff9, 0xf73f0455ff7ffe10, x1, 47*XLEN/8, x5)

inst_78:// rs1_b0_val == 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b4_val == -65, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == -65, rs2_b7_val == -86, rs1_b7_val == -9, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b0_val == -33, rs1_b4_val == -1, rs2_b5_val == -3, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == 85, rs2_b6_val == 1, rs1_b6_val == 8
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf70880fff8550600;  op2val:0xaa01fdbf3f3fbfdf
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf70880fff8550600, 0xaa01fdbf3f3fbfdf, x1, 48*XLEN/8, x5)

inst_79:// rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == -17, rs2_b0_val == 127, rs1_b3_val == 16, rs1_b0_val == rs2_b0_val, rs2_b6_val == -17, rs2_b2_val == -1, rs1_b2_val == 1, rs1_b5_val == 16, rs1_b7_val == 4, rs2_b7_val == 8, rs2_b5_val == -65, rs2_b4_val == 8
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x4f910061001067f;  op2val:0x8efbf0809ffef7f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x4f910061001067f, 0x8efbf0809ffef7f, x1, 49*XLEN/8, x5)

inst_80:// rs1_b0_val == -33, rs1_b6_val == 16, rs2_b6_val == 32, rs1_b1_val == -9, rs2_b4_val == -3
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0x71007f6fb3ff7df;  op2val:0xf920f8fdfc05bf05
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0x71007f6fb3ff7df, 0xf920f8fdfc05bf05, x1, 50*XLEN/8, x5)

inst_81:// rs1_b0_val == -86, rs2_b1_val == -5, rs1_b4_val == 0, rs2_b5_val == -17, rs1_b3_val == -86
// opcode: pssub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6f83f00aa07f9aa;  op2val:0xfe55ef080106fb7f
TEST_RR_OP(pssub.b, x31, x30, x29, 0x0000000000000000, 0xf6f83f00aa07f9aa, 0xfe55ef080106fb7f, x1, 51*XLEN/8, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x12_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 52*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
