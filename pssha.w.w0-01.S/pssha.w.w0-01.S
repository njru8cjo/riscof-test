
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu Dec  5 06:47:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p8.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pssha.w.w0 instruction of the RISC-V RV64PZicsr extension for the pssha.w.w0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pssha.w.w0)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs2 == rd != rs1, rs1==x9, rs2==x29, rd==x29, rs1_w0_val == -2147483648, rs2_w1_val == 65536, rs2_w0_val == 1073741824, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -4097, rs1_w0_val != rs2_w0_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val != rs2_w1_val
// opcode: pssha.w.w0 ; op1:x9; op2:x29; dest:x29; op1val:0xffffefff80000000;  op2val:0x01000040000000
TEST_RR_OP(pssha.w.w0, x29, x9, x29, 0x0000000000000000, 0xffffefff80000000, 0x01000040000000, x3, 0*XLEN/8, x4)

inst_1:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_w0_val == -1, rs2_w1_val == -8193, rs1_w1_val == 0
// opcode: pssha.w.w0 ; op1:x18; op2:x18; dest:x18; op1val:0x000000ffffffff;  op2val:0xffffdfff00000006
TEST_RR_OP(pssha.w.w0, x18, x18, x18, 0x0000000000000000, 0x000000ffffffff, 0xffffdfff00000006, x3, 1*XLEN/8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x2, rs1_w0_val == 0, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -17, rs1_w1_val == -33
// opcode: pssha.w.w0 ; op1:x27; op2:x27; dest:x2; op1val:0xffffffdf00000000;  op2val:0xffffffef00000005
TEST_RR_OP(pssha.w.w0, x2, x27, x27, 0x0000000000000000, 0xffffffdf00000000, 0xffffffef00000005, x3, 2*XLEN/8, x4)

inst_3:
// rs1 == rd != rs2, rs1==x15, rs2==x19, rd==x15, rs1_w0_val == 1, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 512, rs1_w1_val == -8388609, rs2_w1_val == -65537
// opcode: pssha.w.w0 ; op1:x15; op2:x19; dest:x15; op1val:0xff7fffff00000001;  op2val:0xfffeffff00000200
TEST_RR_OP(pssha.w.w0, x15, x15, x19, 0x0000000000000000, 0xff7fffff00000001, 0xfffeffff00000200, x3, 3*XLEN/8, x4)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x13, rd==x24, rs1_w0_val == 2147483647, rs2_w0_val == 16, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1073741825, rs1_w1_val == 32768
// opcode: pssha.w.w0 ; op1:x31; op2:x13; dest:x24; op1val:0x0080007fffffff;  op2val:0xbfffffff00000010
TEST_RR_OP(pssha.w.w0, x24, x31, x13, 0x0000000000000000, 0x0080007fffffff, 0xbfffffff00000010, x3, 4*XLEN/8, x4)

inst_5:
// rs1==x10, rs2==x28, rd==x6, rs1_w0_val == 2, rs1_w1_val == -131073, rs2_w1_val == -67108865, rs2_w0_val == 8388608
// opcode: pssha.w.w0 ; op1:x10; op2:x28; dest:x6; op1val:0xfffdffff00000002;  op2val:0xfbffffff00800000
TEST_RR_OP(pssha.w.w0, x6, x10, x28, 0x0000000000000000, 0xfffdffff00000002, 0xfbffffff00800000, x3, 5*XLEN/8, x4)

inst_6:
// rs1==x23, rs2==x0, rd==x16, rs1_w0_val == 4, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -65537
// opcode: pssha.w.w0 ; op1:x23; op2:x0; dest:x16; op1val:0xfffffff900000004;  op2val:0xfffefffffffeffff
TEST_RR_OP(pssha.w.w0, x16, x23, x0, 0x0000000000000000, 0xfffffff900000004, 0xfffefffffffeffff, x3, 6*XLEN/8, x4)

inst_7:
// rs1==x26, rs2==x23, rd==x21, rs1_w0_val == 8, rs1_w1_val == -513, rs2_w1_val == -3, rs2_w0_val == 134217728
// opcode: pssha.w.w0 ; op1:x26; op2:x23; dest:x21; op1val:0xfffffdff00000008;  op2val:0xfffffffd08000000
TEST_RR_OP(pssha.w.w0, x21, x26, x23, 0x0000000000000000, 0xfffffdff00000008, 0xfffffffd08000000, x3, 7*XLEN/8, x4)

inst_8:
// rs1==x17, rs2==x14, rd==x9, rs1_w0_val == 16, rs2_w0_val == 64, rs2_w1_val == 16384, rs1_w1_val == -16777217
// opcode: pssha.w.w0 ; op1:x17; op2:x14; dest:x9; op1val:0xfeffffff00000010;  op2val:0x00400000000040
TEST_RR_OP(pssha.w.w0, x9, x17, x14, 0x0000000000000000, 0xfeffffff00000010, 0x00400000000040, x3, 8*XLEN/8, x4)

inst_9:
// rs1==x19, rs2==x12, rd==x17, rs1_w0_val == 32, rs2_w0_val == 65536, rs1_w1_val == -8193, rs2_w1_val == 33554432
// opcode: pssha.w.w0 ; op1:x19; op2:x12; dest:x17; op1val:0xffffdfff00000020;  op2val:0x200000000010000
TEST_RR_OP(pssha.w.w0, x17, x19, x12, 0x0000000000000000, 0xffffdfff00000020, 0x200000000010000, x3, 9*XLEN/8, x4)

inst_10:
// rs1==x8, rs2==x24, rd==x20, rs1_w0_val == 64, rs2_w0_val == -257, rs1_w1_val == -1, rs2_w1_val == 4194304
// opcode: pssha.w.w0 ; op1:x8; op2:x24; dest:x20; op1val:0xffffffff00000040;  op2val:0x400000fffffeff
TEST_RR_OP(pssha.w.w0, x20, x8, x24, 0x0000000000000000, 0xffffffff00000040, 0x400000fffffeff, x3, 10*XLEN/8, x4)

inst_11:
// rs1==x6, rs2==x10, rd==x13, rs1_w0_val == 128, rs2_w1_val == -536870913, rs1_w1_val == -2097153, rs2_w0_val == -1025
// opcode: pssha.w.w0 ; op1:x6; op2:x10; dest:x13; op1val:0xffdfffff00000080;  op2val:0xdffffffffffffbff
TEST_RR_OP(pssha.w.w0, x13, x6, x10, 0x0000000000000000, 0xffdfffff00000080, 0xdffffffffffffbff, x3, 11*XLEN/8, x4)

inst_12:
// rs1==x5, rs2==x26, rd==x8, rs1_w0_val == 256, rs2_w1_val == 262144, rs2_w0_val == -16777217
// opcode: pssha.w.w0 ; op1:x5; op2:x26; dest:x8; op1val:0xffffffff00000100;  op2val:0x040000feffffff
TEST_RR_OP(pssha.w.w0, x8, x5, x26, 0x0000000000000000, 0xffffffff00000100, 0x040000feffffff, x3, 12*XLEN/8, x4)

inst_13:
// rs1==x1, rs2==x6, rd==x28, rs1_w0_val == 512, rs1_w1_val == -67108865, rs2_w0_val == 16384, rs2_w1_val == -16777217
// opcode: pssha.w.w0 ; op1:x1; op2:x6; dest:x28; op1val:0xfbffffff00000200;  op2val:0xfeffffff00004000
TEST_RR_OP(pssha.w.w0, x28, x1, x6, 0x0000000000000000, 0xfbffffff00000200, 0xfeffffff00004000, x3, 13*XLEN/8, x4)

inst_14:
// rs1==x12, rs2==x21, rd==x1, rs1_w0_val == 1024, rs2_w0_val == 1048576
// opcode: pssha.w.w0 ; op1:x12; op2:x21; dest:x1; op1val:0xfffffff900000400;  op2val:0x00000700100000
TEST_RR_OP(pssha.w.w0, x1, x12, x21, 0x0000000000000000, 0xfffffff900000400, 0x00000700100000, x3, 14*XLEN/8, x4)

inst_15:
// rs1==x25, rs2==x17, rd==x26, rs1_w0_val == 2048, rs2_w0_val == -4194305, rs2_w1_val == -1048577, rs1_w1_val == 16384
// opcode: pssha.w.w0 ; op1:x25; op2:x17; dest:x26; op1val:0x00400000000800;  op2val:0xffefffffffbfffff
TEST_RR_OP(pssha.w.w0, x26, x25, x17, 0x0000000000000000, 0x00400000000800, 0xffefffffffbfffff, x3, 15*XLEN/8, x4)

inst_16:
// rs1==x30, rs2==x20, rd==x25, rs1_w0_val == 4096, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 32, rs2_w0_val == 1024, rs1_w1_val == 128
// opcode: pssha.w.w0 ; op1:x30; op2:x20; dest:x25; op1val:0x00008000001000;  op2val:0x00002000000400
TEST_RR_OP(pssha.w.w0, x25, x30, x20, 0x0000000000000000, 0x00008000001000, 0x00002000000400, x3, 16*XLEN/8, x10)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x2, rs2==x3, rd==x22, rs1_w0_val == 8192, rs1_w1_val == -4194305, rs2_w1_val == -1431655766
// opcode: pssha.w.w0 ; op1:x2; op2:x3; dest:x22; op1val:0xffbfffff00002000;  op2val:0xaaaaaaaa40000000
TEST_RR_OP(pssha.w.w0, x22, x2, x3, 0x0000000000000000, 0xffbfffff00002000, 0xaaaaaaaa40000000, x6, 0*XLEN/8, x10)

inst_18:
// rs1==x22, rs2==x25, rd==x7, rs1_w0_val == 16384, rs1_w1_val == 256, rs2_w0_val == 2147483647
// opcode: pssha.w.w0 ; op1:x22; op2:x25; dest:x7; op1val:0x00010000004000;  op2val:0x0100007fffffff
TEST_RR_OP(pssha.w.w0, x7, x22, x25, 0x0000000000000000, 0x00010000004000, 0x0100007fffffff, x6, 1*XLEN/8, x10)

inst_19:
// rs1==x14, rs2==x4, rd==x11, rs1_w0_val == 32768, rs1_w1_val == -134217729, rs2_w0_val == -1048577
// opcode: pssha.w.w0 ; op1:x14; op2:x4; dest:x11; op1val:0xf7ffffff00008000;  op2val:0xfffffffdffefffff
TEST_RR_OP(pssha.w.w0, x11, x14, x4, 0x0000000000000000, 0xf7ffffff00008000, 0xfffffffdffefffff, x6, 2*XLEN/8, x10)

inst_20:
// rs1==x20, rs2==x11, rd==x14, rs1_w0_val == 65536, rs2_w1_val == 4, rs1_w1_val == 1024
// opcode: pssha.w.w0 ; op1:x20; op2:x11; dest:x14; op1val:0x00040000010000;  op2val:0x0000043fffffff
TEST_RR_OP(pssha.w.w0, x14, x20, x11, 0x0000000000000000, 0x00040000010000, 0x0000043fffffff, x6, 3*XLEN/8, x10)

inst_21:
// rs1==x11, rs2==x5, rd==x31, rs1_w0_val == 131072, 
// opcode: pssha.w.w0 ; op1:x11; op2:x5; dest:x31; op1val:0xffdfffff00020000;  op2val:0xfffffffa00800000
TEST_RR_OP(pssha.w.w0, x31, x11, x5, 0x0000000000000000, 0xffdfffff00020000, 0xfffffffa00800000, x6, 4*XLEN/8, x10)

inst_22:
// rs1==x16, rs2==x2, rd==x12, rs1_w0_val == 262144, rs2_w1_val == -2049, rs2_w0_val == -513
// opcode: pssha.w.w0 ; op1:x16; op2:x2; dest:x12; op1val:0xffdfffff00040000;  op2val:0xfffff7fffffffdff
TEST_RR_OP(pssha.w.w0, x12, x16, x2, 0x0000000000000000, 0xffdfffff00040000, 0xfffff7fffffffdff, x6, 5*XLEN/8, x10)

inst_23:
// rs1==x13, rs2==x9, rd==x3, rs1_w0_val == 524288, rs1_w1_val == -3
// opcode: pssha.w.w0 ; op1:x13; op2:x9; dest:x3; op1val:0xfffffffd00080000;  op2val:0x00000500000400
TEST_RR_OP(pssha.w.w0, x3, x13, x9, 0x0000000000000000, 0xfffffffd00080000, 0x00000500000400, x6, 6*XLEN/8, x10)

inst_24:
// rs1==x28, rs2==x16, rd==x5, rs1_w0_val == 1048576, rs1_w1_val == -33554433, rs2_w1_val == 2048, rs2_w0_val == -17
// opcode: pssha.w.w0 ; op1:x28; op2:x16; dest:x5; op1val:0xfdffffff00100000;  op2val:0x000800ffffffef
TEST_RR_OP(pssha.w.w0, x5, x28, x16, 0x0000000000000000, 0xfdffffff00100000, 0x000800ffffffef, x6, 7*XLEN/8, x10)

inst_25:
// rs1==x21, rs2==x7, rd==x0, rs1_w0_val == 2097152, rs1_w1_val == 1048576
// opcode: pssha.w.w0 ; op1:x21; op2:x7; dest:x0; op1val:0x10000000200000;  op2val:0x004000ffefffff
TEST_RR_OP(pssha.w.w0, x0, x21, x7, 0x0000000000000000, 0x10000000200000, 0x004000ffefffff, x6, 8*XLEN/8, x10)

inst_26:
// rs1==x3, rs2==x8, rd==x23, rs1_w0_val == 4194304, rs1_w1_val == 33554432, rs2_w0_val == 128
// opcode: pssha.w.w0 ; op1:x3; op2:x8; dest:x23; op1val:0x200000000400000;  op2val:0xfffeffff00000080
TEST_RR_OP(pssha.w.w0, x23, x3, x8, 0x0000000000000000, 0x200000000400000, 0xfffeffff00000080, x6, 9*XLEN/8, x10)

inst_27:
// rs1==x29, rs2==x31, rd==x4, rs1_w0_val == 8388608, rs2_w1_val == -1025, rs1_w1_val == 64
// opcode: pssha.w.w0 ; op1:x29; op2:x31; dest:x4; op1val:0x00004000800000;  op2val:0xfffffbff3fffffff
TEST_RR_OP(pssha.w.w0, x4, x29, x31, 0x0000000000000000, 0x00004000800000, 0xfffffbff3fffffff, x6, 10*XLEN/8, x10)

inst_28:
// rs1==x4, rs2==x1, rd==x19, rs1_w0_val == 16777216, rs1_w1_val == -262145, rs2_w1_val == -32769, rs2_w0_val == 524288
// opcode: pssha.w.w0 ; op1:x4; op2:x1; dest:x19; op1val:0xfffbffff01000000;  op2val:0xffff7fff00080000
TEST_RR_OP(pssha.w.w0, x19, x4, x1, 0x0000000000000000, 0xfffbffff01000000, 0xffff7fff00080000, x6, 11*XLEN/8, x10)

inst_29:
// rs1==x0, rs2==x15, rd==x27, rs1_w0_val == 33554432, rs2_w0_val == -2, rs2_w1_val == -4194305
// opcode: pssha.w.w0 ; op1:x0; op2:x15; dest:x27; op1val:0x00000702000000;  op2val:0xffbffffffffffffe
TEST_RR_OP(pssha.w.w0, x27, x0, x15, 0x0000000000000000, 0x00000702000000, 0xffbffffffffffffe, x6, 12*XLEN/8, x10)

inst_30:
// rs1==x7, rs2==x30, rd==x10, rs1_w0_val == 67108864, rs2_w0_val == -8193, rs2_w1_val == -1
// opcode: pssha.w.w0 ; op1:x7; op2:x30; dest:x10; op1val:0x00040004000000;  op2val:0xffffffffffffdfff
TEST_RR_OP(pssha.w.w0, x10, x7, x30, 0x0000000000000000, 0x00040004000000, 0xffffffffffffdfff, x6, 13*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x24, rs2==x22, rd==x30, rs1_w0_val == 134217728, rs2_w0_val == 268435456, rs1_w1_val == 67108864
// opcode: pssha.w.w0 ; op1:x24; op2:x22; dest:x30; op1val:0x400000008000000;  op2val:0xbfffffff10000000
TEST_RR_OP(pssha.w.w0, x30, x24, x22, 0x0000000000000000, 0x400000008000000, 0xbfffffff10000000, x1, 0*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010000000;  op2val:0xfffffff6fffffff6
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000010000000, 0xfffffff6fffffff6, x1, 1*XLEN/8, x2)

inst_33:
// rs1_w0_val == 536870912, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00400020000000;  op2val:0x000003c0000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00400020000000, 0x000003c0000000, x1, 2*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs2_w0_val == 33554432, rs1_w1_val == -2
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe40000000;  op2val:0xc000000002000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffe40000000, 0xc000000002000000, x1, 3*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs2_w0_val == -65, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffffe;  op2val:0x000007ffffffbf
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000009fffffffe, 0x000007ffffffbf, x1, 4*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs2_w1_val == -2097153, rs1_w1_val == -257
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffd;  op2val:0xffdfffff00100000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffd, 0xffdfffff00100000, x1, 5*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs2_w0_val == 4096
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffb;  op2val:0x40000000001000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffb, 0x40000000001000, x1, 6*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w1_val == 512
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff7;  op2val:0x000200fffffff6
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff7, 0x000200fffffff6, x1, 7*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs1_w1_val == -17, rs2_w0_val == 131072
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffef;  op2val:0x00002000020000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffef, 0x00002000020000, x1, 8*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs2_w1_val == -16385, rs1_w1_val == 1
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffffdf;  op2val:0xffffbfff02000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000001ffffffdf, 0xffffbfff02000000, x1, 9*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, rs2_w1_val == -513, rs2_w0_val == 8
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffbf;  op2val:0xfffffdff00000008
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffbf, 0xfffffdff00000008, x1, 10*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs2_w1_val == -524289, rs1_w1_val == -2147483648, rs2_w0_val == -9
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffff7f;  op2val:0xfff7fffffffffff7
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x80000000ffffff7f, 0xfff7fffffffffff7, x1, 11*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs1_w1_val == -1048577, rs2_w1_val == -33
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffeff;  op2val:0xffffffdf00000007
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffeff, 0xffffffdf00000007, x1, 12*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffdff;  op2val:0xfffffffd00020000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffdff, 0xfffffffd00020000, x1, 13*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs2_w0_val == -4097
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffbff;  op2val:0xffff7fffffffefff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffbff, 0xffff7fffffffefff, x1, 14*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs2_w1_val == 16
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffff7ff;  op2val:0x000010fffffff7
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000000fffff7ff, 0x000010fffffff7, x1, 15*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs2_w0_val == -268435457
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffefff;  op2val:0xffdfffffefffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffefff, 0xffdfffffefffffff, x1, 16*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs2_w0_val == 4, rs2_w1_val == -8388609
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffdfff;  op2val:0xff7fffff00000004
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffdfff, 0xff7fffff00000004, x1, 17*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffbfff;  op2val:0xfffffff8fffffdff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x100000ffffbfff, 0xfffffff8fffffdff, x1, 18*XLEN/8, x2)

inst_50:
// rs1_w0_val == -32769, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffff7fff;  op2val:0x000800feffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffdffff7fff, 0x000800feffffff, x1, 19*XLEN/8, x2)

inst_51:
// rs1_w0_val == -65537, rs1_w1_val == 8
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffeffff;  op2val:0x000020ffbfffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000008fffeffff, 0x000020ffbfffff, x1, 20*XLEN/8, x2)

inst_52:
// rs2_w1_val == -131073, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffbf;  op2val:0xfffdfffffffffff8
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffbf, 0xfffdfffffffffff8, x1, 21*XLEN/8, x2)

inst_53:
// rs2_w1_val == -262145, rs1_w0_val == 1431655765, rs2_w0_val == -1431655766
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff55555555;  op2val:0xfffbffffaaaaaaaa
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffdff55555555, 0xfffbffffaaaaaaaa, x1, 22*XLEN/8, x2)

inst_54:
// rs2_w1_val == -33554433, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00010000;  op2val:0xfdfffffffffffff6
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffe00010000, 0xfdfffffffffffff6, x1, 23*XLEN/8, x2)

inst_55:
// rs2_w1_val == -134217729, rs2_w0_val == -2147483648
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffff7fff;  op2val:0xf7ffffff80000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffbfffffffff7fff, 0xf7ffffff80000000, x1, 24*XLEN/8, x2)

inst_56:
// rs2_w1_val == -268435457, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffff6;  op2val:0xefffffffffffefff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffff6, 0xefffffffffffefff, x1, 25*XLEN/8, x2)

inst_57:
// rs2_w1_val == 1431655765, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffffc;  op2val:0x55555555fffffbff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffffc, 0x55555555fffffbff, x1, 26*XLEN/8, x2)

inst_58:
// rs1_w0_val == rs2_w0_val, rs2_w1_val == 536870912
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000007;  op2val:0x2000000000000007
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00800000000007, 0x2000000000000007, x1, 27*XLEN/8, x2)

inst_59:
// rs1_w1_val == rs2_w1_val, rs1_w1_val == 524288, rs2_w1_val == 524288
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000000;  op2val:0x08000000010000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x08000000000000, 0x08000000010000, x1, 28*XLEN/8, x2)

inst_60:
// rs1_w0_val == -131073, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffdffff;  op2val:0xfffffff8feffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000006fffdffff, 0xfffffff8feffffff, x1, 29*XLEN/8, x2)

inst_61:
// rs1_w0_val == -262145, rs1_w1_val == -268435457, rs2_w0_val == -131073
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffbffff;  op2val:0x2000000fffdffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xeffffffffffbffff, 0x2000000fffdffff, x1, 30*XLEN/8, x2)

inst_62:
// rs1_w0_val == -524289, rs1_w1_val == 2048
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fff7ffff;  op2val:0xfffefffffffffdff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000800fff7ffff, 0xfffefffffffffdff, x1, 31*XLEN/8, x2)

inst_63:
// rs1_w0_val == -1048577, rs1_w1_val == 1073741824
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffefffff;  op2val:0xfffbffffefffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x40000000ffefffff, 0xfffbffffefffffff, x1, 32*XLEN/8, x2)

inst_64:
// rs1_w0_val == -2097153, rs1_w1_val == 16777216
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffdfffff;  op2val:0xfffffbff02000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x1000000ffdfffff, 0xfffffbff02000000, x1, 33*XLEN/8, x2)

inst_65:
// rs1_w0_val == -4194305, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffbfffff;  op2val:0xffff7fffffefffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffdfffbfffff, 0xffff7fffffefffff, x1, 34*XLEN/8, x2)

inst_66:
// rs1_w0_val == -8388609, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ff7fffff;  op2val:0xfffffffcfffeffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000001ff7fffff, 0xfffffffcfffeffff, x1, 35*XLEN/8, x2)

inst_67:
// rs1_w0_val == -16777217, rs2_w1_val == 4096
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffeffffff;  op2val:0x001000fffffbff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0x001000fffffbff, x1, 36*XLEN/8, x2)

inst_68:
// rs1_w0_val == -33554433, rs2_w1_val == -9, rs1_w1_val == 8192
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fdffffff;  op2val:0xfffffff710000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x002000fdffffff, 0xfffffff710000000, x1, 37*XLEN/8, x2)

inst_69:
// rs1_w0_val == -67108865, rs2_w0_val == 8192, rs2_w1_val == 128
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fbffffff;  op2val:0x00008000002000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000005fbffffff, 0x00008000002000, x1, 38*XLEN/8, x2)

inst_70:
// rs1_w0_val == -134217729, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdff7ffffff;  op2val:0x000003fffffffe
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffdff7ffffff, 0x000003fffffffe, x1, 39*XLEN/8, x2)

inst_71:
// rs1_w0_val == -268435457, rs1_w1_val == -1431655766
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaefffffff;  op2val:0xfffbffffffbfffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaefffffff, 0xfffbffffffbfffff, x1, 40*XLEN/8, x2)

inst_72:
// rs1_w0_val == -536870913, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x100000dfffffff;  op2val:0x000020ffefffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x100000dfffffff, 0x000020ffefffff, x1, 41*XLEN/8, x2)

inst_73:
// rs1_w0_val == -1073741825, rs2_w1_val == 2097152
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffbfffffff;  op2val:0x200000feffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x3fffffffbfffffff, 0x200000feffffff, x1, 42*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1431655766, rs1_w1_val == -32769
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffaaaaaaaa;  op2val:0xfffffff7fffffeff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffff7fffaaaaaaaa, 0xfffffff7fffffeff, x1, 43*XLEN/8, x2)

inst_75:
// rs1_w1_val == 2147483647, rs2_w1_val == -4097
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000003;  op2val:0xffffefff00000003
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000003, 0xffffefff00000003, x1, 44*XLEN/8, x2)

inst_76:
// rs1_w1_val == 2, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000002;  op2val:0xfffff7ff00100000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000200000002, 0xfffff7ff00100000, x1, 45*XLEN/8, x2)

inst_77:
// rs1_w1_val == 4, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000100;  op2val:0x00000640000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000400000100, 0x00000640000000, x1, 46*XLEN/8, x2)

inst_78:
// rs1_w1_val == 16, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffff7fff;  op2val:0x0000207fffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000010ffff7fff, 0x0000207fffffff, x1, 47*XLEN/8, x2)

inst_79:
// rs1_w1_val == 32, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000020c0000000;  op2val:0xffff7fff00100000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000020c0000000, 0xffff7fff00100000, x1, 48*XLEN/8, x2)

inst_80:
// rs1_w1_val == 512, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffff;  op2val:0xfffdfffffffffff9
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000200ffffffff, 0xfffdfffffffffff9, x1, 49*XLEN/8, x2)

inst_81:
// rs1_w1_val == 4096, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffffe;  op2val:0x000020ffefffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x001000fffffffe, 0x000020ffefffff, x1, 50*XLEN/8, x2)

inst_82:
// rs1_w1_val == 65536, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000200;  op2val:0xffefffff00000006
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x01000000000200, 0xffefffff00000006, x1, 51*XLEN/8, x2)

inst_83:
// rs1_w1_val == 131072, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000006;  op2val:0xefffffff40000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x02000000000006, 0xefffffff40000000, x1, 52*XLEN/8, x2)

inst_84:
// rs1_w1_val == 262144, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x04000008000000;  op2val:0xfffff7ffffffefff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x04000008000000, 0xfffff7ffffffefff, x1, 53*XLEN/8, x2)

inst_85:
// rs1_w1_val == 2097152, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000005;  op2val:0xffffffffefffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x20000000000005, 0xffffffffefffffff, x1, 54*XLEN/8, x2)

inst_86:
// rs1_w1_val == 4194304, rs2_w1_val == 64
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x400000aaaaaaaa;  op2val:0x000040fffeffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x400000aaaaaaaa, 0x000040fffeffff, x1, 55*XLEN/8, x2)

inst_87:
// rs1_w1_val == 8388608, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffff7ff;  op2val:0x01000000000080
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x800000fffff7ff, 0x01000000000080, x1, 56*XLEN/8, x2)

inst_88:
// rs1_w1_val == 134217728, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000080000;  op2val:0xfffffffd10000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x800000000080000, 0xfffffffd10000000, x1, 57*XLEN/8, x2)

inst_89:
// rs1_w1_val == 268435456, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000008;  op2val:0xbfffffff00000200
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x1000000000000008, 0xbfffffff00000200, x1, 58*XLEN/8, x2)

inst_90:
// rs1_w1_val == 536870912, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000400;  op2val:0xffffdfff40000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x2000000000000400, 0xffffdfff40000000, x1, 59*XLEN/8, x2)

inst_91:
// rs1_w1_val == -5, rs2_w1_val == 1073741824
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00002000;  op2val:0x40000000ffffffef
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffb00002000, 0x40000000ffffffef, x1, 60*XLEN/8, x2)

inst_92:
// rs1_w1_val == -9, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000080;  op2val:0xfffffbffc0000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff700000080, 0xfffffbffc0000000, x1, 61*XLEN/8, x2)

inst_93:
// rs1_w1_val == -536870913, rs2_w0_val == 1
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffbff;  op2val:0xffffffff00000001
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffbff, 0xffffffff00000001, x1, 62*XLEN/8, x2)

inst_94:
// rs1_w1_val == -1073741825, rs2_w0_val == 2097152
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00100000;  op2val:0xfff7ffff00200000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xbfffffff00100000, 0xfff7ffff00200000, x1, 63*XLEN/8, x2)

inst_95:
// rs1_w1_val == 1431655765, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fbffffff;  op2val:0x3fffffff00000400
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x55555555fbffffff, 0x3fffffff00000400, x1, 64*XLEN/8, x2)

inst_96:
// rs2_w0_val == -1, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000080;  op2val:0x20000000ffffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00020000000080, 0x20000000ffffffff, x1, 65*XLEN/8, x2)

inst_97:
// rs2_w0_val == 0, rs2_w1_val == 8
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc01000000;  op2val:0x00000800000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffc01000000, 0x00000800000000, x1, 66*XLEN/8, x2)

inst_98:
// rs2_w0_val == 2, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x00080000000002
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x00080000000002, x1, 67*XLEN/8, x2)

inst_99:
// rs2_w0_val == 32, rs2_w1_val == 16777216
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff40000000;  op2val:0x100000000000020
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffdfffff40000000, 0x100000000000020, x1, 68*XLEN/8, x2)

inst_100:
// rs2_w0_val == 256, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00001000;  op2val:0x00002000000100
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xbfffffff00001000, 0x00002000000100, x1, 69*XLEN/8, x2)

inst_101:
// rs2_w0_val == 2048, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffff7fff;  op2val:0x00080000000800
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x004000ffff7fff, 0x00080000000800, x1, 70*XLEN/8, x2)

inst_102:
// rs2_w0_val == 32768, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffd;  op2val:0xfbffffff00008000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffffd, 0xfbffffff00008000, x1, 71*XLEN/8, x2)

inst_103:
// rs2_w0_val == 262144, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffeffff;  op2val:0xff7fffff00040000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffeffff, 0xff7fffff00040000, x1, 72*XLEN/8, x2)

inst_104:
// rs2_w0_val == 4194304, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000003efffffff;  op2val:0x00100000400000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000003efffffff, 0x00100000400000, x1, 73*XLEN/8, x2)

inst_105:
// rs2_w0_val == 16777216, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000800000;  op2val:0xfffdffff01000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x02000000800000, 0xfffdffff01000000, x1, 74*XLEN/8, x2)

inst_106:
// rs2_w0_val == 67108864, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000008;  op2val:0x00000404000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000500000008, 0x00000404000000, x1, 75*XLEN/8, x2)

inst_107:
// rs2_w0_val == 536870912, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffff6;  op2val:0x00002020000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x2000000fffffff6, 0x00002020000000, x1, 76*XLEN/8, x2)

inst_108:
// rs2_w0_val == -3, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x10000080000000;  op2val:0x000080fffffffd
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x10000080000000, 0x000080fffffffd, x1, 77*XLEN/8, x2)

inst_109:
// rs2_w0_val == -5, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffff;  op2val:0x000007fffffffb
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x008000ffffffff, 0x000007fffffffb, x1, 78*XLEN/8, x2)

inst_110:
// rs2_w0_val == -33, rs2_w1_val == -257
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000feffffff;  op2val:0xfffffeffffffffdf
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x40000000feffffff, 0xfffffeffffffffdf, x1, 79*XLEN/8, x2)

inst_111:
// rs2_w0_val == -129, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000001;  op2val:0xfeffffffffffff7f
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000001, 0xfeffffffffffff7f, x1, 80*XLEN/8, x2)

inst_112:
// rs2_w0_val == -2049, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500010000;  op2val:0xf7fffffffffff7ff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000500010000, 0xf7fffffffffff7ff, x1, 81*XLEN/8, x2)

inst_113:
// rs2_w0_val == -16385, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x08000055555555;  op2val:0x004000ffffbfff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x08000055555555, 0x004000ffffbfff, x1, 82*XLEN/8, x2)

inst_114:
// rs2_w0_val == -32769, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0x010000ffff7fff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0x010000ffff7fff, x1, 83*XLEN/8, x2)

inst_115:
// rs2_w0_val == -262145, rs2_w1_val == 131072
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ffff7fff;  op2val:0x020000fffbffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffff7fff, 0x020000fffbffff, x1, 84*XLEN/8, x2)

inst_116:
// rs2_w0_val == -524289, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffff7;  op2val:0xfdfffffffff7ffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x80000000fffffff7, 0xfdfffffffff7ffff, x1, 85*XLEN/8, x2)

inst_117:
// rs2_w0_val == -2097153, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffefffffff;  op2val:0x000006ffdfffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffbffffefffffff, 0x000006ffdfffff, x1, 86*XLEN/8, x2)

inst_118:
// rs2_w0_val == -8388609, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x100000020000000;  op2val:0xfffeffffff7fffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x100000020000000, 0xfffeffffff7fffff, x1, 87*XLEN/8, x2)

inst_119:
// rs2_w0_val == -33554433, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff7;  op2val:0xfff7fffffdffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff7, 0xfff7fffffdffffff, x1, 88*XLEN/8, x2)

inst_120:
// rs2_w0_val == -67108865, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x004000dfffffff;  op2val:0x010000fbffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x004000dfffffff, 0x010000fbffffff, x1, 89*XLEN/8, x2)

inst_121:
// rs2_w0_val == -134217729, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000040;  op2val:0xf7fffffff7ffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000040, 0xf7fffffff7ffffff, x1, 90*XLEN/8, x2)

inst_122:
// rs2_w0_val == -536870913, rs2_w1_val == 67108864
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000006dfffffff;  op2val:0x4000000dfffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000006dfffffff, 0x4000000dfffffff, x1, 91*XLEN/8, x2)

inst_123:
// rs2_w0_val == -1073741825, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00008000;  op2val:0x020000bfffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffdfffff00008000, 0x020000bfffffff, x1, 92*XLEN/8, x2)

inst_124:
// rs2_w0_val == 1431655765, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x40000055555555;  op2val:0xfffffffd55555555
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x40000055555555, 0xfffffffd55555555, x1, 93*XLEN/8, x2)

inst_125:
// rs2_w1_val == -2147483648, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000003;  op2val:0x80000000ffffbfff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff600000003, 0x80000000ffffbfff, x1, 94*XLEN/8, x2)

inst_126:
// rs2_w1_val == 0, rs1_w1_val == -524289
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffefffffff;  op2val:0x000000feffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfff7ffffefffffff, 0x000000feffffff, x1, 95*XLEN/8, x2)

inst_127:
// rs2_w1_val == 1, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x200000040000000;  op2val:0x00000100000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x200000040000000, 0x00000100000000, x1, 96*XLEN/8, x2)

inst_128:
// rs2_w1_val == 2147483647, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x0000013fffffff;  op2val:0x7fffffff00000004
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x0000013fffffff, 0x7fffffff00000004, x1, 97*XLEN/8, x2)

inst_129:
// rs2_w1_val == 2, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00080000;  op2val:0x00000202000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xff7fffff00080000, 0x00000202000000, x1, 98*XLEN/8, x2)

inst_130:
// rs2_w1_val == 256, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000002000;  op2val:0x000100ffff7fff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00080000002000, 0x000100ffff7fff, x1, 99*XLEN/8, x2)

inst_131:
// rs2_w1_val == 1024, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000010;  op2val:0x000400ffffdfff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000600000010, 0x000400ffffdfff, x1, 100*XLEN/8, x2)

inst_132:
// rs2_w1_val == 8192, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000004;  op2val:0x002000fdffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x02000000000004, 0x002000fdffffff, x1, 101*XLEN/8, x2)

inst_133:
// rs2_w1_val == 1048576, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000100;  op2val:0x10000000000007
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000100, 0x10000000000007, x1, 102*XLEN/8, x2)

inst_134:
// rs2_w1_val == 8388608, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff7fffffff;  op2val:0x80000000000080
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xff7fffff7fffffff, 0x80000000000080, x1, 103*XLEN/8, x2)

inst_135:
// rs2_w1_val == 134217728, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffff7fff;  op2val:0x8000000c0000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffff7fff, 0x8000000c0000000, x1, 104*XLEN/8, x2)

inst_136:
// rs2_w1_val == 268435456, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fff7ffff;  op2val:0x1000000000100000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x400000fff7ffff, 0x1000000000100000, x1, 105*XLEN/8, x2)

inst_137:
// rs1_w1_val == -65, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffdfffff;  op2val:0xffffbfff00002000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffbfffdfffff, 0xffffbfff00002000, x1, 106*XLEN/8, x2)

inst_138:
// rs1_w1_val == -129, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000080;  op2val:0x200000002000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000080, 0x200000002000000, x1, 107*XLEN/8, x2)

inst_139:
// rs2_w1_val == -2, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00080000;  op2val:0xfffffffefffbffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffbffff00080000, 0xfffffffefffbffff, x1, 108*XLEN/8, x2)

inst_140:
// rs1_w1_val == -1025, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000002;  op2val:0x000010fffffff9
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000002, 0x000010fffffff9, x1, 109*XLEN/8, x2)

inst_141:
// rs2_w1_val == -5, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00400080000000;  op2val:0xfffffffb02000000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00400080000000, 0xfffffffb02000000, x1, 110*XLEN/8, x2)

inst_142:
// rs1_w1_val == -2049, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00010000;  op2val:0xfffffbff00000009
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00010000, 0xfffffbff00000009, x1, 111*XLEN/8, x2)

inst_143:
// rs1_w1_val == -16385, rs2_w1_val == 32768
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff55555555;  op2val:0x00800000004000
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffbfff55555555, 0x00800000004000, x1, 112*XLEN/8, x2)

inst_144:
// rs2_w1_val == -65, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x000004feffffff;  op2val:0xffffffbfffffefff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x000004feffffff, 0xffffffbfffffefff, x1, 113*XLEN/8, x2)

inst_145:
// rs2_w1_val == -129, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00080000;  op2val:0xffffff7f00000800
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfdffffff00080000, 0xffffff7f00000800, x1, 114*XLEN/8, x2)

inst_146:
// rs1_w1_val == -65537, 
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffaaaaaaaa;  op2val:0x000007f7ffffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xfffeffffaaaaaaaa, 0x000007f7ffffff, x1, 115*XLEN/8, x2)

inst_147:
// rs1_w0_val == 0, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -17, rs1_w1_val == -33
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000000;  op2val:0xffffffef00000005
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000000, 0xffffffef00000005, x1, 116*XLEN/8, x2)

inst_148:
// rs1_w0_val == 2097152, rs1_w1_val == 1048576
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000200000;  op2val:0x004000ffefffff
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x10000000200000, 0x004000ffefffff, x1, 117*XLEN/8, x2)

inst_149:
// rs1_w0_val == 33554432, rs2_w0_val == -2, rs2_w1_val == -4194305
// opcode: pssha.w.w0 ; op1:x30; op2:x29; dest:x31; op1val:0x00000702000000;  op2val:0xffbffffffffffffe
TEST_RR_OP(pssha.w.w0, x31, x30, x29, 0x0000000000000000, 0x00000702000000, 0xffbffffffffffffe, x1, 118*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 119*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
