
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulh.h.be instruction of the RISC-V RV64PZicsr extension for the pmulh.h.be covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulh.h.be)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs2 == rd != rs1, rs1==x31, rs2==x29, rd==x29, rs1_h0_val == -32768, rs1_h1_val == -513, rs2_h0_val == 8192, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs2_h2_val == 16384, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 2, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val, rs1_h2_val == -2
// opcode: pmulh.h.be ; op1:x31; op2:x29; dest:x29; op1val:0x02fffefdff8000;  op2val:0x2004000fffa2000
TEST_RR_OP(pmulh.h.be, x29, x31, x29, 0x0000000000000000, 0x02fffefdff8000, 0x2004000fffa2000, x2, 0*XLEN/8, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x10, rs1_h0_val == -1, rs1_h1_val == -1025, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs2_h3_val == -2, rs1_h3_val == 32767, rs2_h2_val == -129, rs1_h3_val > 0 and rs2_h3_val < 0
// opcode: pmulh.h.be ; op1:x25; op2:x25; dest:x10; op1val:0x7fff0004fbffffff;  op2val:0xfffeff7f00060009
TEST_RR_OP(pmulh.h.be, x10, x25, x25, 0x0000000000000000, 0x7fff0004fbffffff, 0xfffeff7f00060009, x2, 1*XLEN/8, x5)

inst_2:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_h0_val == 0, rs1_h3_val == -17, rs2_h0_val == -3, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 2, rs1_h2_val == -3
// opcode: pmulh.h.be ; op1:x12; op2:x12; dest:x12; op1val:0xffeffffd00060000;  op2val:0x09fff80002fffd
TEST_RR_OP(pmulh.h.be, x12, x12, x12, 0x0000000000000000, 0xffeffffd00060000, 0x09fff80002fffd, x2, 2*XLEN/8, x5)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x13, rd==x28, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 128, rs1_h1_val == 16, rs1_h3_val == -1, rs1_h2_val == 8, rs2_h2_val == -8193, rs2_h1_val == 128
// opcode: pmulh.h.be ; op1:x28; op2:x13; dest:x28; op1val:0xffff000800100001;  op2val:0x80dfff00800005
TEST_RR_OP(pmulh.h.be, x28, x28, x13, 0x0000000000000000, 0xffff000800100001, 0x80dfff00800005, x2, 3*XLEN/8, x5)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x0, rd==x1, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -16385, rs1_h1_val == rs2_h1_val, rs2_h3_val == -8193, rs1_h3_val == 8192
// opcode: pmulh.h.be ; op1:x19; op2:x0; dest:x1; op1val:0x2000bfff00097fff;  op2val:0xdfffdfff0009fffe
TEST_RR_OP(pmulh.h.be, x1, x19, x0, 0x0000000000000000, 0x2000bfff00097fff, 0xdfffdfff0009fffe, x2, 4*XLEN/8, x5)

inst_5:
// rs1==x16, rs2==x7, rd==x23, rs1_h0_val == 2, rs2_h0_val == -5, rs1_h1_val == 0, rs1_h3_val == -513, rs2_h2_val == -5, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == 1, rs1_h2_val == 4096, rs2_h3_val == -4097
// opcode: pmulh.h.be ; op1:x16; op2:x7; dest:x23; op1val:0xfdff100000000002;  op2val:0xeffffffb0001fffb
TEST_RR_OP(pmulh.h.be, x23, x16, x7, 0x0000000000000000, 0xfdff100000000002, 0xeffffffb0001fffb, x2, 5*XLEN/8, x5)

inst_6:
// rs1==x17, rs2==x9, rd==x15, rs1_h0_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 1024, rs1_h3_val == 8, rs2_h1_val == -8193, rs2_h2_val == 8
// opcode: pmulh.h.be ; op1:x17; op2:x9; dest:x15; op1val:0x08000304000004;  op2val:0x3fff0008dfff0003
TEST_RR_OP(pmulh.h.be, x15, x17, x9, 0x0000000000000000, 0x08000304000004, 0x3fff0008dfff0003, x2, 6*XLEN/8, x5)

inst_7:
// rs1==x7, rs2==x14, rd==x19, rs1_h0_val == 8, rs2_h0_val == -8193, rs2_h2_val == -65, rs1_h3_val == 0
// opcode: pmulh.h.be ; op1:x7; op2:x14; dest:x19; op1val:0x00bffffff90008;  op2val:0x09ffbf0005dfff
TEST_RR_OP(pmulh.h.be, x19, x7, x14, 0x0000000000000000, 0x00bffffff90008, 0x09ffbf0005dfff, x2, 7*XLEN/8, x5)

inst_8:
// rs1==x4, rs2==x30, rd==x9, rs1_h0_val == 16, rs1_h2_val == 8192, rs1_h3_val == -5, rs2_h1_val == -65, rs2_h0_val == -2049
// opcode: pmulh.h.be ; op1:x4; op2:x30; dest:x9; op1val:0xfffb200000090010;  op2val:0xfff6ff7fffbff7ff
TEST_RR_OP(pmulh.h.be, x9, x4, x30, 0x0000000000000000, 0xfffb200000090010, 0xfff6ff7fffbff7ff, x2, 8*XLEN/8, x5)

inst_9:
// rs1==x11, rs2==x23, rd==x0, rs1_h0_val == 32, rs1_h2_val == 64, rs1_h3_val == -33, rs1_h1_val == -65
// opcode: pmulh.h.be ; op1:x11; op2:x23; dest:x0; op1val:0xffdf0040ffbf0020;  op2val:0x80fffaffbf0007
TEST_RR_OP(pmulh.h.be, x0, x11, x23, 0x0000000000000000, 0xffdf0040ffbf0020, 0x80fffaffbf0007, x2, 9*XLEN/8, x5)

inst_10:
// rs1==x21, rs2==x17, rd==x30, rs1_h0_val == 64, rs2_h2_val == 32, rs2_h1_val == 1024, rs2_h0_val == 8, rs1_h3_val == 1024, rs1_h1_val == -129
// opcode: pmulh.h.be ; op1:x21; op2:x17; dest:x30; op1val:0x4003fffff7f0040;  op2val:0x06002004000008
TEST_RR_OP(pmulh.h.be, x30, x21, x17, 0x0000000000000000, 0x4003fffff7f0040, 0x06002004000008, x2, 10*XLEN/8, x5)

inst_11:
// rs1==x3, rs2==x24, rd==x14, rs1_h0_val == 128, rs2_h1_val == 512, rs2_h3_val == -1
// opcode: pmulh.h.be ; op1:x3; op2:x24; dest:x14; op1val:0x07fffd00000080;  op2val:0xffff000302000005
TEST_RR_OP(pmulh.h.be, x14, x3, x24, 0x0000000000000000, 0x07fffd00000080, 0xffff000302000005, x2, 11*XLEN/8, x5)

inst_12:
// rs1==x30, rs2==x6, rd==x18, rs1_h0_val == 256, rs1_h2_val == 0, rs2_h1_val == -17, rs2_h0_val == -1025
// opcode: pmulh.h.be ; op1:x30; op2:x6; dest:x18; op1val:0xfff90000fff80100;  op2val:0xfffc0005ffeffbff
TEST_RR_OP(pmulh.h.be, x18, x30, x6, 0x0000000000000000, 0xfff90000fff80100, 0xfffc0005ffeffbff, x2, 12*XLEN/8, x5)

inst_13:
// rs1==x27, rs2==x26, rd==x24, rs1_h0_val == 512, rs1_h2_val == 1, rs2_h1_val == 4096, rs2_h3_val == -16385
// opcode: pmulh.h.be ; op1:x27; op2:x26; dest:x24; op1val:0x00000100060200;  op2val:0xbffffffb10000008
TEST_RR_OP(pmulh.h.be, x24, x27, x26, 0x0000000000000000, 0x00000100060200, 0xbffffffb10000008, x2, 13*XLEN/8, x5)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_14:
// rs1==x1, rs2==x2, rd==x13, rs1_h0_val == 1024, rs2_h1_val == 8192, rs2_h3_val == 32, rs2_h2_val == -17, rs1_h1_val == 8192, rs2_h0_val == 64
// opcode: pmulh.h.be ; op1:x1; op2:x2; dest:x13; op1val:0xfdff3fff20000400;  op2val:0x20ffef20000040
TEST_RR_OP(pmulh.h.be, x13, x1, x2, 0x0000000000000000, 0xfdff3fff20000400, 0x20ffef20000040, x9, 0*XLEN/8, x12)

inst_15:
// rs1==x24, rs2==x4, rd==x17, rs1_h0_val == 2048, rs1_h2_val == -1, rs2_h2_val == 64, rs2_h1_val == -4097, rs1_h1_val == 21845
// opcode: pmulh.h.be ; op1:x24; op2:x4; dest:x17; op1val:0x02ffff55550800;  op2val:0x2000040effffffc
TEST_RR_OP(pmulh.h.be, x17, x24, x4, 0x0000000000000000, 0x02ffff55550800, 0x2000040effffffc, x9, 1*XLEN/8, x12)

inst_16:
// rs1==x5, rs2==x11, rd==x27, rs1_h0_val == 4096, rs1_h1_val == 512
// opcode: pmulh.h.be ; op1:x5; op2:x11; dest:x27; op1val:0x09004002001000;  op2val:0x200fffc0006fff6
TEST_RR_OP(pmulh.h.be, x27, x5, x11, 0x0000000000000000, 0x09004002001000, 0x200fffc0006fff6, x9, 2*XLEN/8, x12)

inst_17:
// rs1==x26, rs2==x28, rd==x22, rs1_h0_val == 8192, rs1_h3_val == -129
// opcode: pmulh.h.be ; op1:x26; op2:x28; dest:x22; op1val:0xff7ffff800052000;  op2val:0xfff6400000800008
TEST_RR_OP(pmulh.h.be, x22, x26, x28, 0x0000000000000000, 0xff7ffff800052000, 0xfff6400000800008, x9, 3*XLEN/8, x12)

inst_18:
// rs1==x13, rs2==x18, rd==x3, rs1_h0_val == 16384, rs1_h2_val == -257, rs2_h3_val == 64, rs2_h0_val == -21846, rs1_h3_val == 32, rs1_h1_val == -2
// opcode: pmulh.h.be ; op1:x13; op2:x18; dest:x3; op1val:0x20fefffffe4000;  op2val:0x40ffbffffcaaaa
TEST_RR_OP(pmulh.h.be, x3, x13, x18, 0x0000000000000000, 0x20fefffffe4000, 0x40ffbffffcaaaa, x9, 4*XLEN/8, x12)

inst_19:
// rs1==x8, rs2==x1, rd==x20, rs1_h0_val == -2, rs1_h2_val == -33, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -2049, rs2_h0_val == -1, rs2_h1_val == -1
// opcode: pmulh.h.be ; op1:x8; op2:x1; dest:x20; op1val:0xf7ffffdf0400fffe;  op2val:0x40ffbfffffffff
TEST_RR_OP(pmulh.h.be, x20, x8, x1, 0x0000000000000000, 0xf7ffffdf0400fffe, 0x40ffbfffffffff, x9, 5*XLEN/8, x12)

inst_20:
// rs1==x15, rs2==x10, rd==x25, rs1_h0_val == -3, rs2_h1_val == 16384, rs1_h2_val == 21845, rs2_h2_val == -2, rs1_h1_val == 128, rs2_h0_val == 128
// opcode: pmulh.h.be ; op1:x15; op2:x10; dest:x25; op1val:0xfffc55550080fffd;  op2val:0x80fffe40000080
TEST_RR_OP(pmulh.h.be, x25, x15, x10, 0x0000000000000000, 0xfffc55550080fffd, 0x80fffe40000080, x9, 6*XLEN/8, x12)

inst_21:
// rs1==x10, rs2==x20, rd==x2, rs1_h0_val == -5, rs2_h3_val == 2048, rs2_h2_val == -1025
// opcode: pmulh.h.be ; op1:x10; op2:x20; dest:x2; op1val:0x3fffc000fffefffb;  op2val:0x800fbff00050008
TEST_RR_OP(pmulh.h.be, x2, x10, x20, 0x0000000000000000, 0x3fffc000fffefffb, 0x800fbff00050008, x9, 7*XLEN/8, x12)

inst_22:
// rs1==x22, rs2==x31, rd==x16, rs1_h0_val == -9, rs2_h0_val == 1, rs1_h1_val == -1, rs2_h3_val == 1
// opcode: pmulh.h.be ; op1:x22; op2:x31; dest:x16; op1val:0x090004fffffff7;  op2val:0x01ffef10000001
TEST_RR_OP(pmulh.h.be, x16, x22, x31, 0x0000000000000000, 0x090004fffffff7, 0x01ffef10000001, x9, 8*XLEN/8, x12)

inst_23:
// rs1==x14, rs2==x15, rd==x8, rs1_h0_val == -17, rs1_h1_val == -9, rs1_h2_val == -513, rs2_h0_val == -257, rs1_h2_val == rs2_h2_val, rs2_h2_val == -513, rs2_h1_val == 4
// opcode: pmulh.h.be ; op1:x14; op2:x15; dest:x8; op1val:0xff7ffdfffff7ffef;  op2val:0xfffffdff0004feff
TEST_RR_OP(pmulh.h.be, x8, x14, x15, 0x0000000000000000, 0xff7ffdfffff7ffef, 0xfffffdff0004feff, x9, 9*XLEN/8, x12)

inst_24:
// rs1==x18, rs2==x8, rd==x7, rs1_h0_val == -33, rs2_h1_val == 32767, rs2_h2_val == 21845, rs2_h0_val == 2048
// opcode: pmulh.h.be ; op1:x18; op2:x8; dest:x7; op1val:0xffff0005fffcffdf;  op2val:0xfff955557fff0800
TEST_RR_OP(pmulh.h.be, x7, x18, x8, 0x0000000000000000, 0xffff0005fffcffdf, 0xfff955557fff0800, x9, 10*XLEN/8, x12)

inst_25:
// rs1==x23, rs2==x16, rd==x11, rs1_h0_val == -65, rs2_h1_val == -9, rs1_h1_val == 8, rs2_h0_val == -513
// opcode: pmulh.h.be ; op1:x23; op2:x16; dest:x11; op1val:0x09ffff0008ffbf;  op2val:0xc000fff6fff7fdff
TEST_RR_OP(pmulh.h.be, x11, x23, x16, 0x0000000000000000, 0x09ffff0008ffbf, 0xc000fff6fff7fdff, x9, 11*XLEN/8, x12)

inst_26:
// rs1==x6, rs2==x27, rd==x21, rs1_h0_val == -129, rs1_h1_val == 4096, rs1_h3_val == -257
// opcode: pmulh.h.be ; op1:x6; op2:x27; dest:x21; op1val:0xfeff10001000ff7f;  op2val:0xdfffdffffff8feff
TEST_RR_OP(pmulh.h.be, x21, x6, x27, 0x0000000000000000, 0xfeff10001000ff7f, 0xdfffdffffff8feff, x9, 12*XLEN/8, x12)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_27:
// rs1==x0, rs2==x3, rd==x4, rs1_h0_val == -257, rs1_h3_val == 256, rs2_h3_val == -65
// opcode: pmulh.h.be ; op1:x0; op2:x3; dest:x4; op1val:0x1000008fffafeff;  op2val:0xffbf00090200fbff
TEST_RR_OP(pmulh.h.be, x4, x0, x3, 0x0000000000000000, 0x1000008fffafeff, 0xffbf00090200fbff, x7, 0*XLEN/8, x8)

inst_28:
// rs1==x29, rs2==x21, rd==x26, rs1_h0_val == -513, rs2_h1_val == -33, rs2_h0_val == 512, rs1_h3_val == -21846
// opcode: pmulh.h.be ; op1:x29; op2:x21; dest:x26; op1val:0xaaaa3fffffbffdff;  op2val:0x2000009ffdf0200
TEST_RR_OP(pmulh.h.be, x26, x29, x21, 0x0000000000000000, 0xaaaa3fffffbffdff, 0x2000009ffdf0200, x7, 1*XLEN/8, x8)

inst_29:
// rs1==x9, rs2==x22, rd==x31, rs1_h0_val == -1025, rs1_h1_val == 4, rs2_h2_val == 1
// opcode: pmulh.h.be ; op1:x9; op2:x22; dest:x31; op1val:0xffffffff0004fbff;  op2val:0xc0000001fffa0006
TEST_RR_OP(pmulh.h.be, x31, x9, x22, 0x0000000000000000, 0xffffffff0004fbff, 0xc0000001fffa0006, x7, 2*XLEN/8, x8)

inst_30:
// rs1==x20, rs2==x19, rd==x6, rs1_h0_val == -2049, rs1_h2_val == 32, rs2_h1_val == -1025, rs2_h3_val == 16, rs2_h0_val == -4097
// opcode: pmulh.h.be ; op1:x20; op2:x19; dest:x6; op1val:0x0800203ffff7ff;  op2val:0x10fff6fbffefff
TEST_RR_OP(pmulh.h.be, x6, x20, x19, 0x0000000000000000, 0x0800203ffff7ff, 0x10fff6fbffefff, x7, 3*XLEN/8, x8)

inst_31:
// rs1==x2, rs1_h0_val == -4097, rs1_h2_val == 256, rs2_h2_val == -4097
// opcode: pmulh.h.be ; op1:x2; op2:x20; dest:x22; op1val:0x0901003fffefff;  op2val:0x07efff00020006
TEST_RR_OP(pmulh.h.be, x22, x2, x20, 0x0000000000000000, 0x0901003fffefff, 0x07efff00020006, x7, 4*XLEN/8, x8)

inst_32:
// rs2==x5, rs1_h0_val == -8193, rs1_h2_val == -32768, rs1_h1_val == -21846
// opcode: pmulh.h.be ; op1:x27; op2:x5; dest:x28; op1val:0x4008000aaaadfff;  op2val:0xfff90007c0000007
TEST_RR_OP(pmulh.h.be, x28, x27, x5, 0x0000000000000000, 0x4008000aaaadfff, 0xfff90007c0000007, x7, 5*XLEN/8, x8)

inst_33:
// rd==x5, rs1_h0_val == -16385, rs1_h2_val == 32767
// opcode: pmulh.h.be ; op1:x1; op2:x24; dest:x5; op1val:0xfdff7fffff7fbfff;  op2val:0xfffcfffa00010003
TEST_RR_OP(pmulh.h.be, x5, x1, x24, 0x0000000000000000, 0xfdff7fffff7fbfff, 0xfffcfffa00010003, x7, 6*XLEN/8, x8)

inst_34:
// rs1_h0_val == 21845, rs2_h2_val == -33, rs1_h1_val == -5, rs2_h0_val == -65, rs2_h3_val == -257
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0020fffb5555;  op2val:0xfeffffdf4000ffbf
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa0020fffb5555, 0xfeffffdf4000ffbf, x7, 7*XLEN/8, x8)

inst_35:
// rs1_h0_val == -21846, rs1_h2_val == 2
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x060002c000aaaa;  op2val:0x075555fff60003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x060002c000aaaa, 0x075555fff60003, x7, 8*XLEN/8, x8)

inst_36:
// rs1_h1_val == -32768, rs2_h1_val == -2049, rs2_h0_val == 16384, rs1_h0_val == rs2_h0_val, rs1_h2_val == 512
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff020080004000;  op2val:0x010020f7ff4000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xf7ff020080004000, 0x010020f7ff4000, x7, 9*XLEN/8, x8)

inst_37:
// rs1_h1_val == 1, rs1_h3_val == -3
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffdf0001fffa;  op2val:0x03ffbff7ffaaaa
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffdffdf0001fffa, 0x03ffbff7ffaaaa, x7, 10*XLEN/8, x8)

inst_38:
// rs2_h3_val == 32767, rs1_h1_val == 32767, rs2_h2_val == 16
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff7fff0100;  op2val:0x7fff0010fbffffff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x02fdff7fff0100, 0x7fff0010fbffffff, x7, 11*XLEN/8, x8)

inst_39:
// rs2_h3_val == 2, rs2_h1_val == -5, rs2_h0_val == 2, rs2_h2_val == 4, rs1_h3_val == -2
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff00090040;  op2val:0x020004fffb0002
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffebfff00090040, 0x020004fffb0002, x7, 12*XLEN/8, x8)

inst_40:
// rs2_h3_val == 4, rs1_h2_val == -8193, rs2_h1_val == -16385, rs1_h1_val == -16385
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fffdfffbffffbff;  op2val:0x040009bffffffc
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x7fffdfffbffffbff, 0x040009bffffffc, x7, 13*XLEN/8, x8)

inst_41:
// rs2_h3_val == 8, rs2_h1_val == 0, rs1_h1_val == 32, rs1_h3_val == rs2_h3_val, rs1_h2_val == 2048
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x08080000200002;  op2val:0x08000900000800
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x08080000200002, 0x08000900000800, x7, 14*XLEN/8, x8)

inst_42:
// rs2_h3_val == 256, rs2_h1_val == 64
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffef80000009ffef;  op2val:0x10000010040fffa
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffef80000009ffef, 0x10000010040fffa, x7, 15*XLEN/8, x8)

inst_43:
// rs2_h3_val == 1024, rs1_h3_val == -8193, rs1_h2_val == -17
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffefff7f0080;  op2val:0x40000037fff0003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xdfffffefff7f0080, 0x40000037fff0003, x7, 16*XLEN/8, x8)

inst_44:
// rs2_h3_val == 4096, rs2_h2_val == -16385, rs1_h2_val == 1024
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05040000013fff;  op2val:0x1000bfff3fff0003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x05040000013fff, 0x1000bfff3fff0003, x7, 17*XLEN/8, x8)

inst_45:
// rs2_h3_val == 8192, rs2_h2_val == -9
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa7fff55550040;  op2val:0x2000fff704000800
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa7fff55550040, 0x2000fff704000800, x7, 18*XLEN/8, x8)

inst_46:
// rs2_h3_val == 16384, rs2_h2_val == 8192
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff900045555;  op2val:0x4000200002004000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xc000fff900045555, 0x4000200002004000, x7, 19*XLEN/8, x8)

inst_47:
// rs2_h3_val == -3, rs1_h3_val == 64, rs2_h1_val == -257
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400800bffffeff;  op2val:0xfffdffbffeff4000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x400800bffffeff, 0xfffdffbffeff4000, x7, 20*XLEN/8, x8)

inst_48:
// rs2_h3_val == -5, rs2_h1_val == 32
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x2000feff00050004;  op2val:0xfffb00070020c000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x2000feff00050004, 0xfffb00070020c000, x7, 21*XLEN/8, x8)

inst_49:
// rs2_h3_val == -9, rs2_h2_val == -3, rs2_h0_val == 32767, rs1_h3_val == -65
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff60400fffb;  op2val:0xfff7fffd00097fff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffbffff60400fffb, 0xfff7fffd00097fff, x7, 22*XLEN/8, x8)

inst_50:
// rs2_h3_val == -17, rs2_h0_val == 21845
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffefbffffffa8000;  op2val:0xffef3fff00205555
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffefbffffffa8000, 0xffef3fff00205555, x7, 23*XLEN/8, x8)

inst_51:
// rs2_h3_val == -33, rs2_h1_val == -513, rs2_h2_val == 256
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffff10000400;  op2val:0xffdf0100fdffffff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff6ffff10000400, 0xffdf0100fdffffff, x7, 24*XLEN/8, x8)

inst_52:
// rs2_h3_val == -129, rs1_h3_val == -16385, rs2_h1_val == -2
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xbfff040080004000;  op2val:0xff7ffffafffe0007
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xbfff040080004000, 0xff7ffffafffe0007, x7, 25*XLEN/8, x8)

inst_53:
// rs2_h3_val == -513, rs1_h2_val == -129, rs1_h3_val == 21845
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7fc000efff;  op2val:0xfdffdffffff70009
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x5555ff7fc000efff, 0xfdffdffffff70009, x7, 26*XLEN/8, x8)

inst_54:
// rs2_h3_val == -1025, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff0200fdff;  op2val:0xfbff0007fff80040
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x02ffff0200fdff, 0xfbff0007fff80040, x7, 27*XLEN/8, x8)

inst_55:
// rs2_h3_val == -2049, rs1_h1_val == 2
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff6004000020007;  op2val:0xf7fffff6ffbf5555
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff6004000020007, 0xf7fffff6ffbf5555, x7, 28*XLEN/8, x8)

inst_56:
// rs2_h3_val == 21845, rs1_h3_val == 512
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200fff80010fffe;  op2val:0x55552000fffcdfff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x200fff80010fffe, 0x55552000fffcdfff, x7, 29*XLEN/8, x8)

inst_57:
// rs2_h3_val == -21846, rs2_h2_val == 1024
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x027fff2000ffdf;  op2val:0xaaaa040000010006
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x027fff2000ffdf, 0xaaaa040000010006, x7, 30*XLEN/8, x8)

inst_58:
// rs1_h1_val == 64, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf0040fff9;  op2val:0xfff6002000800006
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x08ffdf0040fff9, 0xfff6002000800006, x7, 31*XLEN/8, x8)

inst_59:
// rs1_h1_val == 256, rs2_h1_val == 21845
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02040001000008;  op2val:0x06555555550002
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x02040001000008, 0x06555555550002, x7, 32*XLEN/8, x8)

inst_60:
// rs1_h1_val == 2048, rs2_h0_val == 1024
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x207fff0800fff6;  op2val:0xfff7fbff00090400
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x207fff0800fff6, 0xfff7fbff00090400, x7, 33*XLEN/8, x8)

inst_61:
// rs1_h1_val == 16384, rs2_h0_val == 4096, rs2_h2_val == 2, rs1_h3_val == 128
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80ff7f40000000;  op2val:0x060002dfff1000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x80ff7f40000000, 0x060002dfff1000, x7, 34*XLEN/8, x8)

inst_62:
// rs1_h3_val == -9, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff00100000;  op2val:0x0500207fff0005
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff77fff00100000, 0x0500207fff0005, x7, 35*XLEN/8, x8)

inst_63:
// rs1_h3_val == -1025, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff600060003;  op2val:0x4000000300003fff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfbfffff600060003, 0x4000000300003fff, x7, 36*XLEN/8, x8)

inst_64:
// rs1_h3_val == -4097, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefff00095555fdff;  op2val:0xdffffffd7ffffff6
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xefff00095555fdff, 0xdffffffd7ffffff6, x7, 37*XLEN/8, x8)

inst_65:
// rs2_h0_val == -32768, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000040002feff;  op2val:0xfffdfffb55558000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x10000040002feff, 0xfffdfffb55558000, x7, 38*XLEN/8, x8)

inst_66:
// rs2_h0_val == 0, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfff08000800aaaa;  op2val:0xfefffff700200000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xdfff08000800aaaa, 0xfefffff700200000, x7, 39*XLEN/8, x8)

inst_67:
// rs2_h0_val == 4, rs2_h1_val == 2048, rs1_h2_val == -1025, rs2_h2_val == -257
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbffc000fff6;  op2val:0xfffdfeff08000004
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xdffffbffc000fff6, 0xfffdfeff08000004, x7, 40*XLEN/8, x8)

inst_68:
// rs2_h0_val == 16, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffbfff08001000;  op2val:0x040009ffff0010
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xf7ffbfff08001000, 0x040009ffff0010, x7, 41*XLEN/8, x8)

inst_69:
// rs2_h0_val == 32, rs1_h3_val == 4, rs2_h2_val == 32767
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x04fffa55550040;  op2val:0x017fff00030020
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x04fffa55550040, 0x017fff00030020, x7, 42*XLEN/8, x8)

inst_70:
// rs2_h0_val == 256, rs1_h2_val == -2049, rs1_h3_val == 1
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff0001ffff;  op2val:0x20000040fff60100
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x01f7ff0001ffff, 0x20000040fff60100, x7, 43*XLEN/8, x8)

inst_71:
// rs2_h0_val == -9, rs2_h1_val == -32768
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400ff7ffff80004;  op2val:0x10000068000fff7
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x400ff7ffff80004, 0x10000068000fff7, x7, 44*XLEN/8, x8)

inst_72:
// rs2_h0_val == -17, rs1_h3_val == 16384
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40000800ff7f0005;  op2val:0xffdf7ffff7ffffef
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x40000800ff7f0005, 0xffdf7ffff7ffffef, x7, 45*XLEN/8, x8)

inst_73:
// rs2_h0_val == -33, rs1_h2_val == -21846
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x04aaaa00070010;  op2val:0xf7fffdffdfffffdf
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x04aaaa00070010, 0xf7fffdffdfffffdf, x7, 46*XLEN/8, x8)

inst_74:
// rs2_h0_val == -129, rs2_h2_val == -32768, rs1_h2_val == 128
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0080aaaa7fff;  op2val:0x078000bfffff7f
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffa0080aaaa7fff, 0x078000bfffff7f, x7, 47*XLEN/8, x8)

inst_75:
// rs2_h0_val == -16385, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffeff7ffffa;  op2val:0xffbfc000f7ffbfff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffbfffeff7ffffa, 0xffbfc000f7ffbfff, x7, 48*XLEN/8, x8)

inst_76:
// rs1_h1_val == -3, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200fffafffd0800;  op2val:0x100ff7fffdffff7
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x200fffafffd0800, 0x100ff7fffdffff7, x7, 49*XLEN/8, x8)

inst_77:
// rs1_h1_val == -17, rs2_h2_val == 4096
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400100ffef0001;  op2val:0xfff9100020000020
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x400100ffef0001, 0xfff9100020000020, x7, 50*XLEN/8, x8)

inst_78:
// rs2_h1_val == 256, rs1_h3_val == 16
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100800ffeff7ff;  op2val:0x1000fdff0100c000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x100800ffeff7ff, 0x1000fdff0100c000, x7, 51*XLEN/8, x8)

inst_79:
// rs1_h1_val == -2049, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100001f7ffefff;  op2val:0xffdf0400fffc0100
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x100001f7ffefff, 0xffdf0400fffc0100, x7, 52*XLEN/8, x8)

inst_80:
// rs1_h1_val == -4097, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0080efff1000;  op2val:0xbfffdfff4000fff8
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffb0080efff1000, 0xbfffdfff4000fff8, x7, 53*XLEN/8, x8)

inst_81:
// rs1_h1_val == -8193, rs2_h1_val == 8, rs1_h2_val == -5
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x07fffbdfffaaaa;  op2val:0x2000000300080003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x07fffbdfffaaaa, 0x2000000300080003, x7, 54*XLEN/8, x8)

inst_82:
// rs2_h1_val == -3, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x108000c0005555;  op2val:0x1000020fffd0005
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x108000c0005555, 0x1000020fffd0005, x7, 55*XLEN/8, x8)

inst_83:
// rs2_h1_val == -129, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fbff20000010;  op2val:0x070001ff7fefff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff8fbff20000010, 0x070001ff7fefff, x7, 56*XLEN/8, x8)

inst_84:
// rs1_h2_val == 16, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7f001002000040;  op2val:0x400bffffeff0400
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xff7f001002000040, 0x400bffffeff0400, x7, 57*XLEN/8, x8)

inst_85:
// rs2_h1_val == -21846, rs1_h2_val == -9
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05fff708000010;  op2val:0x400ffbfaaaac000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x05fff708000010, 0x400ffbfaaaac000, x7, 58*XLEN/8, x8)

inst_86:
// rs2_h2_val == -1, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffadffffffd0005;  op2val:0xfffdffff00010001
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffadffffffd0005, 0xfffdffff00010001, x7, 59*XLEN/8, x8)

inst_87:
// rs1_h2_val == 16384, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x1004000fffcffff;  op2val:0x1020000000feff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x1004000fffcffff, 0x1020000000feff, x7, 60*XLEN/8, x8)

inst_88:
// rs2_h2_val == 0, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0006aaaa0040;  op2val:0xffef0000fffc0008
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfffe0006aaaa0040, 0xffef0000fffc0008, x7, 61*XLEN/8, x8)

inst_89:
// rs1_h2_val == -65, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x02ffbffffc3fff;  op2val:0xfff9c000fffb0003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x02ffbffffc3fff, 0xfff9c000fffb0003, x7, 62*XLEN/8, x8)

inst_90:
// rs2_h2_val == 128, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffefbfff4000;  op2val:0xffef00800020fdff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff8ffefbfff4000, 0xffef00800020fdff, x7, 63*XLEN/8, x8)

inst_91:
// rs2_h2_val == 512, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff9dfff3fff;  op2val:0x090200ffef0006
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xff7ffff9dfff3fff, 0x090200ffef0006, x7, 64*XLEN/8, x8)

inst_92:
// rs1_h2_val == -4097, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100efffff7f0003;  op2val:0xfffcdffffff70006
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x100efffff7f0003, 0xfffcdffffff70006, x7, 65*XLEN/8, x8)

inst_93:
// rs2_h2_val == 2048, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x030009fff90009;  op2val:0xfff70800fdfffbff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x030009fff90009, 0xfff70800fdfffbff, x7, 66*XLEN/8, x8)

inst_94:
// rs1_h3_val == 2048, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x800fdffffffff7f;  op2val:0x4000ffdf0000ffef
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x800fdffffffff7f, 0x4000ffdf0000ffef, x7, 67*XLEN/8, x8)

inst_95:
// rs1_h3_val == -32768, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x800000010400fff6;  op2val:0x091000bfff0003
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x800000010400fff6, 0x091000bfff0003, x7, 68*XLEN/8, x8)

inst_96:
// rs1_h3_val == 4096, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x1000f7fffff8fdff;  op2val:0x8000007ffdffdff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x1000f7fffff8fdff, 0x8000007ffdffdff, x7, 69*XLEN/8, x8)

inst_97:
// rs2_h3_val == -32768, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7ffffdffdf;  op2val:0x8000ffbfffff0009
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfeffff7ffffdffdf, 0x8000ffbfffff0009, x7, 70*XLEN/8, x8)

inst_98:
// rs2_h2_val == -2049, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0020c000fff8;  op2val:0x04f7ff00200200
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffbf0020c000fff8, 0x04f7ff00200200, x7, 71*XLEN/8, x8)

inst_99:
// rs2_h1_val == 16, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40fff8fffcfffe;  op2val:0x20001000100000
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x40fff8fffcfffe, 0x20001000100000, x7, 72*XLEN/8, x8)

inst_100:
// rs2_h2_val == -21846, rs1_h1_val == -257
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff60003fefffdff;  op2val:0xfff8aaaa80003fff
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xfff60003fefffdff, 0xfff8aaaa80003fff, x7, 73*XLEN/8, x8)

inst_101:
// rs1_h1_val == -33, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaaffdf0001;  op2val:0x400008efffffdf
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xdfffaaaaffdf0001, 0x400008efffffdf, x7, 74*XLEN/8, x8)

inst_102:
// rs2_h3_val == 0, 
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40003ffffff8feff;  op2val:0x00ffbfbfff0007
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x40003ffffff8feff, 0x00ffbfbfff0007, x7, 75*XLEN/8, x8)

inst_103:
// rs1_h0_val == -1, rs1_h1_val == -1025, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs2_h3_val == -2, rs1_h3_val == 32767, rs2_h2_val == -129, rs1_h3_val > 0 and rs2_h3_val < 0
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0004fbffffff;  op2val:0xfffeff7f00060009
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff0004fbffffff, 0xfffeff7f00060009, x7, 76*XLEN/8, x8)

inst_104:
// rs1_h0_val == 0, rs1_h3_val == -17, rs2_h0_val == -3, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 2, rs1_h2_val == -3
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffd00060000;  op2val:0x09fff80002fffd
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffeffffd00060000, 0x09fff80002fffd, x7, 77*XLEN/8, x8)

inst_105:
// rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -16385, rs1_h1_val == rs2_h1_val, rs2_h3_val == -8193, rs1_h3_val == 8192
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff00097fff;  op2val:0xdfffdfff0009fffe
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0x2000bfff00097fff, 0xdfffdfff0009fffe, x7, 78*XLEN/8, x8)

inst_106:
// rs1_h0_val == 32, rs1_h2_val == 64, rs1_h3_val == -33, rs1_h1_val == -65
// opcode: pmulh.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040ffbf0020;  op2val:0x80fffaffbf0007
TEST_RR_OP(pmulh.h.be, x31, x30, x29, 0x0000000000000000, 0xffdf0040ffbf0020, 0x80fffaffbf0007, x7, 79*XLEN/8, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x9_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 80*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
