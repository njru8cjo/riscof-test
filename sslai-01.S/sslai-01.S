
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec  3 05:49:58 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/cgf_files/p6.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sslai instruction of the RISC-V RV32PZicsr extension for the sslai covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sslai)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x30, rd==x31, rs1_val < 0 and imm_val == (xlen-1), rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val==-46339
// opcode: sslai ; op1:x30; dest:x31; op1val:-0xb503;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0xb503, 0x1f, x1, 0*XLEN/8, x2)

inst_1:
// rs1 == rd, rs1==x29, rd==x29, rs1_val < 0 and imm_val == 0, 
// opcode: sslai ; op1:x29; dest:x29; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( sslai, x29, x29, -0xb503, -0xb503, 0x0, x1, 1*XLEN/8, x2)

inst_2:
// rs1==x31, rd==x30, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: sslai ; op1:x31; dest:x30; op1val:-0x80000000;  immval:0x1f
TEST_IMM_OP( sslai, x30, x31, -0x1, -0x80000000, 0x1f, x1, 2*XLEN/8, x2)

inst_3:
// rs1==x27, rd==x28, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val > 0 and imm_val == (xlen-1), rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: sslai ; op1:x27; dest:x28; op1val:0x7fffffff;  immval:0x1f
TEST_IMM_OP( sslai, x28, x27, 0x0, 0x7fffffff, 0x1f, x1, 3*XLEN/8, x2)

inst_4:
// rs1==x28, rd==x27, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: sslai ; op1:x28; dest:x27; op1val:0x0;  immval:0x1f
TEST_IMM_OP( sslai, x27, x28, 0x0, 0x0, 0x1f, x1, 4*XLEN/8, x2)

inst_5:
// rs1==x25, rd==x26, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, rs1_val == 1
// opcode: sslai ; op1:x25; dest:x26; op1val:0x1;  immval:0x1f
TEST_IMM_OP( sslai, x26, x25, 0x0, 0x1, 0x1f, x1, 5*XLEN/8, x2)

inst_6:
// rs1==x26, rd==x25, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, imm_val == 16, rs1_val == 16
// opcode: sslai ; op1:x26; dest:x25; op1val:0x10;  immval:0x10
TEST_IMM_OP( sslai, x25, x26, 0x0, 0x10, 0x10, x1, 6*XLEN/8, x2)

inst_7:
// rs1==x23, rd==x24, rs1_val > 0 and imm_val == 0, rs1_val==46341
// opcode: sslai ; op1:x23; dest:x24; op1val:0xb505;  immval:0x0
TEST_IMM_OP( sslai, x24, x23, 0xb505, 0xb505, 0x0, x1, 7*XLEN/8, x2)

inst_8:
// rs1==x24, rd==x23, imm_val == 21, 
// opcode: sslai ; op1:x24; dest:x23; op1val:0xb505;  immval:0x15
TEST_IMM_OP( sslai, x23, x24, 0x0, 0xb505, 0x15, x1, 8*XLEN/8, x2)

inst_9:
// rs1==x21, rd==x22, imm_val == 10, 
// opcode: sslai ; op1:x21; dest:x22; op1val:0xb505;  immval:0xa
TEST_IMM_OP( sslai, x22, x21, 0x2d, 0xb505, 0xa, x1, 9*XLEN/8, x2)

inst_10:
// rs1==x22, rd==x21, rs1_val == 1431655765, rs1_val==1431655765
// opcode: sslai ; op1:x22; dest:x21; op1val:0x55555555;  immval:0x1f
TEST_IMM_OP( sslai, x21, x22, 0x0, 0x55555555, 0x1f, x1, 10*XLEN/8, x2)

inst_11:
// rs1==x19, rd==x20, rs1_val == -1431655766, rs1_val==-1431655766
// opcode: sslai ; op1:x19; dest:x20; op1val:-0x55555556;  immval:0x1f
TEST_IMM_OP( sslai, x20, x19, -0x1, -0x55555556, 0x1f, x1, 11*XLEN/8, x2)

inst_12:
// rs1==x20, rd==x19, rs1_val==3, 
// opcode: sslai ; op1:x20; dest:x19; op1val:0x3;  immval:0x1f
TEST_IMM_OP( sslai, x19, x20, 0x0, 0x3, 0x1f, x1, 12*XLEN/8, x2)

inst_13:
// rs1==x17, rd==x18, rs1_val==5, 
// opcode: sslai ; op1:x17; dest:x18; op1val:0x5;  immval:0x1f
TEST_IMM_OP( sslai, x18, x17, 0x0, 0x5, 0x1f, x1, 13*XLEN/8, x2)

inst_14:
// rs1==x18, rd==x17, rs1_val==858993459, 
// opcode: sslai ; op1:x18; dest:x17; op1val:0x33333333;  immval:0x1f
TEST_IMM_OP( sslai, x17, x18, 0x0, 0x33333333, 0x1f, x1, 14*XLEN/8, x2)

inst_15:
// rs1==x15, rd==x16, rs1_val==1717986918, 
// opcode: sslai ; op1:x15; dest:x16; op1val:0x66666666;  immval:0x1f
TEST_IMM_OP( sslai, x16, x15, 0x0, 0x66666666, 0x1f, x1, 15*XLEN/8, x2)

inst_16:
// rs1==x16, rd==x15, rs1_val==-46340, 
// opcode: sslai ; op1:x16; dest:x15; op1val:-0xb504;  immval:0x1f
TEST_IMM_OP( sslai, x15, x16, -0x1, -0xb504, 0x1f, x1, 16*XLEN/8, x2)

inst_17:
// rs1==x13, rd==x14, rs1_val==46340, 
// opcode: sslai ; op1:x13; dest:x14; op1val:0xb504;  immval:0x1f
TEST_IMM_OP( sslai, x14, x13, 0x0, 0xb504, 0x1f, x1, 17*XLEN/8, x2)

inst_18:
// rs1==x14, rd==x13, rs1_val==2, rs1_val == 2
// opcode: sslai ; op1:x14; dest:x13; op1val:0x2;  immval:0x1f
TEST_IMM_OP( sslai, x13, x14, 0x0, 0x2, 0x1f, x1, 18*XLEN/8, x2)

inst_19:
// rs1==x11, rd==x12, rs1_val==1431655764, 
// opcode: sslai ; op1:x11; dest:x12; op1val:0x55555554;  immval:0x1f
TEST_IMM_OP( sslai, x12, x11, 0x0, 0x55555554, 0x1f, x1, 19*XLEN/8, x2)

inst_20:
// rs1==x12, rd==x11, rs1_val==4, rs1_val == 4
// opcode: sslai ; op1:x12; dest:x11; op1val:0x4;  immval:0x1f
TEST_IMM_OP( sslai, x11, x12, 0x0, 0x4, 0x1f, x1, 20*XLEN/8, x2)

inst_21:
// rs1==x9, rd==x10, rs1_val==858993458, 
// opcode: sslai ; op1:x9; dest:x10; op1val:0x33333332;  immval:0x1f
TEST_IMM_OP( sslai, x10, x9, 0x0, 0x33333332, 0x1f, x1, 21*XLEN/8, x2)

inst_22:
// rs1==x10, rd==x9, rs1_val==1717986917, 
// opcode: sslai ; op1:x10; dest:x9; op1val:0x66666665;  immval:0x1f
TEST_IMM_OP( sslai, x9, x10, 0x0, 0x66666665, 0x1f, x1, 22*XLEN/8, x2)

inst_23:
// rs1==x7, rd==x8, rs1_val==46339, 
// opcode: sslai ; op1:x7; dest:x8; op1val:0xb503;  immval:0x1f
TEST_IMM_OP( sslai, x8, x7, 0x0, 0xb503, 0x1f, x1, 23*XLEN/8, x2)

inst_24:
// rs1==x8, rd==x7, rs1_val==1431655766, 
// opcode: sslai ; op1:x8; dest:x7; op1val:0x55555556;  immval:0x1f
TEST_IMM_OP( sslai, x7, x8, 0x0, 0x55555556, 0x1f, x1, 24*XLEN/8, x2)

inst_25:
// rs1==x5, rd==x6, rs1_val==-1431655765, 
// opcode: sslai ; op1:x5; dest:x6; op1val:-0x55555555;  immval:0x1f
TEST_IMM_OP( sslai, x6, x5, -0x1, -0x55555555, 0x1f, x1, 25*XLEN/8, x2)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x6, rd==x5, rs1_val==6, 
// opcode: sslai ; op1:x6; dest:x5; op1val:0x6;  immval:0x1f
TEST_IMM_OP( sslai, x5, x6, 0x0, 0x6, 0x1f, x7, 0*XLEN/8, x8)

inst_27:
// rs1==x3, rd==x4, rs1_val==858993460, 
// opcode: sslai ; op1:x3; dest:x4; op1val:0x33333334;  immval:0x1f
TEST_IMM_OP( sslai, x4, x3, 0x0, 0x33333334, 0x1f, x7, 1*XLEN/8, x8)

inst_28:
// rs1==x4, rd==x3, rs1_val==1717986919, 
// opcode: sslai ; op1:x4; dest:x3; op1val:0x66666667;  immval:0x1f
TEST_IMM_OP( sslai, x3, x4, 0x0, 0x66666667, 0x1f, x7, 2*XLEN/8, x8)

inst_29:
// rs1==x1, rd==x2, imm_val == 1, 
// opcode: sslai ; op1:x1; dest:x2; op1val:0xb505;  immval:0x1
TEST_IMM_OP( sslai, x2, x1, 0x5a82, 0xb505, 0x1, x7, 3*XLEN/8, x8)

inst_30:
// rs1==x2, rd==x1, imm_val == 2, 
// opcode: sslai ; op1:x2; dest:x1; op1val:0xb505;  immval:0x2
TEST_IMM_OP( sslai, x1, x2, 0x2d41, 0xb505, 0x2, x7, 4*XLEN/8, x8)

inst_31:
// rs1==x0, imm_val == 4, 
// opcode: sslai ; op1:x0; dest:x31; op1val:0x0;  immval:0x4
TEST_IMM_OP( sslai, x31, x0, 0x0, 0x0, 0x4, x7, 5*XLEN/8, x8)

inst_32:
// rd==x0, imm_val == 8, 
// opcode: sslai ; op1:x31; dest:x0; op1val:0xb505;  immval:0x8
TEST_IMM_OP( sslai, x0, x31, 0, 0xb505, 0x8, x7, 6*XLEN/8, x8)

inst_33:
// rs1_val == 8, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x8;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x8, 0x1f, x7, 7*XLEN/8, x8)

inst_34:
// rs1_val == 32, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x20;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x20, 0x1f, x7, 8*XLEN/8, x8)

inst_35:
// rs1_val == 64, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x40;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x40, 0x1f, x7, 9*XLEN/8, x8)

inst_36:
// rs1_val == 128, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x80;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x80, 0x1f, x7, 10*XLEN/8, x8)

inst_37:
// rs1_val == 256, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x100;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x100, 0x1f, x7, 11*XLEN/8, x8)

inst_38:
// rs1_val == 512, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x200;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x200, 0x1f, x7, 12*XLEN/8, x8)

inst_39:
// rs1_val == 1024, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x400;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x400, 0x1f, x7, 13*XLEN/8, x8)

inst_40:
// rs1_val == 2048, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x800;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x800, 0x1f, x7, 14*XLEN/8, x8)

inst_41:
// rs1_val == 4096, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x1000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x1000, 0x1f, x7, 15*XLEN/8, x8)

inst_42:
// rs1_val == 8192, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x2000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x2000, 0x1f, x7, 16*XLEN/8, x8)

inst_43:
// rs1_val == 16384, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x4000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x4000, 0x1f, x7, 17*XLEN/8, x8)

inst_44:
// rs1_val == 32768, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x8000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x8000, 0x1f, x7, 18*XLEN/8, x8)

inst_45:
// rs1_val == 65536, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x10000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x10000, 0x1f, x7, 19*XLEN/8, x8)

inst_46:
// rs1_val == 131072, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x20000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x20000, 0x1f, x7, 20*XLEN/8, x8)

inst_47:
// rs1_val == 262144, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x40000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x40000, 0x1f, x7, 21*XLEN/8, x8)

inst_48:
// rs1_val == 524288, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x80000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x80000, 0x1f, x7, 22*XLEN/8, x8)

inst_49:
// rs1_val == 1048576, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x100000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x100000, 0x1f, x7, 23*XLEN/8, x8)

inst_50:
// rs1_val == 2097152, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x200000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x200000, 0x1f, x7, 24*XLEN/8, x8)

inst_51:
// rs1_val == 4194304, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x400000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x400000, 0x1f, x7, 25*XLEN/8, x8)

inst_52:
// rs1_val == 8388608, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x800000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x800000, 0x1f, x7, 26*XLEN/8, x8)

inst_53:
// rs1_val == 16777216, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x1000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x1000000, 0x1f, x7, 27*XLEN/8, x8)

inst_54:
// rs1_val == 33554432, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x2000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x2000000, 0x1f, x7, 28*XLEN/8, x8)

inst_55:
// rs1_val == 67108864, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x4000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x4000000, 0x1f, x7, 29*XLEN/8, x8)

inst_56:
// rs1_val == 134217728, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x8000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x8000000, 0x1f, x7, 30*XLEN/8, x8)

inst_57:
// rs1_val == 268435456, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x10000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x10000000, 0x1f, x7, 31*XLEN/8, x8)

inst_58:
// rs1_val == 536870912, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x20000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x20000000, 0x1f, x7, 32*XLEN/8, x8)

inst_59:
// rs1_val == 1073741824, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0x40000000;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, 0x0, 0x40000000, 0x1f, x7, 33*XLEN/8, x8)

inst_60:
// imm_val == 30, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x1e
TEST_IMM_OP( sslai, x31, x30, 0x0, 0xb505, 0x1e, x7, 34*XLEN/8, x8)

inst_61:
// imm_val == 29, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x1d
TEST_IMM_OP( sslai, x31, x30, 0x0, 0xb505, 0x1d, x7, 35*XLEN/8, x8)

inst_62:
// imm_val == 27, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x1b
TEST_IMM_OP( sslai, x31, x30, 0x0, 0xb505, 0x1b, x7, 36*XLEN/8, x8)

inst_63:
// imm_val == 23, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x17
TEST_IMM_OP( sslai, x31, x30, 0x0, 0xb505, 0x17, x7, 37*XLEN/8, x8)

inst_64:
// imm_val == 15, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0xf
TEST_IMM_OP( sslai, x31, x30, 0x1, 0xb505, 0xf, x7, 38*XLEN/8, x8)

inst_65:
// rs1_val == -2, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x2;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x2, 0x1f, x7, 39*XLEN/8, x8)

inst_66:
// rs1_val == -3, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x3;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x3, 0x1f, x7, 40*XLEN/8, x8)

inst_67:
// rs1_val == -5, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x5;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x5, 0x1f, x7, 41*XLEN/8, x8)

inst_68:
// rs1_val == -9, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x9;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x9, 0x1f, x7, 42*XLEN/8, x8)

inst_69:
// rs1_val == -17, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x11;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x11, 0x1f, x7, 43*XLEN/8, x8)

inst_70:
// rs1_val == -33, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x21;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x21, 0x1f, x7, 44*XLEN/8, x8)

inst_71:
// rs1_val == -65, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x41;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x41, 0x1f, x7, 45*XLEN/8, x8)

inst_72:
// rs1_val == -129, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x81;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x81, 0x1f, x7, 46*XLEN/8, x8)

inst_73:
// rs1_val == -257, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x101;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x101, 0x1f, x7, 47*XLEN/8, x8)

inst_74:
// rs1_val == -513, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x201;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x201, 0x1f, x7, 48*XLEN/8, x8)

inst_75:
// rs1_val == -1025, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x401;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x401, 0x1f, x7, 49*XLEN/8, x8)

inst_76:
// rs1_val == -2049, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x801;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x801, 0x1f, x7, 50*XLEN/8, x8)

inst_77:
// rs1_val == -4097, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x1001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x1001, 0x1f, x7, 51*XLEN/8, x8)

inst_78:
// rs1_val == -8193, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x2001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x2001, 0x1f, x7, 52*XLEN/8, x8)

inst_79:
// rs1_val == -16385, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x4001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x4001, 0x1f, x7, 53*XLEN/8, x8)

inst_80:
// rs1_val == -32769, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x8001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x8001, 0x1f, x7, 54*XLEN/8, x8)

inst_81:
// rs1_val == -131073, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x20001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x20001, 0x1f, x7, 55*XLEN/8, x8)

inst_82:
// rs1_val == -262145, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x40001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x40001, 0x1f, x7, 56*XLEN/8, x8)

inst_83:
// rs1_val == -524289, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x80001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x80001, 0x1f, x7, 57*XLEN/8, x8)

inst_84:
// rs1_val == -1048577, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x100001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x100001, 0x1f, x7, 58*XLEN/8, x8)

inst_85:
// rs1_val == -2097153, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x200001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x200001, 0x1f, x7, 59*XLEN/8, x8)

inst_86:
// rs1_val == -4194305, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x400001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x400001, 0x1f, x7, 60*XLEN/8, x8)

inst_87:
// rs1_val == -8388609, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x800001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x800001, 0x1f, x7, 61*XLEN/8, x8)

inst_88:
// rs1_val == -16777217, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x1000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x1000001, 0x1f, x7, 62*XLEN/8, x8)

inst_89:
// rs1_val == -33554433, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x2000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x2000001, 0x1f, x7, 63*XLEN/8, x8)

inst_90:
// rs1_val == -67108865, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x4000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x4000001, 0x1f, x7, 64*XLEN/8, x8)

inst_91:
// rs1_val == -134217729, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x8000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x8000001, 0x1f, x7, 65*XLEN/8, x8)

inst_92:
// rs1_val == -268435457, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x10000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x10000001, 0x1f, x7, 66*XLEN/8, x8)

inst_93:
// rs1_val == -536870913, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x20000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x20000001, 0x1f, x7, 67*XLEN/8, x8)

inst_94:
// rs1_val == -1073741825, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x40000001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x40000001, 0x1f, x7, 68*XLEN/8, x8)

inst_95:
// rs1_val == -65537, 
// opcode: sslai ; op1:x30; dest:x31; op1val:-0x10001;  immval:0x1f
TEST_IMM_OP( sslai, x31, x30, -0x1, -0x10001, 0x1f, x7, 69*XLEN/8, x8)

inst_96:
// imm_val == 4, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x4
TEST_IMM_OP( sslai, x31, x30, 0xb50, 0xb505, 0x4, x7, 70*XLEN/8, x8)

inst_97:
// imm_val == 8, 
// opcode: sslai ; op1:x30; dest:x31; op1val:0xb505;  immval:0x8
TEST_IMM_OP( sslai, x31, x30, 0xb5, 0xb505, 0x8, x7, 71*XLEN/8, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 26*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 72*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
