
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Jan  8 09:11:30 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p16.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pasa.hx instruction of the RISC-V RV64PZicsr extension for the pasa.hx covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pasa.hx)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x15, rd_h0_val == -32768, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val, rd_h1_val == 2, rs2_h0_val == 256, rs1_h3_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rd_h3_val == 4, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs2_h3_val == 1024, rs1_h1_val != rs2_h1_val, rs1_h1_val == 16, rs2_h2_val == -9
// opcode: pasa.hx ; op1:x5; op2:x5; dest:x15; op1val:0xfffdfffc00100007;  op2val:0x400fff7fffb0100
TEST_RD_RR_OP(pasa.hx, x15, x5, x5, 0x0000000000000000, 0x04000700028000, 0xfffdfffc00100007, 0x400fff7fffb0100, x2, 0*XLEN/8, x11)

inst_1:
// rs1 == rd != rs2, rs1==x8, rs2==x4, rd==x8, rd_h0_val == -1, rs2_h0_val == -16385, rs2_h3_val == -5, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rd_h2_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 21845, rs1_h1_val == -16385, rs2_h1_val == 16384, rs1_h1_val < 0 and rs2_h1_val > 0, rd_h3_val == 16384, rs2_h2_val == -17
// opcode: pasa.hx ; op1:x8; op2:x4; dest:x8; op1val:0x100fff9bfff5555;  op2val:0xfffbffef4000bfff
TEST_RD_RR_OP(pasa.hx, x8, x8, x4, 0x0000000000000000, 0x40000010fffcffff, 0x100fff9bfff5555, 0xfffbffef4000bfff, x2, 1*XLEN/8, x11)

inst_2:
// rs2 == rd != rs1, rs1==x13, rs2==x25, rd==x25, rd_h0_val == 0, rs1_h2_val == 32, rs1_h3_val > 0 and rs2_h3_val > 0, rd_h1_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h3_val == 128, rd_h3_val == 1, rs1_h0_val == 0, rs2_h1_val == -2, rs2_h3_val == 256, rs1_h2_val > 0 and rs2_h2_val > 0
// opcode: pasa.hx ; op1:x13; op2:x25; dest:x25; op1val:0x800020fffc0000;  op2val:0x1000009fffe0006
TEST_RD_RR_OP(pasa.hx, x25, x13, x25, 0x0000000000000000, 0x010003dfff0000, 0x800020fffc0000, 0x1000009fffe0006, x2, 2*XLEN/8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rd_h0_val == 1, rd_h1_val == 32, rs2_h3_val == 1, rs2_h1_val == -33, rs1_h2_val == 0, rs2_h2_val == -3
// opcode: pasa.hx ; op1:x31; op2:x31; dest:x31; op1val:0x060000fff85555;  op2val:0x01fffdffdfc000
TEST_RD_RR_OP(pasa.hx, x31, x31, x31, 0x0000000000000000, 0xfffcc00000200001, 0x060000fff85555, 0x01fffdffdfc000, x2, 3*XLEN/8, x11)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x16, rd==x9, rd_h0_val == 32767, rs2_h0_val == -21846, rd_h3_val == -513, rd_h1_val == 2048, rs1_h0_val == 4, rs1_h2_val == -2049, rs2_h1_val == -17, rs1_h3_val == -32768, rs2_h3_val == 16384, rs1_h2_val < 0 and rs2_h2_val > 0
// opcode: pasa.hx ; op1:x27; op2:x16; dest:x9; op1val:0x8000f7fffff60004;  op2val:0x40000009ffefaaaa
TEST_RD_RR_OP(pasa.hx, x9, x27, x16, 0x0000000000000000, 0xfdff000608007fff, 0x8000f7fffff60004, 0x40000009ffefaaaa, x2, 4*XLEN/8, x11)

inst_5:
// rs1==x18, rs2==x15, rd==x22, rd_h0_val == 2, rs2_h3_val == -9, rd_h1_val == -4097, rs1_h3_val == 16, rs1_h2_val == 512, rs2_h2_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0, rd_h3_val == 8, rs1_h1_val == 4, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -257
// opcode: pasa.hx ; op1:x18; op2:x15; dest:x22; op1val:0x1002000004fff6;  op2val:0xfff7fefffeffaaaa
TEST_RD_RR_OP(pasa.hx, x22, x18, x15, 0x0000000000000000, 0x080007efff0002, 0x1002000004fff6, 0xfff7fefffeffaaaa, x2, 5*XLEN/8, x11)

inst_6:
// rs1==x20, rs2==x3, rd==x13, rd_h0_val == 4, rs1_h1_val == 1024, rs2_h2_val == 2, rs1_h3_val == -5, rs1_h1_val > 0 and rs2_h1_val > 0, rd_h3_val == 128, rs2_h0_val == -33, rs2_h3_val == 512, rd_h1_val == -257
// opcode: pasa.hx ; op1:x20; op2:x3; dest:x13; op1val:0xfffbc00004005555;  op2val:0x20000023fffffdf
TEST_RD_RR_OP(pasa.hx, x13, x20, x3, 0x0000000000000000, 0x80fff8feff0004, 0xfffbc00004005555, 0x20000023fffffdf, x2, 6*XLEN/8, x11)

inst_7:
// rs1==x16, rs2==x26, rd==x23, rd_h0_val == 8, rs2_h1_val == 32767, rs1_h1_val == -65, rd_h1_val == -33, rd_h2_val == 2, rd_h3_val == 64, rs1_h2_val == 32767
// opcode: pasa.hx ; op1:x16; op2:x26; dest:x23; op1val:0x057fffffbf0003;  op2val:0x09ffef7fffffdf
TEST_RD_RR_OP(pasa.hx, x23, x16, x26, 0x0000000000000000, 0x400002ffdf0008, 0x057fffffbf0003, 0x09ffef7fffffdf, x2, 7*XLEN/8, x11)

inst_8:
// rs1==x24, rs2==x13, rd==x7, rd_h0_val == 16, rs1_h0_val == 16384, rd_h2_val == -8193, rs2_h2_val == 4, rs2_h0_val == -9, rs1_h3_val == -16385
// opcode: pasa.hx ; op1:x24; op2:x13; dest:x7; op1val:0xbfff000900044000;  op2val:0x010004c000fff7
TEST_RD_RR_OP(pasa.hx, x7, x24, x13, 0x0000000000000000, 0xc000dfff00050010, 0xbfff000900044000, 0x010004c000fff7, x2, 8*XLEN/8, x11)

inst_9:
// rs1==x6, rs2==x12, rd==x3, rd_h0_val == 32, rs1_h2_val == -3, rs1_h1_val == -257, rs1_h0_val == rs2_h0_val, rd_h3_val == 32, rd_h2_val == -5, rs1_h3_val == -21846
// opcode: pasa.hx ; op1:x6; op2:x12; dest:x3; op1val:0xaaaafffdfeff3fff;  op2val:0x07fff67fff3fff
TEST_RD_RR_OP(pasa.hx, x3, x6, x12, 0x0000000000000000, 0x20fffbfeff0020, 0xaaaafffdfeff3fff, 0x07fff67fff3fff, x2, 9*XLEN/8, x11)

inst_10:
// rs1==x23, rs2==x9, rd==x16, rd_h0_val == 64, rs1_h3_val == 2, rd_h1_val == -9, rs1_h0_val == 64
// opcode: pasa.hx ; op1:x23; op2:x9; dest:x16; op1val:0x02002000040040;  op2val:0xc000c000fff90005
TEST_RD_RR_OP(pasa.hx, x16, x23, x9, 0x0000000000000000, 0x400003fff70040, 0x02002000040040, 0xc000c000fff90005, x2, 10*XLEN/8, x11)

inst_11:
// rs1==x1, rs2==x17, rd==x27, rd_h0_val == 128, rs1_h2_val == 4096, rs2_h0_val == 16, rs2_h1_val == 128, rs1_h0_val == -8193, rs2_h2_val == 32, rs2_h3_val == 2, rs1_h0_val < 0 and rs2_h0_val > 0, rd_h2_val == 1024, rd_h1_val == -65, rs1_h3_val == 21845, rd_h3_val == -2
// opcode: pasa.hx ; op1:x1; op2:x17; dest:x27; op1val:0x55551000fff8dfff;  op2val:0x02002000800010
TEST_RD_RR_OP(pasa.hx, x27, x1, x17, 0x0000000000000000, 0xfffe0400ffbf0080, 0x55551000fff8dfff, 0x02002000800010, x2, 11*XLEN/8, x11)

inst_12:
// rs1==x14, rs2==x10, rd==x30, rd_h0_val == 256, rd_h3_val == -33, rs2_h2_val == -1025, rd_h1_val == 21845, rs1_h2_val == -129, rd_h2_val == 128, rs2_h1_val == 8192, rs1_h0_val == 16
// opcode: pasa.hx ; op1:x14; op2:x10; dest:x30; op1val:0xfffaff7ffff90010;  op2val:0x02fbff20000010
TEST_RD_RR_OP(pasa.hx, x30, x14, x10, 0x0000000000000000, 0xffdf008055550100, 0xfffaff7ffff90010, 0x02fbff20000010, x2, 12*XLEN/8, x11)

inst_13:
// rs1==x11, rs2==x28, rd==x20, rd_h0_val == 512, rs1_h1_val == 256, rd_h2_val == 1, rs2_h3_val == 16, rd_h1_val == 4096, rs1_h3_val == -257
// opcode: pasa.hx ; op1:x11; op2:x28; dest:x20; op1val:0xfeff000901000007;  op2val:0x10fffc20003fff
TEST_RD_RR_OP(pasa.hx, x20, x11, x28, 0x0000000000000000, 0xc000000110000200, 0xfeff000901000007, 0x10fffc20003fff, x2, 13*XLEN/8, x8)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_14:
// rs1==x3, rs2==x30, rd==x11, rd_h0_val == 1024, rs2_h1_val == -513, rs1_h1_val == 4096, rs1_h3_val == 512, rs2_h3_val == 21845, rd_h1_val == 256, rs1_h2_val == -8193, rd_h3_val == 1024, rd_h2_val == -3, rs2_h2_val == -5
// opcode: pasa.hx ; op1:x3; op2:x30; dest:x11; op1val:0x200dfff10004000;  op2val:0x5555fffbfdffffdf
TEST_RD_RR_OP(pasa.hx, x11, x3, x30, 0x0000000000000000, 0x400fffd01000400, 0x200dfff10004000, 0x5555fffbfdffffdf, x5, 0*XLEN/8, x8)

inst_15:
// rs1==x26, rs2==x20, rd==x28, rd_h0_val == 2048, rd_h3_val == -5, rd_h1_val == 16, rs1_h0_val == 1, rs1_h1_val == -4097, rs2_h0_val == -5, rs2_h3_val == 4096
// opcode: pasa.hx ; op1:x26; op2:x20; dest:x28; op1val:0xfeff0005efff0001;  op2val:0x10000009ffdffffb
TEST_RD_RR_OP(pasa.hx, x28, x26, x20, 0x0000000000000000, 0xfffb000900100800, 0xfeff0005efff0001, 0x10000009ffdffffb, x5, 1*XLEN/8, x8)

inst_16:
// rs1==x9, rs2==x2, rd==x10, rd_h0_val == 4096, rs1_h2_val == 16, rs1_h3_val == 32, rs1_h1_val == -2, rd_h2_val == 32767, rd_h3_val == -16385, rd_h1_val == 128, rs2_h3_val == 4, rs2_h2_val == 128, rs2_h1_val == 4096, rs1_h0_val == 32, rs2_h0_val == -1025
// opcode: pasa.hx ; op1:x9; op2:x2; dest:x10; op1val:0x200010fffe0020;  op2val:0x0400801000fbff
TEST_RD_RR_OP(pasa.hx, x10, x9, x2, 0x0000000000000000, 0xbfff7fff00801000, 0x200010fffe0020, 0x0400801000fbff, x5, 2*XLEN/8, x8)

inst_17:
// rs1==x0, rs2==x24, rd==x26, rd_h0_val == 8192, rd_h2_val == -1025, rd_h1_val == 32767, rs2_h0_val == 64, rs2_h2_val == 32767, rs2_h3_val == 128, rd_h3_val == 256
// opcode: pasa.hx ; op1:x0; op2:x24; dest:x26; op1val:0xfffb0200fff80020;  op2val:0x807fff7fff0040
TEST_RD_RR_OP(pasa.hx, x26, x0, x24, 0x0000000000000000, 0x100fbff7fff2000, 0xfffb0200fff80020, 0x807fff7fff0040, x5, 3*XLEN/8, x8)

inst_18:
// rs1==x7, rs2==x18, rd==x24, rd_h0_val == 16384, rs2_h0_val == -2, rs1_h1_val == 32, rd_h1_val == -129
// opcode: pasa.hx ; op1:x7; op2:x18; dest:x24; op1val:0x5555100000205555;  op2val:0x07fefffff8fffe
TEST_RD_RR_OP(pasa.hx, x24, x7, x18, 0x0000000000000000, 0x090005ff7f4000, 0x5555100000205555, 0x07fefffff8fffe, x5, 4*XLEN/8, x8)

inst_19:
// rs1==x22, rs2==x6, rd==x4, rd_h0_val == -2, rs2_h3_val == 32767, rs2_h2_val == -65, rs1_h1_val == -129, rs1_h3_val == 64
// opcode: pasa.hx ; op1:x22; op2:x6; dest:x4; op1val:0x40ff7fff7f0003;  op2val:0x7fffffbf40000040
TEST_RD_RR_OP(pasa.hx, x4, x22, x6, 0x0000000000000000, 0x0504000010fffe, 0x40ff7fff7f0003, 0x7fffffbf40000040, x5, 5*XLEN/8, x8)

inst_20:
// rs1==x10, rs2==x1, rd==x6, rd_h0_val == -3, rd_h1_val == -2049, rs1_h0_val == -2049, rd_h3_val == 0, rs2_h0_val == 4096, rs2_h2_val == 16, rs1_h1_val == -8193, rs1_h2_val == 21845, rs1_h3_val == -4097
// opcode: pasa.hx ; op1:x10; op2:x1; dest:x6; op1val:0xefff5555dffff7ff;  op2val:0x09001000801000
TEST_RD_RR_OP(pasa.hx, x6, x10, x1, 0x0000000000000000, 0x000002f7fffffd, 0xefff5555dffff7ff, 0x09001000801000, x5, 6*XLEN/8, x8)

inst_21:
// rs1==x12, rs2==x23, rd==x18, rd_h0_val == -5, rs2_h1_val == -32768, rs1_h0_val == -33, rs1_h2_val == 16384, rd_h3_val == -1, rs2_h2_val == 64, rd_h1_val == -3
// opcode: pasa.hx ; op1:x12; op2:x23; dest:x18; op1val:0xfff640001000ffdf;  op2val:0x4000004080003fff
TEST_RD_RR_OP(pasa.hx, x18, x12, x23, 0x0000000000000000, 0xfffffffcfffdfffb, 0xfff640001000ffdf, 0x4000004080003fff, x5, 7*XLEN/8, x8)

inst_22:
// rs1==x2, rs2==x27, rd==x29, rd_h0_val == -9, rs1_h2_val == -16385, rs1_h1_val == -9
// opcode: pasa.hx ; op1:x2; op2:x27; dest:x29; op1val:0x02bffffff7ffdf;  op2val:0x400000400005fbff
TEST_RD_RR_OP(pasa.hx, x29, x2, x27, 0x0000000000000000, 0x4000009c000fff7, 0x02bffffff7ffdf, 0x400000400005fbff, x5, 8*XLEN/8, x8)

inst_23:
// rs1==x19, rs2==x11, rd==x0, rd_h0_val == -17, rd_h3_val == -3, rs1_h1_val == -5, rs1_h0_val == -129, rd_h2_val == 0, rs1_h2_val == -2, rs2_h1_val == 16, rs1_h3_val == -17
// opcode: pasa.hx ; op1:x19; op2:x11; dest:x0; op1val:0xffeffffefffbff7f;  op2val:0x7ffffffd00100006
TEST_RD_RR_OP(pasa.hx, x0, x19, x11, 0x0000000000000000, 0xfffd0000fffcffef, 0xffeffffefffbff7f, 0x7ffffffd00100006, x5, 9*XLEN/8, x8)

inst_24:
// rs1==x25, rs2==x14, rd==x1, rd_h0_val == -33, rd_h2_val == -65, rs2_h0_val == 32767, rd_h1_val == -21846, rs2_h3_val == -513, rs1_h1_val == 32767, rs2_h1_val == -9
// opcode: pasa.hx ; op1:x25; op2:x14; dest:x1; op1val:0x07f7ff7fffc000;  op2val:0xfdff0020fff77fff
TEST_RD_RR_OP(pasa.hx, x1, x25, x14, 0x0000000000000000, 0x400ffbfaaaaffdf, 0x07f7ff7fffc000, 0xfdff0020fff77fff, x5, 10*XLEN/8, x8)

inst_25:
// rs1==x28, rs2==x29, rd==x19, rd_h0_val == -65, rs2_h0_val == 8192, rs2_h1_val == -1025
// opcode: pasa.hx ; op1:x28; op2:x29; dest:x19; op1val:0x800005fffcf7ff;  op2val:0xfff7fffdfbff2000
TEST_RD_RR_OP(pasa.hx, x19, x28, x29, 0x0000000000000000, 0x05fffc0100ffbf, 0x800005fffcf7ff, 0xfff7fffdfbff2000, x5, 11*XLEN/8, x8)

inst_26:
// rs1==x17, rs2==x19, rd==x14, rd_h0_val == -129, rs1_h3_val < 0 and rs2_h3_val < 0, rd_h1_val == 8, rs2_h3_val == -1, rs1_h2_val == -9, rs2_h2_val == 512, rs2_h0_val == -65
// opcode: pasa.hx ; op1:x17; op2:x19; dest:x14; op1val:0xfff9fff7fff90003;  op2val:0xffff02000010ffbf
TEST_RD_RR_OP(pasa.hx, x14, x17, x19, 0x0000000000000000, 0xffdffffb0008ff7f, 0xfff9fff7fff90003, 0xffff02000010ffbf, x5, 12*XLEN/8, x8)

inst_27:
// rs1==x29, rs2==x0, rd==x12, rd_h0_val == -257, rs2_h2_val == 0, rs1_h0_val == 32767, rs1_h2_val == 4, rs2_h1_val == 1
// opcode: pasa.hx ; op1:x29; op2:x0; dest:x12; op1val:0xc000000400107fff;  op2val:0xfff600000001fff6
TEST_RD_RR_OP(pasa.hx, x12, x29, x0, 0x0000000000000000, 0xfff8fffdc000feff, 0xc000000400107fff, 0xfff600000001fff6, x5, 13*XLEN/8, x8)

inst_28:
// rs1==x15, rs2==x22, rd==x17, rd_h0_val == -513, rs2_h3_val == -3, rs1_h1_val == 512, rd_h2_val == -513, rs2_h1_val == 2, rs2_h2_val == -1, rs1_h2_val == -5, rs1_h3_val == -513, rs2_h0_val == -257
// opcode: pasa.hx ; op1:x15; op2:x22; dest:x17; op1val:0xfdfffffb02000005;  op2val:0xfffdffff0002feff
TEST_RD_RR_OP(pasa.hx, x17, x15, x22, 0x0000000000000000, 0xfffdfdff5555fdff, 0xfdfffffb02000005, 0xfffdffff0002feff, x5, 14*XLEN/8, x8)

inst_29:
// rs1==x30, rs2==x8, rd==x21, rd_h0_val == -1025, rd_h1_val == 512, rs1_h1_val == -32768, rs1_h0_val == -17
// opcode: pasa.hx ; op1:x30; op2:x8; dest:x21; op1val:0x1002008000ffef;  op2val:0xfffdffeffffb0007
TEST_RD_RR_OP(pasa.hx, x21, x30, x8, 0x0000000000000000, 0x4000060200fbff, 0x1002008000ffef, 0xfffdffeffffb0007, x5, 15*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x4, rs2==x7, rd==x2, rd_h0_val == -2049, rd_h3_val == -1025, rs1_h1_val == -17, rs2_h2_val == 8, rs1_h0_val == 8, rs1_h3_val == -1025, rs2_h0_val == -2049
// opcode: pasa.hx ; op1:x4; op2:x7; dest:x2; op1val:0xfbff0009ffef0008;  op2val:0x800008ffdff7ff
TEST_RD_RR_OP(pasa.hx, x2, x4, x7, 0x0000000000000000, 0xfbfffff80005f7ff, 0xfbff0009ffef0008, 0x800008ffdff7ff, x1, 0*XLEN/8, x3)

inst_31:
// rs1==x21, rd_h0_val == -4097, rd_h1_val == -513, rs1_h3_val == 8, rs1_h0_val == -5, rd_h3_val == 21845
// opcode: pasa.hx ; op1:x21; op2:x11; dest:x0; op1val:0x08dfff0005fffb;  op2val:0xfffd000000010003
TEST_RD_RR_OP(pasa.hx, x0, x21, x11, 0x0000000000000000, 0x55550007fdffefff, 0x08dfff0005fffb, 0xfffd000000010003, x1, 1*XLEN/8, x3)

inst_32:
// rs2==x21, rd_h0_val == -8193, rd_h1_val == -1025, rs2_h1_val == 32, rs2_h0_val == 2048, rs1_h1_val == -513, rs2_h2_val == -2, rs2_h3_val == 8, rs1_h0_val == 128
// opcode: pasa.hx ; op1:x15; op2:x21; dest:x10; op1val:0x10fff9fdff0080;  op2val:0x08fffe00200800
TEST_RD_RR_OP(pasa.hx, x10, x15, x21, 0x0000000000000000, 0x00fff9fbffdfff, 0x10fff9fdff0080, 0x08fffe00200800, x1, 2*XLEN/8, x3)

inst_33:
// rd==x5, rd_h0_val == -16385, rs1_h1_val == 8192, rs2_h0_val == 4, rd_h2_val == -1, rs1_h3_val == 2048, rd_h1_val == 64, rs2_h1_val == 64, rd_h3_val == 32767
// opcode: pasa.hx ; op1:x4; op2:x16; dest:x5; op1val:0x80000102000fffb;  op2val:0x10fff800400004
TEST_RD_RR_OP(pasa.hx, x5, x4, x16, 0x0000000000000000, 0x7fffffff0040bfff, 0x80000102000fffb, 0x10fff800400004, x1, 3*XLEN/8, x3)

inst_34:
// rd_h0_val == 21845, rd_h3_val == -257, rs2_h3_val == -8193, rs2_h1_val == 512, rs1_h1_val == 2, rs1_h0_val == 1024
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffa00020400;  op2val:0xdffffbff0200fbff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfefffffdfff85555, 0xfff8fffa00020400, 0xdffffbff0200fbff, x1, 4*XLEN/8, x3)

inst_35:
// rd_h0_val == -21846, rs1_h2_val == -33, rs1_h1_val == 2048, rs1_h3_val == 8192, rs2_h2_val == 2048
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdf08000006;  op2val:0x0608000040aaaa
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffe0080fffcaaaa, 0x2000ffdf08000006, 0x0608000040aaaa, x1, 5*XLEN/8, x3)

inst_36:
// rd_h1_val == -32768, rs1_h0_val == 8192, rs2_h0_val == 16384, rs2_h2_val == 1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffa100000202000;  op2val:0xfdff00013fff4000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xbfff00078000aaaa, 0xfffa100000202000, 0xfdff00013fff4000, x1, 6*XLEN/8, x3)

inst_37:
// rd_h1_val == -1, rs1_h3_val == 4096, rs2_h1_val == -1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff7ff7f5555;  op2val:0x080040ffffc000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff8ffbfffff0000, 0x1000fff7ff7f5555, 0x080040ffffc000, x1, 7*XLEN/8, x3)

inst_38:
// rd_h1_val == 0, rs2_h3_val == -33, rs2_h1_val == -16385
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffafff62000;  op2val:0xffdf0009bffff7ff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xffdf00090000ff7f, 0xeffffffafff62000, 0xffdf0009bffff7ff, x1, 8*XLEN/8, x3)

inst_39:
// rd_h1_val == 1, rs1_h0_val == -65, rd_h2_val == 64, rd_h3_val == 4096, rs2_h3_val == -129
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x090003efffffbf;  op2val:0xff7f08000001ffbf
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x100000400001f7ff, 0x090003efffffbf, 0xff7f08000001ffbf, x1, 9*XLEN/8, x3)

inst_40:
// rd_h1_val == 4, rs1_h0_val == 256, rs1_h2_val == 1024
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x090400ffbf0100;  op2val:0xfffd0200ffeffff8
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffcfbff0004f7ff, 0x090400ffbf0100, 0xfffd0200ffeffff8, x1, 10*XLEN/8, x3)

inst_41:
// rd_h1_val == 1024, rs1_h1_val == 0
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x06100000000040;  op2val:0x03feff0010fbff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffcffff04000010, 0x06100000000040, 0x03feff0010fbff, x1, 11*XLEN/8, x3)

inst_42:
// rd_h1_val == 8192, rs1_h0_val == 4096, rs1_h2_val == 64, rs2_h2_val == -129, rs2_h3_val == -4097, rs1_h1_val == 64
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x8000004000401000;  op2val:0xefffff7f10007fff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x400fff920000080, 0x8000004000401000, 0xefffff7f10007fff, x1, 12*XLEN/8, x3)

inst_43:
// rd_h1_val == 16384, rs2_h2_val == -513, rd_h3_val == -8193, rs2_h0_val == -17
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfbff400000203fff;  op2val:0x09fdfffffeffef
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xdffffff94000fff7, 0xfbff400000203fff, 0x09fdfffffeffef, x1, 13*XLEN/8, x3)

inst_44:
// rd_h1_val == -2, rs2_h1_val == 256, rd_h3_val == -9
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x02fffbfff7ffbf;  op2val:0xfff6080001001000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff7fff6fffe5555, 0x02fffbfff7ffbf, 0xfff6080001001000, x1, 14*XLEN/8, x3)

inst_45:
// rd_h1_val == -5, rs2_h2_val == -8193, rd_h2_val == 21845, rs1_h3_val == -9, rs1_h0_val == -9
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7f7ffffff7;  op2val:0x01dffffeff0100
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff75555fffb0006, 0xfff7ff7f7ffffff7, 0x01dffffeff0100, x1, 15*XLEN/8, x3)

inst_46:
// rd_h1_val == -17, rs2_h1_val == 1024, rs2_h3_val == -17, rs1_h0_val == -513
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff9dffffdff;  op2val:0xffef08000400fff7
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffd0007ffeffff6, 0xaaaafff9dffffdff, 0xffef08000400fff7, x1, 16*XLEN/8, x3)

inst_47:
// rd_h1_val == -16385, rd_h3_val == 2, rs2_h1_val == 4, rs2_h0_val == 2, rs2_h3_val == -21846
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x0800090040fdff;  op2val:0xaaaa3fff00040002
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x02ffffbffff7ff, 0x0800090040fdff, 0xaaaa3fff00040002, x1, 17*XLEN/8, x3)

inst_48:
// rd_h2_val == -32768, rs2_h3_val == 2048
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x080200fff7ffef;  op2val:0x800fffa10000100
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x7fff80000020ffdf, 0x080200fff7ffef, 0x800fffa10000100, x1, 18*XLEN/8, x3)

inst_49:
// rd_h2_val == 4, rs1_h2_val == 256, rs1_h3_val == -8193, rs1_h1_val == 16384
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xdfff010040000008;  op2val:0x08020000807fff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xffdf00041000feff, 0xdfff010040000008, 0x08020000807fff, x1, 19*XLEN/8, x3)

inst_50:
// rd_h2_val == 8, rs1_h3_val == 32767, rs2_h0_val == 512, rs1_h2_val == 2048
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0800ffbf3fff;  op2val:0x4000c00001000200
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x10000080800fff9, 0x7fff0800ffbf3fff, 0x4000c00001000200, x1, 20*XLEN/8, x3)

inst_51:
// rd_h2_val == 32, rs1_h1_val == -3, rs1_h0_val == -16385, rs2_h2_val == -33
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff7fffdbfff;  op2val:0xc000ffdf1000c000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x02002040000001, 0xffeffff7fffdbfff, 0xc000ffdf1000c000, x1, 21*XLEN/8, x3)

inst_52:
// rs1_h3_val == 4, rs1_h1_val == -1, rs2_h3_val == 64
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x04dfffffff0100;  op2val:0x40fffa0080fffa
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x55550005fff9dfff, 0x04dfffffff0100, 0x40fffa0080fffa, x1, 22*XLEN/8, x3)

inst_53:
// rs1_h3_val == 1024, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x400fff6fffdc000;  op2val:0x40000009c0000100
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x7fff5555c0005555, 0x400fff6fffdc000, 0x40000009c0000100, x1, 23*XLEN/8, x3)

inst_54:
// rs1_h3_val == 16384, rs2_h3_val == -1025, rs2_h0_val == -3, rd_h2_val == -2049
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x4000000600104000;  op2val:0xfbfffffeffdffffd
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff9f7ff5555ff7f, 0x4000000600104000, 0xfbfffffeffdffffd, x1, 24*XLEN/8, x3)

inst_55:
// rs1_h3_val == -2, rs2_h0_val == -8193
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffabfff0080;  op2val:0x55550009fffbdfff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x4000fff60008fdff, 0xfffefffabfff0080, 0x55550009fffbdfff, x1, 25*XLEN/8, x3)

inst_56:
// rs1_h3_val == -33, rd_h2_val == -129, rs1_h2_val == 1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0001fffa0007;  op2val:0x0300400200fffa
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x5555ff7ffbff0002, 0xffdf0001fffa0007, 0x0300400200fffa, x1, 26*XLEN/8, x3)

inst_57:
// rs1_h3_val == -65, rs2_h0_val == -1, rs2_h3_val == -16385, rs2_h1_val == 21845, rs1_h2_val == -17
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef3ffffffb;  op2val:0xbfffc0005555ffff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x0100027fff0008, 0xffbfffef3ffffffb, 0xbfffc0005555ffff, x1, 27*XLEN/8, x3)

inst_58:
// rs1_h3_val == -129, rd_h2_val == 512, rs1_h3_val == rs2_h3_val
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xff7f3fffbfff3fff;  op2val:0xff7ffffa00010009
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x7fff0200ff7ffbff, 0xff7f3fffbfff3fff, 0xff7ffffa00010009, x1, 28*XLEN/8, x3)

inst_59:
// rs1_h3_val == -2049, rs2_h2_val == 8192, rs1_h0_val == -1, rs1_h1_val == 128
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff10000080ffff;  op2val:0x032000fffffffe
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x8000803fffc000, 0xf7ff10000080ffff, 0x032000fffffffe, x1, 29*XLEN/8, x3)

inst_60:
// rs2_h0_val == -32768, rs1_h2_val == 8192
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xefff20007fff3fff;  op2val:0xfffbfff904008000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x4007fffffef3fff, 0xefff20007fff3fff, 0xfffbfff904008000, x1, 30*XLEN/8, x3)

inst_61:
// rs2_h0_val == 0, rs1_h0_val == -3
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0400fffcfffd;  op2val:0x07fffd40000000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xdfff0080f7ffff7f, 0xfffc0400fffcfffd, 0x07fffd40000000, x1, 31*XLEN/8, x3)

inst_62:
// rs2_h0_val == 1, rs1_h1_val == rs2_h1_val, rs2_h1_val == -8193, rs2_h3_val == 8192
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff9dfffff7f;  op2val:0x2000fff8dfff0001
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x80fffcfdffff7f, 0xfffbfff9dfffff7f, 0x2000fff8dfff0001, x1, 32*XLEN/8, x3)

inst_63:
// rs2_h0_val == 8, rd_h3_val == 8192, rs1_h0_val == -4097
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x200000204000efff;  op2val:0x4000ffffffff0008
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x2000008000060009, 0x200000204000efff, 0x4000ffffffff0008, x1, 33*XLEN/8, x3)

inst_64:
// rs2_h0_val == 32, rs2_h3_val == -65, rs2_h1_val == 0, rs1_h2_val == -65, rs1_h1_val == -21846, rs2_h2_val == 4096
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffbfaaaa0008;  op2val:0xffbf100000000020
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x403fff00010001, 0xfff7ffbfaaaa0008, 0xffbf100000000020, x1, 34*XLEN/8, x3)

inst_65:
// rs2_h0_val == 128, rs2_h1_val == -3, rs1_h0_val == -1025
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc1000fbff;  op2val:0xfffb0007fffd0080
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffa02000200aaaa, 0x20fffc1000fbff, 0xfffb0007fffd0080, x1, 35*XLEN/8, x3)

inst_66:
// rs2_h0_val == 1024, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x10008000002fff6;  op2val:0x04ffefdfff0400
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffafffb02000200, 0x10008000002fff6, 0x04ffefdfff0400, x1, 36*XLEN/8, x3)

inst_67:
// rs2_h0_val == -129, rs2_h1_val == -65
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffd7fffffdf;  op2val:0x032000ffbfff7f
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x013ffffeff2000, 0xfffdfffd7fffffdf, 0x032000ffbfff7f, x1, 37*XLEN/8, x3)

inst_68:
// rs2_h0_val == -513, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0000fffcefff;  op2val:0xfbff00400080fdff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x2000fffbffeffffb, 0xf7ff0000fffcefff, 0xfbff00400080fdff, x1, 38*XLEN/8, x3)

inst_69:
// rs2_h0_val == -4097, rs2_h3_val == 0
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x3fff01001000f7ff;  op2val:0x0008000010efff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x40005555efff0200, 0x3fff01001000f7ff, 0x0008000010efff, x1, 39*XLEN/8, x3)

inst_70:
// rs2_h0_val == 21845, rs1_h1_val == -2049, rd_h2_val == -9
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x200ffbff7ff0100;  op2val:0xfff7000500105555
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x07fff780000200, 0x200ffbff7ff0100, 0xfff7000500105555, x1, 40*XLEN/8, x3)

inst_71:
// rs2_h1_val == 8, rs2_h2_val == 16384, rs1_h2_val == 128, rs1_h3_val == -1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffff00804000bfff;  op2val:0x4000400000080002
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x100fffd00035555, 0xffff00804000bfff, 0x4000400000080002, x1, 41*XLEN/8, x3)

inst_72:
// rs2_h1_val == 2048, rd_h2_val == 16384, rd_h3_val == 16
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0010fffa0007;  op2val:0x0300030800fff6
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x104000efffc000, 0xfffd0010fffa0007, 0x0300030800fff6, x1, 42*XLEN/8, x3)

inst_73:
// rd_h3_val == -17, rs2_h2_val == -32768
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0080feff0000;  op2val:0x4080000004ff7f
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xffeffff9ffeffff6, 0x7fff0080feff0000, 0x4080000004ff7f, x1, 43*XLEN/8, x3)

inst_74:
// rd_h3_val == -65, rs1_h0_val == 2
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x04008000400002;  op2val:0x01fffb00800002
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xffbf4000efff2000, 0x04008000400002, 0x01fffb00800002, x1, 44*XLEN/8, x3)

inst_75:
// rd_h3_val == -129, rs1_h2_val == -1025
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x07fbfffff60000;  op2val:0x06c0000006efff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xff7ffff640005555, 0x07fbfffff60000, 0x06c0000006efff, x1, 45*XLEN/8, x3)

inst_76:
// rs2_h2_val == -2049, rd_h2_val == -2, rd_h3_val == -2049, rs1_h0_val == -257
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff800103ffffeff;  op2val:0xfffdf7ff00100020
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xf7fffffef7ff0000, 0xfff800103ffffeff, 0xfffdf7ff00100020, x1, 46*XLEN/8, x3)

inst_77:
// rs2_h2_val == -4097, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffef7ffffff8;  op2val:0x09efff00100007
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x06fffb0400fbff, 0xfeffffef7ffffff8, 0x09efff00100007, x1, 47*XLEN/8, x3)

inst_78:
// rs2_h2_val == -16385, rs2_h1_val == -129, rs2_h3_val == -2
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf0005fdff;  op2val:0xfffebfffff7f2000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xbfffffffefffff7f, 0xffffffbf0005fdff, 0xfffebfffff7f2000, x1, 48*XLEN/8, x3)

inst_79:
// rs2_h2_val == 21845, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x1004000ffbfff7f;  op2val:0xc0005555dfff0003
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffefffe5555fdff, 0x1004000ffbfff7f, 0xc0005555dfff0003, x1, 49*XLEN/8, x3)

inst_80:
// rd_h3_val == -4097, rs1_h2_val == -21846
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x3fffaaaa7fff5555;  op2val:0xfff67fff0000dfff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xeffffff6dffffff8, 0x3fffaaaa7fff5555, 0xfff67fff0000dfff, x1, 50*XLEN/8, x3)

inst_81:
// rs2_h2_val == -21846, rd_h2_val == 256, rs1_h2_val == 8
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000800090003;  op2val:0x3fffaaaafff8ff7f
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff60100ffef0008, 0xfffb000800090003, 0x3fffaaaafff8ff7f, x1, 51*XLEN/8, x3)

inst_82:
// rs2_h3_val == -32768, rd_h2_val == 2048
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff908005555;  op2val:0x8000dfffff7fc000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffa08003ffff7ff, 0xfffafff908005555, 0x8000dfffff7fc000, x1, 52*XLEN/8, x3)

inst_83:
// rd_h3_val == -21846, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfeff5555fff9ff7f;  op2val:0xfffd7fff00000003
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xaaaafffbc0000003, 0xfeff5555fff9ff7f, 0xfffd7fff00000003, x1, 53*XLEN/8, x3)

inst_84:
// rs1_h0_val == -32768, rs2_h2_val == 1024
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffb00208000;  op2val:0x0204007ffffffd
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x01fffbfff80007, 0xf7fffffb00208000, 0x0204007ffffffd, x1, 54*XLEN/8, x3)

inst_85:
// rs2_h3_val == 32, rs1_h2_val == -32768, rs2_h2_val == 256
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xefff8000aaaa3fff;  op2val:0x2001002000fdff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xc000fffe00060007, 0xefff8000aaaa3fff, 0x2001002000fdff, x1, 55*XLEN/8, x3)

inst_86:
// rs1_h0_val == 512, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x7fff080000020200;  op2val:0x0500010009feff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x20000000fdff8000, 0x7fff080000020200, 0x0500010009feff, x1, 56*XLEN/8, x3)

inst_87:
// rs1_h0_val == 2048, rs1_h3_val == 1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x01080000050800;  op2val:0xfbfffffdfdff0100
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x100000070010fffd, 0x01080000050800, 0xfbfffffdfdff0100, x1, 57*XLEN/8, x3)

inst_88:
// rs1_h2_val == rs2_h2_val, rs1_h1_val == 1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x403fff00010002;  op2val:0xffbf3fff7fffffdf
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x40000601000200, 0x403fff00010002, 0xffbf3fff7fffffdf, x1, 58*XLEN/8, x3)

inst_89:
// rs1_h1_val == -33, rd_h2_val == 8192
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100ffdf0005;  op2val:0x08f7fffffb5555
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfeff200000060200, 0xefff0100ffdf0005, 0x08f7fffffb5555, x1, 59*XLEN/8, x3)

inst_90:
// rs1_h1_val == -1025, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffefffeffbfffffd;  op2val:0x1000055555f7ff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff80009fffe4000, 0xffefffeffbfffffd, 0x1000055555f7ff, x1, 60*XLEN/8, x3)

inst_91:
// rs1_h1_val == 21845, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xc000000755557fff;  op2val:0xfdff0100ff7ffeff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x3ffffffac000ffbf, 0xc000000755557fff, 0xfdff0100ff7ffeff, x1, 61*XLEN/8, x3)

inst_92:
// rd_h2_val == 4096, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x800000400020400;  op2val:0x2000f7ff0003c000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x2000100002000800, 0x800000400020400, 0x2000f7ff0003c000, x1, 62*XLEN/8, x3)

inst_93:
// rs1_h2_val == -1, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbfdff;  op2val:0x0700200800fff9
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x10000100ff7f5555, 0xfffffffffffbfdff, 0x0700200800fff9, x1, 63*XLEN/8, x3)

inst_94:
// rs1_h2_val == 2, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0002ffdf0003;  op2val:0x7fff00800007c000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x040020ff7f4000, 0xfeff0002ffdf0003, 0x7fff00800007c000, x1, 64*XLEN/8, x3)

inst_95:
// rd_h2_val == -17, rs1_h0_val == -21846
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x080005feffaaaa;  op2val:0xfff855550006fdff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x20ffeffffefffd, 0x080005feffaaaa, 0xfff855550006fdff, x1, 65*XLEN/8, x3)

inst_96:
// rd_h2_val == -33, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0004fffd0002;  op2val:0xfffb0800fffd0040
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x400ffdfaaaa0006, 0x3fff0004fffd0002, 0xfffb0800fffd0040, x1, 66*XLEN/8, x3)

inst_97:
// rs2_h1_val == -2049, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffef0100ffff;  op2val:0xefff0003f7ffffdf
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x20fff70005aaaa, 0x5555ffef0100ffff, 0xefff0003f7ffffdf, x1, 67*XLEN/8, x3)

inst_98:
// rs1_h0_val == -2, rd_h3_val == -32768
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdffefffffe;  op2val:0x1000fff7ffffffdf
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x8000ffdffeff0080, 0xfff6ffdffefffffe, 0x1000fff7ffffffdf, x1, 68*XLEN/8, x3)

inst_99:
// rd_h2_val == -257, rs1_h2_val == -4097
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x400effffffffeff;  op2val:0xaaaa000500030200
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x1000fefffefffff9, 0x400effffffffeff, 0xaaaa000500030200, x1, 69*XLEN/8, x3)

inst_100:
// rs2_h1_val == -4097, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff97fff0005;  op2val:0x800c000efff0008
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x07004000050020, 0xff7ffff97fff0005, 0x800c000efff0008, x1, 70*XLEN/8, x3)

inst_101:
// rs2_h3_val == -257, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffef7ffffffc;  op2val:0xfeff200001000007
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfdffffdf0002efff, 0x8000ffef7ffffffc, 0xfeff200001000007, x1, 71*XLEN/8, x3)

inst_102:
// rd_h2_val == -4097, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0800fffdfff9;  op2val:0xffbfffeff7fffff7
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x03effff7ff0020, 0x3fff0800fffdfff9, 0xffbfffeff7fffff7, x1, 72*XLEN/8, x3)

inst_103:
// rs2_h1_val == -21846, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x8003ffffffb4000;  op2val:0xfff80001aaaafff9
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xc0007ffffffb0009, 0x8003ffffffb4000, 0xfff80001aaaafff9, x1, 73*XLEN/8, x3)

inst_104:
// rd_h2_val == -16385, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bffffdff0010;  op2val:0x01fffcfffe0200
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x10bffffffbfeff, 0xfff7bffffdff0010, 0x01fffcfffe0200, x1, 74*XLEN/8, x3)

inst_105:
// rs2_h3_val == -2049, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x08ff7f00057fff;  op2val:0xf7ff2000ffdf0080
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xdfff7fffffeffff8, 0x08ff7f00057fff, 0xf7ff2000ffdf0080, x1, 75*XLEN/8, x3)

inst_106:
// rs1_h2_val == -257, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xc000fefffff7fffd;  op2val:0xfffd02000040fffc
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffb00800003bfff, 0xc000fefffff7fffd, 0xfffd02000040fffc, x1, 76*XLEN/8, x3)

inst_107:
// rs1_h2_val == -513, rd_h2_val == -21846
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x04fdfffff60001;  op2val:0x07080000800006
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffbaaaafff80040, 0x04fdfffff60001, 0x07080000800006, x1, 77*XLEN/8, x3)

inst_108:
// rd_h3_val == 512, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xbffffefff7ffbfff;  op2val:0xfffd000500098000
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x2000007fffb0003, 0xbffffefff7ffbfff, 0xfffd000500098000, x1, 78*XLEN/8, x3)

inst_109:
// rd_h3_val == 2048, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff7ffdf0008;  op2val:0x08dfff0002feff
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x800080004005555, 0x1000fff7ffdf0008, 0x08dfff0002feff, x1, 79*XLEN/8, x3)

inst_110:
// rs1_h1_val == 8, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff700080000;  op2val:0x5555555500000020
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xffdffffdbfff0006, 0xfff8fff700080000, 0x5555555500000020, x1, 80*XLEN/8, x3)

inst_111:
// rs1_h3_val == 0, 
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffbffdff;  op2val:0x3fffffbffffdaaaa
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffc2000fff8bfff, 0x000020ffbffdff, 0x3fffffbffffdaaaa, x1, 81*XLEN/8, x3)

inst_112:
// rd_h0_val == -32768, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val, rd_h1_val == 2, rs2_h0_val == 256, rs1_h3_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rd_h3_val == 4, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs2_h3_val == 1024, rs1_h1_val != rs2_h1_val, rs1_h1_val == 16, rs2_h2_val == -9
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc00100007;  op2val:0x400fff7fffb0100
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0x04000700028000, 0xfffdfffc00100007, 0x400fff7fffb0100, x1, 82*XLEN/8, x3)

inst_113:
// rd_h0_val == -17, rd_h3_val == -3, rs1_h1_val == -5, rs1_h0_val == -129, rd_h2_val == 0, rs1_h2_val == -2, rs2_h1_val == 16, rs1_h3_val == -17
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffefffbff7f;  op2val:0x7ffffffd00100006
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfffd0000fffcffef, 0xffeffffefffbff7f, 0x7ffffffd00100006, x1, 83*XLEN/8, x3)

inst_114:
// rd_h0_val == -257, rs2_h2_val == 0, rs1_h0_val == 32767, rs1_h2_val == 4, rs2_h1_val == 1
// opcode: pasa.hx ; op1:x30; op2:x29; dest:x31; op1val:0xc000000400107fff;  op2val:0xfff600000001fff6
TEST_RD_RR_OP(pasa.hx, x31, x30, x29, 0x0000000000000000, 0xfff8fffdc000feff, 0xc000000400107fff, 0xfff600000001fff6, x1, 84*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 85*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
