
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pssub.h instruction of the RISC-V RV64PZicsr extension for the pssub.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pssub.h)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x24, rd==x19, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -513, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 256, rs1_h3_val == -1025, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -16385, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h3_val != rs2_h3_val, rs2_h2_val == -32768, rs2_h1_val == 2
// opcode: pssub.h ; op1:x23; op2:x24; dest:x19; op1val:0xfbfffdff3fff8000;  op2val:0x10080000002bfff
TEST_RR_OP(pssub.h, x19, x23, x24, 0x0000000000000000, 0xfbfffdff3fff8000, 0x10080000002bfff, x7, 0*XLEN/8, x12)

inst_1:
// rs2 == rd != rs1, rs1==x30, rs2==x14, rd==x14, rs1_h0_val == -1, rs2_h0_val == 4096, rs2_h3_val == 2, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -2049
// opcode: pssub.h ; op1:x30; op2:x14; dest:x14; op1val:0xfff8bffffffaffff;  op2val:0x020007f7ff1000
TEST_RR_OP(pssub.h, x14, x30, x14, 0x0000000000000000, 0xfff8bffffffaffff, 0x020007f7ff1000, x7, 1*XLEN/8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x24, rs1_h0_val == 0, rs1_h3_val == -3, rs2_h0_val == -5, rs2_h2_val == -16385, rs1_h1_val == 1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -21846, rs1_h2_val == 8192, rs2_h3_val == -16385
// opcode: pssub.h ; op1:x31; op2:x31; dest:x24; op1val:0xfffd200000010000;  op2val:0xbfffbfffaaaafffb
TEST_RR_OP(pssub.h, x24, x31, x31, 0x0000000000000000, 0xfffd200000010000, 0xbfffbfffaaaafffb, x7, 2*XLEN/8, x12)

inst_3:
// rs1 == rd != rs2, rs1==x11, rs2==x5, rd==x11, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -129, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == -9, rs1_h2_val == 4096, rs2_h2_val == -21846, rs1_h1_val == -257
// opcode: pssub.h ; op1:x11; op2:x5; dest:x11; op1val:0xff7f1000feff0001;  op2val:0xfff7aaaa0007fffc
TEST_RR_OP(pssub.h, x11, x11, x5, 0x0000000000000000, 0xff7f1000feff0001, 0xfff7aaaa0007fffc, x7, 3*XLEN/8, x12)

inst_4:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h0_val == 32767, rs1_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 16, rs2_h2_val == -513
// opcode: pssub.h ; op1:x1; op2:x1; dest:x1; op1val:0xfffc0010fffd7fff;  op2val:0xfff9fdff00070006
TEST_RR_OP(pssub.h, x1, x1, x1, 0x0000000000000000, 0xfffc0010fffd7fff, 0xfff9fdff00070006, x7, 4*XLEN/8, x12)

inst_5:
// rs1==x6, rs2==x8, rd==x31, rs1_h0_val == 2, rs1_h1_val == -5, rs1_h3_val == -9, rs2_h2_val == 64, rs2_h0_val == -3
// opcode: pssub.h ; op1:x6; op2:x8; dest:x31; op1val:0xfff7fff9fffb0002;  op2val:0x030040fff6fffd
TEST_RR_OP(pssub.h, x31, x6, x8, 0x0000000000000000, 0xfff7fff9fffb0002, 0x030040fff6fffd, x7, 5*XLEN/8, x12)

inst_6:
// rs1==x0, rs2==x2, rd==x30, rs1_h0_val == 4, rs1_h2_val == 21845, rs2_h2_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == rs2_h2_val, rs1_h1_val == 512, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 16, rs2_h3_val == -513, rs2_h1_val == 4
// opcode: pssub.h ; op1:x0; op2:x2; dest:x30; op1val:0x10555502000004;  op2val:0xfdff55550004fffb
TEST_RR_OP(pssub.h, x30, x0, x2, 0x0000000000000000, 0x10555502000004, 0xfdff55550004fffb, x7, 6*XLEN/8, x12)

inst_7:
// rs1==x4, rs2==x25, rd==x2, rs1_h0_val == 8, rs1_h2_val == -1, rs2_h0_val == 32, rs1_h1_val == -8193, rs2_h1_val == -2
// opcode: pssub.h ; op1:x4; op2:x25; dest:x2; op1val:0xfffdffffdfff0008;  op2val:0xfdfffdfffffe0020
TEST_RR_OP(pssub.h, x2, x4, x25, 0x0000000000000000, 0xfffdffffdfff0008, 0xfdfffdfffffe0020, x7, 7*XLEN/8, x12)

inst_8:
// rs1==x21, rs2==x13, rd==x0, rs1_h0_val == 16, rs2_h0_val == -65, rs1_h3_val == 4, rs1_h2_val == 1, rs2_h3_val == -2
// opcode: pssub.h ; op1:x21; op2:x13; dest:x0; op1val:0x04000100090010;  op2val:0xfffe3fff0007ffbf
TEST_RR_OP(pssub.h, x0, x21, x13, 0x0000000000000000, 0x04000100090010, 0xfffe3fff0007ffbf, x7, 8*XLEN/8, x12)

inst_9:
// rs1==x8, rs2==x17, rd==x5, rs1_h0_val == 32, rs2_h0_val == 8192, rs1_h2_val == -1025, rs2_h3_val == 2048, rs1_h3_val == -4097, rs2_h1_val == -17
// opcode: pssub.h ; op1:x8; op2:x17; dest:x5; op1val:0xeffffbfffff90020;  op2val:0x8000040ffef2000
TEST_RR_OP(pssub.h, x5, x8, x17, 0x0000000000000000, 0xeffffbfffff90020, 0x8000040ffef2000, x7, 9*XLEN/8, x12)

inst_10:
// rs1==x14, rs2==x10, rd==x3, rs1_h0_val == 64, rs2_h1_val == 32767, rs2_h0_val == 2, rs1_h1_val == 21845, rs1_h3_val == 1
// opcode: pssub.h ; op1:x14; op2:x10; dest:x3; op1val:0x01000155550040;  op2val:0xc000fffc7fff0002
TEST_RR_OP(pssub.h, x3, x14, x10, 0x0000000000000000, 0x01000155550040, 0xc000fffc7fff0002, x7, 10*XLEN/8, x12)

inst_11:
// rs1==x10, rs2==x3, rd==x8, rs1_h0_val == 128, rs2_h2_val == 32, rs1_h2_val == -9
// opcode: pssub.h ; op1:x10; op2:x3; dest:x8; op1val:0xfff6fff700050080;  op2val:0xfffc0020fffcfff8
TEST_RR_OP(pssub.h, x8, x10, x3, 0x0000000000000000, 0xfff6fff700050080, 0xfffc0020fffcfff8, x7, 11*XLEN/8, x12)

inst_12:
// rs1==x5, rs2==x28, rd==x18, rs1_h0_val == 256, rs2_h1_val == -65, rs2_h3_val == -17, rs1_h2_val == 128, rs2_h0_val == 8, rs2_h2_val == 8
// opcode: pssub.h ; op1:x5; op2:x28; dest:x18; op1val:0xfffd0080fff80100;  op2val:0xffef0008ffbf0008
TEST_RR_OP(pssub.h, x18, x5, x28, 0x0000000000000000, 0xfffd0080fff80100, 0xffef0008ffbf0008, x7, 12*XLEN/8, x12)

inst_13:
// rs1==x27, rs2==x22, rd==x21, rs1_h0_val == 512, rs2_h2_val == 512, rs2_h3_val == 4096, rs2_h0_val == -4097, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 256
// opcode: pssub.h ; op1:x27; op2:x22; dest:x21; op1val:0x100fffa00030200;  op2val:0x100002000004efff
TEST_RR_OP(pssub.h, x21, x27, x22, 0x0000000000000000, 0x100fffa00030200, 0x100002000004efff, x7, 13*XLEN/8, x12)

inst_14:
// rs1==x16, rs2==x4, rd==x9, rs1_h0_val == 1024, rs1_h1_val == -1025, rs1_h3_val == -8193, rs2_h1_val == -4097, rs2_h0_val == 32767, rs2_h2_val == 4
// opcode: pssub.h ; op1:x16; op2:x4; dest:x9; op1val:0xdfff5555fbff0400;  op2val:0xfffc0004efff7fff
TEST_RR_OP(pssub.h, x9, x16, x4, 0x0000000000000000, 0xdfff5555fbff0400, 0xfffc0004efff7fff, x7, 14*XLEN/8, x12)

inst_15:
// rs1==x17, rs2==x29, rd==x25, rs1_h0_val == 2048, rs2_h3_val == -1
// opcode: pssub.h ; op1:x17; op2:x29; dest:x25; op1val:0xfff6fbff3fff0800;  op2val:0xfffffff97fff2000
TEST_RR_OP(pssub.h, x25, x17, x29, 0x0000000000000000, 0xfff6fbff3fff0800, 0xfffffff97fff2000, x7, 15*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x26, rs2==x11, rd==x6, rs1_h0_val == 4096, rs1_h2_val == -8193, rs2_h1_val == 32, rs2_h0_val == 4
// opcode: pssub.h ; op1:x26; op2:x11; dest:x6; op1val:0x01dfff55551000;  op2val:0x05000300200004
TEST_RR_OP(pssub.h, x6, x26, x11, 0x0000000000000000, 0x01dfff55551000, 0x05000300200004, x1, 0*XLEN/8, x3)

inst_17:
// rs1==x7, rs2==x9, rd==x23, rs1_h0_val == 8192, rs2_h3_val == 32767, rs2_h1_val == 8192, rs2_h2_val == -9, rs1_h3_val == -21846, rs1_h1_val == 128, rs2_h0_val == 21845
// opcode: pssub.h ; op1:x7; op2:x9; dest:x23; op1val:0xaaaafffc00802000;  op2val:0x7ffffff720005555
TEST_RR_OP(pssub.h, x23, x7, x9, 0x0000000000000000, 0xaaaafffc00802000, 0x7ffffff720005555, x1, 1*XLEN/8, x3)

inst_18:
// rs1==x2, rs2==x18, rd==x15, rs1_h0_val == 16384, rs1_h1_val == 1024, rs2_h3_val == 32, rs2_h0_val == -17
// opcode: pssub.h ; op1:x2; op2:x18; dest:x15; op1val:0x100dfff04004000;  op2val:0x208000fffcffef
TEST_RR_OP(pssub.h, x15, x2, x18, 0x0000000000000000, 0x100dfff04004000, 0x208000fffcffef, x1, 2*XLEN/8, x3)

inst_19:
// rs1==x19, rs2==x30, rd==x12, rs1_h0_val == -2, rs2_h3_val == -2049, rs1_h3_val == 21845, rs2_h1_val == -1, rs1_h1_val == -129
// opcode: pssub.h ; op1:x19; op2:x30; dest:x12; op1val:0x5555dfffff7ffffe;  op2val:0xf7ff0005ffffc000
TEST_RR_OP(pssub.h, x12, x19, x30, 0x0000000000000000, 0x5555dfffff7ffffe, 0xf7ff0005ffffc000, x1, 3*XLEN/8, x3)

inst_20:
// rs1==x9, rs2==x26, rd==x20, rs1_h0_val == -3, rs2_h0_val == -33, rs2_h3_val == 8, rs2_h2_val == -257, rs1_h1_val == -65
// opcode: pssub.h ; op1:x9; op2:x26; dest:x20; op1val:0x09fdffffbffffd;  op2val:0x08feffefffffdf
TEST_RR_OP(pssub.h, x20, x9, x26, 0x0000000000000000, 0x09fdffffbffffd, 0x08feffefffffdf, x1, 4*XLEN/8, x3)

inst_21:
// rs1==x13, rs2==x6, rd==x28, rs1_h0_val == -5, rs1_h1_val == -2049, rs1_h2_val == -257, rs2_h2_val == 128, rs2_h1_val == 16384, rs2_h3_val == -257
// opcode: pssub.h ; op1:x13; op2:x6; dest:x28; op1val:0x07fefff7fffffb;  op2val:0xfeff00804000fffd
TEST_RR_OP(pssub.h, x28, x13, x6, 0x0000000000000000, 0x07fefff7fffffb, 0xfeff00804000fffd, x1, 5*XLEN/8, x3)

inst_22:
// rs1==x20, rs2==x19, rd==x4, rs1_h0_val == -9, rs2_h0_val == 1, rs2_h1_val == 8
// opcode: pssub.h ; op1:x20; op2:x19; dest:x4; op1val:0xfff80005ffbffff7;  op2val:0x3fff000700080001
TEST_RR_OP(pssub.h, x4, x20, x19, 0x0000000000000000, 0xfff80005ffbffff7, 0x3fff000700080001, x1, 6*XLEN/8, x3)

inst_23:
// rs1==x29, rs2==x27, rd==x26, rs1_h0_val == -17, rs1_h1_val == -513, rs2_h1_val == 4096, rs1_h3_val == 32, rs2_h3_val == -21846
// opcode: pssub.h ; op1:x29; op2:x27; dest:x26; op1val:0x20fefffdffffef;  op2val:0xaaaa000410000001
TEST_RR_OP(pssub.h, x26, x29, x27, 0x0000000000000000, 0x20fefffdffffef, 0xaaaa000410000001, x1, 7*XLEN/8, x3)

inst_24:
// rs1==x25, rs2==x15, rd==x29, rs1_h0_val == -33, rs2_h2_val == -129, rs1_h1_val == -4097, rs2_h3_val == 64, rs1_h3_val == 128
// opcode: pssub.h ; op1:x25; op2:x15; dest:x29; op1val:0x80bfffefffffdf;  op2val:0x40ff7ffffefff9
TEST_RR_OP(pssub.h, x29, x25, x15, 0x0000000000000000, 0x80bfffefffffdf, 0x40ff7ffffefff9, x1, 8*XLEN/8, x3)

inst_25:
// rs1==x28, rs2==x7, rd==x16, rs1_h0_val == -65, rs2_h3_val == 4, rs1_h1_val == 64, rs1_h2_val == 32, rs2_h1_val == -16385, rs2_h2_val == 0
// opcode: pssub.h ; op1:x28; op2:x7; dest:x16; op1val:0xfff600200040ffbf;  op2val:0x040000bfff0008
TEST_RR_OP(pssub.h, x16, x28, x7, 0x0000000000000000, 0xfff600200040ffbf, 0x040000bfff0008, x1, 9*XLEN/8, x3)

inst_26:
// rs1==x12, rs2==x0, rd==x27, rs1_h0_val == -129, rs2_h0_val == 0, rs1_h3_val == 8, rs2_h1_val == -129, rs1_h1_val == 16384
// opcode: pssub.h ; op1:x12; op2:x0; dest:x27; op1val:0x08fffc4000ff7f;  op2val:0xfffa0020ff7f0000
TEST_RR_OP(pssub.h, x27, x12, x0, 0x0000000000000000, 0x08fffc4000ff7f, 0xfffa0020ff7f0000, x1, 10*XLEN/8, x3)

inst_27:
// rs1==x22, rs2==x21, rd==x10, rs1_h0_val == -257, rs1_h1_val == rs2_h1_val, rs1_h1_val == 8
// opcode: pssub.h ; op1:x22; op2:x21; dest:x10; op1val:0xdfff00030008feff;  op2val:0x08fff800081000
TEST_RR_OP(pssub.h, x10, x22, x21, 0x0000000000000000, 0xdfff00030008feff, 0x08fff800081000, x1, 11*XLEN/8, x3)

inst_28:
// rs1==x24, rs2==x23, rd==x13, rs1_h0_val == -513, rs2_h0_val == -129, rs1_h2_val == 32767, rs2_h2_val == -65, rs2_h3_val == -8193, rs1_h1_val == -33
// opcode: pssub.h ; op1:x24; op2:x23; dest:x13; op1val:0x077fffffdffdff;  op2val:0xdfffffbf0009ff7f
TEST_RR_OP(pssub.h, x13, x24, x23, 0x0000000000000000, 0x077fffffdffdff, 0xdfffffbf0009ff7f, x1, 12*XLEN/8, x3)

inst_29:
// rs1==x3, rs2==x20, rd==x22, rs1_h0_val == -1025, rs2_h1_val == 2048, rs2_h3_val == 21845, rs2_h2_val == -4097
// opcode: pssub.h ; op1:x3; op2:x20; dest:x22; op1val:0xfffd0001ffbffbff;  op2val:0x5555efff0800bfff
TEST_RR_OP(pssub.h, x22, x3, x20, 0x0000000000000000, 0xfffd0001ffbffbff, 0x5555efff0800bfff, x1, 13*XLEN/8, x2)

inst_30:
// rs1==x15, rs2==x16, rd==x17, rs1_h0_val == -2049, rs2_h1_val == -5, rs1_h2_val == 2048
// opcode: pssub.h ; op1:x15; op2:x16; dest:x17; op1val:0x050800fffcf7ff;  op2val:0x080007fffbefff
TEST_RR_OP(pssub.h, x17, x15, x16, 0x0000000000000000, 0x050800fffcf7ff, 0x080007fffbefff, x1, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31:
// rs1==x18, rs2==x12, rd==x7, rs1_h0_val == -4097, rs2_h2_val == -2049
// opcode: pssub.h ; op1:x18; op2:x12; dest:x7; op1val:0x0500800008efff;  op2val:0x07f7ffffbfffef
TEST_RR_OP(pssub.h, x7, x18, x12, 0x0000000000000000, 0x0500800008efff, 0x07f7ffffbfffef, x1, 0*XLEN/8, x2)

inst_32:
// rs1_h0_val == -8193, rs1_h2_val == -2, rs1_h3_val == -17
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffe0005dfff;  op2val:0xfffe00200020ff7f
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffeffffe0005dfff, 0xfffe00200020ff7f, x1, 1*XLEN/8, x2)

inst_33:
// rs1_h0_val == -16385, rs2_h3_val == -5, rs2_h1_val == -9, rs2_h0_val == -1025
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7fff0005bfff;  op2val:0xfffb3ffffff7fbff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x3fff7fff0005bfff, 0xfffb3ffffff7fbff, x1, 2*XLEN/8, x2)

inst_34:
// rs1_h0_val == 21845, rs1_h3_val == 2, rs1_h1_val == -17, rs2_h3_val == -32768, rs2_h2_val == -1025
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x020009ffef5555;  op2val:0x8000fbffbfffffef
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x020009ffef5555, 0x8000fbffbfffffef, x1, 3*XLEN/8, x2)

inst_35:
// rs2_h3_val == 16, rs1_h3_val == -513, rs1_h2_val == -3, rs2_h2_val == 1024
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffdeffff7ff;  op2val:0x1004000008fffc
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfdfffffdeffff7ff, 0x1004000008fffc, x1, 4*XLEN/8, x2)

inst_36:
// rs2_h3_val == 128, rs2_h2_val == 16, rs1_h3_val == 2048, rs2_h1_val == 128
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x800feff0040ffdf;  op2val:0x80001000800000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x800feff0040ffdf, 0x80001000800000, x1, 5*XLEN/8, x2)

inst_37:
// rs2_h3_val == 512, rs2_h2_val == 2, rs1_h1_val == -1, rs1_h3_val == -65, rs1_h2_val == -4097
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefffffff0005;  op2val:0x20000023fff0008
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffbfefffffff0005, 0x20000023fff0008, x1, 6*XLEN/8, x2)

inst_38:
// rs2_h3_val == 1024, rs2_h1_val == 256, rs2_h0_val == -2
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x04fdff4000fff8;  op2val:0x400fffa0100fffe
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x04fdff4000fff8, 0x400fffa0100fffe, x1, 7*XLEN/8, x2)

inst_39:
// rs2_h3_val == 8192, rs2_h2_val == -1, rs2_h1_val == -8193
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffefdff5555;  op2val:0x2000ffffdffffffc
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x3ffffffefdff5555, 0x2000ffffdffffffc, x1, 8*XLEN/8, x2)

inst_40:
// rs2_h3_val == 16384, rs1_h1_val == 32767, rs1_h2_val == -129, rs2_h1_val == -33, rs1_h3_val == -16385
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfffff7f7fff0020;  op2val:0x4000fff9ffdffffa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xbfffff7f7fff0020, 0x4000fff9ffdffffa, x1, 9*XLEN/8, x2)

inst_41:
// rs2_h3_val == -3, rs2_h0_val == 64
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd0001fff8;  op2val:0xfffdbfffffbf0040
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xff7ffffd0001fff8, 0xfffdbfffffbf0040, x1, 10*XLEN/8, x2)

inst_42:
// rs2_h3_val == -33, rs1_h2_val == -65, rs2_h2_val == 256, rs2_h1_val == 64
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffbf0200fff7;  op2val:0xffdf01000040ff7f
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x3fffffbf0200fff7, 0xffdf01000040ff7f, x1, 11*XLEN/8, x2)

inst_43:
// rs2_h3_val == -65, rs1_h0_val == rs2_h0_val
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00050005fff6;  op2val:0xffbf00200020fff6
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xdfff00050005fff6, 0xffbf00200020fff6, x1, 12*XLEN/8, x2)

inst_44:
// rs2_h3_val == -129, rs2_h1_val == 1024
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7ffffffa0400;  op2val:0xff7fffbf0400fffe
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfbff7ffffffa0400, 0xff7fffbf0400fffe, x1, 13*XLEN/8, x2)

inst_45:
// rs2_h3_val == -1025, rs1_h1_val == 8192
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff20000010;  op2val:0xfbfffff9fff8bfff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xefffffff20000010, 0xfbfffff9fff8bfff, x1, 14*XLEN/8, x2)

inst_46:
// rs2_h3_val == -4097, rs2_h1_val == -513, rs1_h2_val == 0
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x020000dfff5555;  op2val:0xefffeffffdffc000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x020000dfff5555, 0xefffeffffdffc000, x1, 15*XLEN/8, x2)

inst_47:
// rs1_h0_val == -21846, rs2_h2_val == 2048
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffffff7faaaa;  op2val:0xaaaa0800ffbf0006
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfff9ffffff7faaaa, 0xaaaa0800ffbf0006, x1, 16*XLEN/8, x2)

inst_48:
// rs1_h1_val == -32768, rs1_h2_val == 16384, rs2_h0_val == 512
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff40008000ffff;  op2val:0x200200ffef0200
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x3fff40008000ffff, 0x200200ffef0200, x1, 17*XLEN/8, x2)

inst_49:
// rs1_h1_val == 0, rs2_h0_val == -1, rs1_h3_val == -32768
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe00000020;  op2val:0xaaaa00030004ffff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x8000fffe00000020, 0xaaaa00030004ffff, x1, 18*XLEN/8, x2)

inst_50:
// rs1_h1_val == 2, rs1_h3_val == 1024
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x400fffd00020100;  op2val:0x043fff00202000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x400fffd00020100, 0x043fff00202000, x1, 19*XLEN/8, x2)

inst_51:
// rs1_h1_val == 4, rs2_h0_val == 1024
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd0004aaaa;  op2val:0x400f7ffffdf0400
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x100fffd0004aaaa, 0x400f7ffffdf0400, x1, 20*XLEN/8, x2)

inst_52:
// rs1_h1_val == 16, rs1_h2_val == -33, rs1_h3_val == 8192
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdf00100010;  op2val:0x40000100fffbc000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x2000ffdf00100010, 0x40000100fffbc000, x1, 21*XLEN/8, x2)

inst_53:
// rs1_h1_val == 32, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x0900030020fffc;  op2val:0xf7fffff90100fffa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x0900030020fffc, 0xf7fffff90100fffa, x1, 22*XLEN/8, x2)

inst_54:
// rs1_h1_val == 256, rs1_h3_val == -33, rs1_h2_val == -17
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffef01000005;  op2val:0xbffff7ffbffffff6
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffdfffef01000005, 0xbffff7ffbffffff6, x1, 23*XLEN/8, x2)

inst_55:
// rs1_h1_val == 2048, rs1_h3_val == 64, rs2_h0_val == -21846, rs1_h3_val == rs2_h3_val
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x40001008000020;  op2val:0x40ffff0040aaaa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x40001008000020, 0x40ffff0040aaaa, x1, 24*XLEN/8, x2)

inst_56:
// rs1_h3_val == -5, rs2_h0_val == -8193
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc0003fff0008;  op2val:0xfdfffffa0008dfff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffbc0003fff0008, 0xfdfffffa0008dfff, x1, 25*XLEN/8, x2)

inst_57:
// rs1_h3_val == -257, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffc0080efff;  op2val:0xaaaafff9fff60040
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfefffffc0080efff, 0xaaaafff9fff60040, x1, 26*XLEN/8, x2)

inst_58:
// rs2_h3_val == 1, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000070008fff8;  op2val:0x01020008007fff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x8000070008fff8, 0x01020008007fff, x1, 27*XLEN/8, x2)

inst_59:
// rs1_h3_val == -2049, rs2_h1_val == -3, rs2_h2_val == -33
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbffff60009;  op2val:0x10ffdffffdc000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xf7ffffbffff60009, 0x10ffdffffdc000, x1, 28*XLEN/8, x2)

inst_60:
// rs2_h0_val == -32768, rs1_h3_val == 16384, rs2_h2_val == -3, rs1_h2_val == 4, rs2_h3_val == 0
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x400000040020feff;  op2val:0x00fffdf7ff8000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x400000040020feff, 0x00fffdf7ff8000, x1, 29*XLEN/8, x2)

inst_61:
// rs2_h0_val == 16, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7fefffefff;  op2val:0xc000fff900050010
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x100ff7fefffefff, 0xc000fff900050010, x1, 30*XLEN/8, x2)

inst_62:
// rs2_h0_val == 128, rs2_h1_val == 512
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x200007fffd8000;  op2val:0x2000c00002000080
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x200007fffd8000, 0x2000c00002000080, x1, 31*XLEN/8, x2)

inst_63:
// rs2_h0_val == 256, rs1_h1_val == -2
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x030000fffefff8;  op2val:0x003ffffdff0100
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x030000fffefff8, 0x003ffffdff0100, x1, 32*XLEN/8, x2)

inst_64:
// rs2_h0_val == 2048, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff55550000fffe;  op2val:0x3fff020040000800
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfdff55550000fffe, 0x3fff020040000800, x1, 33*XLEN/8, x2)

inst_65:
// rs2_h0_val == 16384, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x02001080000020;  op2val:0xffbffffafffb4000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x02001080000020, 0xffbffffafffb4000, x1, 34*XLEN/8, x2)

inst_66:
// rs2_h0_val == -9, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000500040009;  op2val:0x400800fdfffff7
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfdff000500040009, 0x400800fdfffff7, x1, 35*XLEN/8, x2)

inst_67:
// rs2_h0_val == -257, rs2_h2_val == 32767
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x10555555558000;  op2val:0x077fffdffffeff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x10555555558000, 0x077fffdffffeff, x1, 36*XLEN/8, x2)

inst_68:
// rs2_h0_val == -513, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000002000060400;  op2val:0xfffbffbff7fffdff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x8000002000060400, 0xfffbffbff7fffdff, x1, 37*XLEN/8, x2)

inst_69:
// rs2_h0_val == -2049, rs1_h3_val == 512, rs1_h1_val == -9
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000020fff7fffb;  op2val:0xefff0002fffdf7ff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x2000020fff7fffb, 0xefff0002fffdf7ff, x1, 38*XLEN/8, x2)

inst_70:
// rs1_h1_val == 4096, rs1_h2_val == 512
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff602001000c000;  op2val:0x8007fff08000100
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfff602001000c000, 0x8007fff08000100, x1, 39*XLEN/8, x2)

inst_71:
// rs2_h1_val == -32768, rs1_h2_val == 256
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0100feff0100;  op2val:0xffdffff68000ffdf
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfbff0100feff0100, 0xffdffff68000ffdf, x1, 40*XLEN/8, x2)

inst_72:
// rs1_h1_val == -16385, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff8bfff0009;  op2val:0x050400fff70100
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfbfffff8bfff0009, 0x050400fff70100, x1, 41*XLEN/8, x2)

inst_73:
// rs1_h1_val == -21846, rs1_h2_val == -21846
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaaaaaaaaaa;  op2val:0x20ffdf00050010
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x40aaaaaaaaaaaa, 0x20ffdf00050010, x1, 42*XLEN/8, x2)

inst_74:
// rs1_h2_val == -32768, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x208000fffc0004;  op2val:0xfff6aaaa10000002
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x208000fffc0004, 0xfff6aaaa10000002, x1, 43*XLEN/8, x2)

inst_75:
// rs1_h2_val == 2, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002f7fffffc;  op2val:0x3fff00057fff0006
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfff70002f7fffffc, 0x3fff00057fff0006, x1, 44*XLEN/8, x2)

inst_76:
// rs1_h2_val == 8, rs2_h1_val == 0
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000800040400;  op2val:0x800001000000bfff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffd000800040400, 0x800001000000bfff, x1, 45*XLEN/8, x2)

inst_77:
// rs2_h1_val == -257, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0080fffdff7f;  op2val:0xf7fffdfffefffdff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfbff0080fffdff7f, 0xf7fffdfffefffdff, x1, 46*XLEN/8, x2)

inst_78:
// rs2_h1_val == -1025, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x050800ffdff7ff;  op2val:0x7fffffdffbffaaaa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x050800ffdff7ff, 0x7fffffdffbffaaaa, x1, 47*XLEN/8, x2)

inst_79:
// rs1_h2_val == 64, rs1_h3_val == 32767
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0040fbffffef;  op2val:0x093fffbfffc000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x7fff0040fbffffef, 0x093fffbfffc000, x1, 48*XLEN/8, x2)

inst_80:
// rs1_h2_val == 1024, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0400bffffeff;  op2val:0xffdfaaaa10000000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffbf0400bffffeff, 0xffdfaaaa10000000, x1, 49*XLEN/8, x2)

inst_81:
// rs2_h1_val == 21845, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x0300000200fffa;  op2val:0x0200055555fffb
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x0300000200fffa, 0x0200055555fffb, x1, 50*XLEN/8, x2)

inst_82:
// rs2_h2_val == 1, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff8ffeffff9;  op2val:0xefff00010006dfff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x3ffffff8ffeffff9, 0xefff00010006dfff, x1, 51*XLEN/8, x2)

inst_83:
// rs1_h2_val == -2049, rs2_h2_val == -5
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x05f7ffffdf2000;  op2val:0x08fffb08000800
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x05f7ffffdf2000, 0x08fffb08000800, x1, 52*XLEN/8, x2)

inst_84:
// rs2_h2_val == 4096, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff0005bfff;  op2val:0xaaaa100000070001
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x7fffefff0005bfff, 0xaaaa100000070001, x1, 53*XLEN/8, x2)

inst_85:
// rs2_h2_val == 8192, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbfbfff0006;  op2val:0xbfff2000fff6fff8
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffdfffbfbfff0006, 0xbfff2000fff6fff8, x1, 54*XLEN/8, x2)

inst_86:
// rs2_h2_val == 16384, rs2_h1_val == 1
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff4000ffbf0000;  op2val:0xfffc40000001fffa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xf7ff4000ffbf0000, 0xfffc40000001fffa, x1, 55*XLEN/8, x2)

inst_87:
// rs2_h2_val == -2, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00010080fbff;  op2val:0xfefffffe0002dfff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffa00010080fbff, 0xfefffffe0002dfff, x1, 56*XLEN/8, x2)

inst_88:
// rs1_h3_val == -1, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff8000c0000010;  op2val:0xbfffffdf0009fffd
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xffff8000c0000010, 0xbfffffdf0009fffd, x1, 57*XLEN/8, x2)

inst_89:
// rs2_h1_val == 16, rs1_h3_val == -2
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffcffbf0040;  op2val:0xaaaaffff00100080
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffefffcffbf0040, 0xaaaaffff00100080, x1, 58*XLEN/8, x2)

inst_90:
// rs1_h3_val == 0, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x00000200090400;  op2val:0x06fffdffbffbff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x00000200090400, 0x06fffdffbffbff, x1, 59*XLEN/8, x2)

inst_91:
// rs2_h2_val == -8193, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x1003ffffff7c000;  op2val:0x20dfff00012000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x1003ffffff7c000, 0x20dfff00012000, x1, 60*XLEN/8, x2)

inst_92:
// rs1_h3_val == 4096, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7f3fff0005;  op2val:0x400000400400fffa
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x1000ff7f3fff0005, 0x400000400400fffa, x1, 61*XLEN/8, x2)

inst_93:
// rs1_h2_val == -5, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffbc000feff;  op2val:0xfdff7fff00061000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xff7ffffbc000feff, 0xfdff7fff00061000, x1, 62*XLEN/8, x2)

inst_94:
// rs2_h2_val == -17, 
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x010020ffff0003;  op2val:0x4000ffef0001fdff
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x010020ffff0003, 0x4000ffef0001fdff, x1, 63*XLEN/8, x2)

inst_95:
// rs1_h0_val == 0, rs1_h3_val == -3, rs2_h0_val == -5, rs2_h2_val == -16385, rs1_h1_val == 1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -21846, rs1_h2_val == 8192, rs2_h3_val == -16385
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd200000010000;  op2val:0xbfffbfffaaaafffb
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffd200000010000, 0xbfffbfffaaaafffb, x1, 64*XLEN/8, x2)

inst_96:
// rs1_h0_val == 32767, rs1_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 16, rs2_h2_val == -513
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0010fffd7fff;  op2val:0xfff9fdff00070006
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0xfffc0010fffd7fff, 0xfff9fdff00070006, x1, 65*XLEN/8, x2)

inst_97:
// rs1_h0_val == 4, rs1_h2_val == 21845, rs2_h2_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == rs2_h2_val, rs1_h1_val == 512, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 16, rs2_h3_val == -513, rs2_h1_val == 4
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x10555502000004;  op2val:0xfdff55550004fffb
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x10555502000004, 0xfdff55550004fffb, x1, 66*XLEN/8, x2)

inst_98:
// rs1_h0_val == 16, rs2_h0_val == -65, rs1_h3_val == 4, rs1_h2_val == 1, rs2_h3_val == -2
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x04000100090010;  op2val:0xfffe3fff0007ffbf
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x04000100090010, 0xfffe3fff0007ffbf, x1, 67*XLEN/8, x2)

inst_99:
// rs1_h0_val == -129, rs2_h0_val == 0, rs1_h3_val == 8, rs2_h1_val == -129, rs1_h1_val == 16384
// opcode: pssub.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fffc4000ff7f;  op2val:0xfffa0020ff7f0000
TEST_RR_OP(pssub.h, x31, x30, x29, 0x0000000000000000, 0x08fffc4000ff7f, 0xfffa0020ff7f0000, x1, 68*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 69*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
