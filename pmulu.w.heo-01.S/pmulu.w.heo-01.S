
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Mar 14 02:36:27 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulu.w.heo instruction of the RISC-V RV64PZicsr extension for the pmulu.w.heo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulu.w.heo)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs2 == rd != rs1, rs1==x29, rs2==x6, rd==x6, rs1_w0_val == -2147483648, rs2_w1_val == 262144, rs1_w1_val == 4, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val != rs2_w1_val, rs2_w0_val == 65536
// opcode: pmulu.w.heo ; op1:x29; op2:x6; dest:x6; op1val:0x00000480000000;  op2val:0x04000000010000
TEST_RR_OP(pmulu.w.heo, x6, x29, x6, 0x0000000000000000, 0x00000480000000, 0x04000000010000, x7, 0*XLEN/8, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x30, rd==x13, rs1_w0_val == -1, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -16385, rs2_w0_val == -134217729
// opcode: pmulu.w.heo ; op1:x22; op2:x30; dest:x13; op1val:0xfffffff8ffffffff;  op2val:0xffffbffff7ffffff
TEST_RR_OP(pmulu.w.heo, x13, x22, x30, 0x0000000000000000, 0xfffffff8ffffffff, 0xffffbffff7ffffff, x7, 1*XLEN/8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x19, rs2==x11, rd==x19, rs1_w0_val == 0, rs2_w1_val == 2, rs1_w1_val == -9, rs2_w0_val == 2147483647, rs1_w1_val < 0 and rs2_w1_val > 0
// opcode: pmulu.w.heo ; op1:x19; op2:x11; dest:x19; op1val:0xfffffff700000000;  op2val:0x0000027fffffff
TEST_RR_OP(pmulu.w.heo, x19, x19, x11, 0x0000000000000000, 0xfffffff700000000, 0x0000027fffffff, x7, 2*XLEN/8, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_w0_val == 1, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -1073741825, rs2_w0_val == 4
// opcode: pmulu.w.heo ; op1:x2; op2:x2; dest:x2; op1val:0xfffffffa00000001;  op2val:0xbfffffff00000004
TEST_RR_OP(pmulu.w.heo, x2, x2, x2, 0x0000000000000000, 0xfffffffa00000001, 0xbfffffff00000004, x7, 3*XLEN/8, x9)

inst_4:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x23, rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 268435456, rs1_w1_val == 16384
// opcode: pmulu.w.heo ; op1:x5; op2:x5; dest:x23; op1val:0x0040007fffffff;  op2val:0x10000000c0000000
TEST_RR_OP(pmulu.w.heo, x23, x5, x5, 0x0000000000000000, 0x0040007fffffff, 0x10000000c0000000, x7, 4*XLEN/8, x9)

inst_5:
// rs1==x30, rs2==x31, rd==x22, rs1_w0_val == 2, rs2_w0_val == 2048, rs2_w1_val == 64, rs1_w1_val == -1431655766
// opcode: pmulu.w.heo ; op1:x30; op2:x31; dest:x22; op1val:0xaaaaaaaa00000002;  op2val:0x00004000000800
TEST_RR_OP(pmulu.w.heo, x22, x30, x31, 0x0000000000000000, 0xaaaaaaaa00000002, 0x00004000000800, x7, 5*XLEN/8, x9)

inst_6:
// rs1==x12, rs2==x27, rd==x14, rs1_w0_val == 4, rs2_w1_val == 1431655765
// opcode: pmulu.w.heo ; op1:x12; op2:x27; dest:x14; op1val:0x00000500000004;  op2val:0x5555555500010000
TEST_RR_OP(pmulu.w.heo, x14, x12, x27, 0x0000000000000000, 0x00000500000004, 0x5555555500010000, x7, 6*XLEN/8, x9)

inst_7:
// rs1==x27, rs2==x16, rd==x28, rs1_w0_val == 8, rs2_w0_val == 8192, rs1_w1_val == -1, rs2_w1_val == -16777217
// opcode: pmulu.w.heo ; op1:x27; op2:x16; dest:x28; op1val:0xffffffff00000008;  op2val:0xfeffffff00002000
TEST_RR_OP(pmulu.w.heo, x28, x27, x16, 0x0000000000000000, 0xffffffff00000008, 0xfeffffff00002000, x7, 7*XLEN/8, x9)

inst_8:
// rs1==x3, rs2==x8, rd==x30, rs1_w0_val == 16, rs2_w0_val == -8193, rs1_w1_val == 1024, rs2_w1_val == -65, rs1_w1_val > 0 and rs2_w1_val < 0
// opcode: pmulu.w.heo ; op1:x3; op2:x8; dest:x30; op1val:0x00040000000010;  op2val:0xffffffbfffffdfff
TEST_RR_OP(pmulu.w.heo, x30, x3, x8, 0x0000000000000000, 0x00040000000010, 0xffffffbfffffdfff, x7, 8*XLEN/8, x9)

inst_9:
// rs1==x25, rs2==x12, rd==x29, rs1_w0_val == 32, rs2_w0_val == -2147483648, rs2_w1_val == 1024, rs1_w1_val == 0
// opcode: pmulu.w.heo ; op1:x25; op2:x12; dest:x29; op1val:0x00000000000020;  op2val:0x00040080000000
TEST_RR_OP(pmulu.w.heo, x29, x25, x12, 0x0000000000000000, 0x00000000000020, 0x00040080000000, x7, 9*XLEN/8, x9)

inst_10:
// rs1==x1, rs2==x26, rd==x15, rs1_w0_val == 64, rs2_w1_val == 524288, rs2_w0_val == 262144
// opcode: pmulu.w.heo ; op1:x1; op2:x26; dest:x15; op1val:0x00040000000040;  op2val:0x08000000040000
TEST_RR_OP(pmulu.w.heo, x15, x1, x26, 0x0000000000000000, 0x00040000000040, 0x08000000040000, x7, 10*XLEN/8, x9)

inst_11:
// rs1==x8, rs2==x22, rd==x26, rs1_w0_val == 128, rs2_w1_val == -1048577, rs2_w0_val == -67108865, rs1_w1_val == 64
// opcode: pmulu.w.heo ; op1:x8; op2:x22; dest:x26; op1val:0x00004000000080;  op2val:0xffeffffffbffffff
TEST_RR_OP(pmulu.w.heo, x26, x8, x22, 0x0000000000000000, 0x00004000000080, 0xffeffffffbffffff, x7, 11*XLEN/8, x9)

inst_12:
// rs1==x0, rs2==x1, rd==x3, rs1_w0_val == 256, rs1_w1_val == -536870913, rs2_w0_val == -2049
// opcode: pmulu.w.heo ; op1:x0; op2:x1; dest:x3; op1val:0xdfffffff00000100;  op2val:0x000006fffff7ff
TEST_RR_OP(pmulu.w.heo, x3, x0, x1, 0x0000000000000000, 0xdfffffff00000100, 0x000006fffff7ff, x7, 12*XLEN/8, x9)

inst_13:
// rs1==x17, rs2==x24, rd==x31, rs1_w0_val == 512, rs2_w0_val == -65537, rs2_w1_val == -257
// opcode: pmulu.w.heo ; op1:x17; op2:x24; dest:x31; op1val:0xc000000000000200;  op2val:0xfffffefffffeffff
TEST_RR_OP(pmulu.w.heo, x31, x17, x24, 0x0000000000000000, 0xc000000000000200, 0xfffffefffffeffff, x7, 13*XLEN/8, x9)

inst_14:
// rs1==x23, rs2==x4, rd==x5, rs1_w0_val == 1024, rs2_w1_val == 33554432, rs2_w0_val == -1431655766, rs1_w1_val == 1073741824
// opcode: pmulu.w.heo ; op1:x23; op2:x4; dest:x5; op1val:0x4000000000000400;  op2val:0x2000000aaaaaaaa
TEST_RR_OP(pmulu.w.heo, x5, x23, x4, 0x0000000000000000, 0x4000000000000400, 0x2000000aaaaaaaa, x7, 14*XLEN/8, x9)

inst_15:
// rs1==x9, rs2==x3, rd==x1, rs1_w0_val == 2048, rs2_w1_val == 4, rs2_w0_val == -2, rs1_w1_val == 32768
// opcode: pmulu.w.heo ; op1:x9; op2:x3; dest:x1; op1val:0x00800000000800;  op2val:0x000004fffffffe
TEST_RR_OP(pmulu.w.heo, x1, x9, x3, 0x0000000000000000, 0x00800000000800, 0x000004fffffffe, x7, 15*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x7, rs2==x14, rd==x0, rs1_w0_val == 4096, rs1_w1_val == -513, rs2_w1_val == 8
// opcode: pmulu.w.heo ; op1:x7; op2:x14; dest:x0; op1val:0xfffffdff00001000;  op2val:0x0000087fffffff
TEST_RR_OP(pmulu.w.heo, x0, x7, x14, 0x0000000000000000, 0xfffffdff00001000, 0x0000087fffffff, x1, 0*XLEN/8, x2)

inst_17:
// rs1==x18, rs2==x25, rd==x21, rs1_w0_val == 8192, rs2_w1_val == 1073741824
// opcode: pmulu.w.heo ; op1:x18; op2:x25; dest:x21; op1val:0xaaaaaaaa00002000;  op2val:0x40000000fbffffff
TEST_RR_OP(pmulu.w.heo, x21, x18, x25, 0x0000000000000000, 0xaaaaaaaa00002000, 0x40000000fbffffff, x1, 1*XLEN/8, x2)

inst_18:
// rs1==x24, rs2==x0, rd==x27, rs1_w0_val == 16384, 
// opcode: pmulu.w.heo ; op1:x24; op2:x0; dest:x27; op1val:0x00000500004000;  op2val:0x20000003fffffff
TEST_RR_OP(pmulu.w.heo, x27, x24, x0, 0x0000000000000000, 0x00000500004000, 0x20000003fffffff, x1, 2*XLEN/8, x2)

inst_19:
// rs1==x4, rs2==x28, rd==x17, rs1_w0_val == 32768, rs2_w1_val == -17, rs2_w0_val == -131073, rs1_w1_val == 1431655765
// opcode: pmulu.w.heo ; op1:x4; op2:x28; dest:x17; op1val:0x5555555500008000;  op2val:0xffffffeffffdffff
TEST_RR_OP(pmulu.w.heo, x17, x4, x28, 0x0000000000000000, 0x5555555500008000, 0xffffffeffffdffff, x1, 3*XLEN/8, x2)

inst_20:
// rs1==x28, rs2==x29, rd==x7, rs1_w0_val == 65536, rs2_w1_val == 134217728, rs2_w0_val == -524289
// opcode: pmulu.w.heo ; op1:x28; op2:x29; dest:x7; op1val:0x3fffffff00010000;  op2val:0x8000000fff7ffff
TEST_RR_OP(pmulu.w.heo, x7, x28, x29, 0x0000000000000000, 0x3fffffff00010000, 0x8000000fff7ffff, x1, 4*XLEN/8, x2)

inst_21:
// rs1==x16, rs2==x19, rd==x18, rs1_w0_val == 131072, rs2_w1_val == 67108864, rs1_w1_val == -65
// opcode: pmulu.w.heo ; op1:x16; op2:x19; dest:x18; op1val:0xffffffbf00020000;  op2val:0x4000000fffdffff
TEST_RR_OP(pmulu.w.heo, x18, x16, x19, 0x0000000000000000, 0xffffffbf00020000, 0x4000000fffdffff, x1, 5*XLEN/8, x2)

inst_22:
// rs1==x10, rs2==x9, rd==x16, rs1_w0_val == 262144, rs2_w0_val == 4096
// opcode: pmulu.w.heo ; op1:x10; op2:x9; dest:x16; op1val:0xfffffdff00040000;  op2val:0xffefffff00001000
TEST_RR_OP(pmulu.w.heo, x16, x10, x9, 0x0000000000000000, 0xfffffdff00040000, 0xffefffff00001000, x1, 6*XLEN/8, x2)

inst_23:
// rs1==x20, rs2==x21, rd==x9, rs1_w0_val == 524288, 
// opcode: pmulu.w.heo ; op1:x20; op2:x21; dest:x9; op1val:0xfffffff600080000;  op2val:0x00000900000007
TEST_RR_OP(pmulu.w.heo, x9, x20, x21, 0x0000000000000000, 0xfffffff600080000, 0x00000900000007, x1, 7*XLEN/8, x2)

inst_24:
// rs1==x31, rs2==x17, rd==x20, rs1_w0_val == 1048576, rs2_w0_val == 32, rs2_w1_val == -536870913
// opcode: pmulu.w.heo ; op1:x31; op2:x17; dest:x20; op1val:0x00000300100000;  op2val:0xdfffffff00000020
TEST_RR_OP(pmulu.w.heo, x20, x31, x17, 0x0000000000000000, 0x00000300100000, 0xdfffffff00000020, x1, 8*XLEN/8, x2)

inst_25:
// rs1==x13, rs2==x20, rd==x8, rs1_w0_val == 2097152, rs1_w1_val == -262145
// opcode: pmulu.w.heo ; op1:x13; op2:x20; dest:x8; op1val:0xfffbffff00200000;  op2val:0xffefffff00000020
TEST_RR_OP(pmulu.w.heo, x8, x13, x20, 0x0000000000000000, 0xfffbffff00200000, 0xffefffff00000020, x1, 9*XLEN/8, x2)

inst_26:
// rs1==x15, rs2==x10, rd==x4, rs1_w0_val == 4194304, rs2_w1_val == -1025, rs2_w0_val == 1073741824
// opcode: pmulu.w.heo ; op1:x15; op2:x10; dest:x4; op1val:0x00000400400000;  op2val:0xfffffbff40000000
TEST_RR_OP(pmulu.w.heo, x4, x15, x10, 0x0000000000000000, 0x00000400400000, 0xfffffbff40000000, x1, 10*XLEN/8, x2)

inst_27:
// rs1==x6, rs2==x23, rd==x25, rs1_w0_val == 8388608, rs1_w1_val == -33554433, rs2_w0_val == -5, rs2_w1_val == 8388608
// opcode: pmulu.w.heo ; op1:x6; op2:x23; dest:x25; op1val:0xfdffffff00800000;  op2val:0x800000fffffffb
TEST_RR_OP(pmulu.w.heo, x25, x6, x23, 0x0000000000000000, 0xfdffffff00800000, 0x800000fffffffb, x1, 11*XLEN/8, x2)

inst_28:
// rs1==x26, rs2==x7, rd==x24, rs1_w0_val == 16777216, rs2_w1_val == 256, rs1_w1_val == 1048576
// opcode: pmulu.w.heo ; op1:x26; op2:x7; dest:x24; op1val:0x10000001000000;  op2val:0x000100c0000000
TEST_RR_OP(pmulu.w.heo, x24, x26, x7, 0x0000000000000000, 0x10000001000000, 0x000100c0000000, x1, 12*XLEN/8, x2)

inst_29:
// rs1==x14, rs2==x13, rd==x11, rs1_w0_val == 33554432, rs2_w1_val == -5, rs1_w1_val == -8193
// opcode: pmulu.w.heo ; op1:x14; op2:x13; dest:x11; op1val:0xffffdfff02000000;  op2val:0xfffffffbc0000000
TEST_RR_OP(pmulu.w.heo, x11, x14, x13, 0x0000000000000000, 0xffffdfff02000000, 0xfffffffbc0000000, x1, 13*XLEN/8, x2)

inst_30:
// rs1==x11, rs2==x18, rd==x12, rs1_w0_val == 67108864, rs2_w1_val == 16777216, rs1_w1_val == 16, rs2_w0_val == 1024
// opcode: pmulu.w.heo ; op1:x11; op2:x18; dest:x12; op1val:0x00001004000000;  op2val:0x100000000000400
TEST_RR_OP(pmulu.w.heo, x12, x11, x18, 0x0000000000000000, 0x00001004000000, 0x100000000000400, x1, 14*XLEN/8, x2)

inst_31:
// rs1==x21, rs2==x15, rd==x10, rs1_w0_val == 134217728, rs2_w0_val == 16777216
// opcode: pmulu.w.heo ; op1:x21; op2:x15; dest:x10; op1val:0xfdffffff08000000;  op2val:0xfffffbff01000000
TEST_RR_OP(pmulu.w.heo, x10, x21, x15, 0x0000000000000000, 0xfdffffff08000000, 0xfffffbff01000000, x1, 15*XLEN/8, x2)

inst_32:
// rs1_w0_val == 268435456, rs2_w0_val == 128
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000010000000;  op2val:0x200000000000080
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000010000000, 0x200000000000080, x1, 16*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs1_w0_val == 536870912, rs2_w1_val == -2147483648
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000020000000;  op2val:0x8000000000000006
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000020000000, 0x8000000000000006, x1, 0*XLEN/8, x2)

inst_34:
// rs1_w0_val == 1073741824, rs2_w1_val == -2049
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff40000000;  op2val:0xfffff7fffbffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffff40000000, 0xfffff7fffbffffff, x1, 1*XLEN/8, x2)

inst_35:
// rs1_w0_val == -2, rs1_w1_val == 512
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffffe;  op2val:0xbffffffffbffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000200fffffffe, 0xbffffffffbffffff, x1, 2*XLEN/8, x2)

inst_36:
// rs1_w0_val == -3, rs1_w1_val == 2
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffd;  op2val:0x000006fffeffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000002fffffffd, 0x000006fffeffff, x1, 3*XLEN/8, x2)

inst_37:
// rs1_w0_val == -5, rs1_w1_val == -1048577
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffb;  op2val:0x10000000fffffffa
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffb, 0x10000000fffffffa, x1, 4*XLEN/8, x2)

inst_38:
// rs1_w0_val == -9, rs2_w1_val == 4194304
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff7;  op2val:0x400000fffffffe
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff7, 0x400000fffffffe, x1, 5*XLEN/8, x2)

inst_39:
// rs1_w0_val == -17, rs2_w1_val == -1
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffffef;  op2val:0xfffffffff7ffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffffef, 0xfffffffff7ffffff, x1, 6*XLEN/8, x2)

inst_40:
// rs1_w0_val == -33, rs2_w1_val == -8193, rs1_w1_val == -129
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffdf;  op2val:0xffffdfffffffdfff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffdf, 0xffffdfffffffdfff, x1, 7*XLEN/8, x2)

inst_41:
// rs1_w0_val == -65, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffffbf;  op2val:0xffffffef00001000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000ffffffbf, 0xffffffef00001000, x1, 8*XLEN/8, x2)

inst_42:
// rs1_w0_val == -129, rs1_w1_val == 16777216, rs2_w1_val == 1, rs2_w0_val == 524288
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffff7f;  op2val:0x00000100080000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x1000000ffffff7f, 0x00000100080000, x1, 9*XLEN/8, x2)

inst_43:
// rs1_w0_val == -257, rs2_w1_val == -33554433, rs1_w1_val == 4194304
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffeff;  op2val:0xfdfffffffffffff6
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x400000fffffeff, 0xfdfffffffffffff6, x1, 10*XLEN/8, x2)

inst_44:
// rs1_w0_val == -513, rs2_w1_val == -129, rs2_w0_val == -4097
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffdff;  op2val:0xffffff7fffffefff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffdff, 0xffffff7fffffefff, x1, 11*XLEN/8, x2)

inst_45:
// rs1_w0_val == -1025, rs2_w0_val == -8388609, rs1_w1_val == 524288
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffbff;  op2val:0xffffff7fff7fffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x080000fffffbff, 0xffffff7fff7fffff, x1, 12*XLEN/8, x2)

inst_46:
// rs1_w0_val == -2049, rs1_w1_val == 67108864, rs2_w1_val == -9
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffff7ff;  op2val:0xfffffff700000006
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x4000000fffff7ff, 0xfffffff700000006, x1, 13*XLEN/8, x2)

inst_47:
// rs1_w0_val == -4097, rs2_w0_val == -9
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffefff;  op2val:0xfffffffffffffff7
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffefff, 0xfffffffffffffff7, x1, 14*XLEN/8, x2)

inst_48:
// rs1_w0_val == -8193, rs2_w1_val == -262145
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffdfff;  op2val:0xfffbfffffff7ffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000400ffffdfff, 0xfffbfffffff7ffff, x1, 15*XLEN/8, x2)

inst_49:
// rs1_w0_val == -16385, rs2_w0_val == -1073741825
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffbfff;  op2val:0x000006bfffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffbfff, 0x000006bfffffff, x1, 16*XLEN/8, x2)

inst_50:
// rs1_w0_val == -32769, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffff7fff;  op2val:0x5555555500000003
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004ffff7fff, 0x5555555500000003, x1, 17*XLEN/8, x2)

inst_51:
// rs1_w0_val == -65537, rs2_w0_val == -129
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffeffff;  op2val:0x400000ffffff7f
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000009fffeffff, 0x400000ffffff7f, x1, 18*XLEN/8, x2)

inst_52:
// rs1_w0_val == -131073, rs2_w0_val == -65
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffdffff;  op2val:0x000040ffffffbf
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x4000000fffdffff, 0x000040ffffffbf, x1, 19*XLEN/8, x2)

inst_53:
// rs1_w0_val == -262145, rs1_w1_val == -5, rs2_w0_val == 8388608
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffbffff;  op2val:0x00040000800000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffbffff, 0x00040000800000, x1, 20*XLEN/8, x2)

inst_54:
// rs2_w1_val == -131073, rs1_w1_val == 131072, rs2_w0_val == 256
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000006;  op2val:0xfffdffff00000100
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x02000000000006, 0xfffdffff00000100, x1, 21*XLEN/8, x2)

inst_55:
// rs2_w1_val == -524289, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00080000;  op2val:0xfff7ffff00800000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffb00080000, 0xfff7ffff00800000, x1, 22*XLEN/8, x2)

inst_56:
// rs2_w1_val == -2097153, rs1_w1_val == 65536, rs2_w0_val == -32769
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000400;  op2val:0xffdfffffffff7fff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x01000000000400, 0xffdfffffffff7fff, x1, 23*XLEN/8, x2)

inst_57:
// rs2_w1_val == -4194305, rs1_w1_val == -134217729, rs2_w0_val == 512
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffff6;  op2val:0xffbfffff00000200
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffff6, 0xffbfffff00000200, x1, 24*XLEN/8, x2)

inst_58:
// rs2_w1_val == -8388609, rs1_w1_val == 1
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000110000000;  op2val:0xff7fffffffffff7f
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000110000000, 0xff7fffffffffff7f, x1, 25*XLEN/8, x2)

inst_59:
// rs2_w1_val == -67108865, rs2_w0_val == 0
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x01000000001000;  op2val:0xfbffffff00000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x01000000001000, 0xfbffffff00000000, x1, 26*XLEN/8, x2)

inst_60:
// rs2_w1_val == -134217729, rs2_w0_val == 4194304, rs1_w1_val == -257
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffbf;  op2val:0xf7ffffff00400000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffbf, 0xf7ffffff00400000, x1, 27*XLEN/8, x2)

inst_61:
// rs2_w1_val == -268435457, rs2_w0_val == -33, rs1_w0_val == rs2_w0_val
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffdf;  op2val:0xefffffffffffffdf
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000002ffffffdf, 0xefffffffffffffdf, x1, 28*XLEN/8, x2)

inst_62:
// rs2_w1_val == -1431655766, rs1_w1_val == -131073
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffffa;  op2val:0xaaaaaaaa00000003
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffffa, 0xaaaaaaaa00000003, x1, 29*XLEN/8, x2)

inst_63:
// rs1_w1_val == rs2_w1_val, rs1_w0_val == -16777217, rs2_w0_val == 67108864
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000feffffff;  op2val:0xc000000004000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xc0000000feffffff, 0xc000000004000000, x1, 30*XLEN/8, x2)

inst_64:
// rs1_w0_val == -524289, rs2_w1_val == 1048576
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000004fff7ffff;  op2val:0x10000000002000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000004fff7ffff, 0x10000000002000, x1, 31*XLEN/8, x2)

inst_65:
// rs1_w0_val == -1048577, rs2_w0_val == -268435457
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffefffff;  op2val:0xffffdfffefffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffefffff, 0xffffdfffefffffff, x1, 32*XLEN/8, x2)

inst_66:
// rs1_w0_val == -2097153, rs1_w1_val == 134217728
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffdfffff;  op2val:0x2000000ffffefff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x8000000ffdfffff, 0x2000000ffffefff, x1, 33*XLEN/8, x2)

inst_67:
// rs1_w0_val == -4194305, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffbfffff;  op2val:0x00010000001000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000ffbfffff, 0x00010000001000, x1, 34*XLEN/8, x2)

inst_68:
// rs1_w0_val == -8388609, rs1_w1_val == 8
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000008ff7fffff;  op2val:0xfffffffbffffefff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000008ff7fffff, 0xfffffffbffffefff, x1, 35*XLEN/8, x2)

inst_69:
// rs1_w0_val == -33554433, rs2_w0_val == 16, rs1_w1_val == -32769
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffdffffff;  op2val:0xfffbffff00000010
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffff7ffffdffffff, 0xfffbffff00000010, x1, 36*XLEN/8, x2)

inst_70:
// rs1_w0_val == -67108865, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000007fbffffff;  op2val:0xfffffff9bfffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000007fbffffff, 0xfffffff9bfffffff, x1, 37*XLEN/8, x2)

inst_71:
// rs1_w0_val == -134217729, rs2_w1_val == 16
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffff7ffffff;  op2val:0x000010fffffffa
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfdfffffff7ffffff, 0x000010fffffffa, x1, 38*XLEN/8, x2)

inst_72:
// rs1_w0_val == -268435457, rs1_w1_val == -3
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0xffffbfff00000080
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffdefffffff, 0xffffbfff00000080, x1, 39*XLEN/8, x2)

inst_73:
// rs1_w0_val == -536870913, rs1_w1_val == 256, rs2_w0_val == 2
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000100dfffffff;  op2val:0xfffffff800000002
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000100dfffffff, 0xfffffff800000002, x1, 40*XLEN/8, x2)

inst_74:
// rs1_w0_val == -1073741825, rs2_w0_val == -1
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000003bfffffff;  op2val:0x2000000ffffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000003bfffffff, 0x2000000ffffffff, x1, 41*XLEN/8, x2)

inst_75:
// rs1_w0_val == 1431655765, rs2_w0_val == -16777217, rs2_w1_val == -2
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff55555555;  op2val:0xfffffffefeffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfdffffff55555555, 0xfffffffefeffffff, x1, 42*XLEN/8, x2)

inst_76:
// rs1_w0_val == -1431655766, rs1_w1_val == 32
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000020aaaaaaaa;  op2val:0xfffffff940000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000020aaaaaaaa, 0xfffffff940000000, x1, 43*XLEN/8, x2)

inst_77:
// rs1_w1_val == -2147483648, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x10000000000100
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x10000000000100, x1, 44*XLEN/8, x2)

inst_78:
// rs1_w1_val == 2147483647, rs2_w0_val == 1048576
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffefffff;  op2val:0x00000900100000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x7fffffffffefffff, 0x00000900100000, x1, 45*XLEN/8, x2)

inst_79:
// rs1_w1_val == 128, rs2_w1_val == -32769
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000002;  op2val:0xffff7fff7fffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00008000000002, 0xffff7fff7fffffff, x1, 46*XLEN/8, x2)

inst_80:
// rs1_w1_val == 2048, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00080020000000;  op2val:0x000010efffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00080020000000, 0x000010efffffff, x1, 47*XLEN/8, x2)

inst_81:
// rs1_w1_val == 4096, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x001000fdffffff;  op2val:0x00000200000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x001000fdffffff, 0x00000200000000, x1, 48*XLEN/8, x2)

inst_82:
// rs1_w1_val == 8192, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x002000fbffffff;  op2val:0xfffffff904000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x002000fbffffff, 0xfffffff904000000, x1, 49*XLEN/8, x2)

inst_83:
// rs1_w1_val == 262144, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000040;  op2val:0x100000004000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x04000000000040, 0x100000004000000, x1, 50*XLEN/8, x2)

inst_84:
// rs1_w1_val == 2097152, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffff6;  op2val:0xffffffbffffeffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x200000fffffff6, 0xffffffbffffeffff, x1, 51*XLEN/8, x2)

inst_85:
// rs1_w1_val == -67108865, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffc;  op2val:0xfffbffffffffffbf
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffc, 0xfffbffffffffffbf, x1, 52*XLEN/8, x2)

inst_86:
// rs1_w1_val == -268435457, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000002;  op2val:0x00000300000003
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xefffffff00000002, 0x00000300000003, x1, 53*XLEN/8, x2)

inst_87:
// rs2_w1_val == -65537, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffc0000000;  op2val:0xfffefffffffffffb
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffeffc0000000, 0xfffefffffffffffb, x1, 54*XLEN/8, x2)

inst_88:
// rs1_w1_val == -1073741825, rs2_w0_val == 131072
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffdffffff;  op2val:0xfbffffff00020000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xbffffffffdffffff, 0xfbffffff00020000, x1, 55*XLEN/8, x2)

inst_89:
// rs2_w0_val == 1, rs1_w1_val == -4097
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffff7fff;  op2val:0xffefffff00000001
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffefffffff7fff, 0xffefffff00000001, x1, 56*XLEN/8, x2)

inst_90:
// rs2_w0_val == 8, rs1_w1_val == -8388609
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00400000;  op2val:0xdfffffff00000008
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xff7fffff00400000, 0xdfffffff00000008, x1, 57*XLEN/8, x2)

inst_91:
// rs2_w0_val == 64, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000007;  op2val:0xaaaaaaaa00000040
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000400000007, 0xaaaaaaaa00000040, x1, 58*XLEN/8, x2)

inst_92:
// rs2_w0_val == 16384, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x0000043fffffff;  op2val:0x400000000004000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x0000043fffffff, 0x400000000004000, x1, 59*XLEN/8, x2)

inst_93:
// rs2_w0_val == 32768, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffc;  op2val:0x10000000008000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800fffffffc, 0x10000000008000, x1, 60*XLEN/8, x2)

inst_94:
// rs2_w0_val == 2097152, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffefffff;  op2val:0xfffff7ff00200000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000040ffefffff, 0xfffff7ff00200000, x1, 61*XLEN/8, x2)

inst_95:
// rs2_w0_val == 33554432, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000008;  op2val:0x04000002000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000000000008, 0x04000002000000, x1, 62*XLEN/8, x2)

inst_96:
// rs2_w0_val == 134217728, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006feffffff;  op2val:0x10000008000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006feffffff, 0x10000008000000, x1, 63*XLEN/8, x2)

inst_97:
// rs2_w0_val == 268435456, rs1_w1_val == 8388608
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000006;  op2val:0xffffffbf10000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000000006, 0xffffffbf10000000, x1, 64*XLEN/8, x2)

inst_98:
// rs2_w0_val == 536870912, rs2_w1_val == 16384
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000208000000;  op2val:0x00400020000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000208000000, 0x00400020000000, x1, 65*XLEN/8, x2)

inst_99:
// rs2_w0_val == -3, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffeff;  op2val:0x000007fffffffd
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffeff, 0x000007fffffffd, x1, 66*XLEN/8, x2)

inst_100:
// rs2_w0_val == -17, rs2_w1_val == 65536
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xc00000003fffffff;  op2val:0x010000ffffffef
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xc00000003fffffff, 0x010000ffffffef, x1, 67*XLEN/8, x2)

inst_101:
// rs2_w0_val == -257, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x100000000400000;  op2val:0xfffffefffffffeff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x100000000400000, 0xfffffefffffffeff, x1, 68*XLEN/8, x2)

inst_102:
// rs2_w0_val == -513, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffbfff;  op2val:0x800000fffffdff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffbfff, 0x800000fffffdff, x1, 69*XLEN/8, x2)

inst_103:
// rs2_w0_val == -1025, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000005aaaaaaaa;  op2val:0xdffffffffffffbff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000005aaaaaaaa, 0xdffffffffffffbff, x1, 70*XLEN/8, x2)

inst_104:
// rs2_w0_val == -16385, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000006;  op2val:0x000006ffffbfff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x80000000000006, 0x000006ffffbfff, x1, 71*XLEN/8, x2)

inst_105:
// rs2_w0_val == -262145, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff40000000;  op2val:0xfffffffcfffbffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfbffffff40000000, 0xfffffffcfffbffff, x1, 72*XLEN/8, x2)

inst_106:
// rs2_w0_val == -1048577, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffeffff;  op2val:0x000002ffefffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x004000fffeffff, 0x000002ffefffff, x1, 73*XLEN/8, x2)

inst_107:
// rs2_w0_val == -2097153, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000000;  op2val:0xfffffffeffdfffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000300000000, 0xfffffffeffdfffff, x1, 74*XLEN/8, x2)

inst_108:
// rs2_w0_val == -4194305, rs2_w1_val == -33
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000100;  op2val:0xffffffdfffbfffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000100, 0xffffffdfffbfffff, x1, 75*XLEN/8, x2)

inst_109:
// rs2_w0_val == -33554433, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000005;  op2val:0xbffffffffdffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000500000005, 0xbffffffffdffffff, x1, 76*XLEN/8, x2)

inst_110:
// rs2_w0_val == -536870913, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00020000;  op2val:0x040000dfffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00020000, 0x040000dfffffff, x1, 77*XLEN/8, x2)

inst_111:
// rs2_w0_val == 1431655765, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffdffff;  op2val:0x400000055555555
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffeffffffdffff, 0x400000055555555, x1, 78*XLEN/8, x2)

inst_112:
// rs2_w1_val == 0, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000006fdffffff;  op2val:0x00000000000002
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000006fdffffff, 0x00000000000002, x1, 79*XLEN/8, x2)

inst_113:
// rs2_w1_val == 2147483647, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffffdfff;  op2val:0x7fffffffffffdfff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x3fffffffffffdfff, 0x7fffffffffffdfff, x1, 80*XLEN/8, x2)

inst_114:
// rs2_w1_val == 32, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00010000020000;  op2val:0x00002001000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00010000020000, 0x00002001000000, x1, 81*XLEN/8, x2)

inst_115:
// rs2_w1_val == 128, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffdffffff;  op2val:0x000080fffffff7
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffbfffffdffffff, 0x000080fffffff7, x1, 82*XLEN/8, x2)

inst_116:
// rs2_w1_val == 512, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffa;  op2val:0x00020000008000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffa, 0x00020000008000, x1, 83*XLEN/8, x2)

inst_117:
// rs2_w1_val == 2048, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00020000;  op2val:0x00080040000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xefffffff00020000, 0x00080040000000, x1, 84*XLEN/8, x2)

inst_118:
// rs2_w1_val == 4096, rs1_w1_val == -65537
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00002000;  op2val:0x00100000100000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffeffff00002000, 0x00100000100000, x1, 85*XLEN/8, x2)

inst_119:
// rs2_w1_val == 8192, rs1_w1_val == 536870912
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000200000;  op2val:0x00200000000100
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000000200000, 0x00200000000100, x1, 86*XLEN/8, x2)

inst_120:
// rs2_w1_val == 32768, rs1_w1_val == -4194305
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffdf;  op2val:0x00800000000010
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffdf, 0x00800000000010, x1, 87*XLEN/8, x2)

inst_121:
// rs1_w1_val == 33554432, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffeffff;  op2val:0x8000000000000007
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x2000000fffeffff, 0x8000000000000007, x1, 88*XLEN/8, x2)

inst_122:
// rs2_w1_val == 131072, rs1_w1_val == -16777217
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000080;  op2val:0x020000fffff7ff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000080, 0x020000fffff7ff, x1, 89*XLEN/8, x2)

inst_123:
// rs1_w1_val == 268435456, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffb;  op2val:0x400000efffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffb, 0x400000efffffff, x1, 90*XLEN/8, x2)

inst_124:
// rs2_w1_val == 2097152, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffbfffff;  op2val:0x20000000000010
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0x20000000000010, x1, 91*XLEN/8, x2)

inst_125:
// rs1_w1_val == -2, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff9;  op2val:0xfffffbfffffffff9
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff9, 0xfffffbfffffffff9, x1, 92*XLEN/8, x2)

inst_126:
// rs1_w1_val == -17, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffff7ff;  op2val:0x1000000fffbffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffeffffff7ff, 0x1000000fffbffff, x1, 93*XLEN/8, x2)

inst_127:
// rs1_w1_val == -33, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00010000;  op2val:0xffeffffffffffff7
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffdf00010000, 0xffeffffffffffff7, x1, 94*XLEN/8, x2)

inst_128:
// rs2_w1_val == 536870912, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef02000000;  op2val:0x2000000020000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffffef02000000, 0x2000000020000000, x1, 95*XLEN/8, x2)

inst_129:
// rs2_w1_val == -3, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000800;  op2val:0xfffffffd00000020
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffff700000800, 0xfffffffd00000020, x1, 96*XLEN/8, x2)

inst_130:
// rs1_w1_val == -1025, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00002000;  op2val:0x000008fff7ffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffbff00002000, 0x000008fff7ffff, x1, 97*XLEN/8, x2)

inst_131:
// rs1_w1_val == -2049, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000040;  op2val:0x80000000fffffeff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000040, 0x80000000fffffeff, x1, 98*XLEN/8, x2)

inst_132:
// rs1_w1_val == -16385, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000080;  op2val:0xff7fffff00020000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000080, 0xff7fffff00020000, x1, 99*XLEN/8, x2)

inst_133:
// rs2_w1_val == -513, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffff7ffffff;  op2val:0xfffffdfffdffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffeffffff7ffffff, 0xfffffdfffdffffff, x1, 100*XLEN/8, x2)

inst_134:
// rs1_w1_val == -524289, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffffe;  op2val:0xdfffffff00200000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffe, 0xdfffffff00200000, x1, 101*XLEN/8, x2)

inst_135:
// rs2_w1_val == -4097, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000102000000;  op2val:0xffffefffffffffdf
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000102000000, 0xffffefffffffffdf, x1, 102*XLEN/8, x2)

inst_136:
// rs1_w1_val == -2097153, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffef;  op2val:0xfffffff8fffffffa
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffef, 0xfffffff8fffffffa, x1, 103*XLEN/8, x2)

inst_137:
// rs1_w0_val == 1, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -1073741825, rs2_w0_val == 4
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000001;  op2val:0xbfffffff00000004
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000001, 0xbfffffff00000004, x1, 104*XLEN/8, x2)

inst_138:
// rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 268435456, rs1_w1_val == 16384
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x0040007fffffff;  op2val:0x10000000c0000000
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x0040007fffffff, 0x10000000c0000000, x1, 105*XLEN/8, x2)

inst_139:
// rs1_w0_val == 256, rs1_w1_val == -536870913, rs2_w0_val == -2049
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000100;  op2val:0x000006fffff7ff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000100, 0x000006fffff7ff, x1, 106*XLEN/8, x2)

inst_140:
// rs1_w0_val == 16384, 
// opcode: pmulu.w.heo ; op1:x30; op2:x29; dest:x31; op1val:0x00000500004000;  op2val:0x20000003fffffff
TEST_RR_OP(pmulu.w.heo, x31, x30, x29, 0x0000000000000000, 0x00000500004000, 0x20000003fffffff, x1, 107*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 108*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
