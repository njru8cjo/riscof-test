
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Dec 31 07:52:23 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p17.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulhsu.h.be instruction of the RISC-V RV64PZicsr extension for the pmulhsu.h.be covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulhsu.h.be)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x27, rs2==x30, rd==x30, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -32768, rs1_h0_val != rs2_h0_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -129, rs1_h3_val != rs2_h3_val, rs2_h2_val == 1
// opcode: pmulhsu.h.be ; op1:x27; op2:x30; dest:x30; op1val:0xfff6fffa80008000;  op2val:0xff7f000100033fff
TEST_RR_OP(pmulhsu.h.be, x30, x27, x30, 0x0000000000000000, 0xfff6fffa80008000, 0xff7f000100033fff, x1, 0*XLEN/8, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x31, rs1_h0_val == -1, rs2_h3_val == 32767, rs2_h0_val == 64, rs1_h3_val == 32767, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == rs2_h3_val, rs2_h2_val == 0, rs2_h1_val == 128
// opcode: pmulhsu.h.be ; op1:x21; op2:x21; dest:x31; op1val:0x7fff0006fff9ffff;  op2val:0x7fff000000800040
TEST_RR_OP(pmulhsu.h.be, x31, x21, x21, 0x0000000000000000, 0x7fff0006fff9ffff, 0x7fff000000800040, x1, 1*XLEN/8, x3)

inst_2:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h0_val == 0, rs2_h0_val == 8192, rs1_h2_val == -2049, rs1_h3_val == -1025, rs2_h2_val == 16384, rs2_h3_val == -8193, rs1_h1_val == -65
// opcode: pmulhsu.h.be ; op1:x7; op2:x7; dest:x7; op1val:0xfbfff7ffffbf0000;  op2val:0xdfff400000052000
TEST_RR_OP(pmulhsu.h.be, x7, x7, x7, 0x0000000000000000, 0xfbfff7ffffbf0000, 0xdfff400000052000, x1, 2*XLEN/8, x3)

inst_3:
// rs1 == rd != rs2, rs1==x0, rs2==x2, rd==x0, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -65, rs2_h3_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -33, rs1_h1_val == 128, rs2_h0_val == 32767, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pmulhsu.h.be ; op1:x0; op2:x2; dest:x0; op1val:0xfffaffbf00800001;  op2val:0x040005ffdf7fff
TEST_RR_OP(pmulhsu.h.be, x0, x0, x2, 0x0000000000000000, 0xfffaffbf00800001, 0x040005ffdf7fff, x1, 3*XLEN/8, x3)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x23, rd==x26, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -2049, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -65, rs2_h2_val == -2049, rs1_h1_val == -9
// opcode: pmulhsu.h.be ; op1:x12; op2:x23; dest:x26; op1val:0x3ffffff8fff77fff;  op2val:0xffbff7ff0080f7ff
TEST_RR_OP(pmulhsu.h.be, x26, x12, x23, 0x0000000000000000, 0x3ffffff8fff77fff, 0xffbff7ff0080f7ff, x1, 4*XLEN/8, x3)

inst_5:
// rs1==x8, rs2==x25, rd==x5, rs1_h0_val == 2, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -4097, rs2_h3_val == -17, rs1_h3_val == 8, rs2_h2_val == -1025, rs1_h2_val == 4096
// opcode: pmulhsu.h.be ; op1:x8; op2:x25; dest:x5; op1val:0x081000ffbf0002;  op2val:0xffeffbfffff8efff
TEST_RR_OP(pmulhsu.h.be, x5, x8, x25, 0x0000000000000000, 0x081000ffbf0002, 0xffeffbfffff8efff, x1, 5*XLEN/8, x3)

inst_6:
// rs1==x23, rs2==x14, rd==x19, rs1_h0_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -257, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 4, rs1_h1_val == 1024, rs1_h3_val == 2048, rs2_h1_val == 64
// opcode: pmulhsu.h.be ; op1:x23; op2:x14; dest:x19; op1val:0x800000404000004;  op2val:0x0900090040feff
TEST_RR_OP(pmulhsu.h.be, x19, x23, x14, 0x0000000000000000, 0x800000404000004, 0x0900090040feff, x1, 6*XLEN/8, x3)

inst_7:
// rs1==x11, rs2==x0, rd==x29, rs1_h0_val == 8, rs1_h1_val == -2049, rs2_h1_val == -8193
// opcode: pmulhsu.h.be ; op1:x11; op2:x0; dest:x29; op1val:0x05fff9f7ff0008;  op2val:0xff7f0009dffffffc
TEST_RR_OP(pmulhsu.h.be, x29, x11, x0, 0x0000000000000000, 0x05fff9f7ff0008, 0xff7f0009dffffffc, x1, 7*XLEN/8, x3)

inst_8:
// rs1==x10, rs2==x6, rd==x11, rs1_h0_val == 16, rs1_h3_val == -9, rs2_h2_val == 128, rs2_h0_val == -129, rs2_h1_val == -257, rs2_h3_val == -2, rs1_h2_val == rs2_h2_val, rs1_h2_val == 128
// opcode: pmulhsu.h.be ; op1:x10; op2:x6; dest:x11; op1val:0xfff7008000800010;  op2val:0xfffe0080feffff7f
TEST_RR_OP(pmulhsu.h.be, x11, x10, x6, 0x0000000000000000, 0xfff7008000800010, 0xfffe0080feffff7f, x1, 8*XLEN/8, x3)

inst_9:
// rs1==x25, rs2==x15, rd==x18, rs1_h0_val == 32, rs1_h2_val == -32768, rs2_h1_val == 21845, rs1_h1_val == -129, rs2_h3_val == -21846
// opcode: pmulhsu.h.be ; op1:x25; op2:x15; dest:x18; op1val:0xfff88000ff7f0020;  op2val:0xaaaafff855550007
TEST_RR_OP(pmulhsu.h.be, x18, x25, x15, 0x0000000000000000, 0xfff88000ff7f0020, 0xaaaafff855550007, x1, 9*XLEN/8, x3)

inst_10:
// rs1==x14, rs2==x29, rd==x17, rs1_h0_val == 64, rs1_h3_val == -513, rs2_h1_val == 2, rs2_h3_val == 512, rs2_h2_val == -32768
// opcode: pmulhsu.h.be ; op1:x14; op2:x29; dest:x17; op1val:0xfdff0007fff80040;  op2val:0x20080000002fffc
TEST_RR_OP(pmulhsu.h.be, x17, x14, x29, 0x0000000000000000, 0xfdff0007fff80040, 0x20080000002fffc, x1, 10*XLEN/8, x3)

inst_11:
// rs1==x18, rs2==x26, rd==x20, rs1_h0_val == 128, rs1_h3_val == -5, rs1_h1_val == 32767, rs2_h1_val == -17, rs2_h3_val == 4096, rs2_h0_val == -32768
// opcode: pmulhsu.h.be ; op1:x18; op2:x26; dest:x20; op1val:0xfffb3fff7fff0080;  op2val:0x1000fff9ffef8000
TEST_RR_OP(pmulhsu.h.be, x20, x18, x26, 0x0000000000000000, 0xfffb3fff7fff0080, 0x1000fff9ffef8000, x1, 11*XLEN/8, x3)

inst_12:
// rs1==x22, rs2==x12, rd==x16, rs1_h0_val == 256, rs1_h3_val == 16, rs2_h0_val == 2, rs1_h1_val == 64, rs1_h2_val == -17
// opcode: pmulhsu.h.be ; op1:x22; op2:x12; dest:x16; op1val:0x10ffef00400100;  op2val:0x3ffffbff55550002
TEST_RR_OP(pmulhsu.h.be, x16, x22, x12, 0x0000000000000000, 0x10ffef00400100, 0x3ffffbff55550002, x1, 12*XLEN/8, x3)

inst_13:
// rs1==x15, rs2==x27, rd==x13, rs1_h0_val == 512, rs2_h3_val == 64, rs1_h2_val == -16385, rs1_h1_val == -5, rs2_h1_val == 4, rs2_h0_val == 128, rs2_h2_val == 8
// opcode: pmulhsu.h.be ; op1:x15; op2:x27; dest:x13; op1val:0xfdffbffffffb0200;  op2val:0x40000800040080
TEST_RR_OP(pmulhsu.h.be, x13, x15, x27, 0x0000000000000000, 0xfdffbffffffb0200, 0x40000800040080, x1, 13*XLEN/8, x3)

inst_14:
// rs1==x17, rs2==x31, rd==x25, rs1_h0_val == 1024, rs2_h2_val == 512, rs1_h1_val == 512, rs1_h3_val == 2, rs1_h2_val == 512, rs2_h3_val == -32768
// opcode: pmulhsu.h.be ; op1:x17; op2:x31; dest:x25; op1val:0x02020002000400;  op2val:0x800002000080fffc
TEST_RR_OP(pmulhsu.h.be, x25, x17, x31, 0x0000000000000000, 0x02020002000400, 0x800002000080fffc, x1, 14*XLEN/8, x8)

inst_15:
// rs1==x3, rs2==x20, rd==x28, rs1_h0_val == 2048, rs2_h3_val == -33, rs1_h2_val == -513, rs2_h2_val == -3, rs2_h1_val == -129
// opcode: pmulhsu.h.be ; op1:x3; op2:x20; dest:x28; op1val:0x7ffffdff00030800;  op2val:0xffdffffdff7ffff9
TEST_RR_OP(pmulhsu.h.be, x28, x3, x20, 0x0000000000000000, 0x7ffffdff00030800, 0xffdffffdff7ffff9, x1, 15*XLEN/8, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:
// rs1==x13, rs2==x16, rd==x10, rs1_h0_val == 4096, rs1_h1_val == 4096, rs2_h2_val == 1024, rs2_h1_val == 16384, rs1_h3_val == -2
// opcode: pmulhsu.h.be ; op1:x13; op2:x16; dest:x10; op1val:0xfffec00010001000;  op2val:0xffef04004000efff
TEST_RR_OP(pmulhsu.h.be, x10, x13, x16, 0x0000000000000000, 0xfffec00010001000, 0xffef04004000efff, x7, 0*XLEN/8, x8)

inst_17:
// rs1==x6, rs2==x9, rd==x12, rs1_h0_val == 8192, rs2_h3_val == 256, rs1_h1_val == -1025, rs2_h1_val == -4097, rs1_h2_val == -4097
// opcode: pmulhsu.h.be ; op1:x6; op2:x9; dest:x12; op1val:0x7fffeffffbff2000;  op2val:0x1000003efff7fff
TEST_RR_OP(pmulhsu.h.be, x12, x6, x9, 0x0000000000000000, 0x7fffeffffbff2000, 0x1000003efff7fff, x7, 1*XLEN/8, x8)

inst_18:
// rs1==x26, rs2==x22, rd==x27, rs1_h0_val == 16384, rs1_h3_val == -32768, rs1_h2_val == 256, rs2_h3_val == -16385
// opcode: pmulhsu.h.be ; op1:x26; op2:x22; dest:x27; op1val:0x80000100fff94000;  op2val:0xbfff000700030006
TEST_RR_OP(pmulhsu.h.be, x27, x26, x22, 0x0000000000000000, 0x80000100fff94000, 0xbfff000700030006, x7, 2*XLEN/8, x8)

inst_19:
// rs1==x2, rs2==x5, rd==x21, rs1_h0_val == -2, rs2_h1_val == -9, rs1_h2_val == 21845, rs2_h2_val == -21846, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: pmulhsu.h.be ; op1:x2; op2:x5; dest:x21; op1val:0x0955553ffffffe;  op2val:0x1000aaaafff7f7ff
TEST_RR_OP(pmulhsu.h.be, x21, x2, x5, 0x0000000000000000, 0x0955553ffffffe, 0x1000aaaafff7f7ff, x7, 3*XLEN/8, x8)

inst_20:
// rs1==x19, rs2==x4, rd==x6, rs1_h0_val == -3, rs1_h1_val == 4, rs2_h2_val == -4097, rs1_h2_val == 1024, rs1_h3_val == 1024
// opcode: pmulhsu.h.be ; op1:x19; op2:x4; dest:x6; op1val:0x40004000004fffd;  op2val:0xfffaefffefff0006
TEST_RR_OP(pmulhsu.h.be, x6, x19, x4, 0x0000000000000000, 0x40004000004fffd, 0xfffaefffefff0006, x7, 4*XLEN/8, x8)

inst_21:
// rs1==x20, rs2==x24, rd==x14, rs1_h0_val == -5, rs2_h0_val == -8193, rs1_h1_val == 16384, rs2_h3_val == 128
// opcode: pmulhsu.h.be ; op1:x20; op2:x24; dest:x14; op1val:0x06fff94000fffb;  op2val:0x80fffadfffdfff
TEST_RR_OP(pmulhsu.h.be, x14, x20, x24, 0x0000000000000000, 0x06fff94000fffb, 0x80fffadfffdfff, x7, 5*XLEN/8, x8)

inst_22:
// rs1==x16, rs2==x17, rd==x15, rs1_h0_val == -9, rs2_h0_val == 8, rs2_h3_val == -4097, rs2_h1_val == -1, rs1_h2_val == 8
// opcode: pmulhsu.h.be ; op1:x16; op2:x17; dest:x15; op1val:0xfff80008fff9fff7;  op2val:0xeffff7ffffff0008
TEST_RR_OP(pmulhsu.h.be, x15, x16, x17, 0x0000000000000000, 0xfff80008fff9fff7, 0xeffff7ffffff0008, x7, 6*XLEN/8, x8)

inst_23:
// rs1==x4, rs2==x18, rd==x23, rs1_h0_val == -17, rs2_h2_val == 2048, rs1_h3_val == -257
// opcode: pmulhsu.h.be ; op1:x4; op2:x18; dest:x23; op1val:0xfefffff8fffaffef;  op2val:0xfffc080000400007
TEST_RR_OP(pmulhsu.h.be, x23, x4, x18, 0x0000000000000000, 0xfefffff8fffaffef, 0xfffc080000400007, x7, 7*XLEN/8, x8)

inst_24:
// rs1==x28, rs2==x13, rd==x24, rs1_h0_val == -33, rs1_h1_val == rs2_h1_val, rs2_h0_val == 1024, rs2_h3_val == 21845
// opcode: pmulhsu.h.be ; op1:x28; op2:x13; dest:x24; op1val:0xc000fff6fffcffdf;  op2val:0x55550007fffc0400
TEST_RR_OP(pmulhsu.h.be, x24, x28, x13, 0x0000000000000000, 0xc000fff6fffcffdf, 0x55550007fffc0400, x7, 8*XLEN/8, x6)

inst_25:
// rs1==x24, rs2==x8, rd==x9, rs1_h0_val == -65, rs1_h3_val == -33, rs2_h3_val == 16, rs2_h1_val == -21846
// opcode: pmulhsu.h.be ; op1:x24; op2:x8; dest:x9; op1val:0xffdfffef0080ffbf;  op2val:0x10fff8aaaa3fff
TEST_RR_OP(pmulhsu.h.be, x9, x24, x8, 0x0000000000000000, 0xffdfffef0080ffbf, 0x10fff8aaaa3fff, x7, 9*XLEN/8, x6)

inst_26:
// rs1==x30, rs2==x10, rd==x8, rs1_h0_val == -129, rs2_h1_val == 4096, rs1_h3_val == -16385, rs2_h3_val == -257, rs1_h2_val == 16384, rs2_h2_val == 2
// opcode: pmulhsu.h.be ; op1:x30; op2:x10; dest:x8; op1val:0xbfff4000ffbfff7f;  op2val:0xfeff000210000009
TEST_RR_OP(pmulhsu.h.be, x8, x30, x10, 0x0000000000000000, 0xbfff4000ffbfff7f, 0xfeff000210000009, x7, 10*XLEN/8, x6)

inst_27:
// rs1==x5, rs2==x3, rd==x1, rs1_h0_val == -257, rs1_h2_val == 32, rs2_h3_val == -9, rs1_h1_val == 32, rs1_h3_val == -129
// opcode: pmulhsu.h.be ; op1:x5; op2:x3; dest:x1; op1val:0xff7f00200020feff;  op2val:0xfff7000700057fff
TEST_RR_OP(pmulhsu.h.be, x1, x5, x3, 0x0000000000000000, 0xff7f00200020feff, 0xfff7000700057fff, x7, 11*XLEN/8, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_28:
// rs1==x29, rs2==x1, rd==x3, rs1_h0_val == -513, rs2_h3_val == 2048
// opcode: pmulhsu.h.be ; op1:x29; op2:x1; dest:x3; op1val:0xff7f4000fffafdff;  op2val:0x800aaaa1000f7ff
TEST_RR_OP(pmulhsu.h.be, x3, x29, x1, 0x0000000000000000, 0xff7f4000fffafdff, 0x800aaaa1000f7ff, x5, 0*XLEN/8, x6)

inst_29:
// rs1==x9, rs2==x11, rd==x22, rs1_h0_val == -1025, rs2_h1_val == 8
// opcode: pmulhsu.h.be ; op1:x9; op2:x11; dest:x22; op1val:0xfff8fffc0009fbff;  op2val:0xfff7000100080400
TEST_RR_OP(pmulhsu.h.be, x22, x9, x11, 0x0000000000000000, 0xfff8fffc0009fbff, 0xfff7000100080400, x5, 1*XLEN/8, x6)

inst_30:
// rs1==x1, rs2==x28, rd==x4, rs1_h0_val == -2049, rs1_h2_val == 1
// opcode: pmulhsu.h.be ; op1:x1; op2:x28; dest:x4; op1val:0xfffc00018000f7ff;  op2val:0xc000fffafff70005
TEST_RR_OP(pmulhsu.h.be, x4, x1, x28, 0x0000000000000000, 0xfffc00018000f7ff, 0xc000fffafff70005, x5, 2*XLEN/8, x6)

inst_31:
// rs1==x31, rs2==x19, rd==x2, rs1_h0_val == -4097, rs2_h1_val == -32768, rs1_h1_val == 21845
// opcode: pmulhsu.h.be ; op1:x31; op2:x19; dest:x2; op1val:0xbfff00055555efff;  op2val:0x40fff88000fffa
TEST_RR_OP(pmulhsu.h.be, x2, x31, x19, 0x0000000000000000, 0xbfff00055555efff, 0x40fff88000fffa, x5, 3*XLEN/8, x6)

inst_32:
// rs1_h0_val == -8193, rs1_h1_val == -513, rs2_h2_val == 21845, rs2_h0_val == 4, rs1_h3_val == 21845
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff9fdffdfff;  op2val:0x065555efff0004
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x5555fff9fdffdfff, 0x065555efff0004, x5, 4*XLEN/8, x6)

inst_33:
// rs1_h0_val == -16385, rs2_h1_val == 32767, rs1_h2_val == 8192, rs1_h3_val == 64
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x4020003fffbfff;  op2val:0x0702007fff0005
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x4020003fffbfff, 0x0702007fff0005, x5, 5*XLEN/8, x6)

inst_34:
// rs1_h0_val == 21845, rs2_h0_val == -513
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xc00000063fff5555;  op2val:0xfff9fbff0040fdff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xc00000063fff5555, 0xfff9fbff0040fdff, x5, 6*XLEN/8, x6)

inst_35:
// rs1_h0_val == -21846, rs1_h1_val == -17, rs1_h3_val == -1
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffefaaaa;  op2val:0xffdf00080004fff6
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffefaaaa, 0xffdf00080004fff6, x5, 7*XLEN/8, x6)

inst_36:
// rs2_h3_val == 2, rs1_h1_val == -16385
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff80003bfffdfff;  op2val:0x020000feff0002
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff80003bfffdfff, 0x020000feff0002, x5, 8*XLEN/8, x6)

inst_37:
// rs2_h3_val == 8, rs2_h0_val == 16384, rs1_h3_val == 4, rs1_h1_val == -4097, rs2_h1_val == 32
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x04f7ffeffffff6;  op2val:0x08000100204000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x04f7ffeffffff6, 0x08000100204000, x5, 9*XLEN/8, x6)

inst_38:
// rs2_h3_val == 32, rs1_h1_val == 256
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000401000006;  op2val:0x20008000050004
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xff7f000401000006, 0x20008000050004, x5, 10*XLEN/8, x6)

inst_39:
// rs2_h3_val == 1024, rs2_h1_val == -513, rs1_h3_val == -17, rs2_h0_val == 256
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffefbffffffcbfff;  op2val:0x4003ffffdff0100
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffefbffffffcbfff, 0x4003ffffdff0100, x5, 11*XLEN/8, x6)

inst_40:
// rs2_h3_val == 8192, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7fffff70000;  op2val:0x2000000000400006
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff9f7fffff70000, 0x2000000000400006, x5, 12*XLEN/8, x6)

inst_41:
// rs2_h3_val == 16384, rs1_h1_val == -8193
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x024000dffffff9;  op2val:0x4000080000094000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x024000dffffff9, 0x4000080000094000, x5, 13*XLEN/8, x6)

inst_42:
// rs2_h3_val == -3, rs2_h2_val == -33, rs2_h1_val == 0
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0009fbff0002;  op2val:0xfffdffdf00003fff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff0009fbff0002, 0xfffdffdf00003fff, x5, 14*XLEN/8, x6)

inst_43:
// rs2_h3_val == -5, rs2_h1_val == -16385
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40004005555ffdf;  op2val:0xfffbc000bfff0004
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x40004005555ffdf, 0xfffbc000bfff0004, x5, 15*XLEN/8, x6)

inst_44:
// rs2_h3_val == -513, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00090020f7ff;  op2val:0xfdff000000407fff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfdff00090020f7ff, 0xfdff000000407fff, x5, 16*XLEN/8, x6)

inst_45:
// rs2_h3_val == -1025, rs2_h0_val == 21845
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x0800043fff0008;  op2val:0xfbfffff900405555
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x0800043fff0008, 0xfbfffff900405555, x5, 17*XLEN/8, x6)

inst_46:
// rs2_h3_val == -2049, rs1_h2_val == -3, rs2_h1_val == 1
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffd7fffffdf;  op2val:0xf7fffff900010005
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfbfffffd7fffffdf, 0xf7fffff900010005, x5, 18*XLEN/8, x6)

inst_47:
// rs1_h0_val == rs2_h0_val, rs1_h3_val == -8193, rs2_h2_val == -9
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00208000efff;  op2val:0xfff6fff70006efff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xdfff00208000efff, 0xfff6fff70006efff, x5, 19*XLEN/8, x6)

inst_48:
// rs1_h1_val == -1, rs2_h1_val == -65, rs2_h2_val == 64, rs2_h0_val == 512
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x050006fffffeff;  op2val:0x400040ffbf0200
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x050006fffffeff, 0x400040ffbf0200, x5, 20*XLEN/8, x6)

inst_49:
// rs1_h1_val == 0, rs1_h3_val == 256, rs2_h1_val == 1024, rs2_h0_val == 2048
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100000500000004;  op2val:0x06f7ff04000800
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x100000500000004, 0x06f7ff04000800, x5, 21*XLEN/8, x6)

inst_50:
// rs1_h1_val == 1, rs1_h2_val == -8193, rs2_h0_val == -1025
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfff00010400;  op2val:0x09effffdfffbff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xff7fdfff00010400, 0x09effffdfffbff, x5, 22*XLEN/8, x6)

inst_51:
// rs1_h1_val == 2, rs2_h2_val == -257
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x06002000020009;  op2val:0x80feff00040008
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x06002000020009, 0x80feff00040008, x5, 23*XLEN/8, x6)

inst_52:
// rs1_h1_val == 8, rs2_h2_val == -16385
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbff008000080200;  op2val:0x800bfff0006fff8
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfbff008000080200, 0x800bfff0006fff8, x5, 24*XLEN/8, x6)

inst_53:
// rs1_h1_val == 16, rs2_h0_val == 32
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff800060010ff7f;  op2val:0xfffa000980000020
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff800060010ff7f, 0xfffa000980000020, x5, 25*XLEN/8, x6)

inst_54:
// rs1_h1_val == 2048, rs1_h2_val == 0
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x09000008000400;  op2val:0xfffd555500800020
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x09000008000400, 0xfffd555500800020, x5, 26*XLEN/8, x6)

inst_55:
// rs1_h1_val == 8192, rs2_h2_val == 8192, rs2_h0_val == -21846
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x800800020000040;  op2val:0x555520000020aaaa
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x800800020000040, 0x555520000020aaaa, x5, 27*XLEN/8, x6)

inst_56:
// rs1_h1_val == -2, rs1_h2_val == -1, rs2_h0_val == -9, rs1_h3_val == 512
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200fffffffe0005;  op2val:0xfff7c0000020fff7
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x200fffffffe0005, 0xfff7c0000020fff7, x5, 28*XLEN/8, x6)

inst_57:
// rs1_h1_val == -3, rs1_h2_val == 2
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x060002fffdfffa;  op2val:0xfff740000006fff7
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x060002fffdfffa, 0xfff740000006fff7, x5, 29*XLEN/8, x6)

inst_58:
// rs1_h1_val == -33, rs2_h0_val == -17, rs1_h3_val == 1
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x01efffffdf8000;  op2val:0x060006ffbfffef
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x01efffffdf8000, 0x060006ffbfffef, x5, 30*XLEN/8, x6)

inst_59:
// rs1_h1_val == -257, rs2_h1_val == -1025
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffeffefffff9;  op2val:0xfff6c000fbff0002
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffeffeffefffff9, 0xfff6c000fbff0002, x5, 31*XLEN/8, x6)

inst_60:
// rs1_h3_val == -3, rs2_h2_val == -5
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfffd400000400005;  op2val:0xfffdfffbffdf2000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfffd400000400005, 0xfffdfffbffdf2000, x5, 32*XLEN/8, x6)

inst_61:
// rs1_h3_val == -65, rs1_h2_val == -257
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbffeff00000002;  op2val:0x40fff9c0008000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffbffeff00000002, 0x40fff9c0008000, x5, 33*XLEN/8, x6)

inst_62:
// rs1_h3_val == -2049, rs2_h2_val == 4096
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000410000005;  op2val:0x09100000200020
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xf7ff000410000005, 0x09100000200020, x5, 34*XLEN/8, x6)

inst_63:
// rs1_h3_val == -4097, rs2_h2_val == 32767, rs1_h2_val == 32767
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fff0004fff8;  op2val:0xfff67fff0080aaaa
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xefff7fff0004fff8, 0xfff67fff0080aaaa, x5, 35*XLEN/8, x6)

inst_64:
// rs1_h3_val == -21846, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0007ffeffff9;  op2val:0x20002000ffbf5555
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xaaaa0007ffeffff9, 0x20002000ffbf5555, x5, 36*XLEN/8, x6)

inst_65:
// rs2_h0_val == -1, rs2_h2_val == 32, rs2_h1_val == 16, rs2_h3_val == 0
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfbff01000080fff6;  op2val:0x0000200010ffff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfbff01000080fff6, 0x0000200010ffff, x5, 37*XLEN/8, x6)

inst_66:
// rs2_h0_val == 0, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x073ffffff70200;  op2val:0xfff7000700100000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x073ffffff70200, 0xfff7000700100000, x5, 38*XLEN/8, x6)

inst_67:
// rs2_h0_val == 1, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400001fffcefff;  op2val:0x09000004000001
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x400001fffcefff, 0x09000004000001, x5, 39*XLEN/8, x6)

inst_68:
// rs2_h0_val == 16, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x07fffa04007fff;  op2val:0x4000000ff7f0010
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x07fffa04007fff, 0x4000000ff7f0010, x5, 40*XLEN/8, x6)

inst_69:
// rs2_h0_val == 4096, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00057fff4000;  op2val:0x3fff400010001000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffbf00057fff4000, 0x3fff400010001000, x5, 41*XLEN/8, x6)

inst_70:
// rs2_h0_val == -2, rs1_h3_val == 128
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x80100001000006;  op2val:0x10fffa1000fffe
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x80100001000006, 0x10fffa1000fffe, x5, 42*XLEN/8, x6)

inst_71:
// rs2_h0_val == -3, rs2_h1_val == 512, rs2_h2_val == 256, rs1_h3_val == 0
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x00feffffbf0400;  op2val:0x80001000200fffd
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x00feffffbf0400, 0x80001000200fffd, x5, 43*XLEN/8, x6)

inst_72:
// rs2_h0_val == -5, rs2_h1_val == -2049
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefff0008ffbfffef;  op2val:0x20005555f7fffffb
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xefff0008ffbfffef, 0x20005555f7fffffb, x5, 44*XLEN/8, x6)

inst_73:
// rs2_h0_val == -33, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffdf010000090200;  op2val:0x02fffa0010ffdf
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffdf010000090200, 0x02fffa0010ffdf, x5, 45*XLEN/8, x6)

inst_74:
// rs2_h0_val == -65, rs2_h2_val == 16
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00024000fffa;  op2val:0x800010fffaffbf
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xffbf00024000fffa, 0x800010fffaffbf, x5, 46*XLEN/8, x6)

inst_75:
// rs2_h0_val == -16385, rs2_h2_val == -2, rs1_h2_val == 2048
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x050800fffffff9;  op2val:0x800fffe0001bfff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x050800fffffff9, 0x800fffe0001bfff, x5, 47*XLEN/8, x6)

inst_76:
// rs2_h1_val == 256, rs2_h2_val == -513
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffbf8000fffa;  op2val:0x02fdff01000010
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x5555ffbf8000fffa, 0x02fdff01000010, x5, 48*XLEN/8, x6)

inst_77:
// rs2_h1_val == 2048, rs2_h2_val == -65, rs1_h2_val == -129
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xefffff7f0100fffd;  op2val:0x80ffbf08000000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xefffff7f0100fffd, 0x80ffbf08000000, x5, 49*XLEN/8, x6)

inst_78:
// rs2_h1_val == 8192, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff1000fffbfeff;  op2val:0x7fff000720000004
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff1000fffbfeff, 0x7fff000720000004, x5, 50*XLEN/8, x6)

inst_79:
// rs1_h1_val == -21846, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x038000aaaa0100;  op2val:0x06efffff7fffdf
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x038000aaaa0100, 0x06efffff7fffdf, x5, 51*XLEN/8, x6)

inst_80:
// rs2_h1_val == -2, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x100100fffe0006;  op2val:0x80bffffffe0000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x100100fffe0006, 0x80bffffffe0000, x5, 52*XLEN/8, x6)

inst_81:
// rs2_h1_val == -3, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7f7fff0004;  op2val:0x4000fefffffd0400
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xdfffff7f7fff0004, 0x4000fefffffd0400, x5, 53*XLEN/8, x6)

inst_82:
// rs2_h1_val == -5, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff7800000100100;  op2val:0x03fff7fffbfeff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff7800000100100, 0x03fff7fffbfeff, x5, 54*XLEN/8, x6)

inst_83:
// rs1_h2_val == 16, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x400010feff0001;  op2val:0xfffbfff85555ffef
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x400010feff0001, 0xfffbfff85555ffef, x5, 55*XLEN/8, x6)

inst_84:
// rs1_h2_val == 64, rs1_h3_val == 4096
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x10000040fff9fdff;  op2val:0x7fffffbffdffffff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x10000040fff9fdff, 0x7fffffbffdffffff, x5, 56*XLEN/8, x6)

inst_85:
// rs2_h2_val == -1, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x200000000050800;  op2val:0xbffffffffdff8000
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x200000000050800, 0xbffffffffdff8000, x5, 57*XLEN/8, x6)

inst_86:
// rs1_h2_val == -33, rs2_h2_val == 4
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdf04000002;  op2val:0xfdff0004fff90800
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x40ffdf04000002, 0xfdff0004fff90800, x5, 58*XLEN/8, x6)

inst_87:
// rs1_h2_val == -1025, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fbff4000aaaa;  op2val:0xfff7f7ff0400feff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff6fbff4000aaaa, 0xfff7f7ff0400feff, x5, 59*XLEN/8, x6)

inst_88:
// rs1_h2_val == -21846, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa0008ffdf;  op2val:0xfffcefff0800fff8
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xdfffaaaa0008ffdf, 0xfffcefff0800fff8, x5, 60*XLEN/8, x6)

inst_89:
// rs2_h2_val == -17, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x1000009fff70008;  op2val:0xc000ffeffdff0003
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x1000009fff70008, 0xc000ffeffdff0003, x5, 61*XLEN/8, x6)

inst_90:
// rs2_h2_val == -129, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff0010feff;  op2val:0x04ff7f0020fdff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff9fdff0010feff, 0x04ff7f0020fdff, x5, 62*XLEN/8, x6)

inst_91:
// rs1_h2_val == -5, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffb00010010;  op2val:0x000400fff70400
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xfff8fffb00010010, 0x000400fff70400, x5, 63*XLEN/8, x6)

inst_92:
// rs1_h3_val == 32, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x20000700020400;  op2val:0x80004000ffff0080
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x20000700020400, 0x80004000ffff0080, x5, 64*XLEN/8, x6)

inst_93:
// rs1_h2_val == -9, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff77ffffeff;  op2val:0x100000701000002
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0xf7fffff77ffffeff, 0x100000701000002, x5, 65*XLEN/8, x6)

inst_94:
// rs1_h3_val == 8192, rs2_h3_val == -1
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x20003fffdffffeff;  op2val:0xffff0010fff6fff8
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x20003fffdffffeff, 0xffff0010fff6fff8, x5, 66*XLEN/8, x6)

inst_95:
// rs2_h2_val == -8193, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaafefffff8;  op2val:0xfffcdfff0004aaaa
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x20aaaafefffff8, 0xfffcdfff0004aaaa, x5, 67*XLEN/8, x6)

inst_96:
// rs1_h2_val == -2, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05fffefff8bfff;  op2val:0xdfff000000400800
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x05fffefff8bfff, 0xdfff000000400800, x5, 68*XLEN/8, x6)

inst_97:
// rs1_h3_val == 16384, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff0100fdff;  op2val:0x8000fffabffffdff
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x4000fbff0100fdff, 0x8000fffabffffdff, x5, 69*XLEN/8, x6)

inst_98:
// rs2_h3_val == 1, 
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x8000107fffff7f;  op2val:0x01aaaa0100ffef
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x8000107fffff7f, 0x01aaaa0100ffef, x5, 70*XLEN/8, x6)

inst_99:
// rs1_h0_val == -1, rs2_h3_val == 32767, rs2_h0_val == 64, rs1_h3_val == 32767, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == rs2_h3_val, rs2_h2_val == 0, rs2_h1_val == 128
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0006fff9ffff;  op2val:0x7fff000000800040
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x7fff0006fff9ffff, 0x7fff000000800040, x5, 71*XLEN/8, x6)

inst_100:
// rs1_h0_val == 8, rs1_h1_val == -2049, rs2_h1_val == -8193
// opcode: pmulhsu.h.be ; op1:x30; op2:x29; dest:x31; op1val:0x05fff9f7ff0008;  op2val:0xff7f0009dffffffc
TEST_RR_OP(pmulhsu.h.be, x31, x30, x29, 0x0000000000000000, 0x05fff9f7ff0008, 0xff7f0009dffffffc, x5, 72*XLEN/8, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 12*((XLEN/8)/4),4,0xdeadbeef


signature_x5_0:
    .fill 73*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
