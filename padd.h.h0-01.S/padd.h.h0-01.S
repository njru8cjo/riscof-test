
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Dec  4 06:11:48 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/cgf_files/p8.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the padd.h.h0 instruction of the RISC-V RV32PZicsr extension for the padd.h.h0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",padd.h.h0)

RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x18, rd==x29, rs1_h0_val == -32768, rs2_h0_val == -65, rs2_h1_val == -17, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == -3, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0
// opcode: padd.h.h0 ; op1:x2; op2:x18; dest:x29; op1val:0xfffd8000;  op2val:0xffefffbf
TEST_RR_OP(padd.h.h0, x29, x2, x18, 0x00000000, 0xfffd8000, 0xffefffbf, x6, 0*XLEN/8, x12)

inst_1:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h0_val == -1, rs2_h1_val == 32767, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 512, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -65
// opcode: padd.h.h0 ; op1:x9; op2:x9; dest:x9; op1val:0xffbfffff;  op2val:0x7fff0200
TEST_RR_OP(padd.h.h0, x9, x9, x9, 0x00000000, 0xffbfffff, 0x7fff0200, x6, 1*XLEN/8, x12)

inst_2:
// rs2 == rd != rs1, rs1==x8, rs2==x5, rd==x5, rs1_h0_val == 0, rs2_h0_val == -5, rs2_h1_val == -257
// opcode: padd.h.h0 ; op1:x8; op2:x5; dest:x5; op1val:0xffbf0000;  op2val:0xfefffffb
TEST_RR_OP(padd.h.h0, x5, x8, x5, 0x00000000, 0xffbf0000, 0xfefffffb, x6, 2*XLEN/8, x12)

inst_3:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x17, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: padd.h.h0 ; op1:x3; op2:x3; dest:x17; op1val:0x3fff0001;  op2val:0x400c000
TEST_RR_OP(padd.h.h0, x17, x3, x3, 0x00000000, 0x3fff0001, 0x400c000, x6, 3*XLEN/8, x12)

inst_4:
// rs1 == rd != rs2, rs1==x14, rs2==x21, rd==x14, rs1_h0_val == 32767, 
// opcode: padd.h.h0 ; op1:x14; op2:x21; dest:x14; op1val:0xffbf7fff;  op2val:0xfff9fffb
TEST_RR_OP(padd.h.h0, x14, x14, x21, 0x00000000, 0xffbf7fff, 0xfff9fffb, x6, 4*XLEN/8, x12)

inst_5:
// rs1==x27, rs2==x8, rd==x3, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: padd.h.h0 ; op1:x27; op2:x8; dest:x3; op1val:0x090002;  op2val:0xfffa0040
TEST_RR_OP(padd.h.h0, x3, x27, x8, 0x00000000, 0x090002, 0xfffa0040, x6, 5*XLEN/8, x12)

inst_6:
// rs1==x17, rs2==x20, rd==x27, rs1_h0_val == 4, rs2_h0_val == 16384, rs1_h1_val == -33, rs2_h1_val == 8192
// opcode: padd.h.h0 ; op1:x17; op2:x20; dest:x27; op1val:0xffdf0004;  op2val:0x20004000
TEST_RR_OP(padd.h.h0, x27, x17, x20, 0x00000000, 0xffdf0004, 0x20004000, x6, 6*XLEN/8, x12)

inst_7:
// rs1==x31, rs2==x2, rd==x28, rs1_h0_val == 8, 
// opcode: padd.h.h0 ; op1:x31; op2:x2; dest:x28; op1val:0xfff60008;  op2val:0x07fff6
TEST_RR_OP(padd.h.h0, x28, x31, x2, 0x00000000, 0xfff60008, 0x07fff6, x6, 7*XLEN/8, x12)

inst_8:
// rs1==x11, rs2==x29, rd==x30, rs1_h0_val == 16, rs2_h1_val == -2049
// opcode: padd.h.h0 ; op1:x11; op2:x29; dest:x30; op1val:0xffbf0010;  op2val:0xf7ff0007
TEST_RR_OP(padd.h.h0, x30, x11, x29, 0x00000000, 0xffbf0010, 0xf7ff0007, x6, 8*XLEN/8, x12)

inst_9:
// rs1==x7, rs2==x19, rd==x10, rs1_h0_val == 32, rs2_h0_val == -8193, rs2_h1_val == -9, rs1_h1_val == 8192
// opcode: padd.h.h0 ; op1:x7; op2:x19; dest:x10; op1val:0x20000020;  op2val:0xfff7dfff
TEST_RR_OP(padd.h.h0, x10, x7, x19, 0x00000000, 0x20000020, 0xfff7dfff, x6, 9*XLEN/8, x12)

inst_10:
// rs1==x1, rs2==x0, rd==x21, rs1_h0_val == 64, rs2_h0_val == -4097, rs1_h1_val == 128
// opcode: padd.h.h0 ; op1:x1; op2:x0; dest:x21; op1val:0x800040;  op2val:0x400efff
TEST_RR_OP(padd.h.h0, x21, x1, x0, 0x00000000, 0x800040, 0x400efff, x6, 10*XLEN/8, x12)

inst_11:
// rs1==x29, rs2==x1, rd==x13, rs1_h0_val == 128, rs2_h0_val == 8192, rs2_h1_val == 4, rs1_h1_val == -16385
// opcode: padd.h.h0 ; op1:x29; op2:x1; dest:x13; op1val:0xbfff0080;  op2val:0x042000
TEST_RR_OP(padd.h.h0, x13, x29, x1, 0x00000000, 0xbfff0080, 0x042000, x6, 11*XLEN/8, x12)

inst_12:
// rs1==x5, rs2==x28, rd==x2, rs1_h0_val == 256, 
// opcode: padd.h.h0 ; op1:x5; op2:x28; dest:x2; op1val:0x050100;  op2val:0x06ffbf
TEST_RR_OP(padd.h.h0, x2, x5, x28, 0x00000000, 0x050100, 0x06ffbf, x6, 12*XLEN/8, x12)

inst_13:
// rs1==x4, rs2==x16, rd==x25, rs1_h0_val == 512, rs1_h1_val == 2048, rs2_h1_val == -65
// opcode: padd.h.h0 ; op1:x4; op2:x16; dest:x25; op1val:0x8000200;  op2val:0xffbf3fff
TEST_RR_OP(padd.h.h0, x25, x4, x16, 0x00000000, 0x8000200, 0xffbf3fff, x6, 13*XLEN/8, x12)

inst_14:
// rs1==x28, rs2==x4, rd==x1, rs1_h0_val == 1024, rs1_h1_val == 4, rs2_h0_val == -2
// opcode: padd.h.h0 ; op1:x28; op2:x4; dest:x1; op1val:0x040400;  op2val:0x06fffe
TEST_RR_OP(padd.h.h0, x1, x28, x4, 0x00000000, 0x040400, 0x06fffe, x6, 14*XLEN/8, x12)

inst_15:
// rs1==x21, rs2==x10, rd==x8, rs1_h0_val == 2048, rs2_h1_val == 16384, rs2_h0_val == 1024
// opcode: padd.h.h0 ; op1:x21; op2:x10; dest:x8; op1val:0xffbf0800;  op2val:0x40000400
TEST_RR_OP(padd.h.h0, x8, x21, x10, 0x00000000, 0xffbf0800, 0x40000400, x6, 15*XLEN/8, x12)

inst_16:
// rs1==x20, rs2==x26, rd==x24, rs1_h0_val == 4096, rs1_h1_val == 256, rs2_h1_val == -2
// opcode: padd.h.h0 ; op1:x20; op2:x26; dest:x24; op1val:0x1001000;  op2val:0xfffeffbf
TEST_RR_OP(padd.h.h0, x24, x20, x26, 0x00000000, 0x1001000, 0xfffeffbf, x6, 16*XLEN/8, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x16, rs2==x22, rd==x18, rs1_h0_val == 8192, rs2_h1_val == -1025, rs2_h0_val == 2, rs1_h1_val == 1
// opcode: padd.h.h0 ; op1:x16; op2:x22; dest:x18; op1val:0x012000;  op2val:0xfbff0002
TEST_RR_OP(padd.h.h0, x18, x16, x22, 0x00000000, 0x012000, 0xfbff0002, x1, 0*XLEN/8, x2)

inst_18:
// rs1==x0, rs2==x17, rd==x4, rs1_h0_val == 16384, 
// opcode: padd.h.h0 ; op1:x0; op2:x17; dest:x4; op1val:0x034000;  op2val:0x070006
TEST_RR_OP(padd.h.h0, x4, x0, x17, 0x00000000, 0x034000, 0x070006, x1, 1*XLEN/8, x2)

inst_19:
// rs1==x13, rs2==x6, rd==x26, rs1_h0_val == -2, rs2_h1_val == -33, rs1_h1_val == -257
// opcode: padd.h.h0 ; op1:x13; op2:x6; dest:x26; op1val:0xfefffffe;  op2val:0xffdf2000
TEST_RR_OP(padd.h.h0, x26, x13, x6, 0x00000000, 0xfefffffe, 0xffdf2000, x1, 2*XLEN/8, x2)

inst_20:
// rs1==x19, rs2==x11, rd==x16, rs1_h0_val == -3, rs2_h0_val == 32
// opcode: padd.h.h0 ; op1:x19; op2:x11; dest:x16; op1val:0xfffcfffd;  op2val:0xfffe0020
TEST_RR_OP(padd.h.h0, x16, x19, x11, 0x00000000, 0xfffcfffd, 0xfffe0020, x1, 3*XLEN/8, x2)

inst_21:
// rs1==x23, rs2==x24, rd==x0, rs1_h0_val == -5, rs2_h0_val == -33, rs1_h1_val == -2049
// opcode: padd.h.h0 ; op1:x23; op2:x24; dest:x0; op1val:0xf7fffffb;  op2val:0x06ffdf
TEST_RR_OP(padd.h.h0, x0, x23, x24, 0x00000000, 0xf7fffffb, 0x06ffdf, x1, 4*XLEN/8, x2)

inst_22:
// rs1==x30, rs2==x27, rd==x15, rs1_h0_val == -9, rs1_h1_val == -21846
// opcode: padd.h.h0 ; op1:x30; op2:x27; dest:x15; op1val:0xaaaafff7;  op2val:0xfeff0005
TEST_RR_OP(padd.h.h0, x15, x30, x27, 0x00000000, 0xaaaafff7, 0xfeff0005, x1, 5*XLEN/8, x2)

inst_23:
// rs1==x10, rs2==x25, rd==x6, rs1_h0_val == -17, rs2_h1_val == 8
// opcode: padd.h.h0 ; op1:x10; op2:x25; dest:x6; op1val:0x04ffef;  op2val:0x080200
TEST_RR_OP(padd.h.h0, x6, x10, x25, 0x00000000, 0x04ffef, 0x080200, x1, 6*XLEN/8, x2)

inst_24:
// rs1==x22, rs2==x13, rd==x11, rs1_h0_val == -33, rs2_h0_val == -21846, rs2_h1_val == 32
// opcode: padd.h.h0 ; op1:x22; op2:x13; dest:x11; op1val:0x3fffffdf;  op2val:0x20aaaa
TEST_RR_OP(padd.h.h0, x11, x22, x13, 0x00000000, 0x3fffffdf, 0x20aaaa, x1, 7*XLEN/8, x2)

inst_25:
// rs1==x26, rs2==x23, rd==x19, rs1_h0_val == -65, rs2_h1_val == 4096, rs1_h1_val == 32
// opcode: padd.h.h0 ; op1:x26; op2:x23; dest:x19; op1val:0x20ffbf;  op2val:0x10000006
TEST_RR_OP(padd.h.h0, x19, x26, x23, 0x00000000, 0x20ffbf, 0x10000006, x1, 8*XLEN/8, x2)

inst_26:
// rs1==x18, rs2==x14, rd==x20, rs1_h0_val == -129, rs2_h0_val == -32768, rs2_h1_val == 512, rs1_h1_val == 21845
// opcode: padd.h.h0 ; op1:x18; op2:x14; dest:x20; op1val:0x5555ff7f;  op2val:0x2008000
TEST_RR_OP(padd.h.h0, x20, x18, x14, 0x00000000, 0x5555ff7f, 0x2008000, x1, 9*XLEN/8, x2)

inst_27:
// rs1==x6, rs2==x31, rd==x23, rs1_h0_val == -257, rs2_h1_val == -513, rs2_h0_val == 0, rs1_h1_val == -1
// opcode: padd.h.h0 ; op1:x6; op2:x31; dest:x23; op1val:0xfffffeff;  op2val:0xfdff0000
TEST_RR_OP(padd.h.h0, x23, x6, x31, 0x00000000, 0xfffffeff, 0xfdff0000, x1, 10*XLEN/8, x2)

inst_28:
// rs1==x24, rs2==x7, rd==x22, rs1_h0_val == -513, rs2_h1_val == 1
// opcode: padd.h.h0 ; op1:x24; op2:x7; dest:x22; op1val:0xfff6fdff;  op2val:0x010200
TEST_RR_OP(padd.h.h0, x22, x24, x7, 0x00000000, 0xfff6fdff, 0x010200, x1, 11*XLEN/8, x2)

inst_29:
// rs1==x25, rs2==x12, rd==x7, rs1_h0_val == -1025, rs1_h1_val == 512
// opcode: padd.h.h0 ; op1:x25; op2:x12; dest:x7; op1val:0x200fbff;  op2val:0xfdfffffa
TEST_RR_OP(padd.h.h0, x7, x25, x12, 0x00000000, 0x200fbff, 0xfdfffffa, x1, 12*XLEN/8, x2)

inst_30:
// rs1==x12, rs2==x15, rd==x31, rs1_h0_val == -2049, rs1_h1_val == -5, rs2_h0_val == -1025
// opcode: padd.h.h0 ; op1:x12; op2:x15; dest:x31; op1val:0xfffbf7ff;  op2val:0x20fbff
TEST_RR_OP(padd.h.h0, x31, x12, x15, 0x00000000, 0xfffbf7ff, 0x20fbff, x1, 13*XLEN/8, x2)

inst_31:
// rs1==x15, rs2==x30, rd==x12, rs2_h1_val == -3, rs2_h0_val == 256
// opcode: padd.h.h0 ; op1:x15; op2:x30; dest:x12; op1val:0x5555ffdf;  op2val:0xfffd0100
TEST_RR_OP(padd.h.h0, x12, x15, x30, 0x00000000, 0x5555ffdf, 0xfffd0100, x1, 14*XLEN/8, x2)

inst_32:
// rs2_h1_val == -5, rs1_h0_val == rs2_h0_val
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x010006;  op2val:0xfffb0006
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x010006, 0xfffb0006, x1, 15*XLEN/8, x2)

inst_33:
// rs2_h1_val == -129, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x060200;  op2val:0xff7ffff9
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x060200, 0xff7ffff9, x1, 16*XLEN/8, x2)

inst_34:
// rs2_h1_val == -4097, rs1_h1_val == 8, rs2_h0_val == 2048
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffd;  op2val:0xefff0800
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x08fffd, 0xefff0800, x1, 17*XLEN/8, x2)

inst_35:
// rs2_h1_val == -8193, rs1_h1_val == 0
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x000003;  op2val:0xdfff0200
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x000003, 0xdfff0200, x1, 18*XLEN/8, x2)

inst_36:
// rs2_h1_val == -16385, rs1_h1_val == 4096
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff8;  op2val:0xbfff0006
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x1000fff8, 0xbfff0006, x1, 19*XLEN/8, x2)

inst_37:
// rs2_h1_val == 21845, rs2_h0_val == -257
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff6;  op2val:0x5555feff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x20fff6, 0x5555feff, x1, 20*XLEN/8, x2)

inst_38:
// rs2_h1_val == -21846, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd;  op2val:0xaaaa0002
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x5555fffd, 0xaaaa0002, x1, 21*XLEN/8, x2)

inst_39:
// rs1_h1_val == rs2_h1_val, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff94000;  op2val:0xfff90006
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfff94000, 0xfff90006, x1, 22*XLEN/8, x2)

inst_40:
// rs1_h0_val == -4097, rs1_h1_val == -2
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeefff;  op2val:0xfffd0003
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfffeefff, 0xfffd0003, x1, 23*XLEN/8, x2)

inst_41:
// rs1_h0_val == -8193, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffdfff;  op2val:0xfffb0400
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfeffdfff, 0xfffb0400, x1, 24*XLEN/8, x2)

inst_42:
// rs1_h0_val == -16385, rs2_h0_val == -129, rs1_h1_val == 64
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff;  op2val:0x03ff7f
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x40bfff, 0x03ff7f, x1, 25*XLEN/8, x2)

inst_43:
// rs1_h0_val == 21845, rs2_h1_val == -1, rs1_h1_val == -129
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f5555;  op2val:0xffffc000
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xff7f5555, 0xffffc000, x1, 26*XLEN/8, x2)

inst_44:
// rs1_h0_val == -21846, rs2_h0_val == -2049
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaa;  op2val:0x07f7ff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xbfffaaaa, 0x07f7ff, x1, 27*XLEN/8, x2)

inst_45:
// rs1_h1_val == -32768, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ff7f;  op2val:0xfffc0002
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x8000ff7f, 0xfffc0002, x1, 28*XLEN/8, x2)

inst_46:
// rs1_h1_val == 32767, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffff7ff;  op2val:0xfff60400
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x7ffff7ff, 0xfff60400, x1, 29*XLEN/8, x2)

inst_47:
// rs1_h1_val == 2, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x023fff;  op2val:0x08dfff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x023fff, 0x08dfff, x1, 30*XLEN/8, x2)

inst_48:
// rs1_h1_val == -513, rs2_h1_val == 128
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0040;  op2val:0x808000
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfdff0040, 0x808000, x1, 31*XLEN/8, x2)

inst_49:
// rs1_h1_val == -1025, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbff;  op2val:0xffff8000
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfbfffbff, 0xffff8000, x1, 32*XLEN/8, x2)

inst_50:
// rs1_h1_val == -4097, rs2_h1_val == 2
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffbff;  op2val:0x02ffdf
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xeffffbff, 0x02ffdf, x1, 33*XLEN/8, x2)

inst_51:
// rs1_h1_val == -8193, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0008;  op2val:0xeffff7ff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xdfff0008, 0xeffff7ff, x1, 34*XLEN/8, x2)

inst_52:
// rs2_h0_val == -1, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60080;  op2val:0x04ffff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfff60080, 0x04ffff, x1, 35*XLEN/8, x2)

inst_53:
// rs2_h0_val == 1, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xfff80001
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xffffffdf, 0xfff80001, x1, 36*XLEN/8, x2)

inst_54:
// rs2_h0_val == 32767, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x80000007;  op2val:0x55557fff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x80000007, 0x55557fff, x1, 37*XLEN/8, x2)

inst_55:
// rs2_h0_val == 4, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x060005;  op2val:0x2000004
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x060005, 0x2000004, x1, 38*XLEN/8, x2)

inst_56:
// rs2_h0_val == 8, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc;  op2val:0xfffa0008
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xff7ffffc, 0xfffa0008, x1, 39*XLEN/8, x2)

inst_57:
// rs2_h0_val == 16, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaa;  op2val:0xffbf0010
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xffdfaaaa, 0xffbf0010, x1, 40*XLEN/8, x2)

inst_58:
// rs2_h0_val == 128, rs1_h1_val == 1024
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4000080;  op2val:0x060080
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x4000080, 0x060080, x1, 41*XLEN/8, x2)

inst_59:
// rs2_h0_val == 4096, rs2_h1_val == 0
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefdff;  op2val:0x001000
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfffefdff, 0x001000, x1, 42*XLEN/8, x2)

inst_60:
// rs2_h0_val == -3, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x10000100;  op2val:0x05fffd
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x10000100, 0x05fffd, x1, 43*XLEN/8, x2)

inst_61:
// rs2_h0_val == -513, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfff;  op2val:0x2000fdff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xff7fdfff, 0x2000fdff, x1, 44*XLEN/8, x2)

inst_62:
// rs2_h0_val == -16385, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0x02bfff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfffffffb, 0x02bfff, x1, 45*XLEN/8, x2)

inst_63:
// rs1_h1_val == -17, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf;  op2val:0xfbff0400
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xffefffdf, 0xfbff0400, x1, 46*XLEN/8, x2)

inst_64:
// rs2_h0_val == 21845, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff8;  op2val:0x065555
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x8000fff8, 0x065555, x1, 47*XLEN/8, x2)

inst_65:
// rs1_h1_val == 16, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff6;  op2val:0xfff80400
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x10fff6, 0xfff80400, x1, 48*XLEN/8, x2)

inst_66:
// rs2_h1_val == -32768, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0006;  op2val:0x8000fffb
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x3fff0006, 0x8000fffb, x1, 49*XLEN/8, x2)

inst_67:
// rs2_h1_val == 16, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000080;  op2val:0x100005
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xc0000080, 0x100005, x1, 50*XLEN/8, x2)

inst_68:
// rs1_h1_val == 16384, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4000c000;  op2val:0x3fff0010
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x4000c000, 0x3fff0010, x1, 51*XLEN/8, x2)

inst_69:
// rs2_h1_val == 64, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x050100;  op2val:0x400004
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x050100, 0x400004, x1, 52*XLEN/8, x2)

inst_70:
// rs2_h1_val == 256, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x4000007;  op2val:0x100aaaa
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x4000007, 0x100aaaa, x1, 53*XLEN/8, x2)

inst_71:
// rs1_h1_val == -9, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7c000;  op2val:0xefff0007
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xfff7c000, 0xefff0007, x1, 54*XLEN/8, x2)

inst_72:
// rs2_h1_val == 2048, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x40000007;  op2val:0x800fffb
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x40000007, 0x800fffb, x1, 55*XLEN/8, x2)

inst_73:
// rs2_h0_val == -9, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x800080;  op2val:0x05fff7
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x800080, 0x05fff7, x1, 56*XLEN/8, x2)

inst_74:
// rs2_h0_val == -17, 
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x000009;  op2val:0xfff8ffef
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x000009, 0xfff8ffef, x1, 57*XLEN/8, x2)

inst_75:
// rs1_h0_val == -1, rs2_h1_val == 32767, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 512, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -65
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0x7fff0200
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xffbfffff, 0x7fff0200, x1, 58*XLEN/8, x2)

inst_76:
// rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0001;  op2val:0x400c000
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x3fff0001, 0x400c000, x1, 59*XLEN/8, x2)

inst_77:
// rs1_h0_val == 64, rs2_h0_val == -4097, rs1_h1_val == 128
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0x800040;  op2val:0x400efff
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0x800040, 0x400efff, x1, 60*XLEN/8, x2)

inst_78:
// rs1_h0_val == -5, rs2_h0_val == -33, rs1_h1_val == -2049
// opcode: padd.h.h0 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffb;  op2val:0x06ffdf
TEST_RR_OP(padd.h.h0, x31, x30, x29, 0x00000000, 0xf7fffffb, 0x06ffdf, x1, 61*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x6_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x6_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 62*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
