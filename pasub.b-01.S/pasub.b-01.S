
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pasub.b instruction of the RISC-V RV64PZicsr extension for the pasub.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pasub.b)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x5, rd==x28, rs1_b0_val == -128, rs1_b1_val == 1, rs2_b6_val == -9, rs2_b0_val == -3, rs2_b7_val == 0, rs1_b2_val == -2, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b3_val == 16, rs2_b1_val == -33, rs1_b0_val != rs2_b0_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b1_val != rs2_b1_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b2_val != rs2_b2_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b4_val == rs2_b4_val, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == 64, rs1_b6_val != rs2_b6_val, rs1_b5_val == 8, rs1_b7_val != rs2_b7_val, rs1_b6_val == 1
// opcode: pasub.b ; op1:x14; op2:x5; dest:x28; op1val:0x301083f10fe0180;  op2val:0xf73f3f4003dffd
TEST_RR_OP(pasub.b, x28, x14, x5, 0x0000000000000000, 0x301083f10fe0180, 0xf73f3f4003dffd, x4, 0*XLEN/8, x6)

inst_1:// rs2 == rd != rs1, rs1==x28, rs2==x13, rd==x13, rs1_b0_val == -1, rs1_b6_val == 16, rs1_b4_val == 85, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b1_val == -86, rs2_b6_val == -33, rs1_b5_val == 32, rs1_b7_val == -1, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b5_val == -3, rs2_b7_val == 2, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b2_val == -2, rs1_b2_val == -65, rs2_b4_val == 64, rs1_b1_val == 8, rs1_b4_val != rs2_b4_val, rs1_b3_val == 1
// opcode: pasub.b ; op1:x28; op2:x13; dest:x13; op1val:0xff10205501bf08ff;  op2val:0x2dffd403ffeaafc
TEST_RR_OP(pasub.b, x13, x28, x13, 0x0000000000000000, 0xff10205501bf08ff, 0x2dffd403ffeaafc, x4, 1*XLEN/8, x6)

inst_2:// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x21, rs1_b0_val == 0, rs1_b2_val == 85, rs2_b3_val == 16, rs1_b5_val == 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b0_val == -17, rs2_b5_val == -17, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b7_val == -5, rs1_b1_val == 4, rs2_b2_val == -86, rs1_b3_val == -1
// opcode: pasub.b ; op1:x19; op2:x19; dest:x21; op1val:0xfb3f0055ff550400;  op2val:0x3f9ef0510aaaaef
TEST_RR_OP(pasub.b, x21, x19, x19, 0x0000000000000000, 0xfb3f0055ff550400, 0x3f9ef0510aaaaef, x4, 2*XLEN/8, x6)

inst_3:// rs1 == rd != rs2, rs1==x1, rs2==x2, rd==x1, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b7_val == -128, rs1_b2_val == 2, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b0_val == -86, rs1_b1_val == 0, rs2_b6_val == 1, rs1_b4_val == -3
// opcode: pasub.b ; op1:x1; op2:x2; dest:x1; op1val:0x800609fdfc020001;  op2val:0x01030740f807aa
TEST_RR_OP(pasub.b, x1, x1, x2, 0x0000000000000000, 0x800609fdfc020001, 0x01030740f807aa, x4, 3*XLEN/8, x6)

inst_4:// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 2, rs2_b1_val == 85, rs1_b6_val == -9, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b7_val == rs2_b7_val, rs2_b5_val == -65, rs1_b3_val == rs2_b3_val, rs1_b3_val == 0, rs2_b3_val == 0, rs2_b6_val == 8
// opcode: pasub.b ; op1:x26; op2:x26; dest:x26; op1val:0xc0f7033f00fe007f;  op2val:0xc008bf3f003f5502
TEST_RR_OP(pasub.b, x26, x26, x26, 0x0000000000000000, 0xc0f7033f00fe007f, 0xc008bf3f003f5502, x4, 4*XLEN/8, x6)

inst_5:// rs1==x3, rs2==x16, rd==x10, rs1_b0_val == 2, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b1_val == -9, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b2_val == 0, rs2_b5_val == 64, rs1_b5_val == -9, rs1_b4_val == 1, rs2_b2_val == -3, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b7_val == -86
// opcode: pasub.b ; op1:x3; op2:x16; dest:x10; op1val:0xaaf9f701fa00f702;  op2val:0x3df40f940fdaaf6
TEST_RR_OP(pasub.b, x10, x3, x16, 0x0000000000000000, 0xaaf9f701fa00f702, 0x3df40f940fdaaf6, x4, 5*XLEN/8, x6)

inst_6:// rs1==x13, rs2==x18, rd==x16, rs1_b0_val == 4, rs1_b6_val == -2, rs2_b5_val == 2, rs2_b0_val == 64, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b3_val == -33, rs2_b3_val == -33, rs1_b4_val == -128, rs2_b7_val == 16, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b4_val < 0 and rs2_b4_val < 0
// opcode: pasub.b ; op1:x13; op2:x18; dest:x16; op1val:0x80fef980dffaf604;  op2val:0x10c002f8dff90640
TEST_RR_OP(pasub.b, x16, x13, x18, 0x0000000000000000, 0x80fef980dffaf604, 0x10c002f8dff90640, x4, 6*XLEN/8, x6)

inst_7:// rs1==x11, rs2==x7, rd==x9, rs1_b0_val == 8, rs1_b3_val == 8, rs2_b0_val == -2, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b5_val == 64, rs1_b4_val == -2
// opcode: pasub.b ; op1:x11; op2:x7; dest:x9; op1val:0x800940fe08030808;  op2val:0xf8df05fc0307c0fe
TEST_RR_OP(pasub.b, x9, x11, x7, 0x0000000000000000, 0x800940fe08030808, 0xf8df05fc0307c0fe, x4, 7*XLEN/8, x6)

inst_8:// rs1==x0, rs2==x24, rd==x8, rs1_b0_val == 16, rs1_b3_val == 127, rs1_b6_val == 32, rs2_b4_val == -33, rs2_b1_val == -17, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b5_val == rs2_b5_val, rs2_b2_val == -128, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val == 1, rs1_b2_val == 8, rs2_b7_val == -5, rs2_b3_val == 1
// opcode: pasub.b ; op1:x0; op2:x24; dest:x8; op1val:0x120c0067f080610;  op2val:0xfbf9c0df0180ef09
TEST_RR_OP(pasub.b, x8, x0, x24, 0x0000000000000000, 0x120c0067f080610, 0xfbf9c0df0180ef09, x4, 8*XLEN/8, x6)

inst_9:// rs1==x29, rs2==x15, rd==x19, rs1_b0_val == 32, rs2_b5_val == 0, rs2_b6_val == -17, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b5_val == -86, rs2_b7_val == 32, rs2_b4_val == 8, rs2_b1_val == 2
// opcode: pasub.b ; op1:x29; op2:x15; dest:x19; op1val:0x6f9aa01c0f8fc20;  op2val:0x20ef0008f63f02bf
TEST_RR_OP(pasub.b, x19, x29, x15, 0x0000000000000000, 0x6f9aa01c0f8fc20, 0x20ef0008f63f02bf, x4, 9*XLEN/8, x6)

inst_10:// rs1==x15, rs2==x14, rd==x3, rs1_b0_val == 64, rs1_b6_val == rs2_b6_val, rs2_b2_val == 0, rs1_b2_val == 127, rs1_b5_val == -65, rs1_b6_val == 4, rs2_b6_val == 4
// opcode: pasub.b ; op1:x15; op2:x14; dest:x3; op1val:0x504bf3fc07ffc40;  op2val:0x704023f0900f8aa
TEST_RR_OP(pasub.b, x3, x15, x14, 0x0000000000000000, 0x504bf3fc07ffc40, 0x704023f0900f8aa, x4, 10*XLEN/8, x6)

inst_11:// rs1==x12, rs2==x27, rd==x25, rs1_b0_val == -2, rs2_b6_val == 16, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b6_val == -5, rs1_b1_val == 85, rs2_b2_val == -1, rs1_b7_val == 0, rs2_b3_val == 85, rs1_b5_val == 85
// opcode: pasub.b ; op1:x12; op2:x27; dest:x25; op1val:0xfb5505050255fe;  op2val:0x510f63f55fff602
TEST_RR_OP(pasub.b, x25, x12, x27, 0x0000000000000000, 0xfb5505050255fe, 0x510f63f55fff602, x4, 11*XLEN/8, x6)

inst_12:// rs1==x27, rs2==x10, rd==x30, rs1_b0_val == -3, rs2_b3_val == 127, rs1_b5_val == 1, rs2_b1_val == 0, rs1_b4_val == 4, rs1_b6_val == 127
// opcode: pasub.b ; op1:x27; op2:x10; dest:x30; op1val:0xff7f0104fa3f03fd;  op2val:0xc007faf67faa00fc
TEST_RR_OP(pasub.b, x30, x27, x10, 0x0000000000000000, 0xff7f0104fa3f03fd, 0xc007faf67faa00fc, x4, 12*XLEN/8, x6)

inst_13:// rs1==x18, rs2==x1, rd==x31, rs1_b0_val == -5, rs2_b4_val == 32, rs2_b5_val == 1, rs1_b2_val == 16, rs2_b7_val == -3, rs1_b1_val == 2, rs1_b7_val == -65
// opcode: pasub.b ; op1:x18; op2:x1; dest:x31; op1val:0xbf090180ff1002fb;  op2val:0xfd050120f605fc03
TEST_RR_OP(pasub.b, x31, x18, x1, 0x0000000000000000, 0xbf090180ff1002fb, 0xfd050120f605fc03, x4, 13*XLEN/8, x6)

inst_14:// rs1==x8, rs2==x28, rd==x2, rs1_b0_val == -9, rs1_b1_val == -5, rs2_b6_val == 64, rs1_b6_val == -86
// opcode: pasub.b ; op1:x8; op2:x28; dest:x2; op1val:0xffaa0709df03fbf7;  op2val:0x20400103f9fdf8fd
TEST_RR_OP(pasub.b, x2, x8, x28, 0x0000000000000000, 0xffaa0709df03fbf7, 0x20400103f9fdf8fd, x4, 14*XLEN/8, x13)

inst_15:// rs1==x9, rs2==x20, rd==x18, rs1_b0_val == -17, rs1_b0_val == rs2_b0_val, rs1_b3_val == -2, rs2_b5_val == 4, rs2_b2_val == 8, rs2_b4_val == -128, rs2_b7_val == -17, rs1_b7_val == 64, rs1_b6_val == -1, rs1_b2_val == -86
// opcode: pasub.b ; op1:x9; op2:x20; dest:x18; op1val:0x40ff06c0feaa06ef;  op2val:0xef4004800708dfef
TEST_RR_OP(pasub.b, x18, x9, x20, 0x0000000000000000, 0x40ff06c0feaa06ef, 0xef4004800708dfef, x4, 15*XLEN/8, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:// rs1==x17, rs2==x3, rd==x27, rs1_b0_val == -33, rs1_b4_val == -86, rs2_b4_val == -86, rs2_b1_val == -65, rs1_b5_val == -2, rs1_b7_val == 127, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b5_val == -33, rs2_b3_val == -128
// opcode: pasub.b ; op1:x17; op2:x3; dest:x27; op1val:0x7f3ffeaa0606fcdf;  op2val:0x6f6dfaa8009bff8
TEST_RR_OP(pasub.b, x27, x17, x3, 0x0000000000000000, 0x7f3ffeaa0606fcdf, 0x6f6dfaa8009bff8, x1, 0*XLEN/8, x13)

inst_17:// rs1==x22, rs2==x6, rd==x0, rs1_b0_val == -65, rs2_b0_val == 127, rs1_b1_val == -65, rs2_b6_val == 85, rs2_b3_val == -17, rs1_b4_val == -1, rs2_b2_val == 64, rs2_b4_val == 127, rs2_b7_val == 64
// opcode: pasub.b ; op1:x22; op2:x6; dest:x0; op1val:0x7ff620ff0808bfbf;  op2val:0x4055037fef40c07f
TEST_RR_OP(pasub.b, x0, x22, x6, 0x0000000000000000, 0x7ff620ff0808bfbf, 0x4055037fef40c07f, x1, 1*XLEN/8, x13)

inst_18:// rs1==x5, rs2==x8, rd==x29, rs1_b0_val == 85, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 1, rs1_b2_val == 4
// opcode: pasub.b ; op1:x5; op2:x8; dest:x29; op1val:0xc003fef8f8040855;  op2val:0xc00106aac0050901
TEST_RR_OP(pasub.b, x29, x5, x8, 0x0000000000000000, 0xc003fef8f8040855, 0xc00106aac0050901, x1, 2*XLEN/8, x13)

inst_19:// rs1==x25, rs2==x0, rd==x15, rs1_b0_val == -86, rs2_b0_val == -128, rs1_b3_val == 32, rs2_b2_val == 2, rs2_b1_val == 1, rs1_b6_val == 0, rs1_b4_val == -5
// opcode: pasub.b ; op1:x25; op2:x0; dest:x15; op1val:0xfb0003fb2009f8aa;  op2val:0xc0dfefaa80020180
TEST_RR_OP(pasub.b, x15, x25, x0, 0x0000000000000000, 0xfb0003fb2009f8aa, 0xc0dfefaa80020180, x1, 3*XLEN/8, x13)

inst_20:// rs1==x10, rs2==x31, rd==x4, rs1_b1_val == -128, rs2_b0_val == -1, rs2_b6_val == 0, rs2_b1_val == 16
// opcode: pasub.b ; op1:x10; op2:x31; dest:x4; op1val:0x5f6093fdffc8008;  op2val:0xc0000740558010ff
TEST_RR_OP(pasub.b, x4, x10, x31, 0x0000000000000000, 0x5f6093fdffc8008, 0xc0000740558010ff, x1, 4*XLEN/8, x13)

inst_21:// rs1==x21, rs2==x11, rd==x7, rs1_b1_val == -1, rs1_b6_val == -33, rs2_b4_val == 1
// opcode: pasub.b ; op1:x21; op2:x11; dest:x7; op1val:0xc0dff805fe03ffdf;  op2val:0xef06c00101060301
TEST_RR_OP(pasub.b, x7, x21, x11, 0x0000000000000000, 0xc0dff805fe03ffdf, 0xef06c00101060301, x1, 5*XLEN/8, x13)

inst_22:// rs1==x16, rs2==x22, rd==x20, rs1_b1_val == 127, rs1_b3_val == -3, rs2_b7_val == 4, rs2_b1_val == -1
// opcode: pasub.b ; op1:x16; op2:x22; dest:x20; op1val:0x6dff73ffdbf7fc0;  op2val:0x4f800fa3f05ffbf
TEST_RR_OP(pasub.b, x20, x16, x22, 0x0000000000000000, 0x6dff73ffdbf7fc0, 0x4f800fa3f05ffbf, x1, 6*XLEN/8, x13)

inst_23:// rs1==x31, rs2==x17, rd==x12, rs1_b1_val == 16, rs1_b4_val == 16, rs2_b5_val == 127, rs1_b5_val == 16, rs1_b6_val == -17
// opcode: pasub.b ; op1:x31; op2:x17; dest:x12; op1val:0x3ef1010200410fa;  op2val:0x20407f06dffefc05
TEST_RR_OP(pasub.b, x12, x31, x17, 0x0000000000000000, 0x3ef1010200410fa, 0x20407f06dffefc05, x1, 7*XLEN/8, x13)

inst_24:// rs1==x6, rs2==x4, rd==x24, rs1_b1_val == 32, rs2_b7_val == 85, rs1_b6_val == -65, rs2_b2_val == 4, rs2_b6_val == -1
// opcode: pasub.b ; op1:x6; op2:x4; dest:x24; op1val:0x7bff8f8fa062005;  op2val:0x55fffac080040602
TEST_RR_OP(pasub.b, x24, x6, x4, 0x0000000000000000, 0x7bff8f8fa062005, 0x55fffac080040602, x1, 8*XLEN/8, x13)

inst_25:// rs1==x24, rs2==x30, rd==x5, rs1_b1_val == 64, rs1_b4_val == -33, rs2_b0_val == 8, rs2_b5_val == 8, rs2_b2_val == -5, rs1_b7_val == -9
// opcode: pasub.b ; op1:x24; op2:x30; dest:x5; op1val:0xf701fedffdf640f9;  op2val:0xfc04080103fbf908
TEST_RR_OP(pasub.b, x5, x24, x30, 0x0000000000000000, 0xf701fedffdf640f9, 0xfc04080103fbf908, x1, 9*XLEN/8, x13)

inst_26:// rs1==x2, rs2==x29, rd==x11, rs1_b1_val == -2, rs2_b4_val == 16, rs1_b2_val == 1, rs1_b3_val == -128, rs2_b7_val == -65
// opcode: pasub.b ; op1:x2; op2:x29; dest:x11; op1val:0xfbfc01558001fefd;  op2val:0xbfef0410f6405540
TEST_RR_OP(pasub.b, x11, x2, x29, 0x0000000000000000, 0xfbfc01558001fefd, 0xbfef0410f6405540, x1, 10*XLEN/8, x3)

inst_27:// rs1==x4, rs2==x12, rd==x6, rs1_b1_val == -3, rs1_b5_val == 127, rs1_b2_val == 32, rs2_b4_val == -5, rs2_b0_val == -33
// opcode: pasub.b ; op1:x4; op2:x12; dest:x6; op1val:0xf9097fc0fa20fd04;  op2val:0x20df7ffbfc0905df
TEST_RR_OP(pasub.b, x6, x4, x12, 0x0000000000000000, 0xf9097fc0fa20fd04, 0x20df7ffbfc0905df, x1, 11*XLEN/8, x3)

inst_28:// rs1==x23, rs2==x9, rd==x22, rs1_b1_val == -17, rs1_b2_val == -33, rs2_b5_val == -128, rs1_b7_val == -2
// opcode: pasub.b ; op1:x23; op2:x9; dest:x22; op1val:0xfefa09f905dfefc0;  op2val:0xef07803ff83ffffc
TEST_RR_OP(pasub.b, x22, x23, x9, 0x0000000000000000, 0xfefa09f905dfefc0, 0xef07803ff83ffffc, x1, 12*XLEN/8, x3)

inst_29:// rs1==x7, rs2==x25, rd==x14, rs1_b1_val == -33, rs2_b0_val == 0, rs1_b3_val == -9, rs2_b3_val == -9, rs2_b2_val == 32, rs2_b5_val == -5, rs1_b7_val == 16, rs1_b4_val == -17
// opcode: pasub.b ; op1:x7; op2:x25; dest:x14; op1val:0x10df09eff7fcdfff;  op2val:0x10fcfbf9f720bf00
TEST_RR_OP(pasub.b, x14, x7, x25, 0x0000000000000000, 0x10df09eff7fcdfff, 0x10fcfbf9f720bf00, x1, 13*XLEN/8, x3)

inst_30:// rs1==x20, rs2==x21, rd==x23, rs2_b4_val == -65, rs2_b1_val == -3, rs1_b3_val == 64, rs2_b3_val == -2, rs2_b6_val == 127, rs1_b6_val == 2
// opcode: pasub.b ; op1:x20; op2:x21; dest:x23; op1val:0xf80240f84003dfbf;  op2val:0x107fefbffe3ffddf
TEST_RR_OP(pasub.b, x23, x20, x21, 0x0000000000000000, 0xf80240f84003dfbf, 0x107fefbffe3ffddf, x1, 14*XLEN/8, x3)

inst_31:// rs1==x30, rs2==x23, rd==x17, rs2_b4_val == 85, rs2_b3_val == 2, rs2_b6_val == -2, rs2_b7_val == -1, rs2_b1_val == 32
// opcode: pasub.b ; op1:x30; op2:x23; dest:x17; op1val:0xf8ef03033f201010;  op2val:0xfffe025502062000
TEST_RR_OP(pasub.b, x17, x30, x23, 0x0000000000000000, 0xf8ef03033f201010, 0xfffe025502062000, x1, 15*XLEN/8, x3)

inst_32:// rs2_b5_val == -1, rs1_b7_val == 2, rs2_b3_val == 8
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x210aadffffaf708;  op2val:0xf806ff0108f6f605
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x210aadffffaf708, 0xf806ff0108f6f605, x1, 16*XLEN/8, x3)

inst_33:// rs2_b5_val == 16, rs2_b6_val == 32, rs1_b4_val == 0, rs1_b5_val == -17, rs1_b7_val == 32, rs2_b7_val == -33, rs2_b3_val == -1
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x20bfef0020aa7ffd;  op2val:0xdf2010aaff05f900
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x20bfef0020aa7ffd, 0xdf2010aaff05f900, x1, 17*XLEN/8, x3)

inst_34:// rs2_b5_val == 32, rs2_b7_val == 127, rs2_b3_val == -3
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x6f900df033ffa20;  op2val:0x7f032003fdfff6bf
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x6f900df033ffa20, 0x7f032003fdfff6bf, x1, 18*XLEN/8, x3)

inst_35:// rs2_b5_val == -2, rs1_b7_val == 4, rs2_b0_val == -5
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x4f706fa0704f6df;  op2val:0x504fe3fc020effb
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x4f706fa0704f6df, 0x504fe3fc020effb, x1, 19*XLEN/8, x3)

inst_36:// rs2_b5_val == -9, rs1_b7_val == -3, rs2_b3_val == 4, rs2_b7_val == -128
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfdfe3fdf10aaff00;  op2val:0x8000f7fb04fafd08
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfdfe3fdf10aaff00, 0x8000f7fb04fafd08, x1, 20*XLEN/8, x3)

inst_37:// rs2_b5_val == 85, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf0655aafe03f800;  op2val:0x101055f84006fdf6
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xbf0655aafe03f800, 0x101055f84006fdf6, x1, 21*XLEN/8, x3)

inst_38:// rs2_b5_val == -86, rs1_b2_val == rs2_b2_val, rs2_b2_val == -65, rs1_b4_val == -9, rs1_b6_val == 8
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x60809f710bf7f05;  op2val:0x4040aa10ffbf0701
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x60809f710bf7f05, 0x4040aa10ffbf0701, x1, 22*XLEN/8, x3)

inst_39:// rs2_b6_val == -128, rs1_b5_val == 2, rs2_b7_val == -9, rs2_b3_val == -65
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x4fb02faf81005fc;  op2val:0xf78006f6bf3f5508
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x4fb02faf81005fc, 0xf78006f6bf3f5508, x1, 23*XLEN/8, x3)

inst_40:// rs2_b6_val == 2, rs2_b3_val == -5, rs2_b2_val == -17, rs1_b5_val == -33, rs1_b4_val == 8
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x120df08f8fa55bf;  op2val:0xc002c0bffbeff909
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x120df08f8fa55bf, 0xc002c0bffbeff909, x1, 24*XLEN/8, x3)

inst_41:// rs2_b6_val == -3, rs1_b1_val == rs2_b1_val, rs1_b7_val == -17, rs1_b2_val == -9
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xeff6df0105f7bffb;  op2val:0xf8fddf20fd06bf03
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xeff6df0105f7bffb, 0xf8fddf20fd06bf03, x1, 25*XLEN/8, x3)

inst_42:// rs2_b6_val == -5, rs2_b7_val == 1
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f0808c00605f9fc;  op2val:0x1fbfc06f60506c0
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7f0808c00605f9fc, 0x1fbfc06f60506c0, x1, 26*XLEN/8, x3)

inst_43:// rs1_b1_val == -86, rs1_b5_val == -5
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x40fafb55f8f8aa05;  op2val:0x55f755c0f64010fa
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x40fafb55f8f8aa05, 0x55f755c0f64010fa, x1, 27*XLEN/8, x3)

inst_44:// rs1_b2_val == -128, rs2_b1_val == 8
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f7ffcfbfa800800;  op2val:0x1df0201ff2008fb
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7f7ffcfbfa800800, 0x1df0201ff2008fb, x1, 28*XLEN/8, x3)

inst_45:// rs1_b6_val == 64, rs1_b4_val == 2, rs1_b7_val == 85, rs1_b3_val == -86
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x55400502aa7f0609;  op2val:0x40ff0705063ff8fb
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x55400502aa7f0609, 0x40ff0705063ff8fb, x1, 29*XLEN/8, x3)

inst_46:// rs1_b6_val == -3, rs1_b5_val == -128
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8fd8002f87f0804;  op2val:0x5c0fcfc05030002
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xf8fd8002f87f0804, 0x5c0fcfc05030002, x1, 30*XLEN/8, x3)

inst_47:// rs1_b6_val == 85, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9558005aa01faf6;  op2val:0x021055fb04c0df
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xf9558005aa01faf6, 0x021055fb04c0df, x1, 31*XLEN/8, x3)

inst_48:// rs1_b7_val == 8, rs1_b3_val == -17
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x8faf610eff980fb;  op2val:0xfc2005083fff0002
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x8faf610eff980fb, 0xfc2005083fff0002, x1, 32*XLEN/8, x3)

inst_49:// rs1_b7_val == -33, rs2_b4_val == 0
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xdff9c0fc050905bf;  op2val:0x1084000c0023fbf
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xdff9c0fc050905bf, 0x1084000c0023fbf, x1, 33*XLEN/8, x3)

inst_50:// rs2_b0_val == 4, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbf7053f03f85501;  op2val:0xf7100907ff060104
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfbf7053f03f85501, 0xf7100907ff060104, x1, 34*XLEN/8, x3)

inst_51:// rs2_b0_val == 16, rs2_b1_val == 4
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa04aadffec009f7;  op2val:0x3f80ff5504f80410
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfa04aadffec009f7, 0x3f80ff5504f80410, x1, 35*XLEN/8, x3)

inst_52:// rs1_b2_val == -1, rs2_b1_val == 127, rs2_b2_val == -9, rs2_b4_val == -17
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7ff81009f6ffef09;  op2val:0x3f608ef04f77f03
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7ff81009f6ffef09, 0x3f608ef04f77f03, x1, 36*XLEN/8, x3)

inst_53:// rs2_b6_val == -65, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x4002c0ff05fcf6fb;  op2val:0xf6bfefdf80ff10f9
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x4002c0ff05fcf6fb, 0xf6bfefdf80ff10f9, x1, 37*XLEN/8, x3)

inst_54:// rs2_b0_val == 32, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x40ffef0107fe3f00;  op2val:0xfb7fff80f93f3f20
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x40ffef0107fe3f00, 0xfb7fff80f93f3f20, x1, 38*XLEN/8, x3)

inst_55:// rs2_b6_val == -86, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f01fa07aaf70303;  op2val:0xdfaaefbffa035520
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7f01fa07aaf70303, 0xdfaaefbffa035520, x1, 39*XLEN/8, x3)

inst_56:// rs2_b0_val == -9, rs2_b1_val == -5, rs1_b2_val == 64, rs2_b7_val == -86
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x40fa10eff94006df;  op2val:0xaafa55aa08fcfbf7
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x40fa10eff94006df, 0xaafa55aa08fcfbf7, x1, 40*XLEN/8, x3)

inst_57:// rs2_b7_val == 8, rs1_b3_val == -5, rs2_b2_val == 1, rs2_b1_val == -128
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6fe3ffffb404003;  op2val:0x803c0f6fb018007
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xf6fe3ffffb404003, 0x803c0f6fb018007, x1, 41*XLEN/8, x3)

inst_58:// rs2_b0_val == 85, rs2_b4_val == 2
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa03aa1000df0240;  op2val:0xfcaac00207fd0755
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xaa03aa1000df0240, 0xfcaac00207fd0755, x1, 42*XLEN/8, x3)

inst_59:// rs1_b3_val == 2, rs2_b2_val == -33, rs2_b4_val == -2, rs2_b7_val == -2
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfeaa3f040206fbaa;  op2val:0xfe0255fe02dff955
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfeaa3f040206fbaa, 0xfe0255fe02dff955, x1, 43*XLEN/8, x3)

inst_60:// rs1_b3_val == 4, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfe014000040504fb;  op2val:0xef04f9fcf6dfeffb
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfe014000040504fb, 0xef04f9fcf6dfeffb, x1, 44*XLEN/8, x3)

inst_61:// rs2_b1_val == -9, rs1_b4_val == 32, rs1_b2_val == -3
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x6fcfc2008fdff05;  op2val:0x2faef3f3f07f710
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x6fcfc2008fdff05, 0x2faef3f3f07f710, x1, 45*XLEN/8, x3)

inst_62:// rs2_b2_val == 127, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xaafe09fa20037f20;  op2val:0x40df3f01107f05fe
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xaafe09fa20037f20, 0x40df3f01107f05fe, x1, 46*XLEN/8, x3)

inst_63:// rs1_b3_val == -65, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x808f9efbff9aa06;  op2val:0x43f0702f801fd7f
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x808f9efbff9aa06, 0x43f0702f801fd7f, x1, 47*XLEN/8, x3)

inst_64:// rs1_b3_val == 85, rs2_b2_val == 16
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x80fa3ffe55f8f720;  op2val:0x40fbfa030310f605
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x80fa3ffe55f8f720, 0x40fbfa030310f605, x1, 48*XLEN/8, x3)

inst_65:// rs1_b4_val == 127, rs1_b5_val == -1
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfef7ff7f0555f9ff;  op2val:0x402f601f8007fbf
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfef7ff7f0555f9ff, 0x402f601f8007fbf, x1, 49*XLEN/8, x3)

inst_66:// rs1_b4_val == 64, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc4001400104dfff;  op2val:0x9fff7f9f701fcfb
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfc4001400104dfff, 0x9fff7f9f701fcfb, x1, 50*XLEN/8, x3)

inst_67:// rs1_b4_val == -65, rs1_b5_val == -3
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0fffdbffec00207;  op2val:0x20ef07aa5509df04
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xc0fffdbffec00207, 0x20ef07aa5509df04, x1, 51*XLEN/8, x3)

inst_68:// rs2_b3_val == 32, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x2fddf03f705bf09;  op2val:0xc07f04fa2004fcfd
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x2fddf03f705bf09, 0xc07f04fa2004fcfd, x1, 52*XLEN/8, x3)

inst_69:// rs1_b5_val == 4, rs2_b3_val == -86
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x45504efc0bfaaf7;  op2val:0x20df80f9aa7faa03
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x45504efc0bfaaf7, 0x20df80f9aa7faa03, x1, 53*XLEN/8, x3)

inst_70:// rs2_b1_val == 64, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x9ff10aaaa1008fc;  op2val:0x8f9f840f8fc4080
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x9ff10aaaa1008fc, 0x8f9f840f8fc4080, x1, 54*XLEN/8, x3)

inst_71:// rs2_b4_val == -1, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x10fefedf0710df07;  op2val:0x3f03c0ff55402007
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x10fefedf0710df07, 0x3f03c0ff55402007, x1, 55*XLEN/8, x3)

inst_72:// rs1_b2_val == -5, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x40000502fcfb4006;  op2val:0xf904bff80304bfef
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x40000502fcfb4006, 0xf904bff80304bfef, x1, 56*XLEN/8, x3)

inst_73:// rs2_b4_val == 4, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7effaef3ffaffff;  op2val:0xf709ff04f60400c0
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7effaef3ffaffff, 0xf709ff04f60400c0, x1, 57*XLEN/8, x3)

inst_74:// rs1_b2_val == -17, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x5ff0803f9efc0fa;  op2val:0xfc08f7fa07003fc0
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x5ff0803f9efc0fa, 0xfc08f7fa07003fc0, x1, 58*XLEN/8, x3)

inst_75:// rs1_b6_val == -128, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf780c0fb404001fb;  op2val:0xf73f060507fc093f
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xf780c0fb404001fb, 0xf73f060507fc093f, x1, 59*XLEN/8, x3)

inst_76:// rs2_b2_val == 85, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xf8f8f93fc008fb55;  op2val:0xc0fa03103f55f802
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xf8f8f93fc008fb55, 0xc0fa03103f55f802, x1, 60*XLEN/8, x3)

inst_77:// rs2_b4_val == -3, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xff01f6fb2080fa;  op2val:0x40f840fd80c0ff07
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xff01f6fb2080fa, 0x40f840fd80c0ff07, x1, 61*XLEN/8, x3)

inst_78:// rs2_b4_val == -9, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xfceffc01fbfdf800;  op2val:0xdf08bff709aa0007
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xfceffc01fbfdf800, 0xdf08bff709aa0007, x1, 62*XLEN/8, x3)

inst_79:// rs2_b1_val == -2, 
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xef07ffdffa09ef09;  op2val:0xf606aa8020aafe3f
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xef07ffdffa09ef09, 0xf606aa8020aafe3f, x1, 63*XLEN/8, x3)

inst_80:// rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 2, rs2_b1_val == 85, rs1_b6_val == -9, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b7_val == rs2_b7_val, rs2_b5_val == -65, rs1_b3_val == rs2_b3_val, rs1_b3_val == 0, rs2_b3_val == 0, rs2_b6_val == 8
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0f7033f00fe007f;  op2val:0xc008bf3f003f5502
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0xc0f7033f00fe007f, 0xc008bf3f003f5502, x1, 64*XLEN/8, x3)

inst_81:// rs1_b0_val == 16, rs1_b3_val == 127, rs1_b6_val == 32, rs2_b4_val == -33, rs2_b1_val == -17, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b5_val == rs2_b5_val, rs2_b2_val == -128, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val == 1, rs1_b2_val == 8, rs2_b7_val == -5, rs2_b3_val == 1
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x120c0067f080610;  op2val:0xfbf9c0df0180ef09
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x120c0067f080610, 0xfbf9c0df0180ef09, x1, 65*XLEN/8, x3)

inst_82:// rs1_b0_val == -65, rs2_b0_val == 127, rs1_b1_val == -65, rs2_b6_val == 85, rs2_b3_val == -17, rs1_b4_val == -1, rs2_b2_val == 64, rs2_b4_val == 127, rs2_b7_val == 64
// opcode: pasub.b ; op1:x30; op2:x29; dest:x31; op1val:0x7ff620ff0808bfbf;  op2val:0x4055037fef40c07f
TEST_RR_OP(pasub.b, x31, x30, x29, 0x0000000000000000, 0x7ff620ff0808bfbf, 0x4055037fef40c07f, x1, 66*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 67*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
