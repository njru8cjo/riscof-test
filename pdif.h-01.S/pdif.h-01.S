
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 05:56:28 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv32ip_cgf/p10.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdif.h instruction of the RISC-V RV32PZicsr extension for the pdif.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdif.h)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x0, rd==x6, rs1_h0_val == -32768, rs2_h0_val == -513, rs2_h1_val == 32767, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val
// opcode: pdif.h ; op1:x24; op2:x0; dest:x6; op1val:0x068000;  op2val:0x7ffffdff
TEST_RR_OP(pdif.h, x6, x24, x0, 0x00000000, 0x068000, 0x7ffffdff, x5, 0*XLEN/8, x10)

inst_1:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -5, rs2_h1_val == -2
// opcode: pdif.h ; op1:x4; op2:x4; dest:x4; op1val:0xc000ffff;  op2val:0xfffefffb
TEST_RR_OP(pdif.h, x4, x4, x4, 0x00000000, 0xc000ffff, 0xfffefffb, x5, 1*XLEN/8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x12, rs1_h0_val == 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs1_h1_val == -4097, rs2_h0_val == 2048
// opcode: pdif.h ; op1:x15; op2:x15; dest:x12; op1val:0xefff0000;  op2val:0x4000800
TEST_RR_OP(pdif.h, x12, x15, x15, 0x00000000, 0xefff0000, 0x4000800, x5, 2*XLEN/8, x10)

inst_3:
// rs2 == rd != rs1, rs1==x29, rs2==x16, rd==x16, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -1025, rs2_h0_val == 8, rs1_h1_val == -2
// opcode: pdif.h ; op1:x29; op2:x16; dest:x16; op1val:0xfffe0001;  op2val:0xfbff0008
TEST_RR_OP(pdif.h, x16, x29, x16, 0x00000000, 0xfffe0001, 0xfbff0008, x5, 3*XLEN/8, x10)

inst_4:
// rs1 == rd != rs2, rs1==x2, rs2==x6, rd==x2, rs1_h0_val == 32767, rs2_h0_val == 128, rs1_h1_val == -33, rs2_h1_val == -4097
// opcode: pdif.h ; op1:x2; op2:x6; dest:x2; op1val:0xffdf7fff;  op2val:0xefff0080
TEST_RR_OP(pdif.h, x2, x2, x6, 0x00000000, 0xffdf7fff, 0xefff0080, x5, 4*XLEN/8, x10)

inst_5:
// rs1==x16, rs2==x8, rd==x27, rs1_h0_val == 2, rs2_h1_val == 64, rs1_h1_val == -257
// opcode: pdif.h ; op1:x16; op2:x8; dest:x27; op1val:0xfeff0002;  op2val:0x400005
TEST_RR_OP(pdif.h, x27, x16, x8, 0x00000000, 0xfeff0002, 0x400005, x5, 5*XLEN/8, x10)

inst_6:
// rs1==x28, rs2==x2, rd==x29, rs1_h0_val == 4, rs2_h0_val == 16384, rs1_h1_val == -21846
// opcode: pdif.h ; op1:x28; op2:x2; dest:x29; op1val:0xaaaa0004;  op2val:0x404000
TEST_RR_OP(pdif.h, x29, x28, x2, 0x00000000, 0xaaaa0004, 0x404000, x5, 6*XLEN/8, x10)

inst_7:
// rs1==x1, rs2==x26, rd==x21, rs1_h0_val == 8, rs2_h1_val == 4096, rs1_h1_val == 128
// opcode: pdif.h ; op1:x1; op2:x26; dest:x21; op1val:0x800008;  op2val:0x10000005
TEST_RR_OP(pdif.h, x21, x1, x26, 0x00000000, 0x800008, 0x10000005, x5, 7*XLEN/8, x10)

inst_8:
// rs1==x23, rs2==x11, rd==x3, rs1_h0_val == 16, rs2_h0_val == 8192
// opcode: pdif.h ; op1:x23; op2:x11; dest:x3; op1val:0x090010;  op2val:0x7fff2000
TEST_RR_OP(pdif.h, x3, x23, x11, 0x00000000, 0x090010, 0x7fff2000, x5, 8*XLEN/8, x10)

inst_9:
// rs1==x7, rs2==x27, rd==x26, rs1_h0_val == 32, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 4, rs2_h0_val == -257, rs1_h1_val == 21845
// opcode: pdif.h ; op1:x7; op2:x27; dest:x26; op1val:0x55550020;  op2val:0x04feff
TEST_RR_OP(pdif.h, x26, x7, x27, 0x00000000, 0x55550020, 0x04feff, x5, 9*XLEN/8, x10)

inst_10:
// rs1==x25, rs2==x21, rd==x19, rs1_h0_val == 64, 
// opcode: pdif.h ; op1:x25; op2:x21; dest:x19; op1val:0xfffc0040;  op2val:0x7fff2000
TEST_RR_OP(pdif.h, x19, x25, x21, 0x00000000, 0xfffc0040, 0x7fff2000, x5, 10*XLEN/8, x10)

inst_11:
// rs1==x8, rs2==x12, rd==x22, rs1_h0_val == 128, rs1_h1_val == 2, rs2_h0_val == -21846
// opcode: pdif.h ; op1:x8; op2:x12; dest:x22; op1val:0x020080;  op2val:0x40aaaa
TEST_RR_OP(pdif.h, x22, x8, x12, 0x00000000, 0x020080, 0x40aaaa, x5, 11*XLEN/8, x10)

inst_12:
// rs1==x9, rs2==x18, rd==x23, rs1_h0_val == 256, rs2_h1_val == 8192, rs2_h0_val == -4097
// opcode: pdif.h ; op1:x9; op2:x18; dest:x23; op1val:0x55550100;  op2val:0x2000efff
TEST_RR_OP(pdif.h, x23, x9, x18, 0x00000000, 0x55550100, 0x2000efff, x5, 12*XLEN/8, x10)

inst_13:
// rs1==x3, rs2==x20, rd==x15, rs1_h0_val == 512, 
// opcode: pdif.h ; op1:x3; op2:x20; dest:x15; op1val:0x800200;  op2val:0x050006
TEST_RR_OP(pdif.h, x15, x3, x20, 0x00000000, 0x800200, 0x050006, x5, 13*XLEN/8, x10)

inst_14:
// rs1==x6, rs2==x14, rd==x25, rs1_h0_val == 1024, rs2_h1_val == -33, rs1_h1_val == -16385, rs2_h0_val == -9
// opcode: pdif.h ; op1:x6; op2:x14; dest:x25; op1val:0xbfff0400;  op2val:0xffdffff7
TEST_RR_OP(pdif.h, x25, x6, x14, 0x00000000, 0xbfff0400, 0xffdffff7, x5, 14*XLEN/8, x10)

inst_15:
// rs1==x31, rs2==x19, rd==x11, rs1_h0_val == 2048, rs1_h1_val == -8193
// opcode: pdif.h ; op1:x31; op2:x19; dest:x11; op1val:0xdfff0800;  op2val:0xfffcc000
TEST_RR_OP(pdif.h, x11, x31, x19, 0x00000000, 0xdfff0800, 0xfffcc000, x5, 15*XLEN/8, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x21, rs2==x24, rd==x10, rs1_h0_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -2, rs1_h1_val == 1
// opcode: pdif.h ; op1:x21; op2:x24; dest:x10; op1val:0x011000;  op2val:0xfffafffe
TEST_RR_OP(pdif.h, x10, x21, x24, 0x00000000, 0x011000, 0xfffafffe, x2, 0*XLEN/8, x4)

inst_17:
// rs1==x0, rs2==x13, rd==x1, rs1_h0_val == 8192, rs1_h1_val == -17, rs2_h0_val == -2049
// opcode: pdif.h ; op1:x0; op2:x13; dest:x1; op1val:0xffef2000;  op2val:0xfffaf7ff
TEST_RR_OP(pdif.h, x1, x0, x13, 0x00000000, 0xffef2000, 0xfffaf7ff, x2, 1*XLEN/8, x4)

inst_18:
// rs1==x10, rs2==x7, rd==x13, rs1_h0_val == 16384, rs2_h1_val == 512, rs2_h0_val == -17
// opcode: pdif.h ; op1:x10; op2:x7; dest:x13; op1val:0xc0004000;  op2val:0x200ffef
TEST_RR_OP(pdif.h, x13, x10, x7, 0x00000000, 0xc0004000, 0x200ffef, x2, 2*XLEN/8, x4)

inst_19:
// rs1==x12, rs2==x17, rd==x7, rs1_h0_val == -2, rs1_h1_val == 0
// opcode: pdif.h ; op1:x12; op2:x17; dest:x7; op1val:0x00fffe;  op2val:0x09feff
TEST_RR_OP(pdif.h, x7, x12, x17, 0x00000000, 0x00fffe, 0x09feff, x2, 3*XLEN/8, x4)

inst_20:
// rs1==x22, rs2==x28, rd==x9, rs1_h0_val == -3, rs2_h1_val == 256, rs1_h1_val == 1024
// opcode: pdif.h ; op1:x22; op2:x28; dest:x9; op1val:0x400fffd;  op2val:0x100fdff
TEST_RR_OP(pdif.h, x9, x22, x28, 0x00000000, 0x400fffd, 0x100fdff, x2, 4*XLEN/8, x4)

inst_21:
// rs1==x20, rs2==x10, rd==x18, rs1_h0_val == -5, rs2_h0_val == 1, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: pdif.h ; op1:x20; op2:x10; dest:x18; op1val:0x02fffb;  op2val:0x070001
TEST_RR_OP(pdif.h, x18, x20, x10, 0x00000000, 0x02fffb, 0x070001, x2, 5*XLEN/8, x4)

inst_22:
// rs1==x5, rs2==x1, rd==x8, rs1_h0_val == -9, 
// opcode: pdif.h ; op1:x5; op2:x1; dest:x8; op1val:0xffdffff7;  op2val:0xfffe4000
TEST_RR_OP(pdif.h, x8, x5, x1, 0x00000000, 0xffdffff7, 0xfffe4000, x2, 6*XLEN/8, x4)

inst_23:
// rs1==x27, rs2==x3, rd==x31, rs1_h0_val == -17, rs1_h1_val == -9, rs2_h0_val == 0
// opcode: pdif.h ; op1:x27; op2:x3; dest:x31; op1val:0xfff7ffef;  op2val:0xfffa0000
TEST_RR_OP(pdif.h, x31, x27, x3, 0x00000000, 0xfff7ffef, 0xfffa0000, x2, 7*XLEN/8, x4)

inst_24:
// rs1==x11, rs2==x29, rd==x30, rs1_h0_val == -33, 
// opcode: pdif.h ; op1:x11; op2:x29; dest:x30; op1val:0x00ffdf;  op2val:0xfffc2000
TEST_RR_OP(pdif.h, x30, x11, x29, 0x00000000, 0x00ffdf, 0xfffc2000, x2, 8*XLEN/8, x4)

inst_25:
// rs1==x14, rs2==x5, rd==x17, rs1_h0_val == -65, rs2_h1_val == 16
// opcode: pdif.h ; op1:x14; op2:x5; dest:x17; op1val:0x07ffbf;  op2val:0x100000
TEST_RR_OP(pdif.h, x17, x14, x5, 0x00000000, 0x07ffbf, 0x100000, x2, 9*XLEN/8, x4)

inst_26:
// rs1==x18, rs2==x30, rd==x14, rs1_h0_val == -129, rs2_h0_val == -33
// opcode: pdif.h ; op1:x18; op2:x30; dest:x14; op1val:0xefffff7f;  op2val:0xfff8ffdf
TEST_RR_OP(pdif.h, x14, x18, x30, 0x00000000, 0xefffff7f, 0xfff8ffdf, x2, 10*XLEN/8, x4)

inst_27:
// rs1==x19, rs2==x22, rd==x28, rs1_h0_val == -257, rs1_h1_val == 2048
// opcode: pdif.h ; op1:x19; op2:x22; dest:x28; op1val:0x800feff;  op2val:0x090080
TEST_RR_OP(pdif.h, x28, x19, x22, 0x00000000, 0x800feff, 0x090080, x2, 11*XLEN/8, x4)

inst_28:
// rs1==x17, rs2==x23, rd==x24, rs1_h0_val == -513, 
// opcode: pdif.h ; op1:x17; op2:x23; dest:x24; op1val:0xfffefdff;  op2val:0xfff60001
TEST_RR_OP(pdif.h, x24, x17, x23, 0x00000000, 0xfffefdff, 0xfff60001, x2, 12*XLEN/8, x4)

inst_29:
// rs1==x13, rs2==x25, rd==x5, rs1_h0_val == -1025, 
// opcode: pdif.h ; op1:x13; op2:x25; dest:x5; op1val:0x800fbff;  op2val:0x2000fdff
TEST_RR_OP(pdif.h, x5, x13, x25, 0x00000000, 0x800fbff, 0x2000fdff, x2, 13*XLEN/8, x4)

inst_30:
// rs1==x26, rs2==x9, rd==x0, rs1_h0_val == -2049, rs1_h1_val == 256
// opcode: pdif.h ; op1:x26; op2:x9; dest:x0; op1val:0x100f7ff;  op2val:0xeffffffb
TEST_RR_OP(pdif.h, x0, x26, x9, 0x00000000, 0x100f7ff, 0xeffffffb, x2, 14*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x30, rs2==x31, rd==x20, rs1_h0_val == -4097, rs1_h1_val == -1
// opcode: pdif.h ; op1:x30; op2:x31; dest:x20; op1val:0xffffefff;  op2val:0x1000800
TEST_RR_OP(pdif.h, x20, x30, x31, 0x00000000, 0xffffefff, 0x1000800, x1, 0*XLEN/8, x3)

inst_32:
// rs1_h0_val == -8193, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff;  op2val:0xfffafff7
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x80dfff, 0xfffafff7, x1, 1*XLEN/8, x3)

inst_33:
// rs1_h0_val == -16385, rs1_h1_val == -5, rs2_h1_val == -257
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbbfff;  op2val:0xfeff0001
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfffbbfff, 0xfeff0001, x1, 2*XLEN/8, x3)

inst_34:
// rs1_h0_val == 21845, rs2_h0_val == -1025
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x1005555;  op2val:0x05fbff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x1005555, 0x05fbff, x1, 3*XLEN/8, x3)

inst_35:
// rs2_h1_val == -3, rs2_h0_val == -129, rs1_h1_val == 32
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x20f7ff;  op2val:0xfffdff7f
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x20f7ff, 0xfffdff7f, x1, 4*XLEN/8, x3)

inst_36:
// rs2_h1_val == -5, rs2_h0_val == 512
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffa;  op2val:0xfffb0200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xffeffffa, 0xfffb0200, x1, 5*XLEN/8, x3)

inst_37:
// rs2_h1_val == -9, rs1_h1_val == -65
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef;  op2val:0xfff7fffb
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xffbfffef, 0xfff7fffb, x1, 6*XLEN/8, x3)

inst_38:
// rs2_h1_val == -17, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x01fff7;  op2val:0xffef3fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x01fff7, 0xffef3fff, x1, 7*XLEN/8, x3)

inst_39:
// rs2_h1_val == -65, rs2_h0_val == -32768
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf;  op2val:0xffbf8000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xffdfffdf, 0xffbf8000, x1, 8*XLEN/8, x3)

inst_40:
// rs2_h1_val == -129, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080;  op2val:0xff7f0005
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xffbf0080, 0xff7f0005, x1, 9*XLEN/8, x3)

inst_41:
// rs2_h1_val == -513, rs1_h1_val == -3
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100;  op2val:0xfdff0080
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfffd0100, 0xfdff0080, x1, 10*XLEN/8, x3)

inst_42:
// rs2_h1_val == -2049, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffbf;  op2val:0xf7ff0000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfffbffbf, 0xf7ff0000, x1, 11*XLEN/8, x3)

inst_43:
// rs2_h1_val == -8193, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60009;  op2val:0xdffffffa
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfff60009, 0xdffffffa, x1, 12*XLEN/8, x3)

inst_44:
// rs2_h1_val == -16385, rs1_h1_val == 16384
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000040;  op2val:0xbfff0800
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x40000040, 0xbfff0800, x1, 13*XLEN/8, x3)

inst_45:
// rs2_h1_val == 21845, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000003;  op2val:0x5555fdff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x40000003, 0x5555fdff, x1, 14*XLEN/8, x3)

inst_46:
// rs2_h1_val == -21846, rs1_h1_val == 64
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x400100;  op2val:0xaaaafff9
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x400100, 0xaaaafff9, x1, 15*XLEN/8, x3)

inst_47:
// rs1_h0_val == rs2_h0_val, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fffff7f;  op2val:0xfffaff7f
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x3fffff7f, 0xfffaff7f, x1, 16*XLEN/8, x3)

inst_48:
// rs1_h1_val == rs2_h1_val, rs1_h1_val == 4096, rs2_h0_val == 4
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x10003fff;  op2val:0x10000004
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x10003fff, 0x10000004, x1, 17*XLEN/8, x3)

inst_49:
// rs1_h0_val == -21846, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaa;  op2val:0x100c000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x20aaaa, 0x100c000, x1, 18*XLEN/8, x3)

inst_50:
// rs1_h1_val == -32768, rs2_h0_val == -8193
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffa;  op2val:0xffefdfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x8000fffa, 0xffefdfff, x1, 19*XLEN/8, x3)

inst_51:
// rs1_h1_val == 32767, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0x3fff0008
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x7fffffff, 0x3fff0008, x1, 20*XLEN/8, x3)

inst_52:
// rs1_h1_val == 4, rs2_h0_val == 1024
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x04efff;  op2val:0xfff70400
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x04efff, 0xfff70400, x1, 21*XLEN/8, x3)

inst_53:
// rs1_h1_val == -513, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdffbfff;  op2val:0xfefffdff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfdffbfff, 0xfefffdff, x1, 22*XLEN/8, x3)

inst_54:
// rs1_h1_val == -1025, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffd;  op2val:0xffdf0003
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfbfffffd, 0xffdf0003, x1, 23*XLEN/8, x3)

inst_55:
// rs1_h1_val == -2049, rs2_h1_val == -32768
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf;  op2val:0x80000800
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xf7ffffdf, 0x80000800, x1, 24*XLEN/8, x3)

inst_56:
// rs2_h0_val == -1, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff5555;  op2val:0xf7ffffff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x3fff5555, 0xf7ffffff, x1, 25*XLEN/8, x3)

inst_57:
// rs2_h0_val == 32767, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa;  op2val:0x10007fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xdffffffa, 0x10007fff, x1, 26*XLEN/8, x3)

inst_58:
// rs2_h0_val == 2, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000006;  op2val:0xfff70002
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x4000006, 0xfff70002, x1, 27*XLEN/8, x3)

inst_59:
// rs2_h0_val == 16, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x021000;  op2val:0x20000010
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x021000, 0x20000010, x1, 28*XLEN/8, x3)

inst_60:
// rs2_h0_val == 32, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef;  op2val:0xfff70020
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfbffffef, 0xfff70020, x1, 29*XLEN/8, x3)

inst_61:
// rs2_h0_val == 64, rs2_h1_val == 32
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x800dfff;  op2val:0x200040
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x800dfff, 0x200040, x1, 30*XLEN/8, x3)

inst_62:
// rs2_h0_val == 256, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x20fffa;  op2val:0xfffd0100
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x20fffa, 0xfffd0100, x1, 31*XLEN/8, x3)

inst_63:
// rs2_h0_val == 4096, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffef;  op2val:0xdfff1000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x06ffef, 0xdfff1000, x1, 32*XLEN/8, x3)

inst_64:
// rs2_h0_val == -3, rs2_h1_val == 2
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x077fff;  op2val:0x02fffd
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x077fff, 0x02fffd, x1, 33*XLEN/8, x3)

inst_65:
// rs2_h0_val == -65, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000020;  op2val:0x03ffbf
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x4000020, 0x03ffbf, x1, 34*XLEN/8, x3)

inst_66:
// rs2_h0_val == -16385, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbff;  op2val:0x3fffbfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x3ffffbff, 0x3fffbfff, x1, 35*XLEN/8, x3)

inst_67:
// rs2_h0_val == 21845, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x40fff8;  op2val:0x065555
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x40fff8, 0x065555, x1, 36*XLEN/8, x3)

inst_68:
// rs1_h1_val == 8, rs2_h1_val == 8
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef;  op2val:0x08fff8
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x08ffef, 0x08fff8, x1, 37*XLEN/8, x3)

inst_69:
// rs1_h1_val == 16, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x100003;  op2val:0x55558000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x100003, 0x55558000, x1, 38*XLEN/8, x3)

inst_70:
// rs2_h1_val == -1, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff3fff;  op2val:0xffff0200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xbfff3fff, 0xffff0200, x1, 39*XLEN/8, x3)

inst_71:
// rs2_h1_val == 0, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0x000007
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xfffe0008, 0x000007, x1, 40*XLEN/8, x3)

inst_72:
// rs1_h1_val == 512, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef;  op2val:0x2000002
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x200ffef, 0x2000002, x1, 41*XLEN/8, x3)

inst_73:
// rs1_h1_val == 8192, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fbff;  op2val:0x20dfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x2000fbff, 0x20dfff, x1, 42*XLEN/8, x3)

inst_74:
// rs2_h1_val == 128, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff6;  op2val:0x80fff6
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x7ffffff6, 0x80fff6, x1, 43*XLEN/8, x3)

inst_75:
// rs2_h1_val == 16384, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000007;  op2val:0x4000bfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x8000007, 0x4000bfff, x1, 44*XLEN/8, x3)

inst_76:
// rs2_h1_val == 2048, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x02feff;  op2val:0x800efff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x02feff, 0x800efff, x1, 45*XLEN/8, x3)

inst_77:
// rs1_h1_val == -129, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0004;  op2val:0xfff60200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xff7f0004, 0xfff60200, x1, 46*XLEN/8, x3)

inst_78:
// rs2_h1_val == 1, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x02dfff;  op2val:0x01c000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x02dfff, 0x01c000, x1, 47*XLEN/8, x3)

inst_79:
// rs1_h0_val == -32768, rs2_h0_val == -513, rs2_h1_val == 32767, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x068000;  op2val:0x7ffffdff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0x068000, 0x7ffffdff, x1, 48*XLEN/8, x3)

inst_80:
// rs1_h0_val == 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs1_h1_val == -4097, rs2_h0_val == 2048
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000;  op2val:0x4000800
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xefff0000, 0x4000800, x1, 49*XLEN/8, x3)

inst_81:
// rs1_h0_val == 8192, rs1_h1_val == -17, rs2_h0_val == -2049
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef2000;  op2val:0xfffaf7ff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x00000000, 0xffef2000, 0xfffaf7ff, x1, 50*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 51*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
