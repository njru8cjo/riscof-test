
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdif.h instruction of the RISC-V RV64PZicsr extension for the pdif.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdif.h)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x22, rd==x5, rs1_h0_val == -32768, rs1_h2_val == -129, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -2049, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs1_h1_val == 1024, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -1, rs1_h3_val != rs2_h3_val, rs2_h3_val == 21845
// opcode: pdif.h ; op1:x0; op2:x22; dest:x5; op1val:0x04ff7f04008000;  op2val:0x5555fff6fffff7ff
TEST_RR_OP(pdif.h, x5, x0, x22, 0x0000000000000000, 0x04ff7f04008000, 0x5555fff6fffff7ff, x7, 0*XLEN/8, x9)

inst_1:
// rs2 == rd != rs1, rs1==x25, rs2==x28, rd==x28, rs1_h0_val == -1, rs1_h1_val == 0, rs2_h1_val == -5, rs2_h0_val == -257, rs1_h3_val == -32768, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs2_h3_val == -2049
// opcode: pdif.h ; op1:x25; op2:x28; dest:x28; op1val:0x8000c0000000ffff;  op2val:0xf7ffdffffffbfeff
TEST_RR_OP(pdif.h, x28, x25, x28, 0x0000000000000000, 0x8000c0000000ffff, 0xf7ffdffffffbfeff, x7, 1*XLEN/8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x29, rs1_h0_val == 0, rs1_h3_val == -5, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 1, rs1_h1_val == -3, rs2_h0_val == 32, rs1_h2_val == -17
// opcode: pdif.h ; op1:x30; op2:x30; dest:x29; op1val:0xfffbffeffffd0000;  op2val:0x03000700010020
TEST_RR_OP(pdif.h, x29, x30, x30, 0x0000000000000000, 0xfffbffeffffd0000, 0x03000700010020, x7, 2*XLEN/8, x9)

inst_3:
// rs1 == rd != rs2, rs1==x27, rs2==x26, rd==x27, rs1_h0_val == 1, rs1_h1_val == -513, rs2_h3_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -5, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == 1, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -21846
// opcode: pdif.h ; op1:x27; op2:x26; dest:x27; op1val:0x090001fdff0001;  op2val:0x020005aaaafffb
TEST_RR_OP(pdif.h, x27, x27, x26, 0x0000000000000000, 0x090001fdff0001, 0x020005aaaafffb, x7, 3*XLEN/8, x9)

inst_4:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h0_val == 32767, rs2_h1_val == 256, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -32768, rs2_h3_val == -5, rs2_h0_val == 1, rs1_h3_val > 0 and rs2_h3_val < 0
// opcode: pdif.h ; op1:x6; op2:x6; dest:x6; op1val:0x03800055557fff;  op2val:0xfffbfff901000001
TEST_RR_OP(pdif.h, x6, x6, x6, 0x0000000000000000, 0x03800055557fff, 0xfffbfff901000001, x7, 4*XLEN/8, x9)

inst_5:
// rs1==x8, rs2==x19, rd==x21, rs1_h0_val == 2, rs1_h3_val == -257, rs2_h3_val == 1024, rs2_h1_val == -33, rs1_h2_val == 32767, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -33
// opcode: pdif.h ; op1:x8; op2:x19; dest:x21; op1val:0xfeff7ffffffd0002;  op2val:0x400ffdfffdffffa
TEST_RR_OP(pdif.h, x21, x8, x19, 0x0000000000000000, 0xfeff7ffffffd0002, 0x400ffdfffdffffa, x7, 5*XLEN/8, x9)

inst_6:
// rs1==x2, rs2==x29, rd==x10, rs1_h0_val == 4, rs1_h1_val == 32767, rs2_h0_val == 0, rs1_h2_val == -513, rs2_h3_val == 0
// opcode: pdif.h ; op1:x2; op2:x29; dest:x10; op1val:0x09fdff7fff0004;  op2val:0x00fff9fff60000
TEST_RR_OP(pdif.h, x10, x2, x29, 0x0000000000000000, 0x09fdff7fff0004, 0x00fff9fff60000, x7, 6*XLEN/8, x9)

inst_7:
// rs1==x12, rs2==x24, rd==x3, rs1_h0_val == 8, rs1_h1_val == 256, rs1_h2_val == 64, rs2_h1_val == -4097, rs1_h3_val == 64, rs2_h2_val == -2049, rs2_h3_val == -16385
// opcode: pdif.h ; op1:x12; op2:x24; dest:x3; op1val:0x40004001000008;  op2val:0xbffff7ffefff0000
TEST_RR_OP(pdif.h, x3, x12, x24, 0x0000000000000000, 0x40004001000008, 0xbffff7ffefff0000, x7, 7*XLEN/8, x9)

inst_8:
// rs1==x28, rs2==x27, rd==x12, rs1_h0_val == 16, rs1_h1_val == -2049, rs2_h1_val == 2048, rs1_h3_val == -129, rs2_h0_val == -129, rs1_h2_val == 2048
// opcode: pdif.h ; op1:x28; op2:x27; dest:x12; op1val:0xff7f0800f7ff0010;  op2val:0x05fff90800ff7f
TEST_RR_OP(pdif.h, x12, x28, x27, 0x0000000000000000, 0xff7f0800f7ff0010, 0x05fff90800ff7f, x7, 8*XLEN/8, x9)

inst_9:
// rs1==x24, rs2==x18, rd==x30, rs1_h0_val == 32, rs1_h3_val == -3, rs2_h3_val == 256, rs1_h1_val == 2, rs1_h2_val == -21846, rs2_h1_val == 21845, rs2_h0_val == 8, rs2_h2_val == -16385
// opcode: pdif.h ; op1:x24; op2:x18; dest:x30; op1val:0xfffdaaaa00020020;  op2val:0x100bfff55550008
TEST_RR_OP(pdif.h, x30, x24, x18, 0x0000000000000000, 0xfffdaaaa00020020, 0x100bfff55550008, x7, 9*XLEN/8, x9)

inst_10:
// rs1==x5, rs2==x10, rd==x17, rs1_h0_val == 64, rs1_h1_val == -1025, rs2_h1_val == 512, rs2_h2_val == 2048, rs1_h3_val == -1, rs1_h2_val == 8, rs2_h0_val == 512
// opcode: pdif.h ; op1:x5; op2:x10; dest:x17; op1val:0xffff0008fbff0040;  op2val:0x07080002000200
TEST_RR_OP(pdif.h, x17, x5, x10, 0x0000000000000000, 0xffff0008fbff0040, 0x07080002000200, x7, 10*XLEN/8, x9)

inst_11:
// rs1==x17, rs2==x4, rd==x23, rs1_h0_val == 128, rs1_h2_val == rs2_h2_val, rs2_h3_val == 512, rs1_h1_val == -65, rs1_h3_val == 128
// opcode: pdif.h ; op1:x17; op2:x4; dest:x23; op1val:0x803fffffbf0080;  op2val:0x2003fffefff0001
TEST_RR_OP(pdif.h, x23, x17, x4, 0x0000000000000000, 0x803fffffbf0080, 0x2003fffefff0001, x7, 11*XLEN/8, x9)

inst_12:
// rs1==x18, rs2==x11, rd==x19, rs1_h0_val == 256, rs1_h1_val == 8192, rs1_h2_val == -4097
// opcode: pdif.h ; op1:x18; op2:x11; dest:x19; op1val:0x05efff20000100;  op2val:0x06fffc0009fff9
TEST_RR_OP(pdif.h, x19, x18, x11, 0x0000000000000000, 0x05efff20000100, 0x06fffc0009fff9, x7, 12*XLEN/8, x9)

inst_13:
// rs1==x22, rs2==x13, rd==x1, rs1_h0_val == 512, rs1_h3_val == -9, rs2_h0_val == -2, rs2_h1_val == -3, rs1_h2_val == 512, rs2_h2_val == -21846
// opcode: pdif.h ; op1:x22; op2:x13; dest:x1; op1val:0xfff7020001000200;  op2val:0x400aaaafffdfffe
TEST_RR_OP(pdif.h, x1, x22, x13, 0x0000000000000000, 0xfff7020001000200, 0x400aaaafffdfffe, x7, 13*XLEN/8, x9)

inst_14:
// rs1==x3, rs2==x1, rd==x20, rs1_h0_val == 1024, rs1_h3_val == -33, rs2_h1_val == -9, rs2_h0_val == 8192, rs1_h1_val == -33
// opcode: pdif.h ; op1:x3; op2:x1; dest:x20; op1val:0xffdf0003ffdf0400;  op2val:0xfff8fff9fff72000
TEST_RR_OP(pdif.h, x20, x3, x1, 0x0000000000000000, 0xffdf0003ffdf0400, 0xfff8fff9fff72000, x7, 14*XLEN/8, x9)

inst_15:
// rs1==x21, rs2==x0, rd==x11, rs1_h0_val == 2048, rs2_h3_val == 8192, rs2_h0_val == -9, rs2_h2_val == -4097
// opcode: pdif.h ; op1:x21; op2:x0; dest:x11; op1val:0xfffa000100050800;  op2val:0x2000efff0100fff7
TEST_RR_OP(pdif.h, x11, x21, x0, 0x0000000000000000, 0xfffa000100050800, 0x2000efff0100fff7, x7, 15*XLEN/8, x20)

inst_16:
// rs1==x14, rs2==x25, rd==x31, rs1_h0_val == 4096, rs2_h3_val == 16384, rs2_h1_val == -8193, rs1_h3_val == 16, rs2_h2_val == -1025, rs2_h0_val == 4, rs1_h2_val == 8192
// opcode: pdif.h ; op1:x14; op2:x25; dest:x31; op1val:0x102000fffd1000;  op2val:0x4000fbffdfff0004
TEST_RR_OP(pdif.h, x31, x14, x25, 0x0000000000000000, 0x102000fffd1000, 0x4000fbffdfff0004, x7, 16*XLEN/8, x20)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x15, rs2==x12, rd==x9, rs1_h0_val == 8192, rs2_h1_val == 128, rs2_h2_val == 64, rs1_h3_val == 4096, rs2_h0_val == 2048
// opcode: pdif.h ; op1:x15; op2:x12; dest:x9; op1val:0x100000017fff2000;  op2val:0x00004000800800
TEST_RR_OP(pdif.h, x9, x15, x12, 0x0000000000000000, 0x100000017fff2000, 0x00004000800800, x6, 0*XLEN/8, x20)

inst_18:
// rs1==x1, rs2==x3, rd==x7, rs1_h0_val == 16384, rs2_h1_val == -16385, rs2_h2_val == -1, rs1_h2_val == 2, rs1_h3_val == 0
// opcode: pdif.h ; op1:x1; op2:x3; dest:x7; op1val:0x000002f7ff4000;  op2val:0x5555ffffbfff0008
TEST_RR_OP(pdif.h, x7, x1, x3, 0x0000000000000000, 0x000002f7ff4000, 0x5555ffffbfff0008, x6, 1*XLEN/8, x20)

inst_19:
// rs1==x23, rs2==x17, rd==x4, rs1_h0_val == -2, rs1_h1_val == rs2_h1_val, rs2_h1_val == 4096, rs1_h1_val == 4096, rs2_h2_val == -9
// opcode: pdif.h ; op1:x23; op2:x17; dest:x4; op1val:0xfffffffc1000fffe;  op2val:0x06fff71000feff
TEST_RR_OP(pdif.h, x4, x23, x17, 0x0000000000000000, 0xfffffffc1000fffe, 0x06fff71000feff, x6, 2*XLEN/8, x20)

inst_20:
// rs1==x10, rs2==x14, rd==x8, rs1_h0_val == -3, rs2_h0_val == 4096, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 8
// opcode: pdif.h ; op1:x10; op2:x14; dest:x8; op1val:0xfffafff80003fffd;  op2val:0x08080008001000
TEST_RR_OP(pdif.h, x8, x10, x14, 0x0000000000000000, 0xfffafff80003fffd, 0x08080008001000, x6, 3*XLEN/8, x20)

inst_21:
// rs1==x4, rs2==x16, rd==x13, rs1_h0_val == -5, rs2_h0_val == -32768, rs2_h3_val == -32768, rs1_h2_val == -2049, rs2_h1_val == 32767
// opcode: pdif.h ; op1:x4; op2:x16; dest:x13; op1val:0xffdff7ff0005fffb;  op2val:0x8000fff77fff8000
TEST_RR_OP(pdif.h, x13, x4, x16, 0x0000000000000000, 0xffdff7ff0005fffb, 0x8000fff77fff8000, x6, 4*XLEN/8, x20)

inst_22:
// rs1==x16, rs2==x9, rd==x25, rs1_h0_val == -9, rs1_h1_val == -21846, rs2_h2_val == -17, rs2_h0_val == 21845, rs2_h1_val == 4, rs1_h2_val == -2
// opcode: pdif.h ; op1:x16; op2:x9; dest:x25; op1val:0x03fffeaaaafff7;  op2val:0x2000ffef00045555
TEST_RR_OP(pdif.h, x25, x16, x9, 0x0000000000000000, 0x03fffeaaaafff7, 0x2000ffef00045555, x6, 5*XLEN/8, x20)

inst_23:
// rs1==x29, rs2==x8, rd==x22, rs1_h0_val == -17, rs2_h1_val == -513, rs2_h3_val == 32767
// opcode: pdif.h ; op1:x29; op2:x8; dest:x22; op1val:0x103ffffbffffef;  op2val:0x7ffffffffdff0004
TEST_RR_OP(pdif.h, x22, x29, x8, 0x0000000000000000, 0x103ffffbffffef, 0x7ffffffffdff0004, x6, 6*XLEN/8, x20)

inst_24:
// rs1==x13, rs2==x21, rd==x26, rs1_h0_val == -33, rs2_h1_val == -2049
// opcode: pdif.h ; op1:x13; op2:x21; dest:x26; op1val:0x06f7fffffaffdf;  op2val:0xfff80007f7fffff7
TEST_RR_OP(pdif.h, x26, x13, x21, 0x0000000000000000, 0x06f7fffffaffdf, 0xfff80007f7fffff7, x6, 7*XLEN/8, x20)

inst_25:
// rs1==x11, rs2==x31, rd==x0, rs1_h0_val == -65, rs1_h3_val == -1025, rs1_h1_val == -8193, rs2_h3_val == -129
// opcode: pdif.h ; op1:x11; op2:x31; dest:x0; op1val:0xfbfff7ffdfffffbf;  op2val:0xff7fefff0005fffc
TEST_RR_OP(pdif.h, x0, x11, x31, 0x0000000000000000, 0xfbfff7ffdfffffbf, 0xff7fefff0005fffc, x6, 8*XLEN/8, x20)

inst_26:
// rs1==x19, rs2==x5, rd==x15, rs1_h0_val == -129, rs2_h1_val == -17, rs2_h0_val == 32767
// opcode: pdif.h ; op1:x19; op2:x5; dest:x15; op1val:0x077ffffff9ff7f;  op2val:0x00aaaaffef7fff
TEST_RR_OP(pdif.h, x15, x19, x5, 0x0000000000000000, 0x077ffffff9ff7f, 0x00aaaaffef7fff, x6, 9*XLEN/8, x20)

inst_27:
// rs1==x7, rs2==x23, rd==x2, rs1_h0_val == -257, rs1_h1_val == -257
// opcode: pdif.h ; op1:x7; op2:x23; dest:x2; op1val:0xffdf2000fefffeff;  op2val:0x200000500070001
TEST_RR_OP(pdif.h, x2, x7, x23, 0x0000000000000000, 0xffdf2000fefffeff, 0x200000500070001, x6, 10*XLEN/8, x20)

inst_28:
// rs1==x26, rs2==x15, rd==x18, rs1_h0_val == -513, rs2_h2_val == -129
// opcode: pdif.h ; op1:x26; op2:x15; dest:x18; op1val:0xfff6c000ffbffdff;  op2val:0x2000ff7f0100feff
TEST_RR_OP(pdif.h, x18, x26, x15, 0x0000000000000000, 0xfff6c000ffbffdff, 0x2000ff7f0100feff, x6, 11*XLEN/8, x20)

inst_29:
// rs1==x9, rs2==x7, rd==x24, rs1_h0_val == -1025, rs1_h2_val == 16384, rs1_h3_val == -2
// opcode: pdif.h ; op1:x9; op2:x7; dest:x24; op1val:0xfffe4000fffcfbff;  op2val:0x8000fff90007fffc
TEST_RR_OP(pdif.h, x24, x9, x7, 0x0000000000000000, 0xfffe4000fffcfbff, 0x8000fff90007fffc, x6, 12*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x20, rs2==x2, rd==x16, rs1_h0_val == -2049, rs2_h1_val == 64
// opcode: pdif.h ; op1:x20; op2:x2; dest:x16; op1val:0xfffbfff90006f7ff;  op2val:0x200008000040fffa
TEST_RR_OP(pdif.h, x16, x20, x2, 0x0000000000000000, 0xfffbfff90006f7ff, 0x200008000040fffa, x1, 0*XLEN/8, x3)

inst_31:
// rs1==x31, rs2==x20, rd==x14, rs1_h0_val == -4097, rs2_h0_val == -1, rs2_h3_val == 2048
// opcode: pdif.h ; op1:x31; op2:x20; dest:x14; op1val:0xfff6c000fffaefff;  op2val:0x800fffa0040ffff
TEST_RR_OP(pdif.h, x14, x31, x20, 0x0000000000000000, 0xfff6c000fffaefff, 0x800fffa0040ffff, x1, 1*XLEN/8, x3)

inst_32:
// rs1_h0_val == -8193, rs1_h1_val == -1, rs1_h3_val == -16385
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff6ffffdfff;  op2val:0x03fff90080fffe
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xbffffff6ffffdfff, 0x03fff90080fffe, x1, 2*XLEN/8, x3)

inst_33:
// rs1_h0_val == -16385, rs1_h1_val == 512, rs2_h2_val == 1, rs2_h3_val == -1025
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff0200bfff;  op2val:0xfbff00010200fffa
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffbf7ff0200bfff, 0xfbff00010200fffa, x1, 3*XLEN/8, x3)

inst_34:
// rs1_h0_val == 21845, rs2_h1_val == 0
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000800095555;  op2val:0x0200090000fff9
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfbff000800095555, 0x0200090000fff9, x1, 4*XLEN/8, x3)

inst_35:
// rs1_h0_val == -21846, rs2_h1_val == 8, rs2_h3_val == -8193, rs1_h3_val == 32
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x20f7ff7fffaaaa;  op2val:0xdffffbff00082000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x20f7ff7fffaaaa, 0xdffffbff00082000, x1, 5*XLEN/8, x3)

inst_36:
// rs1_h1_val == -32768, rs2_h2_val == 0
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffef80000100;  op2val:0xdfff000000093fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff6ffef80000100, 0xdfff000000093fff, x1, 6*XLEN/8, x3)

inst_37:
// rs2_h3_val == 4, rs1_h2_val == 21845, rs2_h2_val == -5
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x105555aaaa0005;  op2val:0x04fffb00007fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x105555aaaa0005, 0x04fffb00007fff, x1, 7*XLEN/8, x3)

inst_38:
// rs2_h3_val == 16, rs2_h2_val == 8, rs2_h1_val == 16384, rs1_h1_val == -2
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff8aaaafffefff8;  op2val:0x1000084000fff6
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff8aaaafffefff8, 0x1000084000fff6, x1, 8*XLEN/8, x3)

inst_39:
// rs2_h3_val == 32, rs2_h0_val == 256
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaadfffbfff;  op2val:0x20fff8fffc0100
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x40aaaadfffbfff, 0x20fff8fffc0100, x1, 9*XLEN/8, x3)

inst_40:
// rs2_h3_val == 64, rs2_h2_val == 256
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7fff0400ff7f;  op2val:0x400100fffc0100
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffe7fff0400ff7f, 0x400100fffc0100, x1, 10*XLEN/8, x3)

inst_41:
// rs2_h3_val == 128, rs2_h0_val == -8193, rs2_h2_val == 16, rs1_h3_val == 8192
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000000101000003;  op2val:0x800010fffadfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x2000000101000003, 0x800010fffadfff, x1, 11*XLEN/8, x3)

inst_42:
// rs2_h3_val == 4096, rs2_h2_val == 128, rs1_h1_val == -129
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff8ff7ffff8;  op2val:0x10000080fffd7fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x8000fff8ff7ffff8, 0x10000080fffd7fff, x1, 12*XLEN/8, x3)

inst_43:
// rs2_h3_val == -2, rs1_h1_val == -17, rs2_h0_val == 128, rs2_h2_val == 512
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffaffef0000;  op2val:0xfffe0200ffff0080
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xff7ffffaffef0000, 0xfffe0200ffff0080, x1, 13*XLEN/8, x3)

inst_44:
// rs2_h3_val == -3, rs2_h0_val == -33, rs1_h3_val == 512, rs2_h2_val == 1024
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000006ff7ffffd;  op2val:0xfffd04000001ffdf
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x2000006ff7ffffd, 0xfffd04000001ffdf, x1, 14*XLEN/8, x3)

inst_45:
// rs2_h3_val == -9, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff8fdff0040;  op2val:0xfff7fff9c0000007
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x1000fff8fdff0040, 0xfff7fff9c0000007, x1, 15*XLEN/8, x3)

inst_46:
// rs2_h3_val == -17, rs1_h1_val == 16
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x09000700100007;  op2val:0xffef000800071000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x09000700100007, 0xffef000800071000, x1, 16*XLEN/8, x3)

inst_47:
// rs2_h3_val == -33, rs2_h1_val == 8192, rs1_h1_val == 16384
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f7ff40000009;  op2val:0xffdf010020000100
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff6f7ff40000009, 0xffdf010020000100, x1, 17*XLEN/8, x3)

inst_48:
// rs2_h3_val == -65, rs2_h0_val == -513
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x058000fff90800;  op2val:0xffbf0080aaaafdff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x058000fff90800, 0xffbf0080aaaafdff, x1, 18*XLEN/8, x3)

inst_49:
// rs2_h3_val == -257, rs1_h2_val == -3, rs1_h3_val == -65, rs2_h1_val == -2
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffd8000ffef;  op2val:0xfeff0080fffe0800
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xffbffffd8000ffef, 0xfeff0080fffe0800, x1, 19*XLEN/8, x3)

inst_50:
// rs2_h3_val == -513, rs2_h1_val == -65
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff5555fffdff7f;  op2val:0xfdff0006ffbfffff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x3fff5555fffdff7f, 0xfdff0006ffbfffff, x1, 20*XLEN/8, x3)

inst_51:
// rs2_h3_val == -4097, rs1_h3_val == 2048
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x800efff00068000;  op2val:0xefffffef00800004
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x800efff00068000, 0xefffffef00800004, x1, 21*XLEN/8, x3)

inst_52:
// rs2_h3_val == -21846, rs1_h1_val == 4, rs2_h2_val == -513
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00400004fdff;  op2val:0xaaaafdff00040000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xffdf00400004fdff, 0xaaaafdff00040000, x1, 22*XLEN/8, x3)

inst_53:
// rs1_h0_val == rs2_h0_val, rs2_h1_val == -32768, rs2_h0_val == -3
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7fffbfffffd;  op2val:0xfff600088000fffd
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffef7fffbfffffd, 0xfff600088000fffd, x1, 23*XLEN/8, x3)

inst_54:
// rs1_h1_val == 1, rs1_h2_val == 4
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x100000040001dfff;  op2val:0x400dfff0000fffe
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x100000040001dfff, 0x400dfff0000fffe, x1, 24*XLEN/8, x3)

inst_55:
// rs1_h1_val == 8, rs2_h1_val == -129
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa08000008efff;  op2val:0xfff90005ff7f0200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffa08000008efff, 0xfff90005ff7f0200, x1, 25*XLEN/8, x3)

inst_56:
// rs1_h1_val == 32, rs2_h0_val == 2
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffc00201000;  op2val:0x5555fff87fff0002
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xffdffffc00201000, 0x5555fff87fff0002, x1, 26*XLEN/8, x3)

inst_57:
// rs1_h1_val == 64, rs2_h2_val == 32
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00400040fffc;  op2val:0x80000020aaaa0200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xbfff00400040fffc, 0x80000020aaaa0200, x1, 27*XLEN/8, x3)

inst_58:
// rs1_h1_val == 128, rs1_h3_val == 16384, rs2_h1_val == 32, rs1_h2_val == -9
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff700800002;  op2val:0xfffbffef00200080
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x4000fff700800002, 0xfffbffef00200080, x1, 28*XLEN/8, x3)

inst_59:
// rs1_h1_val == 2048, rs2_h0_val == 16, rs2_h3_val == -1
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffdff0800feff;  op2val:0xffffc00000070010
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x3ffffdff0800feff, 0xffffc00000070010, x1, 29*XLEN/8, x3)

inst_60:
// rs1_h3_val == -17, rs2_h0_val == -21846
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef0009fdff1000;  op2val:0xf7ffffffffbfaaaa
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xffef0009fdff1000, 0xf7ffffffffbfaaaa, x1, 30*XLEN/8, x3)

inst_61:
// rs1_h3_val == -513, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff6dffffdff;  op2val:0x20000040ffdffff7
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfdfffff6dffffdff, 0x20000040ffdffff7, x1, 31*XLEN/8, x3)

inst_62:
// rs1_h3_val == -2049, rs1_h2_val == 256
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0100ff7f0001;  op2val:0x4000010aaaac000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0100ff7f0001, 0x4000010aaaac000, x1, 32*XLEN/8, x3)

inst_63:
// rs1_h3_val == -4097, rs2_h2_val == -257
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff7ffffeff0100;  op2val:0xf7fffefffffb0020
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xefff7ffffeff0100, 0xf7fffefffffb0020, x1, 33*XLEN/8, x3)

inst_64:
// rs1_h3_val == -8193, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaaffbf2000;  op2val:0x2000008000080080
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xdfffaaaaffbf2000, 0x2000008000080080, x1, 34*XLEN/8, x3)

inst_65:
// rs1_h3_val == 21845, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffe0004fffd;  op2val:0x063ffffffefff8
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x5555fffe0004fffd, 0x063ffffffefff8, x1, 35*XLEN/8, x3)

inst_66:
// rs1_h3_val == -21846, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000500800080;  op2val:0xfffc0001aaaa0005
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xaaaa000500800080, 0xfffc0001aaaa0005, x1, 36*XLEN/8, x3)

inst_67:
// rs2_h0_val == 64, rs2_h2_val == 4096, rs1_h2_val == -16385
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbffffffffeff;  op2val:0x401000fffd0040
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffdbffffffffeff, 0x401000fffd0040, x1, 37*XLEN/8, x3)

inst_68:
// rs2_h2_val == 21845, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x03bffffffe0008;  op2val:0x5555555520000040
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x03bffffffe0008, 0x5555555520000040, x1, 38*XLEN/8, x3)

inst_69:
// rs2_h0_val == 1024, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff65555ff7f5555;  op2val:0xfffb000100200400
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff65555ff7f5555, 0xfffb000100200400, x1, 39*XLEN/8, x3)

inst_70:
// rs2_h0_val == 16384, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000006fff9fffd;  op2val:0xfeff0080ffbf4000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x10000006fff9fffd, 0xfeff0080ffbf4000, x1, 40*XLEN/8, x3)

inst_71:
// rs2_h0_val == -17, rs1_h1_val == -5, rs1_h2_val == 128
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60080fffbfffa;  op2val:0x5555ff7ffff7ffef
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff60080fffbfffa, 0x5555ff7ffff7ffef, x1, 41*XLEN/8, x3)

inst_72:
// rs2_h0_val == -65, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fff0004feff;  op2val:0xc00000017fffffbf
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xff7f7fff0004feff, 0xc00000017fffffbf, x1, 42*XLEN/8, x3)

inst_73:
// rs2_h0_val == -1025, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000fffbfbff;  op2val:0x400fffffffafbff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffe2000fffbfbff, 0x400fffffffafbff, x1, 43*XLEN/8, x3)

inst_74:
// rs2_h0_val == -4097, rs1_h1_val == -4097
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x20008000effffff9;  op2val:0xfff701000001efff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x20008000effffff9, 0xfff701000001efff, x1, 44*XLEN/8, x3)

inst_75:
// rs2_h0_val == -16385, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa7ffffbfffffb;  op2val:0x200fffcfffdbfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffa7ffffbfffffb, 0x200fffcfffdbfff, x1, 45*XLEN/8, x3)

inst_76:
// rs1_h3_val == rs2_h3_val, rs2_h1_val == -1025
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x2003fffffbfffbf;  op2val:0x2003ffffbff0008
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x2003fffffbfffbf, 0x2003ffffbff0008, x1, 46*XLEN/8, x3)

inst_77:
// rs2_h1_val == 2, rs1_h2_val == -5
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffb2000ffbf;  op2val:0x00fff700020004
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff9fffb2000ffbf, 0x00fff700020004, x1, 47*XLEN/8, x3)

inst_78:
// rs1_h1_val == -9, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff80004fff70040;  op2val:0x02feff08000001
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff80004fff70040, 0x02feff08000001, x1, 48*XLEN/8, x3)

inst_79:
// rs2_h1_val == 1024, rs1_h2_val == -65
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffbf0005ffff;  op2val:0xfff7008004000002
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xaaaaffbf0005ffff, 0xfff7008004000002, x1, 49*XLEN/8, x3)

inst_80:
// rs1_h1_val == -16385, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7fbffffdff;  op2val:0x400009fff7ffef
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x4000ff7fbffffdff, 0x400009fff7ffef, x1, 50*XLEN/8, x3)

inst_81:
// rs1_h2_val == -1, rs1_h3_val == 8, rs2_h1_val == 16
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x08fffffff90020;  op2val:0xfff6002000104000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x08fffffff90020, 0xfff6002000104000, x1, 51*XLEN/8, x3)

inst_82:
// rs1_h2_val == 0, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x07000000000002;  op2val:0x7ffffbff0100ffef
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x07000000000002, 0x7ffffbff0100ffef, x1, 52*XLEN/8, x3)

inst_83:
// rs2_h1_val == -257, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x80c0000009fff7;  op2val:0xf7fff7fffeffffff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x80c0000009fff7, 0xf7fff7fffeffffff, x1, 53*XLEN/8, x3)

inst_84:
// rs1_h2_val == 16, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x090010fff60800;  op2val:0xfdffffff0080fffa
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x090010fff60800, 0xfdffffff0080fffa, x1, 54*XLEN/8, x3)

inst_85:
// rs1_h2_val == 32, rs2_h2_val == 16384
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x0800200003c000;  op2val:0xc0004000ff7fefff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x0800200003c000, 0xc0004000ff7fefff, x1, 55*XLEN/8, x3)

inst_86:
// rs1_h2_val == 1024, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000400fdff0080;  op2val:0xfdffdfff3fff0400
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x10000400fdff0080, 0xfdffdfff3fff0400, x1, 56*XLEN/8, x3)

inst_87:
// rs1_h2_val == 4096, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc1000ffbf4000;  op2val:0x05ffdf01000080
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffc1000ffbf4000, 0x05ffdf01000080, x1, 57*XLEN/8, x3)

inst_88:
// rs2_h2_val == -32768, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x40000007fbff0001;  op2val:0x1080000003fffd
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x40000007fbff0001, 0x1080000003fffd, x1, 58*XLEN/8, x3)

inst_89:
// rs2_h2_val == 32767, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x200000000020ff7f;  op2val:0xfffd7ffffffe3fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x200000000020ff7f, 0xfffd7ffffffe3fff, x1, 59*XLEN/8, x3)

inst_90:
// rs2_h2_val == 2, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffebfff0400;  op2val:0xfff9000210000008
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xbffffffebfff0400, 0xfff9000210000008, x1, 60*XLEN/8, x3)

inst_91:
// rs1_h2_val == -33, rs1_h3_val == 256
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x100ffdf01000800;  op2val:0x1000800000060200
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x100ffdf01000800, 0x1000800000060200, x1, 61*XLEN/8, x3)

inst_92:
// rs1_h2_val == -257, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffeff00080004;  op2val:0xfbfffff90009fffa
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xf7fffeff00080004, 0xfbfffff90009fffa, x1, 62*XLEN/8, x3)

inst_93:
// rs1_h2_val == -1025, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbff00080004;  op2val:0xffbf000200050006
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x3ffffbff00080004, 0xffbf000200050006, x1, 63*XLEN/8, x3)

inst_94:
// rs1_h2_val == -8193, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfffbfffffff;  op2val:0x80005555feffefff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xff7fdfffbfffffff, 0x80005555feffefff, x1, 64*XLEN/8, x3)

inst_95:
// rs2_h2_val == 8192, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff800070010dfff;  op2val:0xfffb2000fff7ffff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfff800070010dfff, 0xfffb2000fff7ffff, x1, 65*XLEN/8, x3)

inst_96:
// rs2_h2_val == -2, rs1_h3_val == 1024
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x400fefffffd0004;  op2val:0x05fffe0400bfff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x400fefffffd0004, 0x05fffe0400bfff, x1, 66*XLEN/8, x3)

inst_97:
// rs2_h2_val == -3, rs2_h3_val == 1
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff6efff0080;  op2val:0x01fffd00804000
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xbffffff6efff0080, 0x01fffd00804000, x1, 67*XLEN/8, x3)

inst_98:
// rs1_h3_val == 1, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff00033fff;  op2val:0xbfff00080200fff6
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x01f7ff00033fff, 0xbfff00080200fff6, x1, 68*XLEN/8, x3)

inst_99:
// rs1_h3_val == 32767, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00050040ffff;  op2val:0x0000000007fffb
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x7fff00050040ffff, 0x0000000007fffb, x1, 69*XLEN/8, x3)

inst_100:
// rs1_h3_val == 2, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x020040fffb0008;  op2val:0xfff6400001000400
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x020040fffb0008, 0xfff6400001000400, x1, 70*XLEN/8, x3)

inst_101:
// rs2_h2_val == -65, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x0104000006fbff;  op2val:0x04ffbf00023fff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x0104000006fbff, 0x04ffbf00023fff, x1, 71*XLEN/8, x3)

inst_102:
// rs2_h2_val == 4, 
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff3fff0002fff6;  op2val:0x20000004bffffff6
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x7fff3fff0002fff6, 0x20000004bffffff6, x1, 72*XLEN/8, x3)

inst_103:
// rs1_h0_val == -32768, rs1_h2_val == -129, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -2049, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs1_h1_val == 1024, rs1_h3_val == 4, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -1, rs1_h3_val != rs2_h3_val, rs2_h3_val == 21845
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x04ff7f04008000;  op2val:0x5555fff6fffff7ff
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x04ff7f04008000, 0x5555fff6fffff7ff, x1, 73*XLEN/8, x3)

inst_104:
// rs1_h0_val == 32767, rs2_h1_val == 256, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -32768, rs2_h3_val == -5, rs2_h0_val == 1, rs1_h3_val > 0 and rs2_h3_val < 0
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0x03800055557fff;  op2val:0xfffbfff901000001
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0x03800055557fff, 0xfffbfff901000001, x1, 74*XLEN/8, x3)

inst_105:
// rs1_h0_val == 2048, rs2_h3_val == 8192, rs2_h0_val == -9, rs2_h2_val == -4097
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000100050800;  op2val:0x2000efff0100fff7
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfffa000100050800, 0x2000efff0100fff7, x1, 75*XLEN/8, x3)

inst_106:
// rs1_h0_val == -65, rs1_h3_val == -1025, rs1_h1_val == -8193, rs2_h3_val == -129
// opcode: pdif.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ffdfffffbf;  op2val:0xff7fefff0005fffc
TEST_RR_OP(pdif.h, x31, x30, x29, 0x0000000000000000, 0xfbfff7ffdfffffbf, 0xff7fefff0005fffc, x1, 76*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 77*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
