
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the paaddu.b instruction of the RISC-V RV64PZicsr extension for the paaddu.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",paaddu.b)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x14, rd==x3, rs1_b0_val == -128, rs1_b6_val == -9, rs1_b7_val == -128, rs2_b5_val == 64, rs1_b1_val == 0, rs2_b6_val == -86, rs1_b2_val == 127, rs2_b1_val == 1, rs2_b7_val == -5, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b0_val != rs2_b0_val, rs1_b3_val == -3, rs1_b1_val != rs2_b1_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val != rs2_b2_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs2_b2_val == -65, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val != rs2_b4_val, rs2_b3_val == 1, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val != rs2_b6_val, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b7_val != rs2_b7_val, rs1_b5_val == -17, rs2_b4_val == 127
// opcode: paaddu.b ; op1:x31; op2:x14; dest:x3; op1val:0x80f7eff8fd7f0080;  op2val:0xfbaa407f01bf0107
TEST_RR_OP(paaddu.b, x3, x31, x14, 0x0000000000000000, 0x80f7eff8fd7f0080, 0xfbaa407f01bf0107, x5, 0*XLEN/8, x7)

inst_1:// rs2 == rd != rs1, rs1==x9, rs2==x30, rd==x30, rs1_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b4_val == 85, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b6_val == 127, rs2_b2_val == -3, rs1_b1_val == 1, rs1_b7_val == -9, rs1_b4_val == -2, rs2_b1_val == 16, rs2_b3_val == 0
// opcode: paaddu.b ; op1:x9; op2:x30; dest:x30; op1val:0xf77f05fe3ff601ff;  op2val:0xfb033f5500fd1007
TEST_RR_OP(paaddu.b, x30, x9, x30, 0x0000000000000000, 0xf77f05fe3ff601ff, 0xfb033f5500fd1007, x5, 1*XLEN/8, x7)

inst_2:// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x10, rs1_b0_val == 0, rs2_b1_val == -17, rs2_b3_val == 64, rs2_b6_val == -17, rs1_b5_val == 127, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b2_val == 127, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b7_val == 0, rs1_b4_val == -1, rs1_b7_val == -17
// opcode: paaddu.b ; op1:x27; op2:x27; dest:x10; op1val:0xeffc7ffffa050100;  op2val:0xef3f07407feff8
TEST_RR_OP(paaddu.b, x10, x27, x27, 0x0000000000000000, 0xeffc7ffffa050100, 0xef3f07407feff8, x5, 2*XLEN/8, x7)

inst_3:// rs1 == rd != rs2, rs1==x8, rs2==x21, rd==x8, rs1_b0_val == 1, rs2_b1_val == -3, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b6_val == -3, rs1_b3_val == 32, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b0_val == -17, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b7_val == 8, rs1_b5_val == -33, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b2_val == 85
// opcode: paaddu.b ; op1:x8; op2:x21; dest:x8; op1val:0x87fdf3f2055f601;  op2val:0xfbfd07c006f6fdef
TEST_RR_OP(paaddu.b, x8, x8, x21, 0x0000000000000000, 0x87fdf3f2055f601, 0xfbfd07c006f6fdef, x5, 3*XLEN/8, x7)

inst_4:// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 4, rs1_b6_val == rs2_b6_val, rs2_b5_val == 4, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b7_val == 1, rs1_b5_val == -5, rs1_b2_val == 64, rs1_b7_val == 4, rs1_b1_val == -1, rs1_b3_val == rs2_b3_val, rs2_b2_val == -17, rs2_b4_val == 64, rs1_b4_val == -9
// opcode: paaddu.b ; op1:x6; op2:x6; dest:x6; op1val:0x4fafbf70540ff7f;  op2val:0x1fa044005eff804
TEST_RR_OP(paaddu.b, x6, x6, x6, 0x0000000000000000, 0x4fafbf70540ff7f, 0x1fa044005eff804, x5, 4*XLEN/8, x7)

inst_5:// rs1==x28, rs2==x15, rd==x13, rs1_b0_val == 2, rs1_b6_val == 16, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b3_val == 16, rs2_b6_val == -33, rs1_b2_val == -1, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b2_val == 4, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b5_val == -3, rs2_b7_val == -3, rs1_b7_val == 85
// opcode: paaddu.b ; op1:x28; op2:x15; dest:x13; op1val:0x5510fc07f8ffff02;  op2val:0xfddffdf8100407c0
TEST_RR_OP(paaddu.b, x13, x28, x15, 0x0000000000000000, 0x5510fc07f8ffff02, 0xfddffdf8100407c0, x5, 5*XLEN/8, x7)

inst_6:// rs1==x26, rs2==x29, rd==x31, rs1_b0_val == 4, rs1_b3_val == 16, rs2_b3_val == -2, rs2_b5_val == 2, rs2_b6_val == -65, rs1_b7_val == rs2_b7_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b2_val == -5, rs1_b4_val < 0 and rs2_b4_val < 0
// opcode: paaddu.b ; op1:x26; op2:x29; dest:x31; op1val:0xf9fa3ffe103f0504;  op2val:0xf9bf02f9fefb3fef
TEST_RR_OP(paaddu.b, x31, x26, x29, 0x0000000000000000, 0xf9fa3ffe103f0504, 0xf9bf02f9fefb3fef, x5, 6*XLEN/8, x7)

inst_7:// rs1==x11, rs2==x3, rd==x0, rs1_b0_val == 8, rs1_b1_val == -3, rs2_b3_val == -5, rs2_b5_val == 16, rs1_b7_val == -1, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -33, rs2_b2_val == -2, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b4_val == 32, rs1_b3_val == -1, rs1_b6_val == 4
// opcode: paaddu.b ; op1:x11; op2:x3; dest:x0; op1val:0xff04fa20ff40fd08;  op2val:0x3ffa1005fbfe07df
TEST_RR_OP(paaddu.b, x0, x11, x3, 0x0000000000000000, 0xff04fa20ff40fd08, 0x3ffa1005fbfe07df, x5, 7*XLEN/8, x7)

inst_8:// rs1==x14, rs2==x26, rd==x16, rs1_b0_val == 16, rs2_b3_val == 4, rs1_b0_val == rs2_b0_val, rs2_b5_val == 0, rs2_b0_val == 16, rs1_b5_val == 2, rs1_b2_val == rs2_b2_val, rs2_b7_val == -2, rs1_b4_val == 64, rs1_b6_val == 8
// opcode: paaddu.b ; op1:x14; op2:x26; dest:x16; op1val:0xf808024006fa0510;  op2val:0xfec0000304fa0310
TEST_RR_OP(paaddu.b, x16, x14, x26, 0x0000000000000000, 0xf808024006fa0510, 0xfec0000304fa0310, x5, 8*XLEN/8, x7)

inst_9:// rs1==x30, rs2==x20, rd==x4, rs1_b0_val == 32, rs1_b3_val == 127, rs1_b4_val == -65, rs2_b0_val == 1, rs2_b5_val == 1, rs2_b4_val == 2, rs2_b7_val == -9
// opcode: paaddu.b ; op1:x30; op2:x20; dest:x4; op1val:0xfffaf8bf7f03ff20;  op2val:0xf7f6010204063f01
TEST_RR_OP(paaddu.b, x4, x30, x20, 0x0000000000000000, 0xfffaf8bf7f03ff20, 0xf7f6010204063f01, x5, 9*XLEN/8, x7)

inst_10:// rs1==x0, rs2==x19, rd==x25, rs1_b0_val == 64, rs1_b6_val == 64, rs1_b2_val == 4, rs1_b7_val == -5, rs1_b4_val == -5, rs1_b5_val > 0 and rs2_b5_val < 0
// opcode: paaddu.b ; op1:x0; op2:x19; dest:x25; op1val:0xfb4007fb7f04ff40;  op2val:0xfd06fd07fa07ef03
TEST_RR_OP(paaddu.b, x25, x0, x19, 0x0000000000000000, 0xfb4007fb7f04ff40, 0xfd06fd07fa07ef03, x5, 10*XLEN/8, x7)

inst_11:// rs1==x4, rs2==x23, rd==x9, rs1_b0_val == -2, rs1_b6_val == -17, rs2_b0_val == 32, rs1_b2_val == 16, rs1_b4_val == 4, rs1_b7_val == -3, rs2_b4_val == -5
// opcode: paaddu.b ; op1:x4; op2:x23; dest:x9; op1val:0xfdeffc04101005fe;  op2val:0xfbeffdfb3f07f820
TEST_RR_OP(paaddu.b, x9, x4, x23, 0x0000000000000000, 0xfdeffc04101005fe, 0xfbeffdfb3f07f820, x5, 11*XLEN/8, x7)

inst_12:// rs1==x23, rs2==x31, rd==x28, rs1_b0_val == -3, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b5_val == -1, rs1_b3_val == -5, rs1_b2_val == 1, rs1_b6_val == -86, rs2_b7_val == 127, rs1_b4_val == 1, rs1_b7_val == -86
// opcode: paaddu.b ; op1:x23; op2:x31; dest:x28; op1val:0xaaaaef01fb0107fd;  op2val:0x7fbfff0310fb03fa
TEST_RR_OP(paaddu.b, x28, x23, x31, 0x0000000000000000, 0xaaaaef01fb0107fd, 0x7fbfff0310fb03fa, x5, 12*XLEN/8, x7)

inst_13:// rs1==x25, rs2==x0, rd==x22, rs1_b0_val == -5, rs2_b6_val == -2, rs2_b2_val == -128, rs1_b2_val == 0, rs1_b5_val == 16, rs2_b0_val == -5, rs2_b5_val == -2, rs2_b7_val == 16, rs1_b7_val == -65
// opcode: paaddu.b ; op1:x25; op2:x0; dest:x22; op1val:0xbfef10fcf90003fb;  op2val:0x10fefe020580effb
TEST_RR_OP(paaddu.b, x22, x25, x0, 0x0000000000000000, 0xbfef10fcf90003fb, 0x10fefe020580effb, x5, 13*XLEN/8, x7)

inst_14:// rs1==x29, rs2==x2, rd==x27, rs1_b0_val == -9, rs1_b6_val == 32, rs2_b0_val == -1, rs1_b5_val == -1, rs2_b2_val == 0, rs2_b6_val == 1, rs1_b1_val == 16
// opcode: paaddu.b ; op1:x29; op2:x2; dest:x27; op1val:0x5520ff06fbfa10f7;  op2val:0xfb010905fc0006ff
TEST_RR_OP(paaddu.b, x27, x29, x2, 0x0000000000000000, 0x5520ff06fbfa10f7, 0xfb010905fc0006ff, x5, 14*XLEN/8, x7)

inst_15:// rs1==x12, rs2==x11, rd==x1, rs1_b0_val == -17, rs2_b0_val == 0, rs1_b6_val == 85, rs2_b2_val == 2, rs2_b4_val == -128, rs1_b1_val == -128, rs1_b2_val == -33, rs2_b7_val == -65, rs2_b1_val == 32
// opcode: paaddu.b ; op1:x12; op2:x11; dest:x1; op1val:0xfc553ff7fbdf80ef;  op2val:0xbff8038007022000
TEST_RR_OP(paaddu.b, x1, x12, x11, 0x0000000000000000, 0xfc553ff7fbdf80ef, 0xbff8038007022000, x5, 15*XLEN/8, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:// rs1==x13, rs2==x28, rd==x14, rs1_b0_val == -33, rs1_b6_val == -2, rs2_b1_val == -33, rs2_b5_val == -128, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val == 4, rs2_b3_val == -17, rs1_b4_val == 127, rs2_b7_val == -17, rs1_b3_val == 1
// opcode: paaddu.b ; op1:x13; op2:x28; dest:x14; op1val:0x6fe047f01f83fdf;  op2val:0xef0680c0effbdf05
TEST_RR_OP(paaddu.b, x14, x13, x28, 0x0000000000000000, 0x6fe047f01f83fdf, 0xef0680c0effbdf05, x6, 0*XLEN/8, x26)

inst_17:// rs1==x1, rs2==x9, rd==x2, rs1_b0_val == -65, rs2_b6_val == -128, rs2_b1_val == 4, rs1_b5_val == 1
// opcode: paaddu.b ; op1:x1; op2:x9; dest:x2; op1val:0x308013f0655ffbf;  op2val:0xc080c003068004f6
TEST_RR_OP(paaddu.b, x2, x1, x9, 0x0000000000000000, 0x308013f0655ffbf, 0xc080c003068004f6, x6, 1*XLEN/8, x26)

inst_18:// rs1==x20, rs2==x24, rd==x12, rs1_b0_val == 85, rs1_b4_val == -86, rs2_b7_val == 8, rs1_b7_val == 32, rs2_b1_val == 0, rs2_b4_val == 8, rs1_b6_val == 1, rs1_b1_val == -2
// opcode: paaddu.b ; op1:x20; op2:x24; dest:x12; op1val:0x2001efaa10fffe55;  op2val:0x803f808ef0600f8
TEST_RR_OP(paaddu.b, x12, x20, x24, 0x0000000000000000, 0x2001efaa10fffe55, 0x803f808ef0600f8, x6, 2*XLEN/8, x26)

inst_19:// rs1==x19, rs2==x10, rd==x29, rs1_b0_val == -86, rs1_b2_val == -86, rs1_b6_val == 2, rs1_b5_val == 85
// opcode: paaddu.b ; op1:x19; op2:x10; dest:x29; op1val:0xbf02554001aaf6aa;  op2val:0xf901103fc0070703
TEST_RR_OP(paaddu.b, x29, x19, x10, 0x0000000000000000, 0xbf02554001aaf6aa, 0xf901103fc0070703, x6, 3*XLEN/8, x26)

inst_20:// rs1==x17, rs2==x16, rd==x19, rs1_b1_val == 127, rs2_b3_val == 85
// opcode: paaddu.b ; op1:x17; op2:x16; dest:x19; op1val:0x3f20fa2006017ffb;  op2val:0xfb80f80755bfdf03
TEST_RR_OP(paaddu.b, x19, x17, x16, 0x0000000000000000, 0x3f20fa2006017ffb, 0xfb80f80755bfdf03, x6, 4*XLEN/8, x26)

inst_21:// rs1==x10, rs2==x13, rd==x20, rs1_b1_val == 2, rs1_b3_val == 8, rs2_b3_val == -9, rs1_b7_val == 0, rs1_b5_val == -9, rs1_b2_val == -9, rs2_b6_val == 4
// opcode: paaddu.b ; op1:x10; op2:x13; dest:x20; op1val:0x07f7fe08f702fb;  op2val:0x9048002f7fd03df
TEST_RR_OP(paaddu.b, x20, x10, x13, 0x0000000000000000, 0x07f7fe08f702fb, 0x9048002f7fd03df, x6, 5*XLEN/8, x26)

inst_22:// rs1==x24, rs2==x1, rd==x5, rs1_b1_val == 4, rs1_b5_val == 0, rs2_b3_val == -3, rs2_b0_val == -65, rs2_b5_val == -33, rs2_b4_val == 32
// opcode: paaddu.b ; op1:x24; op2:x1; dest:x5; op1val:0x55f6000906010407;  op2val:0x7f09df20fd03fabf
TEST_RR_OP(paaddu.b, x5, x24, x1, 0x0000000000000000, 0x55f6000906010407, 0x7f09df20fd03fabf, x6, 6*XLEN/8, x26)

inst_23:// rs1==x18, rs2==x5, rd==x17, rs1_b1_val == 8, rs1_b3_val == 4, rs2_b0_val == -2, rs2_b7_val == 2, rs2_b1_val == -128, rs2_b4_val == 4, rs1_b6_val == -128
// opcode: paaddu.b ; op1:x18; op2:x5; dest:x17; op1val:0xf680fbf904fa0840;  op2val:0x2fc0304010980fe
TEST_RR_OP(paaddu.b, x17, x18, x5, 0x0000000000000000, 0xf680fbf904fa0840, 0x2fc0304010980fe, x6, 7*XLEN/8, x26)

inst_24:// rs1==x15, rs2==x7, rd==x18, rs1_b1_val == 32, rs2_b2_val == 32, rs1_b3_val == -17, rs1_b2_val == -5, rs2_b4_val == -9
// opcode: paaddu.b ; op1:x15; op2:x7; dest:x18; op1val:0x50906f6effb20df;  op2val:0xf9f609f7fc20fdf9
TEST_RR_OP(paaddu.b, x18, x15, x7, 0x0000000000000000, 0x50906f6effb20df, 0xf9f609f7fc20fdf9, x6, 8*XLEN/8, x26)

inst_25:// rs1==x21, rs2==x12, rd==x23, rs1_b1_val == 64, rs1_b6_val == -1, rs2_b6_val == 85, rs1_b4_val == 2, rs2_b5_val == -86
// opcode: paaddu.b ; op1:x21; op2:x12; dest:x23; op1val:0xbfffef0201f84040;  op2val:0xf755aa7f403f05df
TEST_RR_OP(paaddu.b, x23, x21, x12, 0x0000000000000000, 0xbfffef0201f84040, 0xf755aa7f403f05df, x6, 9*XLEN/8, x26)

inst_26:// rs1==x7, rs2==x25, rd==x21, rs1_b1_val == -5, rs1_b4_val == 16, rs1_b7_val == -33, rs2_b1_val == -2
// opcode: paaddu.b ; op1:x7; op2:x25; dest:x21; op1val:0xdfefef100604fbf8;  op2val:0xf8fc05fa55effe01
TEST_RR_OP(paaddu.b, x21, x7, x25, 0x0000000000000000, 0xdfefef100604fbf8, 0xf8fc05fa55effe01, x6, 10*XLEN/8, x26)

inst_27:// rs1==x3, rs2==x8, rd==x11, rs1_b1_val == -9, rs2_b6_val == -9, rs1_b5_val == 64, rs2_b7_val == 4, rs2_b2_val == -33, rs2_b4_val == -17
// opcode: paaddu.b ; op1:x3; op2:x8; dest:x11; op1val:0xf9044001fb3ff7f6;  op2val:0x4f7c0ef09df0706
TEST_RR_OP(paaddu.b, x11, x3, x8, 0x0000000000000000, 0xf9044001fb3ff7f6, 0x4f7c0ef09df0706, x6, 11*XLEN/8, x26)

inst_28:// rs1==x22, rs2==x4, rd==x24, rs2_b4_val == -33, rs2_b0_val == -3, rs1_b3_val == -33, rs2_b7_val == 85
// opcode: paaddu.b ; op1:x22; op2:x4; dest:x24; op1val:0xf809ef10df55c0df;  op2val:0x5555fadffbc0effd
TEST_RR_OP(paaddu.b, x24, x22, x4, 0x0000000000000000, 0xf809ef10df55c0df, 0x5555fadffbc0effd, x6, 12*XLEN/8, x26)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:// rs1==x2, rs2==x18, rd==x7, rs2_b4_val == -65, rs1_b7_val == 2, rs2_b6_val == 127, rs2_b1_val == -65, rs1_b2_val == 8
// opcode: paaddu.b ; op1:x2; op2:x18; dest:x7; op1val:0x205c005030801fe;  op2val:0xc07f40bf09c0bf09
TEST_RR_OP(paaddu.b, x7, x2, x18, 0x0000000000000000, 0x205c005030801fe, 0xc07f40bf09c0bf09, x1, 0*XLEN/8, x3)

inst_30:// rs1==x5, rs2==x22, rd==x26, rs2_b4_val == -86, rs1_b4_val == -33, rs1_b6_val == -3, rs1_b1_val == -65, rs2_b7_val == -86
// opcode: paaddu.b ; op1:x5; op2:x22; dest:x26; op1val:0xaafd3fdfdf7fbff8;  op2val:0xaafdfaaaf60607c0
TEST_RR_OP(paaddu.b, x26, x5, x22, 0x0000000000000000, 0xaafd3fdfdf7fbff8, 0xaafdfaaaf60607c0, x1, 1*XLEN/8, x3)

inst_31:// rs1==x16, rs2==x17, rd==x15, rs2_b5_val == 127, 
// opcode: paaddu.b ; op1:x16; op2:x17; dest:x15; op1val:0x20090409fafafd09;  op2val:0xfdaa7ff7002005fd
TEST_RR_OP(paaddu.b, x15, x16, x17, 0x0000000000000000, 0x20090409fafafd09, 0xfdaa7ff7002005fd, x1, 2*XLEN/8, x3)

inst_32:// rs2_b5_val == 8, rs2_b0_val == 85, rs2_b7_val == 32, rs1_b2_val == 2, rs2_b1_val == -86
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3fffc20ff0204c0;  op2val:0x20f608eff9bfaa55
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3fffc20ff0204c0, 0x20f608eff9bfaa55, x1, 3*XLEN/8, x3)

inst_33:// rs2_b5_val == 32, rs2_b3_val == -128, rs1_b1_val == -33
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf73ff9aa0306dffb;  op2val:0xfefc20f780c0aac0
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf73ff9aa0306dffb, 0xfefc20f780c0aac0, x1, 4*XLEN/8, x3)

inst_34:// rs2_b5_val == -5, rs2_b1_val == 127, rs1_b4_val == -17, rs1_b1_val == 85, rs2_b6_val == 8
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa4001efc00155f6;  op2val:0xc008fbfa803f7f01
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfa4001efc00155f6, 0xc008fbfa803f7f01, x1, 5*XLEN/8, x3)

inst_35:// rs2_b5_val == -9, rs2_b1_val == -5, rs2_b6_val == 64, rs2_b2_val == 8
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb3ff8fa2000fc00;  op2val:0x640f7060708fbc0
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfb3ff8fa2000fc00, 0x640f7060708fbc0, x1, 6*XLEN/8, x3)

inst_36:// rs2_b5_val == -17, rs1_b4_val == -128, rs2_b3_val == 8, rs2_b6_val == -5
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbf60980090808f9;  op2val:0xfcfbefaa08060000
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfbf60980090808f9, 0xfcfbefaa08060000, x1, 7*XLEN/8, x3)

inst_37:// rs2_b5_val == -65, rs1_b7_val == -2
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfef855c006f8fd20;  op2val:0x540bf070309fbc0
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfef855c006f8fd20, 0x540bf070309fbc0, x1, 8*XLEN/8, x3)

inst_38:// rs2_b5_val == 85, rs2_b2_val == 85, rs1_b5_val == 8
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd040807fc05fcbf;  op2val:0x70955400655bf20
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfd040807fc05fcbf, 0x70955400655bf20, x1, 9*XLEN/8, x3)

inst_39:// rs2_b6_val == -1, rs1_b6_val == 0, rs2_b0_val == -86, rs1_b3_val == -65, rs2_b7_val == -1
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x8000680bff7c0f8;  op2val:0xfffff75505fc10aa
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x8000680bff7c0f8, 0xfffff75505fc10aa, x1, 10*XLEN/8, x3)

inst_40:// rs2_b6_val == 0, rs1_b5_val == 32, rs1_b3_val == -2
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3102004fefc02fd;  op2val:0x900fabf06071007
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3102004fefc02fd, 0x900fabf06071007, x1, 11*XLEN/8, x3)

inst_41:// rs2_b6_val == 2, rs2_b0_val == 64, rs1_b1_val == rs2_b1_val, rs1_b3_val == -86, rs1_b4_val == rs2_b4_val, rs2_b1_val == 64
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x55085506aaf64009;  op2val:0x023f06f7fb4040
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x55085506aaf64009, 0x023f06f7fb4040, x1, 12*XLEN/8, x3)

inst_42:// rs2_b6_val == 16, rs2_b1_val == -9, rs2_b7_val == 64
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x509c020aa55f7f7;  op2val:0x4010aa5580eff707
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x509c020aa55f7f7, 0x4010aa5580eff707, x1, 13*XLEN/8, x3)

inst_43:// rs2_b6_val == 32, rs1_b2_val == -65, rs2_b1_val == 85
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x550055f701bfbf80;  op2val:0xc0200109fcc055f9
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x550055f701bfbf80, 0xc0200109fcc055f9, x1, 14*XLEN/8, x3)

inst_44:// rs1_b6_val == -5, rs2_b0_val == -128, rs1_b2_val == -128, rs1_b4_val == 8
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6fbfa083f801080;  op2val:0xfff710f6fcc0fa80
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf6fbfa083f801080, 0xfff710f6fcc0fa80, x1, 15*XLEN/8, x3)

inst_45:// rs1_b6_val == -33, rs2_b4_val == -3
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6dfefffdf3f4006;  op2val:0xbf023ffd4080fcfe
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf6dfefffdf3f4006, 0xbf023ffd4080fcfe, x1, 16*XLEN/8, x3)

inst_46:// rs1_b6_val == -65, rs2_b4_val == -1
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf7bf3f0303aabf10;  op2val:0x2f720fffdc0c0ff
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf7bf3f0303aabf10, 0x2f720fffdc0c0ff, x1, 17*XLEN/8, x3)

inst_47:// rs1_b7_val == 1, rs1_b3_val == -128, rs2_b0_val == -9, rs1_b5_val == -2
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1effe018080017f;  op2val:0x2fd20ef05f601f7
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x1effe018080017f, 0x2fd20ef05f601f7, x1, 18*XLEN/8, x3)

inst_48:// rs1_b7_val == 127, rs2_b7_val == -33, rs1_b3_val == 0
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f4008bf00f80807;  op2val:0xdffa03fb08fadfef
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x7f4008bf00f80807, 0xdffa03fb08fadfef, x1, 19*XLEN/8, x3)

inst_49:// rs1_b7_val == 16, rs1_b3_val == 2, rs1_b5_val == -128, rs2_b0_val == 2
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x10f780f70240f6f7;  op2val:0xfd10df08fc3f4002
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x10f780f70240f6f7, 0xfd10df08fc3f4002, x1, 20*XLEN/8, x3)

inst_50:// rs1_b7_val == 64, rs2_b4_val == 0
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x40faf905f9c010fc;  op2val:0xc0f68000f807073f
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x40faf905f9c010fc, 0xc0f68000f807073f, x1, 21*XLEN/8, x3)

inst_51:// rs1_b1_val == -17, rs2_b7_val == -128
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x5083fdf0410eff7;  op2val:0x80dffc55fd55fafa
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x5083fdf0410eff7, 0x80dffc55fd55fafa, x1, 22*XLEN/8, x3)

inst_52:// rs2_b0_val == 127, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcf8c0c0f8800106;  op2val:0x2005f8f701fe3f7f
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfcf8c0c0f8800106, 0x2005f8f701fe3f7f, x1, 23*XLEN/8, x3)

inst_53:// rs1_b1_val == -86, rs2_b2_val == 16, rs2_b3_val == 2, rs1_b2_val == -17
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfec0dfef00efaadf;  op2val:0x71002aa02100601
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfec0dfef00efaadf, 0x71002aa02100601, x1, 24*XLEN/8, x3)

inst_54:// rs2_b0_val == 8, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x1f90940077f0908;  op2val:0xf6c0fe07eff6ef08
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x1f90940077f0908, 0xf6c0fe07eff6ef08, x1, 25*XLEN/8, x3)

inst_55:// rs1_b3_val == 64, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf05f60940068009;  op2val:0x4009bf0455dffa40
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xbf05f60940068009, 0x4009bf0455dffa40, x1, 26*XLEN/8, x3)

inst_56:// rs2_b2_val == -1, rs2_b3_val == -1
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x43fdf20df55c0bf;  op2val:0x20520c0ffff2002
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x43fdf20df55c0bf, 0x20520c0ffff2002, x1, 27*XLEN/8, x3)

inst_57:// rs1_b3_val == -9, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbffcff3ff70503ef;  op2val:0x40f9f94004008005
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xbffcff3ff70503ef, 0x40f9f94004008005, x1, 28*XLEN/8, x3)

inst_58:// rs2_b2_val == 1, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x207f07fbdfc080fe;  op2val:0xaabf05fafd01fdf7
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x207f07fbdfc080fe, 0xaabf05fafd01fdf7, x1, 29*XLEN/8, x3)

inst_59:// rs1_b3_val == 85, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x10808fc5504f7c0;  op2val:0x7f06fdf6f7071005
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x10808fc5504f7c0, 0x7f06fdf6f7071005, x1, 30*XLEN/8, x3)

inst_60:// rs1_b4_val == 0, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbfa3f00fefc0355;  op2val:0x4000c003fd10fb02
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfbfa3f00fefc0355, 0x4000c003fd10fb02, x1, 31*XLEN/8, x3)

inst_61:// rs2_b2_val == 64, rs1_b2_val == -3
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf10fefb05fd5507;  op2val:0xf8c0c03f024000f6
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xbf10fefb05fd5507, 0xf8c0c03f024000f6, x1, 32*XLEN/8, x3)

inst_62:// rs2_b2_val == -9, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc070640050820f8;  op2val:0x3f10effdc0f7fb55
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfc070640050820f8, 0x3f10effdc0f7fb55, x1, 33*XLEN/8, x3)

inst_63:// rs2_b2_val == -86, rs2_b3_val == -33
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xdf02fef610fcfdfe;  op2val:0xf6090380dfaaf903
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xdf02fef610fcfdfe, 0xf6090380dfaaf903, x1, 34*XLEN/8, x3)

inst_64:// rs1_b4_val == -3, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x8aaf9fd4006f602;  op2val:0xfc80fdaaf8f8fafd
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x8aaf9fd4006f602, 0xfc80fdaaf8f8fafd, x1, 35*XLEN/8, x3)

inst_65:// rs2_b3_val == 127, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ffb7f01f609aaaa;  op2val:0x3ff9fdf67f7f80ff
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3ffb7f01f609aaaa, 0x3ff9fdf67f7f80ff, x1, 36*XLEN/8, x3)

inst_66:// rs1_b4_val == 85, rs2_b3_val == -65
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfbaaf755fc018005;  op2val:0xf65506f9bff7bffe
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfbaaf755fc018005, 0xf65506f9bff7bffe, x1, 37*XLEN/8, x3)

inst_67:// rs1_b5_val == rs2_b5_val, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef04072001;  op2val:0x10fbfffdfd0907bf
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xffffffef04072001, 0x10fbfffdfd0907bf, x1, 38*XLEN/8, x3)

inst_68:// rs2_b3_val == 32, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf900fc10f9f90609;  op2val:0xfff9f6aa20040708
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf900fc10f9f90609, 0xfff9f6aa20040708, x1, 39*XLEN/8, x3)

inst_69:// rs2_b3_val == -86, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3ffa55ffbffa0901;  op2val:0xf7dffdf6aaef09fc
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3ffa55ffbffa0901, 0xf7dffdf6aaef09fc, x1, 40*XLEN/8, x3)

inst_70:// rs2_b1_val == 8, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3bf0903fa063f20;  op2val:0xfd09efaaf9f808df
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3bf0903fa063f20, 0xfd09efaaf9f808df, x1, 41*XLEN/8, x3)

inst_71:// rs1_b5_val == -3, rs2_b1_val == -1
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x3faafd08033f0480;  op2val:0x9febfdff9fcff06
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x3faafd08033f0480, 0x9febfdff9fcff06, x1, 42*XLEN/8, x3)

inst_72:// rs1_b2_val == 32, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa10fc07f6200555;  op2val:0xf70301fc55f601fd
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xaa10fc07f6200555, 0xf70301fc55f601fd, x1, 43*XLEN/8, x3)

inst_73:// rs1_b2_val == -2, rs2_b1_val == 2
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x0406fef7fe013f;  op2val:0xdffe030408000255
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x0406fef7fe013f, 0xdffe030408000255, x1, 44*XLEN/8, x3)

inst_74:// rs2_b4_val == 1, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xff07097f7ffffaf8;  op2val:0xc004f801fb08fc08
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xff07097f7ffffaf8, 0xc004f801fb08fc08, x1, 45*XLEN/8, x3)

inst_75:// rs2_b4_val == 16, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfdc0f6faf92005ff;  op2val:0x8df0010dfffaadf
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfdc0f6faf92005ff, 0x8df0010dfffaadf, x1, 46*XLEN/8, x3)

inst_76:// rs2_b4_val == -2, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x4f706bf04dffdfb;  op2val:0x9faf7fe04bf00f8
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x4f706bf04dffdfb, 0x9faf7fe04bf00f8, x1, 47*XLEN/8, x3)

inst_77:// rs1_b5_val == -65, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc03bffb093f55aa;  op2val:0x303ff0280fa2002
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xfc03bffb093f55aa, 0x303ff0280fa2002, x1, 48*XLEN/8, x3)

inst_78:// rs1_b5_val == -86, 
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xf9f6aabffc030904;  op2val:0xf8f8f6400620f700
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xf9f6aabffc030904, 0xf8f8f6400620f700, x1, 49*XLEN/8, x3)

inst_79:// rs1_b0_val == 0, rs2_b1_val == -17, rs2_b3_val == 64, rs2_b6_val == -17, rs1_b5_val == 127, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b2_val == 127, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b7_val == 0, rs1_b4_val == -1, rs1_b7_val == -17
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xeffc7ffffa050100;  op2val:0xef3f07407feff8
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xeffc7ffffa050100, 0xef3f07407feff8, x1, 50*XLEN/8, x3)

inst_80:// rs1_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 4, rs1_b6_val == rs2_b6_val, rs2_b5_val == 4, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b7_val == 1, rs1_b5_val == -5, rs1_b2_val == 64, rs1_b7_val == 4, rs1_b1_val == -1, rs1_b3_val == rs2_b3_val, rs2_b2_val == -17, rs2_b4_val == 64, rs1_b4_val == -9
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0x4fafbf70540ff7f;  op2val:0x1fa044005eff804
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0x4fafbf70540ff7f, 0x1fa044005eff804, x1, 51*XLEN/8, x3)

inst_81:// rs1_b0_val == -5, rs2_b6_val == -2, rs2_b2_val == -128, rs1_b2_val == 0, rs1_b5_val == 16, rs2_b0_val == -5, rs2_b5_val == -2, rs2_b7_val == 16, rs1_b7_val == -65
// opcode: paaddu.b ; op1:x30; op2:x29; dest:x31; op1val:0xbfef10fcf90003fb;  op2val:0x10fefe020580effb
TEST_RR_OP(paaddu.b, x31, x30, x29, 0x0000000000000000, 0xbfef10fcf90003fb, 0x10fefe020580effb, x1, 52*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 53*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
