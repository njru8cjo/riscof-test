
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdif.b instruction of the RISC-V RV64PZicsr extension for the pdif.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdif.b)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x8, rd==x26, rs1_b0_val == -128, rs1_b7_val == -3, rs1_b2_val == 0, rs2_b7_val == -128, rs2_b0_val == -33, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val != rs2_b0_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val != rs2_b1_val, rs1_b4_val == -128, rs1_b2_val != rs2_b2_val, rs2_b2_val == 64, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b4_val != rs2_b4_val, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b5_val != rs2_b5_val, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b6_val != rs2_b6_val, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b7_val != rs2_b7_val, rs1_b5_val == -3
// opcode: pdif.b ; op1:x19; op2:x8; dest:x26; op1val:0xfdf8fd80fa000580;  op2val:0x800707f8064006df
TEST_RR_OP(pdif.b, x26, x19, x8, 0x0000000000000000, 0xfdf8fd80fa000580, 0x800707f8064006df, x5, 0*XLEN/8, x7)

inst_1:// rs2 == rd != rs1, rs1==x3, rs2==x1, rd==x1, rs1_b0_val == -1, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b3_val == 16, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 4, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b6_val == 85, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b4_val == -1, rs1_b7_val == 16, rs1_b1_val == -1, rs2_b1_val == 32, rs2_b2_val == -17, rs1_b4_val == -2, rs2_b5_val == -86, rs1_b6_val == 2
// opcode: pdif.b ; op1:x3; op2:x1; dest:x1; op1val:0x1002c0fefc00ffff;  op2val:0xf955aaff10ef2004
TEST_RR_OP(pdif.b, x1, x3, x1, 0x0000000000000000, 0x1002c0fefc00ffff, 0xf955aaff10ef2004, x5, 1*XLEN/8, x7)

inst_2:// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x16, rs1_b0_val == 0, rs1_b3_val == 4, rs1_b6_val == 64, rs1_b5_val == -1, rs1_b1_val == 85, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -17, rs2_b0_val == -3, rs2_b6_val == -86, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b7_val == -2, rs2_b1_val == -2
// opcode: pdif.b ; op1:x28; op2:x28; dest:x16; op1val:0x1040fffc04005500;  op2val:0xfeaac0c0eff9fefd
TEST_RR_OP(pdif.b, x16, x28, x28, 0x0000000000000000, 0x1040fffc04005500, 0xfeaac0c0eff9fefd, x5, 2*XLEN/8, x7)

inst_3:// rs1 == rd != rs2, rs1==x25, rs2==x4, rd==x25, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b6_val == -17, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b5_val == -2, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b1_val == -1, rs1_b2_val == -9, rs2_b7_val == 64, rs2_b4_val == 32, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b3_val == -128, rs1_b7_val == -65, rs1_b4_val == -9, rs1_b6_val == 8
// opcode: pdif.b ; op1:x25; op2:x4; dest:x25; op1val:0xbf083ff780f73f01;  op2val:0x40effe200907ff06
TEST_RR_OP(pdif.b, x25, x25, x4, 0x0000000000000000, 0xbf083ff780f73f01, 0x40effe200907ff06, x5, 3*XLEN/8, x7)

inst_4:// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_b0_val == 127, rs1_b4_val == -33, rs1_b1_val == -65, rs2_b0_val == 8, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == -65, rs2_b5_val == 8, rs1_b3_val == -33, rs1_b7_val == 0, rs2_b3_val == -86, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b5_val > 0 and rs2_b5_val > 0
// opcode: pdif.b ; op1:x27; op2:x27; dest:x27; op1val:0xbf03dfdffabf7f;  op2val:0xf80908f9aaf6fc08
TEST_RR_OP(pdif.b, x27, x27, x27, 0x0000000000000000, 0xbf03dfdffabf7f, 0xf80908f9aaf6fc08, x5, 4*XLEN/8, x7)

inst_5:// rs1==x26, rs2==x29, rd==x19, rs1_b0_val == 2, rs1_b6_val == 16, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b1_val == -9, rs2_b3_val == -9, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 8, rs1_b7_val == 2, rs2_b4_val == 127, rs2_b5_val == -33, rs1_b5_val == -86
// opcode: pdif.b ; op1:x26; op2:x29; dest:x19; op1val:0x210aaf8df08f702;  op2val:0xfa55df7ff705fff9
TEST_RR_OP(pdif.b, x19, x26, x29, 0x0000000000000000, 0x210aaf8df08f702, 0xfa55df7ff705fff9, x5, 5*XLEN/8, x7)

inst_6:// rs1==x24, rs2==x30, rd==x4, rs1_b0_val == 4, rs2_b4_val == 85, rs2_b5_val == -1, rs1_b5_val == 0, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b3_val == -3, rs2_b0_val == 32, rs1_b7_val == rs2_b7_val, rs1_b2_val == -3
// opcode: pdif.b ; op1:x24; op2:x30; dest:x4; op1val:0xfcfa00fafdfd0904;  op2val:0xfcaaff55f7053f20
TEST_RR_OP(pdif.b, x4, x24, x30, 0x0000000000000000, 0xfcfa00fafdfd0904, 0xfcaaff55f7053f20, x5, 6*XLEN/8, x7)

inst_7:// rs1==x1, rs2==x0, rd==x30, rs1_b0_val == 8, rs2_b1_val == -3, rs2_b3_val == 8, rs2_b2_val == 0, rs1_b4_val == 2, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b7_val == -17
// opcode: pdif.b ; op1:x1; op2:x0; dest:x30; op1val:0x910fc02df3f0508;  op2val:0xef55037f0800fd04
TEST_RR_OP(pdif.b, x30, x1, x0, 0x0000000000000000, 0x910fc02df3f0508, 0xef55037f0800fd04, x5, 7*XLEN/8, x7)

inst_8:// rs1==x18, rs2==x3, rd==x15, rs1_b0_val == 16, rs1_b1_val == -33, rs2_b1_val == -33, rs1_b1_val == rs2_b1_val, rs1_b5_val == 32, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b4_val == 4, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b7_val == -33, rs1_b3_val == 1
// opcode: pdif.b ; op1:x18; op2:x3; dest:x15; op1val:0xdf10200401fcdf10;  op2val:0x4007f6fa06f8df03
TEST_RR_OP(pdif.b, x15, x18, x3, 0x0000000000000000, 0xdf10200401fcdf10, 0x4007f6fa06f8df03, x5, 8*XLEN/8, x7)

inst_9:// rs1==x8, rs2==x12, rd==x21, rs1_b0_val == 32, rs2_b3_val == 32, rs2_b5_val == 0, rs2_b1_val == -86, rs1_b5_val == 4, rs2_b0_val == -5, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b2_val == -2, rs2_b7_val == -86
// opcode: pdif.b ; op1:x8; op2:x12; dest:x21; op1val:0xdf0304f9f63fff20;  op2val:0xaa3f000620feaafb
TEST_RR_OP(pdif.b, x21, x8, x12, 0x0000000000000000, 0xdf0304f9f63fff20, 0xaa3f000620feaafb, x5, 9*XLEN/8, x7)

inst_10:// rs1==x9, rs2==x14, rd==x28, rs1_b0_val == 64, rs2_b5_val == 2, rs1_b3_val == -9, rs2_b3_val == -33, rs2_b7_val == -33, rs2_b1_val == 64
// opcode: pdif.b ; op1:x9; op2:x14; dest:x28; op1val:0x2090003f7fc5540;  op2val:0xdfc0023fdf064007
TEST_RR_OP(pdif.b, x28, x9, x14, 0x0000000000000000, 0x2090003f7fc5540, 0xdfc0023fdf064007, x5, 10*XLEN/8, x7)

inst_11:// rs1==x11, rs2==x10, rd==x2, rs1_b0_val == -2, rs1_b4_val == -86, rs2_b0_val == 1, rs1_b6_val == -33, rs1_b3_val == -17, rs1_b7_val == -128, rs2_b4_val == 1, rs1_b5_val == -65, rs2_b6_val == -1, rs1_b1_val == 32
// opcode: pdif.b ; op1:x11; op2:x10; dest:x2; op1val:0x80dfbfaaeff620fe;  op2val:0x6fff80105ef0701
TEST_RR_OP(pdif.b, x2, x11, x10, 0x0000000000000000, 0x80dfbfaaeff620fe, 0x6fff80105ef0701, x5, 11*XLEN/8, x7)

inst_12:// rs1==x10, rs2==x24, rd==x13, rs1_b0_val == -3, rs2_b3_val == 127, rs2_b1_val == -5, rs1_b7_val == 127, rs2_b7_val == -3, rs1_b6_val == 1
// opcode: pdif.b ; op1:x10; op2:x24; dest:x13; op1val:0x7f01f9aaf903dffd;  op2val:0xfd063f077f06fb06
TEST_RR_OP(pdif.b, x13, x10, x24, 0x0000000000000000, 0x7f01f9aaf903dffd, 0xfd063f077f06fb06, x5, 12*XLEN/8, x7)

inst_13:// rs1==x14, rs2==x16, rd==x6, rs1_b0_val == -5, rs2_b3_val == -3, rs1_b6_val == rs2_b6_val, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val == 1, rs2_b2_val == 1, rs2_b0_val == -9, rs1_b2_val == rs2_b2_val, rs2_b7_val == 32, rs1_b3_val == rs2_b3_val
// opcode: pdif.b ; op1:x14; op2:x16; dest:x6; op1val:0x707bf80fd01fffb;  op2val:0x20070209fd0140f7
TEST_RR_OP(pdif.b, x6, x14, x16, 0x0000000000000000, 0x707bf80fd01fffb, 0x20070209fd0140f7, x5, 13*XLEN/8, x7)

inst_14:// rs1==x21, rs2==x15, rd==x29, rs1_b0_val == -9, rs2_b3_val == 2, rs1_b5_val == rs2_b5_val, rs2_b6_val == -33, rs2_b2_val == 16, rs1_b2_val == 32, rs2_b4_val == 16, rs1_b3_val == 0
// opcode: pdif.b ; op1:x21; op2:x15; dest:x29; op1val:0xf6f903fe0020faf7;  op2val:0xfddf03100210fdc0
TEST_RR_OP(pdif.b, x29, x21, x15, 0x0000000000000000, 0xf6f903fe0020faf7, 0xfddf03100210fdc0, x5, 14*XLEN/8, x7)

inst_15:// rs1==x17, rs2==x2, rd==x14, rs1_b0_val == -17, rs2_b3_val == -5, rs1_b6_val == -3, rs1_b3_val == 64, rs2_b4_val == 4
// opcode: pdif.b ; op1:x17; op2:x2; dest:x14; op1val:0xc0fdfcf7400706ef;  op2val:0x40c00304fbf8fb08
TEST_RR_OP(pdif.b, x14, x17, x2, 0x0000000000000000, 0xc0fdfcf7400706ef, 0x40c00304fbf8fb08, x5, 15*XLEN/8, x7)

inst_16:// rs1==x2, rs2==x18, rd==x24, rs1_b0_val == -33, rs1_b3_val == -2, rs2_b5_val == -17, rs1_b1_val == 0, rs2_b2_val == -65, rs1_b7_val == 85
// opcode: pdif.b ; op1:x2; op2:x18; dest:x24; op1val:0x553ffff8fefa00df;  op2val:0xdff6effadfbfc0fb
TEST_RR_OP(pdif.b, x24, x2, x18, 0x0000000000000000, 0x553ffff8fefa00df, 0xdff6effadfbfc0fb, x5, 16*XLEN/8, x14)

inst_17:// rs1==x20, rs2==x25, rd==x12, rs1_b0_val == -65, rs1_b1_val == -3, rs1_b3_val == 2, rs1_b5_val == 16, rs2_b3_val == -65, rs2_b2_val == -33, rs1_b7_val == -86
// opcode: pdif.b ; op1:x20; op2:x25; dest:x12; op1val:0xaa3f10f60208fdbf;  op2val:0x555c007bfdffff6
TEST_RR_OP(pdif.b, x12, x20, x25, 0x0000000000000000, 0xaa3f10f60208fdbf, 0x555c007bfdffff6, x5, 17*XLEN/8, x14)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:// rs1==x15, rs2==x11, rd==x22, rs1_b0_val == 85, rs2_b1_val == -9, rs1_b2_val == 4, rs1_b5_val == -5, rs1_b1_val == 127, rs2_b2_val == 85, rs1_b4_val == 16, rs2_b6_val == 2, rs2_b4_val == -17
// opcode: pdif.b ; op1:x15; op2:x11; dest:x22; op1val:0x640fb1080047f55;  op2val:0xf802efef0255f7fa
TEST_RR_OP(pdif.b, x22, x15, x11, 0x0000000000000000, 0x640fb1080047f55, 0xf802efef0255f7fa, x1, 0*XLEN/8, x14)

inst_19:// rs1==x31, rs2==x17, rd==x10, rs1_b0_val == -86, rs2_b5_val == -5, rs2_b3_val == 1, rs1_b7_val == -17, rs1_b3_val == -86
// opcode: pdif.b ; op1:x31; op2:x17; dest:x10; op1val:0xeffa04feaa3ff8aa;  op2val:0xfeaafb7f0107df09
TEST_RR_OP(pdif.b, x10, x31, x17, 0x0000000000000000, 0xeffa04feaa3ff8aa, 0xfeaafb7f0107df09, x1, 1*XLEN/8, x14)

inst_20:// rs1==x22, rs2==x13, rd==x11, rs1_b1_val == -128, rs2_b0_val == 16, rs1_b6_val == -86, rs2_b3_val == 85, rs2_b7_val == 4, rs2_b1_val == 8, rs2_b6_val == 127, rs2_b4_val == -5
// opcode: pdif.b ; op1:x22; op2:x13; dest:x11; op1val:0x10aac01004f880c0;  op2val:0x47f3ffb55000810
TEST_RR_OP(pdif.b, x11, x22, x13, 0x0000000000000000, 0x10aac01004f880c0, 0x47f3ffb55000810, x1, 2*XLEN/8, x14)

inst_21:// rs1==x16, rs2==x31, rd==x17, rs1_b1_val == 1, rs1_b3_val == 127, rs2_b6_val == -3, rs1_b6_val == -9, rs2_b2_val == 2, rs1_b5_val == -17, rs2_b7_val == 8, rs2_b1_val == 4
// opcode: pdif.b ; op1:x16; op2:x31; dest:x17; op1val:0xf8f7ef057fc001f8;  op2val:0x8fd08fc03020403
TEST_RR_OP(pdif.b, x17, x16, x31, 0x0000000000000000, 0xf8f7ef057fc001f8, 0x8fd08fc03020403, x1, 3*XLEN/8, x14)

inst_22:// rs1==x23, rs2==x20, rd==x9, rs1_b1_val == 2, rs2_b4_val == -33, rs2_b6_val == 32, rs1_b6_val == -5, rs2_b7_val == -5
// opcode: pdif.b ; op1:x23; op2:x20; dest:x9; op1val:0xfcfb030207fd027f;  op2val:0xfb203fdff6f6f9f6
TEST_RR_OP(pdif.b, x9, x23, x20, 0x0000000000000000, 0xfcfb030207fd027f, 0xfb203fdff6f6f9f6, x1, 4*XLEN/8, x14)

inst_23:// rs1==x7, rs2==x23, rd==x0, rs1_b1_val == 4, rs2_b4_val == -65, rs2_b5_val == 1, rs2_b0_val == -17, rs2_b7_val == 1, rs1_b5_val == -9, rs2_b6_val == -128
// opcode: pdif.b ; op1:x7; op2:x23; dest:x0; op1val:0x603f73f04030402;  op2val:0x18001bf0755fdef
TEST_RR_OP(pdif.b, x0, x7, x23, 0x0000000000000000, 0x603f73f04030402, 0x18001bf0755fdef, x1, 5*XLEN/8, x14)

inst_24:// rs1==x12, rs2==x19, rd==x8, rs1_b1_val == 8, rs1_b5_val == 8, rs2_b2_val == -3, rs2_b7_val == 16, rs2_b1_val == 127, rs1_b4_val == rs2_b4_val, rs2_b6_val == 8
// opcode: pdif.b ; op1:x12; op2:x19; dest:x8; op1val:0x3f08047f3f08fe;  op2val:0x1008020420fd7f04
TEST_RR_OP(pdif.b, x8, x12, x19, 0x0000000000000000, 0x3f08047f3f08fe, 0x1008020420fd7f04, x1, 6*XLEN/8, x14)

inst_25:// rs1==x30, rs2==x21, rd==x20, rs1_b1_val == 16, rs1_b4_val == 0, rs2_b6_val == 1, rs1_b3_val == -1
// opcode: pdif.b ; op1:x30; op2:x21; dest:x20; op1val:0x10f7c000fff710f9;  op2val:0x10102bffddff7c0
TEST_RR_OP(pdif.b, x20, x30, x21, 0x0000000000000000, 0x10f7c000fff710f9, 0x10102bffddff7c0, x1, 7*XLEN/8, x14)

inst_26:// rs1==x4, rs2==x9, rd==x18, rs1_b1_val == 64, rs1_b6_val == 32, rs2_b7_val == -9, rs2_b1_val == -65
// opcode: pdif.b ; op1:x4; op2:x9; dest:x18; op1val:0x8020fff9ff064006;  op2val:0xf701eff6bff8bf03
TEST_RR_OP(pdif.b, x18, x4, x9, 0x0000000000000000, 0x8020fff9ff064006, 0xf701eff6bff8bf03, x1, 8*XLEN/8, x14)

inst_27:// rs1==x5, rs2==x22, rd==x23, rs1_b1_val == -2, rs2_b6_val == 16, rs2_b0_val == -2, rs2_b7_val == 0
// opcode: pdif.b ; op1:x5; op2:x22; dest:x23; op1val:0x7f07f9053ff8fe02;  op2val:0x10df10dffafcfe
TEST_RR_OP(pdif.b, x23, x5, x22, 0x0000000000000000, 0x7f07f9053ff8fe02, 0x10df10dffafcfe, x1, 9*XLEN/8, x14)

inst_28:// rs1==x13, rs2==x7, rd==x5, rs2_b4_val == -86, rs2_b6_val == 64, rs1_b1_val == -17, rs2_b0_val == 64, rs1_b7_val == -2, rs1_b4_val == -3
// opcode: pdif.b ; op1:x13; op2:x7; dest:x5; op1val:0xfe0208fd0008efbf;  op2val:0xfe40feaa01fdfc40
TEST_RR_OP(pdif.b, x5, x13, x7, 0x0000000000000000, 0xfe0208fd0008efbf, 0xfe40feaa01fdfc40, x1, 10*XLEN/8, x14)

inst_29:// rs1==x0, rs2==x6, rd==x31, rs2_b5_val == -128, rs1_b3_val == 32, rs1_b5_val == 64
// opcode: pdif.b ; op1:x0; op2:x6; dest:x31; op1val:0xaa0340fc200704ef;  op2val:0x4f980093f557ffb
TEST_RR_OP(pdif.b, x31, x0, x6, 0x0000000000000000, 0xaa0340fc200704ef, 0x4f980093f557ffb, x1, 11*XLEN/8, x14)

inst_30:// rs1==x6, rs2==x5, rd==x3, rs2_b5_val == 127, rs1_b2_val == -86, rs2_b6_val == 4, rs2_b4_val == -9
// opcode: pdif.b ; op1:x6; op2:x5; dest:x3; op1val:0xfc103f03fcaaff04;  op2val:0x3047ff7f8f9fb01
TEST_RR_OP(pdif.b, x3, x6, x5, 0x0000000000000000, 0xfc103f03fcaaff04, 0x3047ff7f8f9fb01, x1, 12*XLEN/8, x14)

inst_31:// rs1==x29, rs2==x26, rd==x7, rs2_b5_val == 4, rs1_b2_val == -5
// opcode: pdif.b ; op1:x29; op2:x26; dest:x7; op1val:0x2f910f6effb3f04;  op2val:0x4c004df7fc0f7ef
TEST_RR_OP(pdif.b, x7, x29, x26, 0x0000000000000000, 0x2f910f6effb3f04, 0x4c004df7fc0f7ef, x1, 13*XLEN/8, x2)

inst_32:// rs2_b5_val == 16, rs1_b3_val == -65, rs2_b2_val == -9
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x5fd0904bf2055aa;  op2val:0x4aa1007c0f73f3f
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x5fd0904bf2055aa, 0x4aa1007c0f73f3f, x1, 14*XLEN/8, x2)

inst_33:// rs2_b5_val == 32, rs1_b2_val == -33, rs2_b3_val == 4
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x55f8ff0080dff710;  op2val:0x50420aa04dfffc0
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x55f8ff0080dff710, 0x50420aa04dfffc0, x1, 15*XLEN/8, x2)

inst_34:// rs2_b5_val == 64, rs1_b7_val == -9, rs2_b0_val == -86, rs2_b1_val == 16, rs1_b2_val == -17
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xf7f9f710faeffc55;  op2val:0xc0df40f606f910aa
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xf7f9f710faeffc55, 0xc0df40f606f910aa, x1, 16*XLEN/8, x2)

inst_35:// rs2_b5_val == -3, rs2_b4_val == -128, rs1_b4_val == 64
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x8003064007f8f63f;  op2val:0xfd02fd8010dffe20
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x8003064007f8f63f, 0xfd02fd8010dffe20, x1, 17*XLEN/8, x2)

inst_36:// rs2_b5_val == -9, rs2_b0_val == -128, rs2_b2_val == -86, rs2_b7_val == -1, rs1_b5_val == -2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfddffef6fd3ff703;  op2val:0xff40f70302aa0980
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfddffef6fd3ff703, 0xff40f70302aa0980, x1, 18*XLEN/8, x2)

inst_37:// rs2_b5_val == -65, rs2_b6_val == -65, rs2_b7_val == -65
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x92007fcfcef7f7f;  op2val:0xbfbfbf040110c0fa
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x92007fcfcef7f7f, 0xbfbfbf040110c0fa, x1, 19*XLEN/8, x2)

inst_38:// rs2_b5_val == 85, rs1_b5_val == 127, rs1_b7_val == -5, rs1_b4_val == 127, rs2_b2_val == 32
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb3f7f7fff0701f9;  op2val:0xdffc55010420df01
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfb3f7f7fff0701f9, 0xdffc55010420df01, x1, 20*XLEN/8, x2)

inst_39:// rs2_b6_val == 0, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x07f8aaf80804bf;  op2val:0xf600f7c005064007
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x07f8aaf80804bf, 0xf600f7c005064007, x1, 21*XLEN/8, x2)

inst_40:// rs1_b1_val == -5, rs1_b6_val == -2, rs2_b3_val == -2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x6fe050720f8fb20;  op2val:0x4f6aaf9fe07c001
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x6fe050720f8fb20, 0x4f6aaf9fe07c001, x1, 22*XLEN/8, x2)

inst_41:// rs2_b6_val == -2, rs2_b4_val == 8
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfcf87f003ffdf9df;  op2val:0xaafedf0804fafc10
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfcf87f003ffdf9df, 0xaafedf0804fafc10, x1, 23*XLEN/8, x2)

inst_42:// rs2_b6_val == -5, rs2_b4_val == -3
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x800304f6fa06faf9;  op2val:0x40fb3ffdaadf2001
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x800304f6fa06faf9, 0x40fb3ffdaadf2001, x1, 24*XLEN/8, x2)

inst_43:// rs2_b6_val == -9, rs1_b2_val == 2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x03fafc7f02f607;  op2val:0x6f755dfc00308fe
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x03fafc7f02f607, 0x6f755dfc00308fe, x1, 25*XLEN/8, x2)

inst_44:// rs1_b1_val == -86, rs1_b5_val == -33, rs1_b4_val == 8
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfa40df08df02aa00;  op2val:0xdffaef06bfbf09fe
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfa40df08df02aa00, 0xdffaef06bfbf09fe, x1, 26*XLEN/8, x2)

inst_45:// rs1_b2_val == -128, rs1_b5_val == 2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x6f702dff980fd20;  op2val:0xfa09fd0409f8dfaa
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x6f702dff980fd20, 0xfa09fd0409f8dfaa, x1, 27*XLEN/8, x2)

inst_46:// rs1_b2_val == -1, rs1_b4_val == 85, rs2_b1_val == 1
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xf601ff55bffff701;  op2val:0x6bf0707fc000180
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xf601ff55bffff701, 0x6bf0707fc000180, x1, 28*XLEN/8, x2)

inst_47:// rs1_b6_val == -17, rs2_b0_val == 2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xc0efdf07070708fb;  op2val:0xfac0df55bfc0aa02
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xc0efdf07070708fb, 0xfac0df55bfc0aa02, x1, 29*XLEN/8, x2)

inst_48:// rs1_b6_val == 85, rs2_b0_val == -1
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfb554005050504bf;  op2val:0x9f9f9fb7f10fbff
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfb554005050504bf, 0x9f9f9fb7f10fbff, x1, 30*XLEN/8, x2)

inst_49:// rs1_b7_val == -1, rs2_b4_val == 0, rs1_b6_val == 0
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xff0010052001f8aa;  op2val:0x5bfdf0007004040
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xff0010052001f8aa, 0x5bfdf0007004040, x1, 31*XLEN/8, x2)

inst_50:// rs1_b7_val == 1, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x1f9063faa20fd09;  op2val:0xfffff9f7fdfcf8f9
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x1f9063faa20fd09, 0xfffff9f7fdfcf8f9, x1, 32*XLEN/8, x2)

inst_51:// rs1_b7_val == 4, rs1_b4_val == 32, rs2_b7_val == 2, rs2_b4_val == 64
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x43fef2006f7fafe;  op2val:0x2effc40aa07aaff
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x43fef2006f7fafe, 0x2effc40aa07aaff, x1, 33*XLEN/8, x2)

inst_52:// rs1_b7_val == 8, rs1_b4_val == -65, rs1_b3_val == 8, rs2_b1_val == -128
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x80020bf08aafadf;  op2val:0x3f09067ff70980f9
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x80020bf08aafadf, 0x3f09067ff70980f9, x1, 34*XLEN/8, x2)

inst_53:// rs1_b7_val == 32, rs2_b0_val == 0, rs2_b1_val == 85
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x20201007df07dffd;  op2val:0x602100055f85500
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x20201007df07dffd, 0x602100055f85500, x1, 35*XLEN/8, x2)

inst_54:// rs1_b7_val == 64, rs2_b1_val == 2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x40faf704bf200620;  op2val:0x100202aa08000240
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x40faf704bf200620, 0x100202aa08000240, x1, 36*XLEN/8, x2)

inst_55:// rs2_b0_val == 127, rs1_b2_val == 64, rs2_b1_val == -17
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x6fb0207064010f8;  op2val:0xf602ef001040ef7f
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x6fb0207064010f8, 0xf602ef001040ef7f, x1, 37*XLEN/8, x2)

inst_56:// rs1_b2_val == 127, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x8faff07037f013f;  op2val:0xaaf8fafcf802fff6
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x8faff07037f013f, 0xaaf8fafcf802fff6, x1, 38*XLEN/8, x2)

inst_57:// rs1_b2_val == 16, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x520eff6f9100001;  op2val:0xf6ffc0f7fc02f620
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x520eff6f9100001, 0xf6ffc0f7fc02f620, x1, 39*XLEN/8, x2)

inst_58:// rs2_b7_val == 127, rs1_b4_val == 1, rs2_b4_val == 2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfc10fe0102000380;  op2val:0x7f07030203c08005
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfc10fe0102000380, 0x7f07030203c08005, x1, 40*XLEN/8, x2)

inst_59:// rs2_b0_val == -65, rs1_b6_val == 4
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x3f04fa3ff606fb3f;  op2val:0x403f7fbffcfdfcbf
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x3f04fa3ff606fb3f, 0x403f7fbffcfdfcbf, x1, 41*XLEN/8, x2)

inst_60:// rs1_b3_val == 16, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6c0060510ff40df;  op2val:0xf900554002dfef07
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xf6c0060510ff40df, 0xf900554002dfef07, x1, 42*XLEN/8, x2)

inst_61:// rs1_b0_val == rs2_b0_val, rs2_b4_val == -2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xf6f8f7bffdaa20ff;  op2val:0x8fe00fefe02faff
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xf6f8f7bffdaa20ff, 0x8fe00fefe02faff, x1, 43*XLEN/8, x2)

inst_62:// rs2_b2_val == -128, rs2_b3_val == -1, rs1_b5_val == 85
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f05557f10f61003;  op2val:0xfa2004bfff800210
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x7f05557f10f61003, 0xfa2004bfff800210, x1, 44*XLEN/8, x2)

inst_63:// rs1_b3_val == -5, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xef053ffafbdf0105;  op2val:0xfafd3f55bff604f8
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xef053ffafbdf0105, 0xfafd3f55bff604f8, x1, 45*XLEN/8, x2)

inst_64:// rs2_b2_val == -1, rs1_b4_val == -17
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfe1003ef01fdf907;  op2val:0xfd80ff0609ffbffb
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfe1003ef01fdf907, 0xfd80ff0609ffbffb, x1, 46*XLEN/8, x2)

inst_65:// rs2_b2_val == 127, rs1_b6_val == -128
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xf780ef060607043f;  op2val:0xdf8004faff7f2004
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xf780ef060607043f, 0xdf8004faff7f2004, x1, 47*XLEN/8, x2)

inst_66:// rs1_b3_val == 85, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfd3ffd085510aac0;  op2val:0xaa20dff80280ffbf
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfd3ffd085510aac0, 0xaa20dff80280ffbf, x1, 48*XLEN/8, x2)

inst_67:// rs2_b2_val == 4, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x6fc02ef200601fa;  op2val:0x455f9002004f8bf
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x6fc02ef200601fa, 0x455f9002004f8bf, x1, 49*XLEN/8, x2)

inst_68:// rs2_b2_val == 8, rs2_b1_val == 0, rs1_b5_val == 1
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x400010902000940;  op2val:0xfd02fcbfdf0800fb
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x400010902000940, 0xfd02fcbfdf0800fb, x1, 50*XLEN/8, x2)

inst_69:// rs1_b4_val == -1, rs1_b6_val == -1
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x9ff05ff01fffedf;  op2val:0xf9aa55203ff910ef
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x9ff05ff01fffedf, 0xf9aa55203ff910ef, x1, 51*XLEN/8, x2)

inst_70:// rs2_b7_val == 85, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x25555aafa06f7fd;  op2val:0x55f910fa20402080
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x25555aafa06f7fd, 0x55f910fa20402080, x1, 52*XLEN/8, x2)

inst_71:// rs1_b5_val == -128, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x4008020c0208000;  op2val:0x80f902fa02aafb00
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x4008020c0208000, 0x80f902fa02aafb00, x1, 53*XLEN/8, x2)

inst_72:// rs2_b3_val == 64, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fb0503fa8005;  op2val:0x1aa06aa407f0301
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xfff8fb0503fa8005, 0x1aa06aa407f0301, x1, 54*XLEN/8, x2)

inst_73:// rs2_b0_val == 85, rs2_b3_val == -128
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x7ff9f70940fbfef9;  op2val:0xf708003f80053f55
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x7ff9f70940fbfef9, 0xf708003f80053f55, x1, 55*XLEN/8, x2)

inst_74:// rs1_b6_val == 127, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x7f023f08100404;  op2val:0xf8ff001003077f08
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x7f023f08100404, 0xf8ff001003077f08, x1, 56*XLEN/8, x2)

inst_75:// rs1_b2_val == -2, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x5f801aa04fe55f7;  op2val:0x7f2080faf9fe08f7
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x5f801aa04fe55f7, 0x7f2080faf9fe08f7, x1, 57*XLEN/8, x2)

inst_76:// rs2_b2_val == -5, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x240ffdff7017f02;  op2val:0x40c00507fcfbfa20
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x240ffdff7017f02, 0x40c00507fcfbfa20, x1, 58*XLEN/8, x2)

inst_77:// rs1_b2_val == -65, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xaa030407fbbf07fe;  op2val:0x80780dff6044009
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xaa030407fbbf07fe, 0x80780dff6044009, x1, 59*XLEN/8, x2)

inst_78:// rs1_b2_val == 85, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x37ffd200355fcdf;  op2val:0x2550101c0fdf700
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x37ffd200355fcdf, 0x2550101c0fdf700, x1, 60*XLEN/8, x2)

inst_79:// rs1_b4_val == -5, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x220fcfb3fbf0305;  op2val:0xfa061003c0f7bfbf
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x220fcfb3fbf0305, 0xfa061003c0f7bfbf, x1, 61*XLEN/8, x2)

inst_80:// rs2_b3_val == 0, 
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x807f80effaf8aa05;  op2val:0xff80fa010007fa09
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x807f80effaf8aa05, 0xff80fa010007fa09, x1, 62*XLEN/8, x2)

inst_81:// rs1_b0_val == 0, rs1_b3_val == 4, rs1_b6_val == 64, rs1_b5_val == -1, rs1_b1_val == 85, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -17, rs2_b0_val == -3, rs2_b6_val == -86, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b7_val == -2, rs2_b1_val == -2
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x1040fffc04005500;  op2val:0xfeaac0c0eff9fefd
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x1040fffc04005500, 0xfeaac0c0eff9fefd, x1, 63*XLEN/8, x2)

inst_82:// rs1_b0_val == 127, rs1_b4_val == -33, rs1_b1_val == -65, rs2_b0_val == 8, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == -65, rs2_b5_val == 8, rs1_b3_val == -33, rs1_b7_val == 0, rs2_b3_val == -86, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b5_val > 0 and rs2_b5_val > 0
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0xbf03dfdffabf7f;  op2val:0xf80908f9aaf6fc08
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0xbf03dfdffabf7f, 0xf80908f9aaf6fc08, x1, 64*XLEN/8, x2)

inst_83:// rs1_b0_val == 8, rs2_b1_val == -3, rs2_b3_val == 8, rs2_b2_val == 0, rs1_b4_val == 2, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b7_val == -17
// opcode: pdif.b ; op1:x30; op2:x29; dest:x31; op1val:0x910fc02df3f0508;  op2val:0xef55037f0800fd04
TEST_RR_OP(pdif.b, x31, x30, x29, 0x0000000000000000, 0x910fc02df3f0508, 0xef55037f0800fd04, x1, 65*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 18*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 66*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
