
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sun Dec 29 06:49:26 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p15.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pm4addau.h instruction of the RISC-V RV64PZicsr extension for the pm4addau.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pm4addau.h)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs2_h1_val == -4097, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 1024, rs1_h3_val == 128, rs2_h3_val == -32768, rs1_h3_val != rs2_h3_val
// opcode: pm4addau.h ; op1:x16; op2:x16; dest:x16; op1val:0x80040000058000;  op2val:0x8000fffcefffc000
TEST_RR_OP(pm4addau.h, x16, x16, x16, 0x0000000000000000, 0x80040000058000, 0x8000fffcefffc000, x4, 0*XLEN/8, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x2, rd==x30, rs1_h0_val == -1, rs1_h3_val == -17, rs2_h3_val == 16, rs2_h2_val == 512, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -4097, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 64, rs2_h1_val == 64
// opcode: pm4addau.h ; op1:x7; op2:x2; dest:x30; op1val:0xffefeffffffaffff;  op2val:0x10020000400040
TEST_RR_OP(pm4addau.h, x30, x7, x2, 0x0000000000000000, 0xffefeffffffaffff, 0x10020000400040, x4, 1*XLEN/8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x25, rs2==x18, rd==x25, rs1_h0_val == 0, rs2_h0_val == -2, rs1_h2_val == -257, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs1_h3_val == 32, rs1_h1_val == -9, rs2_h2_val == 4, rs2_h3_val == -21846
// opcode: pm4addau.h ; op1:x25; op2:x18; dest:x25; op1val:0x20fefffff70000;  op2val:0xaaaa0004fffbfffe
TEST_RR_OP(pm4addau.h, x25, x25, x18, 0x0000000000000000, 0x20fefffff70000, 0xaaaa0004fffbfffe, x4, 2*XLEN/8, x8)

inst_3:
// rs2 == rd != rs1, rs1==x1, rs2==x17, rd==x17, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == 21845, rs2_h2_val == 1, rs2_h0_val == -16385, rs2_h1_val == 32767, rs1_h2_val == -2
// opcode: pm4addau.h ; op1:x1; op2:x17; dest:x17; op1val:0x5555fffe55550001;  op2val:0xfff800017fffbfff
TEST_RR_OP(pm4addau.h, x17, x1, x17, 0x0000000000000000, 0x5555fffe55550001, 0xfff800017fffbfff, x4, 3*XLEN/8, x8)

inst_4:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x6, rs1_h0_val == 32767, rs2_h0_val == -3, rs1_h1_val == 1, rs2_h3_val == 8192, rs2_h1_val == -65, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 32767, rs1_h3_val > 0 and rs2_h3_val > 0
// opcode: pm4addau.h ; op1:x14; op2:x14; dest:x6; op1val:0x7ffffeff00017fff;  op2val:0x2000c000ffbffffd
TEST_RR_OP(pm4addau.h, x6, x14, x14, 0x0000000000000000, 0x7ffffeff00017fff, 0x2000c000ffbffffd, x4, 4*XLEN/8, x8)

inst_5:
// rs1==x26, rs2==x21, rd==x29, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 32, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 0, rs1_h1_val == 4096, rs2_h0_val == 2048
// opcode: pm4addau.h ; op1:x26; op2:x21; dest:x29; op1val:0x00000610000002;  op2val:0x030020fff90800
TEST_RR_OP(pm4addau.h, x29, x26, x21, 0x0000000000000000, 0x00000610000002, 0x030020fff90800, x4, 5*XLEN/8, x8)

inst_6:
// rs1==x2, rs2==x13, rd==x14, rs1_h0_val == 4, rs1_h1_val == -32768, rs1_h3_val == -2049, rs2_h0_val == -4097, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 512
// opcode: pm4addau.h ; op1:x2; op2:x13; dest:x14; op1val:0xf7ff020080000004;  op2val:0xfffa00047fffefff
TEST_RR_OP(pm4addau.h, x14, x2, x13, 0x0000000000000000, 0xf7ff020080000004, 0xfffa00047fffefff, x4, 6*XLEN/8, x8)

inst_7:
// rs1==x24, rs2==x12, rd==x21, rs1_h0_val == 8, rs1_h1_val == 2, rs2_h2_val == 16384, rs2_h0_val == 2, rs2_h3_val == -8193, rs1_h3_val == 2048, rs2_h1_val == 16
// opcode: pm4addau.h ; op1:x24; op2:x12; dest:x21; op1val:0x800000700020008;  op2val:0xdfff400000100002
TEST_RR_OP(pm4addau.h, x21, x24, x12, 0x0000000000000000, 0x800000700020008, 0xdfff400000100002, x4, 7*XLEN/8, x8)

inst_8:
// rs1==x18, rs2==x7, rd==x20, rs1_h0_val == 16, rs1_h1_val == -8193, rs1_h2_val == -2049, rs2_h2_val == -5, rs2_h0_val == -32768, rs1_h3_val == 2, rs2_h3_val == -9
// opcode: pm4addau.h ; op1:x18; op2:x7; dest:x20; op1val:0x02f7ffdfff0010;  op2val:0xfff7fffb00108000
TEST_RR_OP(pm4addau.h, x20, x18, x7, 0x0000000000000000, 0x02f7ffdfff0010, 0xfff7fffb00108000, x4, 8*XLEN/8, x8)

inst_9:
// rs1==x28, rs2==x20, rd==x9, rs1_h0_val == 32, rs1_h0_val == rs2_h0_val, rs1_h2_val == -16385, rs1_h3_val == -16385, rs2_h2_val == -1025, rs2_h0_val == 32, rs2_h3_val == -4097
// opcode: pm4addau.h ; op1:x28; op2:x20; dest:x9; op1val:0xbfffbfff10000020;  op2val:0xeffffbff3fff0020
TEST_RR_OP(pm4addau.h, x9, x28, x20, 0x0000000000000000, 0xbfffbfff10000020, 0xeffffbff3fff0020, x4, 9*XLEN/8, x8)

inst_10:
// rs1==x19, rs2==x1, rd==x11, rs1_h0_val == 64, rs1_h2_val == -32768, rs2_h0_val == 128
// opcode: pm4addau.h ; op1:x19; op2:x1; dest:x11; op1val:0xfff88000fff70040;  op2val:0x090005fff80080
TEST_RR_OP(pm4addau.h, x11, x19, x1, 0x0000000000000000, 0xfff88000fff70040, 0x090005fff80080, x4, 10*XLEN/8, x8)

inst_11:
// rs1==x22, rs2==x5, rd==x7, rs1_h0_val == 128, rs1_h3_val == -5, rs2_h2_val == 64, rs1_h1_val == 1024, rs2_h3_val == -129, rs1_h2_val == -5
// opcode: pm4addau.h ; op1:x22; op2:x5; dest:x7; op1val:0xfffbfffb04000080;  op2val:0xff7f0040c000fff9
TEST_RR_OP(pm4addau.h, x7, x22, x5, 0x0000000000000000, 0xfffbfffb04000080, 0xff7f0040c000fff9, x4, 11*XLEN/8, x8)

inst_12:
// rs1==x15, rs2==x3, rd==x22, rs1_h0_val == 256, rs1_h2_val == 16, rs2_h1_val == 2, rs2_h0_val == 16384, rs2_h3_val == 32
// opcode: pm4addau.h ; op1:x15; op2:x3; dest:x22; op1val:0x800001004000100;  op2val:0x20fffc00024000
TEST_RR_OP(pm4addau.h, x22, x15, x3, 0x0000000000000000, 0x800001004000100, 0x20fffc00024000, x4, 12*XLEN/8, x8)

inst_13:
// rs1==x23, rs2==x10, rd==x24, rs1_h0_val == 512, rs2_h3_val == -33, rs2_h2_val == -9, rs1_h1_val == -257
// opcode: pm4addau.h ; op1:x23; op2:x10; dest:x24; op1val:0xfffcfffefeff0200;  op2val:0xffdffff700020003
TEST_RR_OP(pm4addau.h, x24, x23, x10, 0x0000000000000000, 0xfffcfffefeff0200, 0xffdffff700020003, x4, 13*XLEN/8, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x29, rs2==x6, rd==x19, rs1_h0_val == 1024, rs1_h1_val == -4097, rs2_h2_val == 8192, rs2_h0_val == -21846, rs2_h1_val == -1, rs1_h2_val == 16384, rs1_h3_val == -2
// opcode: pm4addau.h ; op1:x29; op2:x6; dest:x19; op1val:0xfffe4000efff0400;  op2val:0xfff82000ffffaaaa
TEST_RR_OP(pm4addau.h, x19, x29, x6, 0x0000000000000000, 0xfffe4000efff0400, 0xfff82000ffffaaaa, x1, 0*XLEN/8, x7)

inst_15:
// rs1==x0, rs2==x22, rd==x12, rs1_h0_val == 2048, rs1_h2_val == 4096, rs2_h0_val == -513, rs2_h1_val == 0
// opcode: pm4addau.h ; op1:x0; op2:x22; dest:x12; op1val:0x800100000050800;  op2val:0x10fffb0000fdff
TEST_RR_OP(pm4addau.h, x12, x0, x22, 0x0000000000000000, 0x800100000050800, 0x10fffb0000fdff, x1, 1*XLEN/8, x7)

inst_16:
// rs1==x17, rs2==x11, rd==x27, rs1_h0_val == 4096, rs2_h3_val == 2, rs2_h1_val == 2048, rs1_h3_val == -8193, rs2_h2_val == -65, rs2_h0_val == 4
// opcode: pm4addau.h ; op1:x17; op2:x11; dest:x27; op1val:0xdffffffc55551000;  op2val:0x02ffbf08000004
TEST_RR_OP(pm4addau.h, x27, x17, x11, 0x0000000000000000, 0xdffffffc55551000, 0x02ffbf08000004, x1, 2*XLEN/8, x7)

inst_17:
// rs1==x27, rs2==x8, rd==x3, rs1_h0_val == 8192, rs2_h2_val == -8193, rs1_h1_val == -5
// opcode: pm4addau.h ; op1:x27; op2:x8; dest:x3; op1val:0x02fffefffb2000;  op2val:0xfffadffffff80007
TEST_RR_OP(pm4addau.h, x3, x27, x8, 0x0000000000000000, 0x02fffefffb2000, 0xfffadffffff80007, x1, 3*XLEN/8, x7)

inst_18:
// rs1==x11, rs2==x0, rd==x15, rs1_h0_val == 16384, rs2_h2_val == 1024, rs2_h1_val == -2049, rs1_h2_val == 2048, rs2_h3_val == -16385, rs1_h3_val == 8192, rs1_h1_val == -129
// opcode: pm4addau.h ; op1:x11; op2:x0; dest:x15; op1val:0x20000800ff7f4000;  op2val:0xbfff0400f7ff0003
TEST_RR_OP(pm4addau.h, x15, x11, x0, 0x0000000000000000, 0x20000800ff7f4000, 0xbfff0400f7ff0003, x1, 4*XLEN/8, x7)

inst_19:
// rs1==x8, rs2==x28, rd==x5, rs1_h0_val == -2, rs2_h3_val == 512, rs2_h0_val == 0
// opcode: pm4addau.h ; op1:x8; op2:x28; dest:x5; op1val:0xdffffff9fefffffe;  op2val:0x200fbff00020000
TEST_RR_OP(pm4addau.h, x5, x8, x28, 0x0000000000000000, 0xdffffff9fefffffe, 0x200fbff00020000, x1, 5*XLEN/8, x7)

inst_20:
// rs1==x20, rs2==x30, rd==x31, rs1_h0_val == -3, rs1_h1_val == -21846, rs1_h2_val == 21845, rs2_h2_val == -17, rs1_h3_val == 1, rs2_h3_val == -1, rs2_h0_val == 512
// opcode: pm4addau.h ; op1:x20; op2:x30; dest:x31; op1val:0x015555aaaafffd;  op2val:0xffffffef00400200
TEST_RR_OP(pm4addau.h, x31, x20, x30, 0x0000000000000000, 0x015555aaaafffd, 0xffffffef00400200, x1, 6*XLEN/8, x7)

inst_21:
// rs1==x12, rs2==x27, rd==x18, rs1_h0_val == -5, rs1_h3_val == -4097, rs1_h1_val == -33, rs1_h2_val == 32767
// opcode: pm4addau.h ; op1:x12; op2:x27; dest:x18; op1val:0xefff7fffffdffffb;  op2val:0x20000009fff8fff9
TEST_RR_OP(pm4addau.h, x18, x12, x27, 0x0000000000000000, 0xefff7fffffdffffb, 0x20000009fff8fff9, x1, 7*XLEN/8, x7)

inst_22:
// rs1==x21, rs2==x15, rd==x26, rs1_h0_val == -9, rs1_h2_val == -65, rs2_h1_val == 4, rs2_h2_val == -1, rs1_h3_val == -257
// opcode: pm4addau.h ; op1:x21; op2:x15; dest:x26; op1val:0xfeffffbffff9fff7;  op2val:0x07ffff0004efff
TEST_RR_OP(pm4addau.h, x26, x21, x15, 0x0000000000000000, 0xfeffffbffff9fff7, 0x07ffff0004efff, x1, 8*XLEN/8, x7)

inst_23:
// rs1==x9, rs2==x31, rd==x2, rs1_h0_val == -17, rs2_h3_val == 4, rs1_h3_val == -1025, rs2_h0_val == -1025, rs2_h1_val == -32768, rs1_h2_val == -3
// opcode: pm4addau.h ; op1:x9; op2:x31; dest:x2; op1val:0xfbfffffd0009ffef;  op2val:0x04ffef8000fbff
TEST_RR_OP(pm4addau.h, x2, x9, x31, 0x0000000000000000, 0xfbfffffd0009ffef, 0x04ffef8000fbff, x1, 9*XLEN/8, x7)

inst_24:
// rs1==x10, rs2==x9, rd==x0, rs1_h0_val == -33, 
// opcode: pm4addau.h ; op1:x10; op2:x9; dest:x0; op1val:0x20fffddfffffdf;  op2val:0x8000000500060000
TEST_RR_OP(pm4addau.h, x0, x10, x9, 0x0000000000000000, 0x20fffddfffffdf, 0x8000000500060000, x1, 10*XLEN/8, x7)

inst_25:
// rs1==x30, rs2==x4, rd==x8, rs1_h0_val == -65, rs2_h1_val == 8, rs2_h0_val == -257, rs1_h2_val == 2, rs2_h2_val == -2
// opcode: pm4addau.h ; op1:x30; op2:x4; dest:x8; op1val:0xfeff0002ffdfffbf;  op2val:0x05fffe0008feff
TEST_RR_OP(pm4addau.h, x8, x30, x4, 0x0000000000000000, 0xfeff0002ffdfffbf, 0x05fffe0008feff, x1, 11*XLEN/8, x7)

inst_26:
// rs1==x13, rs2==x24, rd==x10, rs1_h0_val == -129, rs1_h3_val == 16
// opcode: pm4addau.h ; op1:x13; op2:x24; dest:x10; op1val:0x10c000fff6ff7f;  op2val:0x050004ffbf0040
TEST_RR_OP(pm4addau.h, x10, x13, x24, 0x0000000000000000, 0x10c000fff6ff7f, 0x050004ffbf0040, x1, 12*XLEN/8, x7)

inst_27:
// rs1==x4, rs2==x25, rd==x23, rs1_h0_val == -257, rs2_h1_val == 4096, rs2_h2_val == 8
// opcode: pm4addau.h ; op1:x4; op2:x25; dest:x23; op1val:0x800003fff9feff;  op2val:0xefff000810000006
TEST_RR_OP(pm4addau.h, x23, x4, x25, 0x0000000000000000, 0x800003fff9feff, 0xefff000810000006, x1, 13*XLEN/8, x7)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_28:
// rs1==x5, rs2==x26, rd==x13, rs1_h0_val == -513, rs2_h0_val == 8192, rs1_h1_val == 128, rs2_h1_val == -513, rs2_h2_val == -33, rs2_h3_val == -17
// opcode: pm4addau.h ; op1:x5; op2:x26; dest:x13; op1val:0xfffc00070080fdff;  op2val:0xffefffdffdff2000
TEST_RR_OP(pm4addau.h, x13, x5, x26, 0x0000000000000000, 0xfffc00070080fdff, 0xffefffdffdff2000, x2, 0*XLEN/8, x7)

inst_29:
// rs1==x3, rs2==x29, rd==x1, rs1_h0_val == -1025, rs1_h1_val == 16, rs2_h0_val == 1024, rs2_h2_val == -2049
// opcode: pm4addau.h ; op1:x3; op2:x29; dest:x1; op1val:0x05fffc0010fbff;  op2val:0xfffcf7ff00060400
TEST_RR_OP(pm4addau.h, x1, x3, x29, 0x0000000000000000, 0x05fffc0010fbff, 0xfffcf7ff00060400, x2, 1*XLEN/8, x7)

inst_30:
// rs1==x31, rs2==x23, rd==x4, rs1_h0_val == -2049, rs1_h2_val == 1, rs2_h1_val == -8193, rs1_h3_val == -65
// opcode: pm4addau.h ; op1:x31; op2:x23; dest:x4; op1val:0xffbf0001fffbf7ff;  op2val:0x05c000dffffffd
TEST_RR_OP(pm4addau.h, x4, x31, x23, 0x0000000000000000, 0xffbf0001fffbf7ff, 0x05c000dffffffd, x2, 2*XLEN/8, x7)

inst_31:
// rs1==x6, rs2==x19, rd==x28, rs1_h0_val == -4097, rs1_h3_val == -9, rs2_h0_val == -5, rs2_h1_val == -129, rs1_h1_val == 256, rs1_h3_val == rs2_h3_val
// opcode: pm4addau.h ; op1:x6; op2:x19; dest:x28; op1val:0xfff7fff60100efff;  op2val:0xfff70006ff7ffffb
TEST_RR_OP(pm4addau.h, x28, x6, x19, 0x0000000000000000, 0xfff7fff60100efff, 0xfff70006ff7ffffb, x2, 3*XLEN/8, x7)

inst_32:
// rs1_h0_val == -8193, rs1_h1_val == 4, rs2_h2_val == -129, rs2_h3_val == 1
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffe0004dfff;  op2val:0x01ff7f0010fffc
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffbffffe0004dfff, 0x01ff7f0010fffc, x2, 4*XLEN/8, x7)

inst_33:
// rs2_h3_val == 32767, rs2_h1_val == -1025, rs2_h0_val == -129
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffbfefffeff;  op2val:0x7fff2000fbffff7f
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfbfffffbfefffeff, 0x7fff2000fbffff7f, x2, 5*XLEN/8, x7)

inst_34:
// rs2_h3_val == 8, rs2_h0_val == -8193, rs1_h0_val == -21846, rs1_h2_val == 256
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbf01000003aaaa;  op2val:0x082000fffbdfff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffbf01000003aaaa, 0x082000fffbdfff, x2, 6*XLEN/8, x7)

inst_35:
// rs2_h3_val == 64, rs2_h2_val == 4096, rs2_h0_val == -65
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x054000fffaffff;  op2val:0x4010000006ffbf
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x054000fffaffff, 0x4010000006ffbf, x2, 7*XLEN/8, x7)

inst_36:
// rs2_h3_val == 128, rs1_h2_val == -33, rs1_h3_val == 4, rs2_h0_val == -33
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdf3fff0000;  op2val:0x80fffcefffffdf
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x04ffdf3fff0000, 0x80fffcefffffdf, x2, 8*XLEN/8, x7)

inst_37:
// rs2_h3_val == 256, rs1_h2_val == -129
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7fdffffff6;  op2val:0x1002000f7fffffd
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x20ff7fdffffff6, 0x1002000f7fffffd, x2, 9*XLEN/8, x7)

inst_38:
// rs2_h3_val == 1024, rs1_h1_val == 8192, rs1_h2_val == -9
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x05fff72000fffc;  op2val:0x400fffeff7f0400
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x05fff72000fffc, 0x400fffeff7f0400, x2, 10*XLEN/8, x7)

inst_39:
// rs2_h3_val == 2048, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff62000fffb;  op2val:0x8002000fbffaaaa
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xdffffff62000fffb, 0x8002000fbffaaaa, x2, 11*XLEN/8, x7)

inst_40:
// rs2_h3_val == 4096, rs2_h2_val == 2048
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffbc000ffbf;  op2val:0x100008000006bfff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfffafffbc000ffbf, 0x100008000006bfff, x2, 12*XLEN/8, x7)

inst_41:
// rs2_h3_val == 16384, rs1_h2_val == -1, rs2_h2_val == -257, rs2_h0_val == -9
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff20001000;  op2val:0x4000feffc000fff7
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x5555ffff20001000, 0x4000feffc000fff7, x2, 13*XLEN/8, x7)

inst_42:
// rs2_h3_val == -2, rs2_h0_val == 256, rs1_h2_val == 4, rs2_h1_val == -2
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff70004fffc0005;  op2val:0xfffe4000fffe0100
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfff70004fffc0005, 0xfffe4000fffe0100, x2, 14*XLEN/8, x7)

inst_43:
// rs2_h3_val == -3, rs1_h3_val == -33, rs1_h2_val == 0, rs2_h0_val == 32767, rs1_h1_val == 16384, rs2_h1_val == 32
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000040000005;  op2val:0xfffdfffe00207fff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffdf000040000005, 0xfffdfffe00207fff, x2, 15*XLEN/8, x7)

inst_44:
// rs2_h3_val == -5, rs2_h1_val == -16385, rs2_h2_val == -4097
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x200000050100fff8;  op2val:0xfffbefffbffffff8
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x200000050100fff8, 0xfffbefffbffffff8, x2, 16*XLEN/8, x7)

inst_45:
// rs2_h3_val == -65, rs2_h1_val == 256, rs1_h1_val == -1, rs2_h0_val == -2049, rs1_h2_val == -17
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffefffff0002;  op2val:0xffbfffdf0100f7ff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xbfffffefffff0002, 0xffbfffdf0100f7ff, x2, 17*XLEN/8, x7)

inst_46:
// rs2_h3_val == -257, rs1_h3_val == 8
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x08400010000100;  op2val:0xfeffffff08007fff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x08400010000100, 0xfeffffff08007fff, x2, 18*XLEN/8, x7)

inst_47:
// rs2_h3_val == -513, rs2_h2_val == 21845
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x03000540000008;  op2val:0xfdff555500068000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x03000540000008, 0xfdff555500068000, x2, 19*XLEN/8, x7)

inst_48:
// rs2_h3_val == -1025, rs2_h2_val == -513
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffefdffffeff;  op2val:0xfbfffdff7fffc000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfffbffefdffffeff, 0xfbfffdff7fffc000, x2, 20*XLEN/8, x7)

inst_49:
// rs2_h3_val == -2049, rs1_h1_val == -3, rs1_h3_val == -32768
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffefffd0002;  op2val:0xf7fffffffffcfffa
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x8000fffefffd0002, 0xf7fffffffffcfffa, x2, 21*XLEN/8, x7)

inst_50:
// rs2_h3_val == 21845, rs1_h3_val == 256
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fff8fff80800;  op2val:0x555500060004ffbf
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x100fff8fff80800, 0x555500060004ffbf, x2, 22*XLEN/8, x7)

inst_51:
// rs1_h0_val == -16385, rs2_h2_val == -16385
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffdffffdbfff;  op2val:0xfffabfff00408000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffbfffdffffdbfff, 0xfffabfff00408000, x2, 23*XLEN/8, x7)

inst_52:
// rs1_h0_val == 21845, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x10555500105555;  op2val:0xffdf3ffffdffff7f
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x10555500105555, 0xffdf3ffffdffff7f, x2, 24*XLEN/8, x7)

inst_53:
// rs1_h1_val == 0, rs1_h2_val == 8
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000800000200;  op2val:0xff7f5555fffc0020
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xf7ff000800000200, 0xff7f5555fffc0020, x2, 25*XLEN/8, x7)

inst_54:
// rs1_h1_val == 32767, rs1_h3_val == -1, rs2_h0_val == 8
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff00047fff4000;  op2val:0x06fffbc0000008
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffff00047fff4000, 0x06fffbc0000008, x2, 26*XLEN/8, x7)

inst_55:
// rs1_h3_val == -3, rs2_h0_val == 1
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffd55551000fffb;  op2val:0x7fffdffffff60001
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfffd55551000fffb, 0x7fffdffffff60001, x2, 27*XLEN/8, x7)

inst_56:
// rs1_h3_val == -129, rs1_h2_val == -21846
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaa3fff0005;  op2val:0xefffffef01000040
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xff7faaaa3fff0005, 0xefffffef01000040, x2, 28*XLEN/8, x7)

inst_57:
// rs1_h3_val == -513, rs1_h1_val == rs2_h1_val, rs1_h1_val == 2048
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000108000010;  op2val:0x8000ffdf0800fff7
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfdff000108000010, 0x8000ffdf0800fff7, x2, 29*XLEN/8, x7)

inst_58:
// rs1_h3_val == -21846, rs2_h2_val == -32768
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdffeff0006;  op2val:0x55558000fff6ffdf
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xaaaaffdffeff0006, 0x55558000fff6ffdf, x2, 30*XLEN/8, x7)

inst_59:
// rs2_h0_val == -1, rs1_h2_val == 8192, rs1_h1_val == -2049
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x20002000f7ff0010;  op2val:0xc0000006c000ffff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x20002000f7ff0010, 0xc0000006c000ffff, x2, 31*XLEN/8, x7)

inst_60:
// rs2_h0_val == 16, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x03c000fff9fff7;  op2val:0xfffcf7ffffff0010
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x03c000fff9fff7, 0xfffcf7ffffff0010, x2, 32*XLEN/8, x7)

inst_61:
// rs2_h0_val == 4096, rs2_h1_val == -21846
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff91000ff7fffef;  op2val:0x8000dfffaaaa1000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfff91000ff7fffef, 0x8000dfffaaaa1000, x2, 33*XLEN/8, x7)

inst_62:
// rs2_h0_val == -17, rs2_h1_val == 1
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff85555fff90005;  op2val:0xc00080000001ffef
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfff85555fff90005, 0xc00080000001ffef, x2, 34*XLEN/8, x7)

inst_63:
// rs1_h1_val == 8, rs1_h2_val == 32, rs2_h1_val == 1024
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xc00000200008fffd;  op2val:0xfffd000404000040
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xc00000200008fffd, 0xfffd000404000040, x2, 35*XLEN/8, x7)

inst_64:
// rs1_h1_val == 32, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffa00200400;  op2val:0x205555fffbffef
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xeffffffa00200400, 0x205555fffbffef, x2, 36*XLEN/8, x7)

inst_65:
// rs1_h1_val == 64, rs2_h3_val == 0
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffb00400040;  op2val:0x00000400027fff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xeffffffb00400040, 0x00000400027fff, x2, 37*XLEN/8, x7)

inst_66:
// rs1_h2_val == rs2_h2_val, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x202000ffdf0010;  op2val:0x00200000054000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x202000ffdf0010, 0x00200000054000, x2, 38*XLEN/8, x7)

inst_67:
// rs1_h1_val == 512, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00060200fff8;  op2val:0x40fff7fff9dfff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xdfff00060200fff8, 0x40fff7fff9dfff, x2, 39*XLEN/8, x7)

inst_68:
// rs2_h0_val == 21845, rs1_h3_val == 512
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x200400002008000;  op2val:0xffef000400055555
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x200400002008000, 0xffef000400055555, x2, 40*XLEN/8, x7)

inst_69:
// rs1_h1_val == -2, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0800fffeff7f;  op2val:0xfffffffb0020feff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xbfff0800fffeff7f, 0xfffffffb0020feff, x2, 41*XLEN/8, x7)

inst_70:
// rs1_h1_val == -17, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xefff4000ffeffff6;  op2val:0xff7fdffffff90100
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xefff4000ffeffff6, 0xff7fdffffff90100, x2, 42*XLEN/8, x7)

inst_71:
// rs1_h1_val == -513, rs1_h3_val == 1024, rs2_h2_val == 2
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fdff0009;  op2val:0xfffa000200070004
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x4000000fdff0009, 0xfffa000200070004, x2, 43*XLEN/8, x7)

inst_72:
// rs1_h1_val == -1025, rs2_h1_val == -9
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffdfbfffff8;  op2val:0x4000020fff7fffd
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffbffffdfbfffff8, 0x4000020fff7fffd, x2, 44*XLEN/8, x7)

inst_73:
// rs2_h1_val == 512, rs2_h2_val == 16
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x55553fff01000010;  op2val:0x80000100200fffc
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x55553fff01000010, 0x80000100200fffc, x2, 45*XLEN/8, x7)

inst_74:
// rs1_h1_val == -16385, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaabfff0002;  op2val:0xf7ff00010800fff6
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffdfaaaabfff0002, 0xf7ff00010800fff6, x2, 46*XLEN/8, x7)

inst_75:
// rs2_h1_val == 8192, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff1000dfff0008;  op2val:0xaaaafff720000020
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xbfff1000dfff0008, 0xaaaafff720000020, x2, 47*XLEN/8, x7)

inst_76:
// rs2_h1_val == 16384, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x400feffffffbfff;  op2val:0x0700034000aaaa
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x400feffffffbfff, 0x0700034000aaaa, x2, 48*XLEN/8, x7)

inst_77:
// rs2_h1_val == -3, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7ffbff3fff;  op2val:0x8000006fffd0000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x09ff7ffbff3fff, 0x8000006fffd0000, x2, 49*XLEN/8, x7)

inst_78:
// rs2_h1_val == -17, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd00030200;  op2val:0xfffa0008ffef0400
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x100fffd00030200, 0xfffa0008ffef0400, x2, 50*XLEN/8, x7)

inst_79:
// rs2_h1_val == -33, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x070800fffafdff;  op2val:0xfdff2000ffdfc000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x070800fffafdff, 0xfdff2000ffdfc000, x2, 51*XLEN/8, x7)

inst_80:
// rs2_h1_val == -257, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x09000304001000;  op2val:0x80000002feff8000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x09000304001000, 0x80000002feff8000, x2, 52*XLEN/8, x7)

inst_81:
// rs1_h2_val == 64, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc004000400800;  op2val:0x050004ffdffffa
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfffc004000400800, 0x050004ffdffffa, x2, 53*XLEN/8, x7)

inst_82:
// rs1_h2_val == 128, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080dfff4000;  op2val:0x2055550800fffe
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xf7ff0080dfff4000, 0x2055550800fffe, x2, 54*XLEN/8, x7)

inst_83:
// rs2_h2_val == 128, rs2_h1_val == 21845
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffafffd0010;  op2val:0x5555008055550006
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfff9fffafffd0010, 0x5555008055550006, x2, 55*XLEN/8, x7)

inst_84:
// rs1_h2_val == -513, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff00088000;  op2val:0x01fff90005fdff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xfff9fdff00088000, 0x01fff90005fdff, x2, 56*XLEN/8, x7)

inst_85:
// rs2_h2_val == 256, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff080000080004;  op2val:0xfffc0100f7ffffff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xffff080000080004, 0xfffc0100f7ffffff, x2, 57*XLEN/8, x7)

inst_86:
// rs1_h2_val == -1025, rs2_h2_val == 0, rs1_h1_val == -65
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbffffbf0005;  op2val:0x10000000007fffc
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x3ffffbffffbf0005, 0x10000000007fffc, x2, 58*XLEN/8, x7)

inst_87:
// rs1_h2_val == -8193, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x10dfff00020800;  op2val:0x03fffaffdfffff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x10dfff00020800, 0x03fffaffdfffff, x2, 59*XLEN/8, x7)

inst_88:
// rs1_h3_val == 4096, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x10005555fff60001;  op2val:0xaaaafdffaaaafeff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x10005555fff60001, 0xaaaafdffaaaafeff, x2, 60*XLEN/8, x7)

inst_89:
// rs2_h2_val == -3, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xc0000005ff7f0001;  op2val:0xfff6fffd10000008
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xc0000005ff7f0001, 0xfff6fffd10000008, x2, 61*XLEN/8, x7)

inst_90:
// rs1_h3_val == 64, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffd0006;  op2val:0xfbfffbff0006ffdf
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x400000fffd0006, 0xfbfffbff0006ffdf, x2, 62*XLEN/8, x7)

inst_91:
// rs2_h2_val == -21846, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x20ffffffefffdf;  op2val:0xfff7aaaa00063fff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x20ffffffefffdf, 0xfff7aaaa00063fff, x2, 63*XLEN/8, x7)

inst_92:
// rs2_h2_val == 32767, rs1_h3_val == 16384
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfffeffffeff;  op2val:0x80007ffffffefffd
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x4000dfffeffffeff, 0x80007ffffffefffd, x2, 64*XLEN/8, x7)

inst_93:
// rs2_h1_val == 128, 
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfffefffefff0040;  op2val:0xfbff00800080bfff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0xdfffefffefff0040, 0xfbff00800080bfff, x2, 65*XLEN/8, x7)

inst_94:
// rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val != rs2_h2_val, rs2_h1_val == -4097, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 1024, rs1_h3_val == 128, rs2_h3_val == -32768, rs1_h3_val != rs2_h3_val
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x80040000058000;  op2val:0x8000fffcefffc000
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x80040000058000, 0x8000fffcefffc000, x2, 66*XLEN/8, x7)

inst_95:
// rs1_h0_val == 32767, rs2_h0_val == -3, rs1_h1_val == 1, rs2_h3_val == 8192, rs2_h1_val == -65, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 32767, rs1_h3_val > 0 and rs2_h3_val > 0
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff00017fff;  op2val:0x2000c000ffbffffd
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x7ffffeff00017fff, 0x2000c000ffbffffd, x2, 67*XLEN/8, x7)

inst_96:
// rs1_h0_val == 2048, rs1_h2_val == 4096, rs2_h0_val == -513, rs2_h1_val == 0
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x800100000050800;  op2val:0x10fffb0000fdff
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x800100000050800, 0x10fffb0000fdff, x2, 68*XLEN/8, x7)

inst_97:
// rs1_h0_val == 16384, rs2_h2_val == 1024, rs2_h1_val == -2049, rs1_h2_val == 2048, rs2_h3_val == -16385, rs1_h3_val == 8192, rs1_h1_val == -129
// opcode: pm4addau.h ; op1:x30; op2:x29; dest:x31; op1val:0x20000800ff7f4000;  op2val:0xbfff0400f7ff0003
TEST_RR_OP(pm4addau.h, x31, x30, x29, 0x0000000000000000, 0x20000800ff7f4000, 0xbfff0400f7ff0003, x2, 69*XLEN/8, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 70*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
