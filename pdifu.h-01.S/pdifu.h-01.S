
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Sat Dec  7 11:24:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p10.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pdifu.h instruction of the RISC-V RV64PZicsr extension for the pdifu.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pdifu.h)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x4, rd==x13, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -65, rs1_h0_val != rs2_h0_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -257, rs2_h0_val == -8193, rs2_h2_val == -33, rs1_h2_val != rs2_h2_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 8192, rs1_h3_val != rs2_h3_val, rs1_h2_val == -5
// opcode: pdifu.h ; op1:x31; op2:x4; dest:x13; op1val:0xffbffffb20008000;  op2val:0xc000ffdffeffdfff
TEST_RR_OP(pdifu.h, x13, x31, x4, 0x0000000000000000, 0xffbffffb20008000, 0xc000ffdffeffdfff, x5, 0*XLEN/8, x8)

inst_1:
// rs2 == rd != rs1, rs1==x25, rs2==x11, rd==x11, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -32768, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs1_h2_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 0, rs2_h3_val == -5, rs2_h0_val == 4
// opcode: pdifu.h ; op1:x25; op2:x11; dest:x11; op1val:0x007fff8000ffff;  op2val:0xfffb2000fff80004
TEST_RR_OP(pdifu.h, x11, x25, x11, 0x0000000000000000, 0x007fff8000ffff, 0xfffb2000fff80004, x5, 1*XLEN/8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x3, rs1_h0_val == 0, rs2_h0_val == -3, rs2_h2_val == 1024, rs1_h2_val == 2, rs2_h3_val == -65, rs1_h1_val == -3
// opcode: pdifu.h ; op1:x2; op2:x2; dest:x3; op1val:0x000002fffd0000;  op2val:0xffbf0400fefffffd
TEST_RR_OP(pdifu.h, x3, x2, x2, 0x0000000000000000, 0x000002fffd0000, 0xffbf0400fefffffd, x5, 2*XLEN/8, x8)

inst_3:
// rs1 == rd != rs2, rs1==x30, rs2==x0, rd==x30, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -8193, rs2_h0_val == -65, rs2_h1_val == -9, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 512, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256
// opcode: pdifu.h ; op1:x30; op2:x0; dest:x30; op1val:0x100dfff02000001;  op2val:0xffbf0007fff7ffbf
TEST_RR_OP(pdifu.h, x30, x30, x0, 0x0000000000000000, 0x100dfff02000001, 0xffbf0007fff7ffbf, x5, 3*XLEN/8, x8)

inst_4:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_h0_val == 32767, rs2_h3_val == 4, rs2_h0_val == -2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 2, rs1_h3_val == -1025, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 8, rs2_h2_val == -1025, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pdifu.h ; op1:x26; op2:x26; dest:x26; op1val:0xfbff000800027fff;  op2val:0x04fbff0005fffe
TEST_RR_OP(pdifu.h, x26, x26, x26, 0x0000000000000000, 0xfbff000800027fff, 0x04fbff0005fffe, x5, 4*XLEN/8, x8)

inst_5:
// rs1==x12, rs2==x24, rd==x0, rs1_h0_val == 2, rs2_h1_val == 256, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 4, rs2_h3_val == -9, rs2_h0_val == 64
// opcode: pdifu.h ; op1:x12; op2:x24; dest:x0; op1val:0xfff90004fff90002;  op2val:0xfff7000901000040
TEST_RR_OP(pdifu.h, x0, x12, x24, 0x0000000000000000, 0xfff90004fff90002, 0xfff7000901000040, x5, 5*XLEN/8, x8)

inst_6:
// rs1==x10, rs2==x25, rd==x16, rs1_h0_val == 4, rs2_h0_val == 4096, rs2_h1_val == -2, rs1_h1_val == 32, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 32, rs2_h3_val == 1
// opcode: pdifu.h ; op1:x10; op2:x25; dest:x16; op1val:0x20000400200004;  op2val:0x01fff6fffe1000
TEST_RR_OP(pdifu.h, x16, x10, x25, 0x0000000000000000, 0x20000400200004, 0x01fff6fffe1000, x5, 6*XLEN/8, x8)

inst_7:
// rs1==x21, rs2==x22, rd==x2, rs1_h0_val == 8, rs1_h2_val == -33, rs2_h3_val == 32, rs1_h1_val == 1024, rs2_h2_val == -129, rs1_h3_val == 16, rs2_h1_val == -1
// opcode: pdifu.h ; op1:x21; op2:x22; dest:x2; op1val:0x10ffdf04000008;  op2val:0x20ff7fffff0009
TEST_RR_OP(pdifu.h, x2, x21, x22, 0x0000000000000000, 0x10ffdf04000008, 0x20ff7fffff0009, x5, 7*XLEN/8, x8)

inst_8:
// rs1==x23, rs2==x9, rd==x4, rs1_h0_val == 16, rs1_h2_val == -16385, rs1_h3_val == -1, rs2_h2_val == -65, rs2_h1_val == 2, rs2_h3_val == -32768
// opcode: pdifu.h ; op1:x23; op2:x9; dest:x4; op1val:0xffffbfff00200010;  op2val:0x8000ffbf00020007
TEST_RR_OP(pdifu.h, x4, x23, x9, 0x0000000000000000, 0xffffbfff00200010, 0x8000ffbf00020007, x5, 8*XLEN/8, x8)

inst_9:
// rs1==x29, rs2==x14, rd==x21, rs1_h0_val == 32, rs2_h2_val == 21845, rs2_h3_val == -4097, rs1_h1_val == -257
// opcode: pdifu.h ; op1:x29; op2:x14; dest:x21; op1val:0xfbfffffbfeff0020;  op2val:0xefff5555fff83fff
TEST_RR_OP(pdifu.h, x21, x29, x14, 0x0000000000000000, 0xfbfffffbfeff0020, 0xefff5555fff83fff, x5, 9*XLEN/8, x8)

inst_10:
// rs1==x13, rs2==x10, rd==x7, rs1_h0_val == 64, rs2_h3_val == 512, rs1_h2_val == -3, rs2_h0_val == 2, rs2_h1_val == 16, rs1_h3_val == -2
// opcode: pdifu.h ; op1:x13; op2:x10; dest:x7; op1val:0xfffefffd00050040;  op2val:0x200fff600100002
TEST_RR_OP(pdifu.h, x7, x13, x10, 0x0000000000000000, 0xfffefffd00050040, 0x200fff600100002, x5, 10*XLEN/8, x8)

inst_11:
// rs1==x3, rs2==x1, rd==x28, rs1_h0_val == 128, rs2_h3_val == 2048, rs2_h1_val == -129, rs1_h1_val == -2, rs1_h3_val == 4096, rs2_h0_val == 512
// opcode: pdifu.h ; op1:x3; op2:x1; dest:x28; op1val:0x1000fff9fffe0080;  op2val:0x8000005ff7f0200
TEST_RR_OP(pdifu.h, x28, x3, x1, 0x0000000000000000, 0x1000fff9fffe0080, 0x8000005ff7f0200, x5, 11*XLEN/8, x8)

inst_12:
// rs1==x9, rs2==x30, rd==x27, rs1_h0_val == 256, rs1_h2_val == -129, rs1_h3_val == 8, rs2_h0_val == -513, rs2_h2_val == 8
// opcode: pdifu.h ; op1:x9; op2:x30; dest:x27; op1val:0x08ff7f00030100;  op2val:0xefff00080100fdff
TEST_RR_OP(pdifu.h, x27, x9, x30, 0x0000000000000000, 0x08ff7f00030100, 0xefff00080100fdff, x5, 12*XLEN/8, x8)

inst_13:
// rs1==x7, rs2==x6, rd==x23, rs1_h0_val == 512, rs1_h3_val == 2, rs2_h1_val == -2049
// opcode: pdifu.h ; op1:x7; op2:x6; dest:x23; op1val:0x027fff00050200;  op2val:0xfff60007f7fffffa
TEST_RR_OP(pdifu.h, x23, x7, x6, 0x0000000000000000, 0x027fff00050200, 0xfff60007f7fffffa, x5, 13*XLEN/8, x8)

inst_14:
// rs1==x19, rs2==x18, rd==x1, rs1_h0_val == 1024, rs2_h1_val == 4096, rs1_h2_val == -513, rs2_h0_val == 0, rs2_h3_val == -129, rs1_h3_val == 8192
// opcode: pdifu.h ; op1:x19; op2:x18; dest:x1; op1val:0x2000fdfffffd0400;  op2val:0xff7f000610000000
TEST_RR_OP(pdifu.h, x1, x19, x18, 0x0000000000000000, 0x2000fdfffffd0400, 0xff7f000610000000, x5, 14*XLEN/8, x8)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x0, rs2==x19, rd==x9, rs1_h0_val == 2048, rs1_h2_val == -1, rs1_h1_val == -5, rs2_h2_val == -9
// opcode: pdifu.h ; op1:x0; op2:x19; dest:x9; op1val:0xfff6fffffffb0800;  op2val:0xfffafff70003fdff
TEST_RR_OP(pdifu.h, x9, x0, x19, 0x0000000000000000, 0xfff6fffffffb0800, 0xfffafff70003fdff, x2, 0*XLEN/8, x3)

inst_16:
// rs1==x11, rs2==x29, rd==x31, rs1_h0_val == 4096, rs1_h2_val == -32768, rs2_h0_val == -257, rs2_h2_val == -5, rs1_h3_val == -21846, rs2_h1_val == -513
// opcode: pdifu.h ; op1:x11; op2:x29; dest:x31; op1val:0xaaaa800020001000;  op2val:0xfffafffbfdfffeff
TEST_RR_OP(pdifu.h, x31, x11, x29, 0x0000000000000000, 0xaaaa800020001000, 0xfffafffbfdfffeff, x2, 1*XLEN/8, x3)

inst_17:
// rs1==x20, rs2==x27, rd==x25, rs1_h0_val == 8192, rs1_h2_val == -1025, rs2_h3_val == 256, rs2_h0_val == -4097, rs1_h3_val == 32767, rs2_h2_val == -32768
// opcode: pdifu.h ; op1:x20; op2:x27; dest:x25; op1val:0x7ffffbff00092000;  op2val:0x1008000fff8efff
TEST_RR_OP(pdifu.h, x25, x20, x27, 0x0000000000000000, 0x7ffffbff00092000, 0x1008000fff8efff, x2, 2*XLEN/8, x3)

inst_18:
// rs1==x5, rs2==x12, rd==x18, rs1_h0_val == 16384, rs1_h3_val == -3, rs1_h2_val == -9, rs2_h3_val == 64
// opcode: pdifu.h ; op1:x5; op2:x12; dest:x18; op1val:0xfffdfff7fff64000;  op2val:0x40ffbf0007fffd
TEST_RR_OP(pdifu.h, x18, x5, x12, 0x0000000000000000, 0xfffdfff7fff64000, 0x40ffbf0007fffd, x2, 3*XLEN/8, x3)

inst_19:
// rs1==x18, rs2==x23, rd==x22, rs1_h0_val == -2, rs1_h2_val == -2049, rs2_h1_val == 128
// opcode: pdifu.h ; op1:x18; op2:x23; dest:x22; op1val:0xaaaaf7fffff8fffe;  op2val:0x09ff7f0080fffa
TEST_RR_OP(pdifu.h, x22, x18, x23, 0x0000000000000000, 0xaaaaf7fffff8fffe, 0x09ff7f0080fffa, x2, 4*XLEN/8, x3)

inst_20:
// rs1==x24, rs2==x15, rd==x6, rs1_h0_val == -3, rs1_h3_val == -129, rs1_h2_val == -4097, rs2_h3_val == 8192, rs2_h1_val == -4097, rs2_h0_val == 32
// opcode: pdifu.h ; op1:x24; op2:x15; dest:x6; op1val:0xff7fefff0020fffd;  op2val:0x2000fffaefff0020
TEST_RR_OP(pdifu.h, x6, x24, x15, 0x0000000000000000, 0xff7fefff0020fffd, 0x2000fffaefff0020, x2, 5*XLEN/8, x3)

inst_21:
// rs1==x1, rs2==x16, rd==x17, rs1_h0_val == -5, rs2_h1_val == -3, rs1_h2_val == 64, rs2_h2_val == 32767, rs2_h0_val == 256
// opcode: pdifu.h ; op1:x1; op2:x16; dest:x17; op1val:0x050040fffbfffb;  op2val:0xfff87ffffffd0100
TEST_RR_OP(pdifu.h, x17, x1, x16, 0x0000000000000000, 0x050040fffbfffb, 0xfff87ffffffd0100, x2, 6*XLEN/8, x3)

inst_22:
// rs1==x14, rs2==x20, rd==x15, rs1_h0_val == -9, rs1_h1_val == -2049, rs2_h1_val == -16385, rs1_h3_val == 16384, rs2_h3_val == -257
// opcode: pdifu.h ; op1:x14; op2:x20; dest:x15; op1val:0x4000fbfff7fffff7;  op2val:0xfeff0006bfff0040
TEST_RR_OP(pdifu.h, x15, x14, x20, 0x0000000000000000, 0x4000fbfff7fffff7, 0xfeff0006bfff0040, x2, 7*XLEN/8, x3)

inst_23:
// rs1==x22, rs2==x7, rd==x14, rs1_h0_val == -17, rs2_h2_val == 128, rs2_h0_val == -9, rs1_h1_val == 256, rs1_h2_val == 16, rs1_h3_val == 512, rs2_h3_val == -8193
// opcode: pdifu.h ; op1:x22; op2:x7; dest:x14; op1val:0x20000100100ffef;  op2val:0xdfff0080fff7fff7
TEST_RR_OP(pdifu.h, x14, x22, x7, 0x0000000000000000, 0x20000100100ffef, 0xdfff0080fff7fff7, x2, 8*XLEN/8, x3)

inst_24:
// rs1==x4, rs2==x17, rd==x19, rs1_h0_val == -33, rs1_h1_val == 1, rs1_h1_val == rs2_h1_val, rs2_h0_val == -32768, rs1_h2_val == rs2_h2_val, rs2_h1_val == 1, rs1_h3_val == 2048, rs2_h3_val == 0
// opcode: pdifu.h ; op1:x4; op2:x17; dest:x19; op1val:0x80000050001ffdf;  op2val:0x00000500018000
TEST_RR_OP(pdifu.h, x19, x4, x17, 0x0000000000000000, 0x80000050001ffdf, 0x00000500018000, x2, 9*XLEN/8, x3)

inst_25:
// rs1==x8, rs2==x13, rd==x20, rs1_h0_val == -65, rs1_h1_val == -9, rs2_h1_val == 2048, rs2_h0_val == 32767, rs2_h3_val == 16
// opcode: pdifu.h ; op1:x8; op2:x13; dest:x20; op1val:0x023ffffff7ffbf;  op2val:0x10fffa08007fff
TEST_RR_OP(pdifu.h, x20, x8, x13, 0x0000000000000000, 0x023ffffff7ffbf, 0x10fffa08007fff, x2, 10*XLEN/8, x3)

inst_26:
// rs1==x28, rs2==x5, rd==x29, rs1_h0_val == -129, rs1_h1_val == -1025, rs1_h3_val == -9, rs2_h0_val == 8
// opcode: pdifu.h ; op1:x28; op2:x5; dest:x29; op1val:0xfff7fdfffbffff7f;  op2val:0x07040000090008
TEST_RR_OP(pdifu.h, x29, x28, x5, 0x0000000000000000, 0xfff7fdfffbffff7f, 0x07040000090008, x2, 11*XLEN/8, x3)

inst_27:
// rs1==x6, rs2==x8, rd==x24, rs1_h0_val == -257, rs2_h2_val == 1
// opcode: pdifu.h ; op1:x6; op2:x8; dest:x24; op1val:0x030003fffefeff;  op2val:0xff7f0001fff8fffa
TEST_RR_OP(pdifu.h, x24, x6, x8, 0x0000000000000000, 0x030003fffefeff, 0xff7f0001fff8fffa, x2, 12*XLEN/8, x4)

inst_28:
// rs1==x17, rs2==x21, rd==x8, rs1_h0_val == -513, rs1_h3_val == -513, rs2_h1_val == 512, rs1_h2_val == 512, rs2_h2_val == 4
// opcode: pdifu.h ; op1:x17; op2:x21; dest:x8; op1val:0xfdff02000002fdff;  op2val:0x800000040200fffd
TEST_RR_OP(pdifu.h, x8, x17, x21, 0x0000000000000000, 0xfdff02000002fdff, 0x800000040200fffd, x2, 13*XLEN/8, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x27, rs2==x28, rd==x10, rs1_h0_val == -1025, rs2_h2_val == -257, rs1_h3_val == rs2_h3_val
// opcode: pdifu.h ; op1:x27; op2:x28; dest:x10; op1val:0xff7ffdff0007fbff;  op2val:0xff7ffeff0005fffc
TEST_RR_OP(pdifu.h, x10, x27, x28, 0x0000000000000000, 0xff7ffdff0007fbff, 0xff7ffeff0005fffc, x1, 0*XLEN/8, x4)

inst_30:
// rs1==x15, rs2==x31, rd==x5, rs1_h0_val == -2049, rs1_h1_val == 4, rs2_h3_val == -16385, rs2_h1_val == -65, rs1_h3_val == 21845
// opcode: pdifu.h ; op1:x15; op2:x31; dest:x5; op1val:0x5555fff60004f7ff;  op2val:0xbffffff6ffbfefff
TEST_RR_OP(pdifu.h, x5, x15, x31, 0x0000000000000000, 0x5555fff60004f7ff, 0xbffffff6ffbfefff, x1, 1*XLEN/8, x4)

inst_31:
// rs1==x16, rs2==x3, rd==x12, rs1_h0_val == -4097, 
// opcode: pdifu.h ; op1:x16; op2:x3; dest:x12; op1val:0x09f7ff2000efff;  op2val:0xff7f008000093fff
TEST_RR_OP(pdifu.h, x12, x16, x3, 0x0000000000000000, 0x09f7ff2000efff, 0xff7f008000093fff, x1, 2*XLEN/8, x4)

inst_32:
// rs2_h3_val == 32767, rs2_h0_val == -33, rs1_h3_val == -5, rs2_h2_val == 16384
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010fffafff8;  op2val:0x7fff40000006ffdf
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffb0010fffafff8, 0x7fff40000006ffdf, x1, 3*XLEN/8, x4)

inst_33:
// rs2_h3_val == 2, rs1_h1_val == -513, rs2_h0_val == -16385, rs2_h2_val == -4097, rs2_h1_val == -21846
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0200fdfffffd;  op2val:0x02efffaaaabfff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x3fff0200fdfffffd, 0x02efffaaaabfff, x1, 4*XLEN/8, x4)

inst_34:
// rs2_h3_val == 8, rs2_h0_val == 16384, rs1_h2_val == 1024
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400fffe0008;  op2val:0x087fffbfff4000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x3fff0400fffe0008, 0x087fffbfff4000, x1, 5*XLEN/8, x4)

inst_35:
// rs2_h3_val == 128, rs2_h1_val == 16384
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffdffff60400;  op2val:0x8055554000fff7
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffbffdffff60400, 0x8055554000fff7, x1, 6*XLEN/8, x4)

inst_36:
// rs2_h3_val == 1024, rs2_h1_val == -32768, rs1_h2_val == -2, rs1_h0_val == rs2_h0_val, rs2_h2_val == -2049
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x00fffe00030007;  op2val:0x400f7ff80000007
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x00fffe00030007, 0x400f7ff80000007, x1, 7*XLEN/8, x4)

inst_37:
// rs2_h3_val == 4096, rs1_h2_val == 0, rs2_h1_val == -33, rs1_h1_val == 4096
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10000010007fff;  op2val:0x10000008ffdfbfff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x10000010007fff, 0x10000008ffdfbfff, x1, 8*XLEN/8, x4)

inst_38:
// rs2_h3_val == 16384, rs1_h2_val == 32
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0020fefffdff;  op2val:0x40002000fff9c000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffc0020fefffdff, 0x40002000fff9c000, x1, 9*XLEN/8, x4)

inst_39:
// rs2_h3_val == -2, rs1_h2_val == -21846, rs2_h1_val == -17
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaa0002ffff;  op2val:0xfffe0001ffef0006
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfbffaaaa0002ffff, 0xfffe0001ffef0006, x1, 10*XLEN/8, x4)

inst_40:
// rs2_h3_val == -3, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x053fff00050003;  op2val:0xfffdfffc40000000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x053fff00050003, 0xfffdfffc40000000, x1, 11*XLEN/8, x4)

inst_41:
// rs2_h3_val == -17, rs1_h1_val == 16, rs2_h2_val == -513
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0300000010feff;  op2val:0xffeffdff0200fffe
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x0300000010feff, 0xffeffdff0200fffe, x1, 12*XLEN/8, x4)

inst_42:
// rs2_h3_val == -33, rs2_h2_val == 0, rs2_h1_val == 8, rs1_h2_val == 256, rs2_h0_val == -2049
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x10010000208000;  op2val:0xffdf00000008f7ff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x10010000208000, 0xffdf00000008f7ff, x1, 13*XLEN/8, x4)

inst_43:
// rs2_h3_val == -513, rs2_h1_val == 1024
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x20001000020fff6;  op2val:0xfdffff7f04000008
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x20001000020fff6, 0xfdffff7f04000008, x1, 14*XLEN/8, x4)

inst_44:
// rs2_h3_val == -1025, rs1_h1_val == 16384, rs1_h2_val == 2048
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffff080040000040;  op2val:0xfbfffff800090020
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffff080040000040, 0xfbfffff800090020, x1, 15*XLEN/8, x4)

inst_45:
// rs2_h3_val == -2049, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00094000fdff;  op2val:0xf7ff3fff0200fff9
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xff7f00094000fdff, 0xf7ff3fff0200fff9, x1, 16*XLEN/8, x4)

inst_46:
// rs2_h3_val == 21845, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffefff68000;  op2val:0x55558000f7fffff8
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffefffefff68000, 0x55558000f7fffff8, x1, 17*XLEN/8, x4)

inst_47:
// rs2_h3_val == -21846, rs2_h2_val == -16385, rs1_h1_val == 8, rs1_h3_val == 128
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000200008ff7f;  op2val:0xaaaabffffff7fff9
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x8000200008ff7f, 0xaaaabffffff7fff9, x1, 18*XLEN/8, x4)

inst_48:
// rs1_h0_val == -8193, rs1_h3_val == -2049
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff60100dfff;  op2val:0x800fffb02000200
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xf7fffff60100dfff, 0x800fffb02000200, x1, 19*XLEN/8, x4)

inst_49:
// rs1_h0_val == -16385, rs1_h3_val == 4
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x04aaaafff9bfff;  op2val:0xfdff3fff0400fff6
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x04aaaafff9bfff, 0xfdff3fff0400fff6, x1, 20*XLEN/8, x4)

inst_50:
// rs1_h0_val == 21845, rs2_h2_val == 2
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffefff95555;  op2val:0xaaaa0002f7ffc000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xaaaafffefff95555, 0xaaaa0002f7ffc000, x1, 21*XLEN/8, x4)

inst_51:
// rs1_h0_val == -21846, rs2_h0_val == -1025
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x200200fbffaaaa;  op2val:0xff7f5555fffcfbff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x200200fbffaaaa, 0xff7f5555fffcfbff, x1, 22*XLEN/8, x4)

inst_52:
// rs1_h1_val == -1, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800003ffff0000;  op2val:0xaaaac00000010020
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x800003ffff0000, 0xaaaac00000010020, x1, 23*XLEN/8, x4)

inst_53:
// rs1_h1_val == 0, rs1_h2_val == -257
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x08feff00000001;  op2val:0x5555000708007fff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x08feff00000001, 0x5555000708007fff, x1, 24*XLEN/8, x4)

inst_54:
// rs1_h1_val == 32767, rs1_h2_val == -65, rs2_h0_val == 128
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf7fff0007;  op2val:0x80000002fff60080
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x06ffbf7fff0007, 0x80000002fff60080, x1, 25*XLEN/8, x4)

inst_55:
// rs1_h1_val == 64, rs1_h3_val == -4097
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff800400080;  op2val:0xfff6bfffeffffff8
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xeffffff800400080, 0xfff6bfffeffffff8, x1, 26*XLEN/8, x4)

inst_56:
// rs1_h3_val == -17, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf7ffffffe;  op2val:0x7fff555510008000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffefffbf7ffffffe, 0x7fff555510008000, x1, 27*XLEN/8, x4)

inst_57:
// rs1_h3_val == -33, rs2_h1_val == -5
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdfbfff0003ffdf;  op2val:0xfffeeffffffbdfff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffdfbfff0003ffdf, 0xfffeeffffffbdfff, x1, 28*XLEN/8, x4)

inst_58:
// rs1_h3_val == -257, rs1_h1_val == -8193
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffbdffffff9;  op2val:0xffdf80000800c000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfefffffbdffffff9, 0xffdf80000800c000, x1, 29*XLEN/8, x4)

inst_59:
// rs1_h3_val == -8193, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff80001000fffa;  op2val:0x80003fffaaaafff6
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xdfff80001000fffa, 0x80003fffaaaafff6, x1, 30*XLEN/8, x4)

inst_60:
// rs1_h3_val == -16385, rs2_h2_val == -2
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006fff6fffa;  op2val:0xfff9fffeffeffffa
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xbfff0006fff6fffa, 0xfff9fffeffeffffa, x1, 31*XLEN/8, x4)

inst_61:
// rs2_h0_val == -1, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbff00208000;  op2val:0x107ffffffaffff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xf7fffbff00208000, 0x107ffffffaffff, x1, 32*XLEN/8, x4)

inst_62:
// rs2_h0_val == 1, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff0008ffbf;  op2val:0xfffc000902000001
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xc000f7ff0008ffbf, 0xfffc000902000001, x1, 33*XLEN/8, x4)

inst_63:
// rs2_h0_val == 16, rs1_h1_val == -129
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002ff7fff7f;  op2val:0x074000ffbf0010
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x7fff0002ff7fff7f, 0x074000ffbf0010, x1, 34*XLEN/8, x4)

inst_64:
// rs2_h0_val == 1024, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffa010000040001;  op2val:0xfff8400000050400
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffa010000040001, 0xfff8400000050400, x1, 35*XLEN/8, x4)

inst_65:
// rs2_h0_val == 2048, rs1_h2_val == 8192
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffef200000200040;  op2val:0x20000400ffdf0800
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffef200000200040, 0x20000400ffdf0800, x1, 36*XLEN/8, x4)

inst_66:
// rs2_h0_val == 8192, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x09fefffff9fdff;  op2val:0xfbfffbff00012000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x09fefffff9fdff, 0xfbfffbff00012000, x1, 37*XLEN/8, x4)

inst_67:
// rs2_h0_val == -5, rs1_h2_val == 21845, rs2_h1_val == 21845, rs1_h1_val == 21845
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1055555555fff8;  op2val:0xfffac0005555fffb
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x1055555555fff8, 0xfffac0005555fffb, x1, 38*XLEN/8, x4)

inst_68:
// rs2_h0_val == -17, rs2_h1_val == 0
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff6fffa0003;  op2val:0xc00000800000ffef
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x4000fff6fffa0003, 0xc00000800000ffef, x1, 39*XLEN/8, x4)

inst_69:
// rs2_h0_val == -129, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffbf0100fbff;  op2val:0x8003fffffefff7f
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfff6ffbf0100fbff, 0x8003fffffefff7f, x1, 40*XLEN/8, x4)

inst_70:
// rs1_h1_val == 128, rs1_h3_val == -32768
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x8000000200800006;  op2val:0xfbffffbfc000feff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x8000000200800006, 0xfbffffbfc000feff, x1, 41*XLEN/8, x4)

inst_71:
// rs2_h0_val == 21845, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000fffcfff9;  op2val:0x10003fff00055555
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xefffc000fffcfff9, 0x10003fff00055555, x1, 42*XLEN/8, x4)

inst_72:
// rs1_h1_val == 2048, rs2_h3_val == -1, rs2_h1_val == 64
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ff0800ffbf;  op2val:0xffff3fff0040fffe
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xf7fff7ff0800ffbf, 0xffff3fff0040fffe, x1, 43*XLEN/8, x4)

inst_73:
// rs2_h0_val == -21846, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x0900100400ffff;  op2val:0x800001fdffaaaa
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x0900100400ffff, 0x800001fdffaaaa, x1, 44*XLEN/8, x4)

inst_74:
// rs2_h1_val == 32767, rs1_h1_val == -4097
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffdfeffffff7;  op2val:0xfdfffff87fff0005
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xdfffffdfeffffff7, 0xfdfffff87fff0005, x1, 45*XLEN/8, x4)

inst_75:
// rs1_h1_val == -16385, rs2_h2_val == 512
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff9bfffffef;  op2val:0xfffb0200ff7f7fff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xaaaafff9bfffffef, 0xfffb0200ff7f7fff, x1, 46*XLEN/8, x4)

inst_76:
// rs2_h1_val == 8192, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff60007ffff2000;  op2val:0x0500092000ffdf
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfff60007ffff2000, 0x0500092000ffdf, x1, 47*XLEN/8, x4)

inst_77:
// rs1_h1_val == -21846, rs1_h2_val == 128, rs2_h1_val == -8193, rs2_h2_val == -3
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080aaaaaaaa;  op2val:0xfffefffddffffffa
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfdff0080aaaaaaaa, 0xfffefffddffffffa, x1, 48*XLEN/8, x4)

inst_78:
// rs1_h2_val == 1, rs1_h1_val == -17, rs2_h1_val == 32
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x80000001ffeffeff;  op2val:0x09020000207fff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x80000001ffeffeff, 0x09020000207fff, x1, 49*XLEN/8, x4)

inst_79:
// rs2_h1_val == -1025, rs2_h2_val == 16, rs1_h1_val == -65
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff6ffbffff9;  op2val:0xffdf0010fbff0000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffdffff6ffbffff9, 0xffdf0010fbff0000, x1, 50*XLEN/8, x4)

inst_80:
// rs1_h2_val == 4096, rs1_h3_val == 1024
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x40010001000fff6;  op2val:0xfffe80000040fff7
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x40010001000fff6, 0xfffe80000040fff7, x1, 51*XLEN/8, x4)

inst_81:
// rs2_h2_val == -1, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x1000dffffbff0010;  op2val:0x06ffff0008efff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x1000dffffbff0010, 0x06ffff0008efff, x1, 52*XLEN/8, x4)

inst_82:
// rs2_h2_val == 32, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd00100400;  op2val:0x7fff0020ffbfff7f
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x2000fffd00100400, 0x7fff0020ffbfff7f, x1, 53*XLEN/8, x4)

inst_83:
// rs2_h2_val == 64, rs1_h1_val == -33
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000ffdfff7f;  op2val:0xfffb0040fbff0008
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfbff0000ffdfff7f, 0xfffb0040fbff0008, x1, 54*XLEN/8, x4)

inst_84:
// rs2_h2_val == 256, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0007fffb0008;  op2val:0xfffc010000092000
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xdfff0007fffb0008, 0xfffc010000092000, x1, 55*XLEN/8, x4)

inst_85:
// rs1_h2_val == 16384, rs2_h2_val == -8193
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff640007fff0010;  op2val:0x200dfff00800002
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfff640007fff0010, 0x200dfff00800002, x1, 56*XLEN/8, x4)

inst_86:
// rs2_h2_val == 2048, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x7fff080020000800;  op2val:0x3fff0800bfff0400
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x7fff080020000800, 0x3fff0800bfff0400, x1, 57*XLEN/8, x4)

inst_87:
// rs2_h2_val == -17, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x800000604000200;  op2val:0xfffeffef7fff3fff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x800000604000200, 0xfffeffef7fff3fff, x1, 58*XLEN/8, x4)

inst_88:
// rs1_h3_val == 64, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x400000fdfff7ff;  op2val:0xfff8fff95555ffef
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x400000fdfff7ff, 0xfff8fff95555ffef, x1, 59*XLEN/8, x4)

inst_89:
// rs2_h2_val == 4096, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000700000001;  op2val:0x0610000000fffe
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfeff000700000001, 0x0610000000fffe, x1, 60*XLEN/8, x4)

inst_90:
// rs2_h1_val == 4, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff7fffcffef;  op2val:0xfff9fff900043fff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffefff7fffcffef, 0xfff9fff900043fff, x1, 61*XLEN/8, x4)

inst_91:
// rs2_h2_val == -21846, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff8aaaac000;  op2val:0xfffaaaaa4000fdff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfffafff8aaaac000, 0xfffaaaaa4000fdff, x1, 62*XLEN/8, x4)

inst_92:
// rs1_h3_val == 1, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x018000bffffff8;  op2val:0x08000900060400
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x018000bffffff8, 0x08000900060400, x1, 63*XLEN/8, x4)

inst_93:
// rs1_h2_val == -17, 
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef40000100;  op2val:0x04fff8fff8fffe
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xffffffef40000100, 0x04fff8fff8fffe, x1, 64*XLEN/8, x4)

inst_94:
// rs1_h0_val == 0, rs2_h0_val == -3, rs2_h2_val == 1024, rs1_h2_val == 2, rs2_h3_val == -65, rs1_h1_val == -3
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffd0000;  op2val:0xffbf0400fefffffd
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x000002fffd0000, 0xffbf0400fefffffd, x1, 65*XLEN/8, x4)

inst_95:
// rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -8193, rs2_h0_val == -65, rs2_h1_val == -9, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 512, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0x100dfff02000001;  op2val:0xffbf0007fff7ffbf
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0x100dfff02000001, 0xffbf0007fff7ffbf, x1, 66*XLEN/8, x4)

inst_96:
// rs1_h0_val == 32767, rs2_h3_val == 4, rs2_h0_val == -2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 2, rs1_h3_val == -1025, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 8, rs2_h2_val == -1025, rs1_h3_val < 0 and rs2_h3_val > 0
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000800027fff;  op2val:0x04fbff0005fffe
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfbff000800027fff, 0x04fbff0005fffe, x1, 67*XLEN/8, x4)

inst_97:
// rs1_h0_val == 2, rs2_h1_val == 256, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 4, rs2_h3_val == -9, rs2_h0_val == 64
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff90004fff90002;  op2val:0xfff7000901000040
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfff90004fff90002, 0xfff7000901000040, x1, 68*XLEN/8, x4)

inst_98:
// rs1_h0_val == 2048, rs1_h2_val == -1, rs1_h1_val == -5, rs2_h2_val == -9
// opcode: pdifu.h ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffffffb0800;  op2val:0xfffafff70003fdff
TEST_RR_OP(pdifu.h, x31, x30, x29, 0x0000000000000000, 0xfff6fffffffb0800, 0xfffafff70003fdff, x1, 69*XLEN/8, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 70*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
