
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Mar 14 02:36:27 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/chsu/rvp-workspace/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/chsu/rvp-workspace/rvp-test-suite/rv64ip_cgf/p11.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pmulu.h.beo instruction of the RISC-V RV64PZicsr extension for the pmulu.h.beo covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pmulu.h.beo)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x25, rs2==x3, rd==x3, rs1_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 8192, rs1_h0_val != rs2_h0_val, rs2_h3_val == 256, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 16, rs1_h3_val != rs2_h3_val, rs1_h2_val == -9
// opcode: pmulu.h.beo ; op1:x25; op2:x3; dest:x3; op1val:0x10fff7fff88000;  op2val:0x1003fff2000fffc
TEST_RR_OP(pmulu.h.beo, x3, x25, x3, 0x0000000000000000, 0x10fff7fff88000, 0x1003fff2000fffc, x4, 0*XLEN/8, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x22, rd==x23, rs1_h0_val == -1, rs1_h0_val == rs2_h0_val, rs2_h3_val == 128, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -1, rs2_h2_val == -129, rs2_h1_val == -1, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -5
// opcode: pmulu.h.beo ; op1:x10; op2:x22; dest:x23; op1val:0xfff8fff8fffbffff;  op2val:0x80ff7fffffffff
TEST_RR_OP(pmulu.h.beo, x23, x10, x22, 0x0000000000000000, 0xfff8fff8fffbffff, 0x80ff7fffffffff, x4, 1*XLEN/8, x1)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x11, rd==x26, rs1_h0_val == 0, rs2_h2_val == 16, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -129, rs1_h1_val == 64, rs1_h3_val == 32, rs2_h1_val == 2
// opcode: pmulu.h.beo ; op1:x26; op2:x11; dest:x26; op1val:0x20fff900400000;  op2val:0x0600100002ff7f
TEST_RR_OP(pmulu.h.beo, x26, x26, x11, 0x0000000000000000, 0x20fff900400000, 0x0600100002ff7f, x4, 2*XLEN/8, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h0_val == 1, rs2_h1_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 512, rs2_h0_val == -33, rs1_h2_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 1024
// opcode: pmulu.h.beo ; op1:x7; op2:x7; dest:x7; op1val:0x4005555fffa0001;  op2val:0x0502000200ffdf
TEST_RR_OP(pmulu.h.beo, x7, x7, x7, 0x0000000000000000, 0x4005555fffa0001, 0x0502000200ffdf, x4, 3*XLEN/8, x1)

inst_4:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x18, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -257, rs1_h2_val == -1, rs2_h3_val == 2048, rs2_h1_val == -8193, rs2_h2_val == -16385, rs1_h1_val == -33
// opcode: pmulu.h.beo ; op1:x6; op2:x6; dest:x18; op1val:0xfeffffffffdf7fff;  op2val:0x800bfffdfff0009
TEST_RR_OP(pmulu.h.beo, x18, x6, x6, 0x0000000000000000, 0xfeffffffffdf7fff, 0x800bfffdfff0009, x4, 4*XLEN/8, x1)

inst_5:
// rs1==x15, rs2==x16, rd==x27, rs1_h0_val == 2, rs2_h2_val == 128, rs1_h1_val == 0, rs2_h1_val == -129, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -129
// opcode: pmulu.h.beo ; op1:x15; op2:x16; dest:x27; op1val:0xfff9c00000000002;  op2val:0xff7f0080ff7ffff6
TEST_RR_OP(pmulu.h.beo, x27, x15, x16, 0x0000000000000000, 0xfff9c00000000002, 0xff7f0080ff7ffff6, x4, 5*XLEN/8, x1)

inst_6:
// rs1==x8, rs2==x9, rd==x29, rs1_h0_val == 4, rs1_h1_val == -9, rs1_h3_val == -8193, rs2_h3_val == -65, rs2_h0_val == -17
// opcode: pmulu.h.beo ; op1:x8; op2:x9; dest:x29; op1val:0xdffffff8fff70004;  op2val:0xffbffffafffcffef
TEST_RR_OP(pmulu.h.beo, x29, x8, x9, 0x0000000000000000, 0xdffffff8fff70004, 0xffbffffafffcffef, x4, 6*XLEN/8, x1)

inst_7:
// rs1==x27, rs2==x26, rd==x6, rs1_h0_val == 8, rs2_h3_val == 8, rs1_h1_val == -1, rs1_h3_val == -2049, rs2_h1_val == -33, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -2049, rs1_h2_val == 1024
// opcode: pmulu.h.beo ; op1:x27; op2:x26; dest:x6; op1val:0xf7ff0400ffff0008;  op2val:0x08fffcffdff7ff
TEST_RR_OP(pmulu.h.beo, x6, x27, x26, 0x0000000000000000, 0xf7ff0400ffff0008, 0x08fffcffdff7ff, x4, 7*XLEN/8, x1)

inst_8:
// rs1==x2, rs2==x23, rd==x31, rs1_h0_val == 16, rs2_h3_val == 512, rs1_h1_val == 4, rs2_h2_val == -2, rs1_h3_val == rs2_h3_val, rs1_h3_val == 512, rs2_h1_val == 16
// opcode: pmulu.h.beo ; op1:x2; op2:x23; dest:x31; op1val:0x200000600040010;  op2val:0x200fffe0010fffc
TEST_RR_OP(pmulu.h.beo, x31, x2, x23, 0x0000000000000000, 0x200000600040010, 0x200fffe0010fffc, x4, 8*XLEN/8, x1)

inst_9:
// rs1==x14, rs2==x10, rd==x30, rs1_h0_val == 32, rs2_h0_val == -65, rs2_h2_val == 64, rs1_h3_val == -4097, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: pmulu.h.beo ; op1:x14; op2:x10; dest:x30; op1val:0xefff040000060020;  op2val:0x3fff0040dfffffbf
TEST_RR_OP(pmulu.h.beo, x30, x14, x10, 0x0000000000000000, 0xefff040000060020, 0x3fff0040dfffffbf, x4, 9*XLEN/8, x1)

inst_10:
// rs1==x0, rs2==x25, rd==x9, rs1_h0_val == 64, rs2_h3_val == 4096, rs1_h2_val == -513, rs2_h2_val == -3
// opcode: pmulu.h.beo ; op1:x0; op2:x25; dest:x9; op1val:0x09fdff00050040;  op2val:0x1000fffd0003fff9
TEST_RR_OP(pmulu.h.beo, x9, x0, x25, 0x0000000000000000, 0x09fdff00050040, 0x1000fffd0003fff9, x4, 10*XLEN/8, x1)

inst_11:
// rs1==x23, rs2==x5, rd==x15, rs1_h0_val == 128, rs2_h1_val == 2048, rs1_h1_val == 32767, rs2_h2_val == -9, rs2_h0_val == -4097, rs2_h3_val == -2049
// opcode: pmulu.h.beo ; op1:x23; op2:x5; dest:x15; op1val:0xfff655557fff0080;  op2val:0xf7fffff70800efff
TEST_RR_OP(pmulu.h.beo, x15, x23, x5, 0x0000000000000000, 0xfff655557fff0080, 0xf7fffff70800efff, x4, 11*XLEN/8, x1)

inst_12:
// rs1==x20, rs2==x12, rd==x17, rs1_h0_val == 256, rs1_h2_val == -2049, rs2_h1_val == -65, rs2_h0_val == -1025, rs1_h1_val == 512, rs2_h2_val == -21846, rs2_h3_val == 0
// opcode: pmulu.h.beo ; op1:x20; op2:x12; dest:x17; op1val:0x05f7ff02000100;  op2val:0x00aaaaffbffbff
TEST_RR_OP(pmulu.h.beo, x17, x20, x12, 0x0000000000000000, 0x05f7ff02000100, 0x00aaaaffbffbff, x4, 12*XLEN/8, x1)

inst_13:
// rs1==x13, rs2==x27, rd==x8, rs1_h0_val == 512, rs1_h1_val == 2048, rs1_h2_val == 4
// opcode: pmulu.h.beo ; op1:x13; op2:x27; dest:x8; op1val:0x05000408000200;  op2val:0x07fffac0000006
TEST_RR_OP(pmulu.h.beo, x8, x13, x27, 0x0000000000000000, 0x05000408000200, 0x07fffac0000006, x4, 13*XLEN/8, x1)

inst_14:
// rs1==x16, rs2==x13, rd==x20, rs1_h0_val == 1024, rs2_h2_val == -1025, rs1_h2_val == 32767, rs1_h1_val == 32, rs1_h3_val == 64
// opcode: pmulu.h.beo ; op1:x16; op2:x13; dest:x20; op1val:0x407fff00200400;  op2val:0x100fbfffff9ffbf
TEST_RR_OP(pmulu.h.beo, x20, x16, x13, 0x0000000000000000, 0x407fff00200400, 0x100fbfffff9ffbf, x4, 14*XLEN/8, x7)

inst_15:
// rs1==x12, rs2==x31, rd==x11, rs1_h0_val == 2048, rs1_h1_val == 1, rs2_h3_val == -17, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 4096, rs2_h1_val == 4, rs1_h3_val == 8192
// opcode: pmulu.h.beo ; op1:x12; op2:x31; dest:x11; op1val:0x2000100000010800;  op2val:0xffef00090004fff8
TEST_RR_OP(pmulu.h.beo, x11, x12, x31, 0x0000000000000000, 0x2000100000010800, 0xffef00090004fff8, x4, 15*XLEN/8, x7)

inst_16:
// rs1==x30, rs2==x20, rd==x14, rs1_h0_val == 4096, rs2_h3_val == -33
// opcode: pmulu.h.beo ; op1:x30; op2:x20; dest:x14; op1val:0xfffafff7ffdf1000;  op2val:0xffdf0007fff60005
TEST_RR_OP(pmulu.h.beo, x14, x30, x20, 0x0000000000000000, 0xfffafff7ffdf1000, 0xffdf0007fff60005, x4, 16*XLEN/8, x7)

inst_17:
// rs1==x29, rs2==x1, rd==x22, rs1_h0_val == 8192, rs2_h0_val == 1, rs2_h3_val == 16, rs1_h2_val == -1025
// opcode: pmulu.h.beo ; op1:x29; op2:x1; dest:x22; op1val:0x03fbfffff92000;  op2val:0x10fff9ffff0001
TEST_RR_OP(pmulu.h.beo, x22, x29, x1, 0x0000000000000000, 0x03fbfffff92000, 0x10fff9ffff0001, x4, 17*XLEN/8, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_18:
// rs1==x17, rs2==x15, rd==x10, rs1_h0_val == 16384, rs2_h1_val == -9, rs1_h3_val == -65, rs2_h2_val == -2049, rs2_h3_val == 1
// opcode: pmulu.h.beo ; op1:x17; op2:x15; dest:x10; op1val:0xffbf000602004000;  op2val:0x01f7fffff7ffdf
TEST_RR_OP(pmulu.h.beo, x10, x17, x15, 0x0000000000000000, 0xffbf000602004000, 0x01f7fffff7ffdf, x6, 0*XLEN/8, x7)

inst_19:
// rs1==x4, rs2==x2, rd==x19, rs1_h0_val == -2, rs1_h3_val == -5, rs1_h2_val == -21846, rs2_h0_val == 2, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: pmulu.h.beo ; op1:x4; op2:x2; dest:x19; op1val:0xfffbaaaafffbfffe;  op2val:0xc000fffe00060002
TEST_RR_OP(pmulu.h.beo, x19, x4, x2, 0x0000000000000000, 0xfffbaaaafffbfffe, 0xc000fffe00060002, x6, 1*XLEN/8, x7)

inst_20:
// rs1==x1, rs2==x28, rd==x13, rs1_h0_val == -3, rs2_h0_val == 32, rs2_h1_val == -2049, rs1_h1_val == -16385
// opcode: pmulu.h.beo ; op1:x1; op2:x28; dest:x13; op1val:0x2000c000bffffffd;  op2val:0xfffc0200f7ff0020
TEST_RR_OP(pmulu.h.beo, x13, x1, x28, 0x0000000000000000, 0x2000c000bffffffd, 0xfffc0200f7ff0020, x6, 2*XLEN/8, x7)

inst_21:
// rs1==x24, rs2==x30, rd==x2, rs1_h0_val == -5, rs2_h1_val == 1024, rs1_h3_val == -32768, rs1_h2_val == 2, rs2_h0_val == 21845, rs1_h1_val == -129
// opcode: pmulu.h.beo ; op1:x24; op2:x30; dest:x2; op1val:0x80000002ff7ffffb;  op2val:0xffefff7f04005555
TEST_RR_OP(pmulu.h.beo, x2, x24, x30, 0x0000000000000000, 0x80000002ff7ffffb, 0xffefff7f04005555, x6, 3*XLEN/8, x7)

inst_22:
// rs1==x21, rs2==x0, rd==x5, rs1_h0_val == -9, rs2_h0_val == 128, rs2_h2_val == -513, rs1_h2_val == 512, rs1_h3_val == -21846
// opcode: pmulu.h.beo ; op1:x21; op2:x0; dest:x5; op1val:0xaaaa02000001fff7;  op2val:0x05fdff04000080
TEST_RR_OP(pmulu.h.beo, x5, x21, x0, 0x0000000000000000, 0xaaaa02000001fff7, 0x05fdff04000080, x6, 4*XLEN/8, x7)

inst_23:
// rs1==x5, rs2==x18, rd==x0, rs1_h0_val == -17, rs1_h1_val == 1024, rs2_h2_val == -257, rs2_h3_val == -1
// opcode: pmulu.h.beo ; op1:x5; op2:x18; dest:x0; op1val:0xefff55550400ffef;  op2val:0xfffffeff00100005
TEST_RR_OP(pmulu.h.beo, x0, x5, x18, 0x0000000000000000, 0xefff55550400ffef, 0xfffffeff00100005, x6, 5*XLEN/8, x7)

inst_24:
// rs1==x19, rs2==x21, rd==x28, rs1_h0_val == -33, rs1_h1_val == -8193
// opcode: pmulu.h.beo ; op1:x19; op2:x21; dest:x28; op1val:0x071000dfffffdf;  op2val:0xffbf0003fffc0007
TEST_RR_OP(pmulu.h.beo, x28, x19, x21, 0x0000000000000000, 0x071000dfffffdf, 0xffbf0003fffc0007, x6, 6*XLEN/8, x7)

inst_25:
// rs1==x3, rs2==x4, rd==x25, rs1_h0_val == -65, rs2_h0_val == -16385
// opcode: pmulu.h.beo ; op1:x3; op2:x4; dest:x25; op1val:0xfffcc0000800ffbf;  op2val:0x070200fff8bfff
TEST_RR_OP(pmulu.h.beo, x25, x3, x4, 0x0000000000000000, 0xfffcc0000800ffbf, 0x070200fff8bfff, x6, 7*XLEN/8, x7)

inst_26:
// rs1==x22, rs2==x29, rd==x21, rs1_h0_val == -129, rs2_h0_val == 0, rs1_h2_val == -17, rs1_h1_val == -257
// opcode: pmulu.h.beo ; op1:x22; op2:x29; dest:x21; op1val:0x8000ffeffeffff7f;  op2val:0x200fdfffffc0000
TEST_RR_OP(pmulu.h.beo, x21, x22, x29, 0x0000000000000000, 0x8000ffeffeffff7f, 0x200fdfffffc0000, x6, 8*XLEN/8, x7)

inst_27:
// rs1==x28, rs2==x8, rd==x1, rs1_h0_val == -257, rs2_h3_val == -5, rs1_h3_val == 128
// opcode: pmulu.h.beo ; op1:x28; op2:x8; dest:x1; op1val:0x80ffef0005feff;  op2val:0xfffbfff602000003
TEST_RR_OP(pmulu.h.beo, x1, x28, x8, 0x0000000000000000, 0x80ffef0005feff, 0xfffbfff602000003, x6, 9*XLEN/8, x7)

inst_28:
// rs1==x31, rs2==x14, rd==x4, rs1_h0_val == -513, rs1_h1_val == -1025, rs2_h1_val == -21846, rs2_h2_val == 32, rs1_h3_val == 1
// opcode: pmulu.h.beo ; op1:x31; op2:x14; dest:x4; op1val:0x015555fbfffdff;  op2val:0xfff90020aaaa5555
TEST_RR_OP(pmulu.h.beo, x4, x31, x14, 0x0000000000000000, 0x015555fbfffdff, 0xfff90020aaaa5555, x6, 10*XLEN/8, x1)

inst_29:
// rs1==x11, rs2==x19, rd==x24, rs1_h0_val == -1025, rs1_h2_val == 16, rs2_h2_val == -33
// opcode: pmulu.h.beo ; op1:x11; op2:x19; dest:x24; op1val:0x800010ffdffbff;  op2val:0x3fffffdf08000005
TEST_RR_OP(pmulu.h.beo, x24, x11, x19, 0x0000000000000000, 0x800010ffdffbff, 0x3fffffdf08000005, x6, 11*XLEN/8, x1)

inst_30:
// rs1==x9, rs2==x24, rd==x16, rs1_h0_val == -2049, rs2_h0_val == 16384, rs1_h3_val == -9, rs2_h1_val == -5, rs1_h1_val == 8, rs2_h3_val == 8192, rs2_h2_val == -17, rs1_h2_val == -2
// opcode: pmulu.h.beo ; op1:x9; op2:x24; dest:x16; op1val:0xfff7fffe0008f7ff;  op2val:0x2000ffeffffb4000
TEST_RR_OP(pmulu.h.beo, x16, x9, x24, 0x0000000000000000, 0xfff7fffe0008f7ff, 0x2000ffeffffb4000, x6, 12*XLEN/8, x1)

inst_31:
// rs1==x18, rs2==x17, rd==x12, rs1_h0_val == -4097, rs1_h3_val == -1025, rs2_h1_val == -32768, rs1_h1_val == -3, rs2_h3_val == -1025, rs2_h0_val == 256
// opcode: pmulu.h.beo ; op1:x18; op2:x17; dest:x12; op1val:0xfbfffff8fffdefff;  op2val:0xfbff002080000100
TEST_RR_OP(pmulu.h.beo, x12, x18, x17, 0x0000000000000000, 0xfbfffff8fffdefff, 0xfbff002080000100, x6, 13*XLEN/8, x1)

inst_32:
// rs1_h0_val == -8193, rs2_h2_val == 16384, rs1_h2_val == -3
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffdfff6dfff;  op2val:0x094000fffcfff9
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfbfffffdfff6dfff, 0x094000fffcfff9, x6, 14*XLEN/8, x1)

inst_33:
// rs1_h0_val == -16385, rs2_h2_val == -4097
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffef0020bfff;  op2val:0x3fffefff00020006
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x3fffffef0020bfff, 0x3fffefff00020006, x6, 15*XLEN/8, x1)

inst_34:
// rs1_h0_val == 21845, rs1_h2_val == -8193, rs2_h3_val == -2, rs1_h3_val == 21845, rs2_h2_val == 8
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x5555dfff00055555;  op2val:0xfffe00080009fff8
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x5555dfff00055555, 0xfffe00080009fff8, x6, 16*XLEN/8, x1)

inst_35:
// rs1_h0_val == -21846, rs2_h0_val == 4096, rs1_h2_val == -129, rs2_h1_val == -17, rs1_h3_val == -2
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffeff7f0008aaaa;  op2val:0x1000200ffef1000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffeff7f0008aaaa, 0x1000200ffef1000, x6, 17*XLEN/8, x1)

inst_36:
// rs2_h3_val == 32767, rs1_h3_val == -17, rs2_h1_val == 128
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffefdfff0004ffbf;  op2val:0x7ffffffa00805555
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffefdfff0004ffbf, 0x7ffffffa00805555, x6, 18*XLEN/8, x1)

inst_37:
// rs2_h3_val == 2, rs2_h1_val == -4097
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x010002fff9fff6;  op2val:0x02fff9efff0005
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x010002fff9fff6, 0x02fff9efff0005, x6, 19*XLEN/8, x1)

inst_38:
// rs2_h3_val == 4, rs2_h0_val == -8193, rs1_h2_val == -5, rs2_h1_val == 64
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffb3fff0008;  op2val:0x04ff7f0040dfff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffcfffb3fff0008, 0x04ff7f0040dfff, x6, 20*XLEN/8, x1)

inst_39:
// rs2_h3_val == 32, rs2_h0_val == 8
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x555500100006fff6;  op2val:0x200009ffff0008
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x555500100006fff6, 0x200009ffff0008, x6, 21*XLEN/8, x1)

inst_40:
// rs2_h3_val == 64, rs1_h2_val == 16384
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff40007ffffff6;  op2val:0x400005fff9ffdf
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xdfff40007ffffff6, 0x400005fff9ffdf, x6, 22*XLEN/8, x1)

inst_41:
// rs2_h3_val == 1024, rs1_h2_val == rs2_h2_val, rs1_h1_val == 16, rs2_h1_val == 0, rs2_h2_val == 1024
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x07040000100005;  op2val:0x40004000000fff8
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x07040000100005, 0x40004000000fff8, x6, 23*XLEN/8, x1)

inst_42:
// rs2_h3_val == 16384, rs2_h2_val == -8193, rs2_h1_val == 1, rs2_h0_val == -5, rs1_h2_val == -4097
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff00005555;  op2val:0x4000dfff0001fffb
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfff7efff00005555, 0x4000dfff0001fffb, x6, 24*XLEN/8, x1)

inst_43:
// rs2_h3_val == -3, rs1_h2_val == 32
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020fff6ffbf;  op2val:0xfffdfff8aaaa0005
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xf7ff0020fff6ffbf, 0xfffdfff8aaaa0005, x6, 25*XLEN/8, x1)

inst_44:
// rs2_h3_val == -9, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x20000020008fffa;  op2val:0xfff7008000090005
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x20000020008fffa, 0xfff7008000090005, x6, 26*XLEN/8, x1)

inst_45:
// rs2_h3_val == -257, rs1_h2_val == 8192, rs2_h2_val == -5
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xc0002000fff9ff7f;  op2val:0xfefffffbffff0001
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xc0002000fff9ff7f, 0xfefffffbffff0001, x6, 27*XLEN/8, x1)

inst_46:
// rs2_h3_val == -513, rs1_h3_val == 256, rs1_h2_val == 64, rs1_h1_val == -2
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x1000040fffeffdf;  op2val:0xfdff0400f7ff0009
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x1000040fffeffdf, 0xfdff0400f7ff0009, x6, 28*XLEN/8, x1)

inst_47:
// rs2_h3_val == -4097, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x09000200040004;  op2val:0xeffffffc02004000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x09000200040004, 0xeffffffc02004000, x6, 29*XLEN/8, x1)

inst_48:
// rs2_h3_val == -8193, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x0100400400aaaa;  op2val:0xdffffff6efff0008
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x0100400400aaaa, 0xdffffff6efff0008, x6, 30*XLEN/8, x1)

inst_49:
// rs2_h3_val == -16385, rs1_h2_val == 1, rs1_h1_val == 21845
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x800000015555f7ff;  op2val:0xbffffffd00033fff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x800000015555f7ff, 0xbffffffd00033fff, x6, 31*XLEN/8, x1)

inst_50:
// rs2_h3_val == 21845, rs1_h3_val == -16385
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffa00000800;  op2val:0x5555bfffffdffffb
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xbffffffa00000800, 0x5555bfffffdffffb, x6, 32*XLEN/8, x1)

inst_51:
// rs2_h3_val == -21846, rs2_h1_val == 8
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff800060400;  op2val:0xaaaafeff0008ffef
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x5555fff800060400, 0xaaaafeff0008ffef, x6, 33*XLEN/8, x1)

inst_52:
// rs1_h1_val == -32768, rs2_h0_val == -513, rs2_h1_val == 32
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x03ff7f8000c000;  op2val:0xfbfff7ff0020fdff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x03ff7f8000c000, 0xfbfff7ff0020fdff, x6, 34*XLEN/8, x1)

inst_53:
// rs1_h1_val == 2, rs1_h3_val == 2, rs1_h2_val == 128
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x02008000025555;  op2val:0xf7ffff7ffffc0008
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x02008000025555, 0xf7ffff7ffffc0008, x6, 35*XLEN/8, x1)

inst_54:
// rs1_h1_val == rs2_h1_val, rs1_h3_val == 16384
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x40000080fffc0009;  op2val:0x5555f7fffffc0009
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x40000080fffc0009, 0x5555f7fffffc0009, x6, 36*XLEN/8, x1)

inst_55:
// rs1_h1_val == 128, rs2_h0_val == 2048
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xbfffc0000080ffdf;  op2val:0x09fffeffef0800
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xbfffc0000080ffdf, 0x09fffeffef0800, x6, 37*XLEN/8, x1)

inst_56:
// rs1_h1_val == 256, rs2_h2_val == -1
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x20fff70100ff7f;  op2val:0xffbfffffffdf3fff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x20fff70100ff7f, 0xffbfffffffdf3fff, x6, 38*XLEN/8, x1)

inst_57:
// rs1_h1_val == 4096, rs1_h2_val == -257
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x05feff1000aaaa;  op2val:0xfbfffeff00080000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x05feff1000aaaa, 0xfbfffeff00080000, x6, 39*XLEN/8, x1)

inst_58:
// rs1_h1_val == 8192, rs2_h2_val == 21845, rs2_h1_val == 4096, rs2_h3_val == -32768, rs2_h0_val == 4
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x03fffd20000002;  op2val:0x8000555510000004
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x03fffd20000002, 0x8000555510000004, x6, 40*XLEN/8, x1)

inst_59:
// rs1_h3_val == -3, rs2_h0_val == 16
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0200fffdefff;  op2val:0xfff7f7ff00060010
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffd0200fffdefff, 0xfff7f7ff00060010, x6, 41*XLEN/8, x1)

inst_60:
// rs1_h3_val == -33, rs2_h1_val == -513
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffdf2000fff6dfff;  op2val:0xc000fffafdff0001
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffdf2000fff6dfff, 0xc000fffafdff0001, x6, 42*XLEN/8, x1)

inst_61:
// rs1_h3_val == -129, rs1_h1_val == -65, rs2_h1_val == -2
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xff7fc000ffbf0800;  op2val:0xfffb0040fffe0020
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xff7fc000ffbf0800, 0xfffb0040fffe0020, x6, 43*XLEN/8, x1)

inst_62:
// rs1_h3_val == -513, rs2_h0_val == 1024
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00070010fff7;  op2val:0xffdfdffffffb0400
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfdff00070010fff7, 0xffdfdffffffb0400, x6, 44*XLEN/8, x1)

inst_63:
// rs2_h0_val == -32768, rs2_h2_val == 32767
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff0200ffff;  op2val:0x067fff00088000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xdfff7fff0200ffff, 0x067fff00088000, x6, 45*XLEN/8, x1)

inst_64:
// rs2_h0_val == 32767, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7f7fff0002;  op2val:0x1000fdfffff97fff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x09ff7f7fff0002, 0x1000fdfffff97fff, x6, 46*XLEN/8, x1)

inst_65:
// rs2_h0_val == 64, rs2_h2_val == -32768, rs1_h3_val == 0
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaa00030002;  op2val:0x00800000000040
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x00aaaa00030002, 0x00800000000040, x6, 47*XLEN/8, x1)

inst_66:
// rs2_h0_val == 512, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffdf7ffffffe0002;  op2val:0x05feff00050200
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffdf7ffffffe0002, 0x05feff00050200, x6, 48*XLEN/8, x1)

inst_67:
// rs2_h0_val == 8192, rs1_h2_val == 2048
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800ffdffffb;  op2val:0x07040000002000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfff60800ffdffffb, 0x07040000002000, x6, 49*XLEN/8, x1)

inst_68:
// rs2_h0_val == -2, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00100800fff6;  op2val:0x200c0000020fffe
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffd00100800fff6, 0x200c0000020fffe, x6, 50*XLEN/8, x1)

inst_69:
// rs2_h0_val == -3, rs1_h2_val == -33, rs1_h3_val == -1
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf7fffdfff;  op2val:0x07fdff0002fffd
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffffffdf7fffdfff, 0x07fdff0002fffd, x6, 51*XLEN/8, x1)

inst_70:
// rs2_h0_val == -9, rs2_h2_val == 2
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffef040000090000;  op2val:0xaaaa00022000fff7
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffef040000090000, 0xaaaa00022000fff7, x6, 52*XLEN/8, x1)

inst_71:
// rs2_h0_val == -257, rs1_h1_val == -513
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffbfdff0020;  op2val:0x800ffdf0004feff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffafffbfdff0020, 0x800ffdf0004feff, x6, 53*XLEN/8, x1)

inst_72:
// rs2_h0_val == -21846, rs1_h1_val == -17
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x200fffdffef8000;  op2val:0x00ffdf0400aaaa
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x200fffdffef8000, 0x00ffdf0400aaaa, x6, 54*XLEN/8, x1)

inst_73:
// rs1_h1_val == 16384, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfdff001040008000;  op2val:0xfdffefff00000080
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfdff001040008000, 0xfdffefff00000080, x6, 55*XLEN/8, x1)

inst_74:
// rs2_h1_val == 256, rs1_h3_val == 4096
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x1000dfff2000ffbf;  op2val:0xffdfffdf0100ffdf
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x1000dfff2000ffbf, 0xffdfffdf0100ffdf, x6, 56*XLEN/8, x1)

inst_75:
// rs1_h1_val == -2049, rs2_h2_val == 1
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x050007f7ff0000;  op2val:0x7fff0001fffb0002
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x050007f7ff0000, 0x7fff0001fffb0002, x6, 57*XLEN/8, x1)

inst_76:
// rs1_h1_val == -4097, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffbefff0040;  op2val:0xffff00023fff0004
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfdfffffbefff0040, 0xffff00023fff0004, x6, 58*XLEN/8, x1)

inst_77:
// rs2_h1_val == 16384, rs2_h2_val == 2048
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x800000077fff1000;  op2val:0xfffd08004000ffdf
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x800000077fff1000, 0xfffd08004000ffdf, x6, 59*XLEN/8, x1)

inst_78:
// rs1_h1_val == -21846, rs2_h1_val == -1025
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0007aaaadfff;  op2val:0x55550002fbff0010
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffb0007aaaadfff, 0x55550002fbff0010, x6, 60*XLEN/8, x1)

inst_79:
// rs1_h2_val == -32768, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffb800010000004;  op2val:0x3fff000702007fff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffb800010000004, 0x3fff000702007fff, x6, 61*XLEN/8, x1)

inst_80:
// rs2_h1_val == -3, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x0720004000dfff;  op2val:0x05fbfffffdfff7
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x0720004000dfff, 0x05fbfffffdfff7, x6, 62*XLEN/8, x1)

inst_81:
// rs1_h2_val == 0, rs2_h2_val == 256
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x030000f7fffffd;  op2val:0x4000010000100020
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x030000f7fffffd, 0x4000010000100020, x6, 63*XLEN/8, x1)

inst_82:
// rs1_h2_val == 8, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0008fffafff9;  op2val:0xfff6800000090200
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xffdf0008fffafff9, 0xfff6800000090200, x6, 64*XLEN/8, x1)

inst_83:
// rs2_h1_val == -257, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x800000048000fff9;  op2val:0x103ffffefffffa
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x800000048000fff9, 0x103ffffefffffa, x6, 65*XLEN/8, x1)

inst_84:
// rs1_h2_val == -65, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbffff6f7ff;  op2val:0xfffc55551000fffe
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x06ffbffff6f7ff, 0xfffc55551000fffe, x6, 66*XLEN/8, x1)

inst_85:
// rs2_h2_val == 4096, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x0900800004ff7f;  op2val:0xffef10000100ff7f
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x0900800004ff7f, 0xffef10000100ff7f, x6, 67*XLEN/8, x1)

inst_86:
// rs1_h2_val == -16385, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bfff00050007;  op2val:0x200000062000bfff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfff7bfff00050007, 0x200000062000bfff, x6, 68*XLEN/8, x1)

inst_87:
// rs2_h2_val == 8192, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffd01000006;  op2val:0xffef2000aaaa0001
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfefffffd01000006, 0xffef2000aaaa0001, x6, 69*XLEN/8, x1)

inst_88:
// rs1_h3_val == 32767, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x7fffdffffff60080;  op2val:0xfdff00070020feff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x7fffdffffff60080, 0xfdff00070020feff, x6, 70*XLEN/8, x1)

inst_89:
// rs2_h2_val == -65, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000400045555;  op2val:0x05ffbfffdf2000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xdfff000400045555, 0x05ffbfffdf2000, x6, 71*XLEN/8, x1)

inst_90:
// rs1_h3_val == 4, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x04fffcfffcdfff;  op2val:0x800008000050400
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x04fffcfffcdfff, 0x800008000050400, x6, 72*XLEN/8, x1)

inst_91:
// rs1_h3_val == 8, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x08ffeffffe0800;  op2val:0x400007fffafff7
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x08ffeffffe0800, 0x400007fffafff7, x6, 73*XLEN/8, x1)

inst_92:
// rs1_h2_val == 256, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100ffef0009;  op2val:0xffdf0007fff6c000
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xdfff0100ffef0009, 0xffdf0007fff6c000, x6, 74*XLEN/8, x1)

inst_93:
// rs2_h1_val == -16385, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfff90002fff60400;  op2val:0xffefffbfbfff0007
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfff90002fff60400, 0xffefffbfbfff0007, x6, 75*XLEN/8, x1)

inst_94:
// rs2_h1_val == 21845, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff63ffffbff;  op2val:0x02000255553fff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xc000fff63ffffbff, 0x02000255553fff, x6, 76*XLEN/8, x1)

inst_95:
// rs2_h1_val == 32767, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffd00007fff;  op2val:0x01ffdf7ffffffa
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x8000fffd00007fff, 0x01ffdf7ffffffa, x6, 77*XLEN/8, x1)

inst_96:
// rs2_h2_val == 0, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa0007fdff;  op2val:0xfffe00000007fffb
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x08aaaa0007fdff, 0xfffe00000007fffb, x6, 78*XLEN/8, x1)

inst_97:
// rs1_h3_val == 2048, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x800ffefffdf0002;  op2val:0xfffa80003ffffeff
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x800ffefffdf0002, 0xfffa80003ffffeff, x6, 79*XLEN/8, x1)

inst_98:
// rs2_h2_val == 4, 
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0000feff5555;  op2val:0x2000040800fff8
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfffd0000feff5555, 0x2000040800fff8, x6, 80*XLEN/8, x1)

inst_99:
// rs1_h0_val == 1, rs2_h1_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 512, rs2_h0_val == -33, rs1_h2_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 1024
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x4005555fffa0001;  op2val:0x0502000200ffdf
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x4005555fffa0001, 0x0502000200ffdf, x6, 81*XLEN/8, x1)

inst_100:
// rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -257, rs1_h2_val == -1, rs2_h3_val == 2048, rs2_h1_val == -8193, rs2_h2_val == -16385, rs1_h1_val == -33
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffdf7fff;  op2val:0x800bfffdfff0009
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xfeffffffffdf7fff, 0x800bfffdfff0009, x6, 82*XLEN/8, x1)

inst_101:
// rs1_h0_val == 64, rs2_h3_val == 4096, rs1_h2_val == -513, rs2_h2_val == -3
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff00050040;  op2val:0x1000fffd0003fff9
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0x09fdff00050040, 0x1000fffd0003fff9, x6, 83*XLEN/8, x1)

inst_102:
// rs1_h0_val == -9, rs2_h0_val == 128, rs2_h2_val == -513, rs1_h2_val == 512, rs1_h3_val == -21846
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa02000001fff7;  op2val:0x05fdff04000080
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xaaaa02000001fff7, 0x05fdff04000080, x6, 84*XLEN/8, x1)

inst_103:
// rs1_h0_val == -17, rs1_h1_val == 1024, rs2_h2_val == -257, rs2_h3_val == -1
// opcode: pmulu.h.beo ; op1:x30; op2:x29; dest:x31; op1val:0xefff55550400ffef;  op2val:0xfffffeff00100005
TEST_RR_OP(pmulu.h.beo, x31, x30, x29, 0x0000000000000000, 0xefff55550400ffef, 0xfffffeff00100005, x6, 85*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 18*((XLEN/8)/4),4,0xdeadbeef


signature_x6_0:
    .fill 86*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
